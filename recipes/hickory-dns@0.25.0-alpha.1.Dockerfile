# syntax=docker.io/docker/dockerfile:1@sha256:9857836c9ee4268391bb5b09f9f157f3c91bb15821bb77969642813b0d00518d
# check=error=true
# Generated by https://github.com/fenollp/supergreen v0.14.0

FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base

FROM scratch AS cratesio-anstyle-1.0.7
ADD --chmod=0664 --checksum=sha256:038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b \
  https://static.crates.io/crates/anstyle/anstyle-1.0.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-anstyle-1.0.7-482be7a2d5144817
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-anstyle-1.0.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="anstyle" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="ANSI text styling" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="anstyle" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
        CARGO_PKG_RUST_VERSION="1.65.0" \
        CARGO_PKG_VERSION="1.0.7" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'anstyle' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'clippy::zero_sized_map_values' '--warn' 'clippy::wildcard_imports' '--warn' 'clippy::verbose_file_reads' '--warn' 'unused_qualifications' '--warn' 'unused_macro_rules' '--warn' 'unused_lifetimes' '--warn' 'unsafe_op_in_unsafe_fn' '--warn' 'unreachable_pub' '--warn' 'clippy::trait_duplication_in_bounds' '--warn' 'clippy::todo' '--warn' 'clippy::string_to_string' '--warn' 'clippy::string_lit_as_bytes' '--warn' 'clippy::string_add_assign' '--warn' 'clippy::string_add' '--warn' 'clippy::str_to_string' '--warn' 'clippy::single_match_else' '--warn' 'clippy::semicolon_if_nothing_returned' '--warn' 'clippy::self_named_module_files' '--warn' 'clippy::same_functions_in_if_condition' '--warn' 'rust_2018_idioms' '--warn' 'clippy::rest_pat_in_fully_bound_structs' '--warn' 'clippy::ref_option_ref' '--warn' 'clippy::redundant_feature_names' '--warn' 'clippy::rc_mutex' '--warn' 'clippy::ptr_as_ptr' '--warn' 'clippy::path_buf_push_overwrite' '--warn' 'clippy::negative_feature_names' '--warn' 'clippy::needless_for_each' '--warn' 'clippy::needless_continue' '--warn' 'clippy::mutex_integer' '--warn' 'clippy::mem_forget' '--warn' 'clippy::match_wildcard_for_single_variants' '--warn' 'clippy::macro_use_imports' '--warn' 'clippy::lossy_float_literal' '--warn' 'clippy::linkedlist' '--allow' 'clippy::let_and_return' '--warn' 'clippy::large_types_passed_by_value' '--warn' 'clippy::large_stack_arrays' '--warn' 'clippy::large_digit_groups' '--warn' 'clippy::items_after_statements' '--warn' 'clippy::invalid_upcast_comparisons' '--warn' 'clippy::infinite_loop' '--warn' 'clippy::inefficient_to_string' '--warn' 'clippy::inconsistent_struct_constructor' '--warn' 'clippy::imprecise_flops' '--warn' 'clippy::implicit_clone' '--allow' 'clippy::if_same_then_else' '--warn' 'clippy::from_iter_instead_of_collect' '--warn' 'clippy::fn_params_excessive_bools' '--warn' 'clippy::float_cmp_const' '--warn' 'clippy::flat_map_option' '--warn' 'clippy::filter_map_next' '--warn' 'clippy::fallible_impl_from' '--warn' 'clippy::explicit_into_iter_loop' '--warn' 'clippy::explicit_deref_methods' '--warn' 'clippy::expl_impl_clone_on_copy' '--warn' 'clippy::enum_glob_use' '--warn' 'clippy::empty_enum' '--warn' 'clippy::doc_markdown' '--warn' 'clippy::debug_assert_with_mut_call' '--warn' 'clippy::dbg_macro' '--warn' 'clippy::create_dir' '--allow' 'clippy::collapsible_else_if' '--warn' 'clippy::checked_conversions' '--allow' 'clippy::branches_sharing_code' '--allow' 'clippy::bool_assert_comparison' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std"))' '-C' 'metadata=1c8e8af4f1151c51' '-C' 'extra-filename=-482be7a2d5144817' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-482be7a2d5144817
COPY --from=dep-l-anstyle-1.0.7-482be7a2d5144817 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-482be7a2d5144817* /

## this = "482be7a2d5144817"
## writes = [
##     "deps/anstyle-482be7a2d5144817.d",
##     "deps/libanstyle-482be7a2d5144817.rmeta",
##     "deps/libanstyle-482be7a2d5144817.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/anstyle-482be7a2d5144817.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-anstyle-1.0.7"
## script = '''
## FROM scratch AS cratesio-anstyle-1.0.7
## ADD --chmod=0664 --checksum=sha256:038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b \
##   https://static.crates.io/crates/anstyle/anstyle-1.0.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-anstyle-1.0.7-482be7a2d5144817"
## script = '''
## FROM rust-base AS dep-l-anstyle-1.0.7-482be7a2d5144817
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-anstyle-1.0.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="anstyle" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="ANSI text styling" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="anstyle" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
##         CARGO_PKG_RUST_VERSION="1.65.0" \
##         CARGO_PKG_VERSION="1.0.7" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'anstyle' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'clippy::zero_sized_map_values' '--warn' 'clippy::wildcard_imports' '--warn' 'clippy::verbose_file_reads' '--warn' 'unused_qualifications' '--warn' 'unused_macro_rules' '--warn' 'unused_lifetimes' '--warn' 'unsafe_op_in_unsafe_fn' '--warn' 'unreachable_pub' '--warn' 'clippy::trait_duplication_in_bounds' '--warn' 'clippy::todo' '--warn' 'clippy::string_to_string' '--warn' 'clippy::string_lit_as_bytes' '--warn' 'clippy::string_add_assign' '--warn' 'clippy::string_add' '--warn' 'clippy::str_to_string' '--warn' 'clippy::single_match_else' '--warn' 'clippy::semicolon_if_nothing_returned' '--warn' 'clippy::self_named_module_files' '--warn' 'clippy::same_functions_in_if_condition' '--warn' 'rust_2018_idioms' '--warn' 'clippy::rest_pat_in_fully_bound_structs' '--warn' 'clippy::ref_option_ref' '--warn' 'clippy::redundant_feature_names' '--warn' 'clippy::rc_mutex' '--warn' 'clippy::ptr_as_ptr' '--warn' 'clippy::path_buf_push_overwrite' '--warn' 'clippy::negative_feature_names' '--warn' 'clippy::needless_for_each' '--warn' 'clippy::needless_continue' '--warn' 'clippy::mutex_integer' '--warn' 'clippy::mem_forget' '--warn' 'clippy::match_wildcard_for_single_variants' '--warn' 'clippy::macro_use_imports' '--warn' 'clippy::lossy_float_literal' '--warn' 'clippy::linkedlist' '--allow' 'clippy::let_and_return' '--warn' 'clippy::large_types_passed_by_value' '--warn' 'clippy::large_stack_arrays' '--warn' 'clippy::large_digit_groups' '--warn' 'clippy::items_after_statements' '--warn' 'clippy::invalid_upcast_comparisons' '--warn' 'clippy::infinite_loop' '--warn' 'clippy::inefficient_to_string' '--warn' 'clippy::inconsistent_struct_constructor' '--warn' 'clippy::imprecise_flops' '--warn' 'clippy::implicit_clone' '--allow' 'clippy::if_same_then_else' '--warn' 'clippy::from_iter_instead_of_collect' '--warn' 'clippy::fn_params_excessive_bools' '--warn' 'clippy::float_cmp_const' '--warn' 'clippy::flat_map_option' '--warn' 'clippy::filter_map_next' '--warn' 'clippy::fallible_impl_from' '--warn' 'clippy::explicit_into_iter_loop' '--warn' 'clippy::explicit_deref_methods' '--warn' 'clippy::expl_impl_clone_on_copy' '--warn' 'clippy::enum_glob_use' '--warn' 'clippy::empty_enum' '--warn' 'clippy::doc_markdown' '--warn' 'clippy::debug_assert_with_mut_call' '--warn' 'clippy::dbg_macro' '--warn' 'clippy::create_dir' '--allow' 'clippy::collapsible_else_if' '--warn' 'clippy::checked_conversions' '--allow' 'clippy::branches_sharing_code' '--allow' 'clippy::bool_assert_comparison' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std"))' '-C' 'metadata=1c8e8af4f1151c51' '-C' 'extra-filename=-482be7a2d5144817' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-482be7a2d5144817"
## script = """
## FROM scratch AS out-482be7a2d5144817
## COPY --from=dep-l-anstyle-1.0.7-482be7a2d5144817 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-482be7a2d5144817* /"""

FROM scratch AS cratesio-clap_lex-0.5.0
ADD --chmod=0664 --checksum=sha256:2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b \
  https://static.crates.io/crates/clap_lex/clap_lex-0.5.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap_lex-0.5.0-17d155ce44043f8d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-clap_lex-0.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_lex" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Minimal, flexible command line parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap_lex" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_lex" \
        CARGO_PKG_RUST_VERSION="1.64.0" \
        CARGO_PKG_VERSION="0.5.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_lex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=187c34bf2fbaff1b' '-C' 'extra-filename=-17d155ce44043f8d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-17d155ce44043f8d
COPY --from=dep-l-clap_lex-0.5.0-17d155ce44043f8d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-17d155ce44043f8d* /

## this = "17d155ce44043f8d"
## writes = [
##     "deps/clap_lex-17d155ce44043f8d.d",
##     "deps/libclap_lex-17d155ce44043f8d.rmeta",
##     "deps/libclap_lex-17d155ce44043f8d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/clap_lex-17d155ce44043f8d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap_lex-0.5.0"
## script = '''
## FROM scratch AS cratesio-clap_lex-0.5.0
## ADD --chmod=0664 --checksum=sha256:2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b \
##   https://static.crates.io/crates/clap_lex/clap_lex-0.5.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap_lex-0.5.0-17d155ce44043f8d"
## script = '''
## FROM rust-base AS dep-l-clap_lex-0.5.0-17d155ce44043f8d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-clap_lex-0.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_lex" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Minimal, flexible command line parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap_lex" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_lex" \
##         CARGO_PKG_RUST_VERSION="1.64.0" \
##         CARGO_PKG_VERSION="0.5.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_lex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=187c34bf2fbaff1b' '-C' 'extra-filename=-17d155ce44043f8d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.5.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-17d155ce44043f8d"
## script = """
## FROM scratch AS out-17d155ce44043f8d
## COPY --from=dep-l-clap_lex-0.5.0-17d155ce44043f8d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-17d155ce44043f8d* /"""

FROM scratch AS cratesio-once_cell-1.19.0
ADD --chmod=0664 --checksum=sha256:3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92 \
  https://static.crates.io/crates/once_cell/once_cell-1.19.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-once_cell-1.19.0-6ed51fafe322ecba
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-once_cell-1.19.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="once_cell" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Aleksey Kladov <aleksey.kladov@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Single assignment cells and lazy values." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="once_cell" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/matklad/once_cell" \
        CARGO_PKG_RUST_VERSION="1.60" \
        CARGO_PKG_VERSION="1.19.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="19" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'once_cell' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="race"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "atomic-polyfill", "critical-section", "default", "parking_lot", "portable-atomic", "race", "std", "unstable"))' '-C' 'metadata=afc296a215691e24' '-C' 'extra-filename=-6ed51fafe322ecba' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6ed51fafe322ecba
COPY --from=dep-l-once_cell-1.19.0-6ed51fafe322ecba /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6ed51fafe322ecba* /

## this = "6ed51fafe322ecba"
## writes = [
##     "deps/once_cell-6ed51fafe322ecba.d",
##     "deps/libonce_cell-6ed51fafe322ecba.rmeta",
##     "deps/libonce_cell-6ed51fafe322ecba.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/once_cell-6ed51fafe322ecba.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-once_cell-1.19.0"
## script = '''
## FROM scratch AS cratesio-once_cell-1.19.0
## ADD --chmod=0664 --checksum=sha256:3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92 \
##   https://static.crates.io/crates/once_cell/once_cell-1.19.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-once_cell-1.19.0-6ed51fafe322ecba"
## script = '''
## FROM rust-base AS dep-l-once_cell-1.19.0-6ed51fafe322ecba
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-once_cell-1.19.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="once_cell" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Aleksey Kladov <aleksey.kladov@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Single assignment cells and lazy values." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="once_cell" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/matklad/once_cell" \
##         CARGO_PKG_RUST_VERSION="1.60" \
##         CARGO_PKG_VERSION="1.19.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="19" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'once_cell' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="race"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "atomic-polyfill", "critical-section", "default", "parking_lot", "portable-atomic", "race", "std", "unstable"))' '-C' 'metadata=afc296a215691e24' '-C' 'extra-filename=-6ed51fafe322ecba' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.19.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6ed51fafe322ecba"
## script = """
## FROM scratch AS out-6ed51fafe322ecba
## COPY --from=dep-l-once_cell-1.19.0-6ed51fafe322ecba /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6ed51fafe322ecba* /"""

FROM scratch AS cratesio-strsim-0.10.0
ADD --chmod=0664 --checksum=sha256:73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623 \
  https://static.crates.io/crates/strsim/strsim-0.10.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-strsim-0.10.0-fd42a4ea370e31ec
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-strsim-0.10.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="strsim" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Danny Guo <danny@dannyguo.com>" \
        CARGO_PKG_DESCRIPTION="Implementations of string similarity metrics. Includes Hamming, Levenshtein,\nOSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/dguo/strsim-rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="strsim" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dguo/strsim-rs" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.10.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="10" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'strsim' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=893a2fde8ffd8f95' '-C' 'extra-filename=-fd42a4ea370e31ec' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fd42a4ea370e31ec
COPY --from=dep-l-strsim-0.10.0-fd42a4ea370e31ec /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-fd42a4ea370e31ec* /

## this = "fd42a4ea370e31ec"
## writes = [
##     "deps/strsim-fd42a4ea370e31ec.d",
##     "deps/libstrsim-fd42a4ea370e31ec.rmeta",
##     "deps/libstrsim-fd42a4ea370e31ec.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/strsim-fd42a4ea370e31ec.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-strsim-0.10.0"
## script = '''
## FROM scratch AS cratesio-strsim-0.10.0
## ADD --chmod=0664 --checksum=sha256:73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623 \
##   https://static.crates.io/crates/strsim/strsim-0.10.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-strsim-0.10.0-fd42a4ea370e31ec"
## script = '''
## FROM rust-base AS dep-l-strsim-0.10.0-fd42a4ea370e31ec
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-strsim-0.10.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="strsim" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Danny Guo <danny@dannyguo.com>" \
##         CARGO_PKG_DESCRIPTION="Implementations of string similarity metrics. Includes Hamming, Levenshtein,\nOSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/dguo/strsim-rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="strsim" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dguo/strsim-rs" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.10.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="10" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'strsim' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=893a2fde8ffd8f95' '-C' 'extra-filename=-fd42a4ea370e31ec' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fd42a4ea370e31ec"
## script = """
## FROM scratch AS out-fd42a4ea370e31ec
## COPY --from=dep-l-strsim-0.10.0-fd42a4ea370e31ec /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-fd42a4ea370e31ec* /"""

FROM scratch AS cratesio-clap_builder-4.3.24
ADD --chmod=0664 --checksum=sha256:5ed2e96bc16d8d740f6f48d663eddf4b8a0983e79210fd55479b7bcd0a69860e \
  https://static.crates.io/crates/clap_builder/clap_builder-4.3.24.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap_builder-4.3.24-1766526499f805fd
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-clap_builder-4.3.24,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24 \
  --mount=from=out-482be7a2d5144817,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta,source=/libanstyle-482be7a2d5144817.rmeta \
  --mount=from=out-17d155ce44043f8d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta,source=/libclap_lex-17d155ce44043f8d.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_builder" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap_builder" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
        CARGO_PKG_RUST_VERSION="1.64.0" \
        CARGO_PKG_VERSION="4.3.24" \
        CARGO_PKG_VERSION_MAJOR="4" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="24" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_builder' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="cargo"' '--cfg' 'feature="error-context"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=d1e4889a567ac813' '-C' 'extra-filename=-1766526499f805fd' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'anstyle=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta' '--extern' 'clap_lex=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'strsim=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-1766526499f805fd
COPY --from=dep-l-clap_builder-4.3.24-1766526499f805fd /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-1766526499f805fd* /

## this = "1766526499f805fd"
## deps = [
##     "482be7a2d5144817",
##     "17d155ce44043f8d",
##     "6ed51fafe322ecba",
##     "fd42a4ea370e31ec",
## ]
## short_externs = [
##     "anstyle-482be7a2d5144817",
##     "clap_lex-17d155ce44043f8d",
##     "once_cell-6ed51fafe322ecba",
##     "strsim-fd42a4ea370e31ec",
## ]
## writes = [
##     "deps/clap_builder-1766526499f805fd.d",
##     "deps/libclap_builder-1766526499f805fd.rmeta",
##     "deps/libclap_builder-1766526499f805fd.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/clap_builder-1766526499f805fd.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `perf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/os_str.rs","byte_start":1655,"byte_end":1671,"line_start":67,"line_end":67,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"perf\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `cargo`, `color`, `debug`, `default`, `deprecated`, `env`, `error-context`, `help`, `std`, `string`, `suggestions`, `unicode`, `unstable-doc`, `unstable-styles`, `unstable-v5`, `usage`, and `wrap_help`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `perf` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `perf`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/os_str.rs:67:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"perf\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `cargo`, `color`, `debug`, `default`, `deprecated`, `env`, `error-context`, `help`, `std`, `string`, `suggestions`, `unicode`, `unstable-doc`, `unstable-styles`, `unstable-v5`, `usage`, and `wrap_help`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `perf` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unused import: `anstyle::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/styling.rs","byte_start":59,"byte_end":69,"line_start":3,"line_end":3,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"pub use anstyle::*;","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/styling.rs","byte_start":51,"byte_end":71,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub use anstyle::*;","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `anstyle::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/styling.rs:3:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use anstyle::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `AppTag` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/command.rs","byte_start":166910,"byte_end":166916,"line_start":4750,"line_end":4750,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"pub(crate) trait AppTag: crate::builder::ext::Extension {}","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AppTag` is never used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/command.rs:4750:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait AppTag: crate::builder::ext::Extension {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"method `into_any` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/ext.rs","byte_start":1629,"byte_end":1638,"line_start":51,"line_end":51,"column_start":18,"column_end":27,"is_primary":false,"text":[{"text":"pub(crate) trait Extension: std::fmt::Debug + Send + Sync + 'static {","highlight_start":18,"highlight_end":27}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/ext.rs","byte_start":1908,"byte_end":1916,"line_start":56,"line_end":56,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn into_any(self: Box<Self>) -> Box<dyn std::any::Any>;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `into_any` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/ext.rs:56:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Extension: std::fmt::Debug + Send + Sync + 'static {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_any(self: Box<Self>) -> Box<dyn std::any::Any>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"methods `parse` and `parse_` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/value_parser.rs","byte_start":17766,"byte_end":17780,"line_start":591,"line_end":591,"column_start":7,"column_end":21,"is_primary":false,"text":[{"text":"trait AnyValueParser: Send + Sync + 'static {","highlight_start":7,"highlight_end":21}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/value_parser.rs","byte_start":18235,"byte_end":18240,"line_start":609,"line_end":609,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn parse(","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/value_parser.rs","byte_start":18405,"byte_end":18411,"line_start":616,"line_end":616,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn parse_(","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `parse` and `parse_` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/builder/value_parser.rs:609:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait AnyValueParser: Send + Sync + 'static {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse_(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"5 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 5 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap_builder-4.3.24"
## script = '''
## FROM scratch AS cratesio-clap_builder-4.3.24
## ADD --chmod=0664 --checksum=sha256:5ed2e96bc16d8d740f6f48d663eddf4b8a0983e79210fd55479b7bcd0a69860e \
##   https://static.crates.io/crates/clap_builder/clap_builder-4.3.24.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap_builder-4.3.24-1766526499f805fd"
## script = '''
## FROM rust-base AS dep-l-clap_builder-4.3.24-1766526499f805fd
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-clap_builder-4.3.24,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24 \
##   --mount=from=out-482be7a2d5144817,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta,source=/libanstyle-482be7a2d5144817.rmeta \
##   --mount=from=out-17d155ce44043f8d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta,source=/libclap_lex-17d155ce44043f8d.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_builder" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap_builder" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
##         CARGO_PKG_RUST_VERSION="1.64.0" \
##         CARGO_PKG_VERSION="4.3.24" \
##         CARGO_PKG_VERSION_MAJOR="4" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="24" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_builder' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="cargo"' '--cfg' 'feature="error-context"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=d1e4889a567ac813' '-C' 'extra-filename=-1766526499f805fd' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'anstyle=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta' '--extern' 'clap_lex=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'strsim=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.3.24/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-1766526499f805fd"
## script = """
## FROM scratch AS out-1766526499f805fd
## COPY --from=dep-l-clap_builder-4.3.24-1766526499f805fd /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-1766526499f805fd* /"""

FROM scratch AS cratesio-heck-0.4.1
ADD --chmod=0664 --checksum=sha256:95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8 \
  https://static.crates.io/crates/heck/heck-0.4.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-heck-0.4.1-2f387b4601b8b6b0
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-heck-0.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="heck" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Without Boats <woboats@gmail.com>" \
        CARGO_PKG_DESCRIPTION="heck is a case conversion library." \
        CARGO_PKG_HOMEPAGE="https://github.com/withoutboats/heck" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="heck" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/withoutboats/heck" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.4.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'heck' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unicode", "unicode-segmentation"))' '-C' 'metadata=a7eceebcc0d13c4d' '-C' 'extra-filename=-2f387b4601b8b6b0' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-2f387b4601b8b6b0
COPY --from=dep-l-heck-0.4.1-2f387b4601b8b6b0 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-2f387b4601b8b6b0* /

## this = "2f387b4601b8b6b0"
## writes = [
##     "deps/heck-2f387b4601b8b6b0.d",
##     "deps/libheck-2f387b4601b8b6b0.rmeta",
##     "deps/libheck-2f387b4601b8b6b0.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/heck-2f387b4601b8b6b0.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-heck-0.4.1"
## script = '''
## FROM scratch AS cratesio-heck-0.4.1
## ADD --chmod=0664 --checksum=sha256:95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8 \
##   https://static.crates.io/crates/heck/heck-0.4.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-heck-0.4.1-2f387b4601b8b6b0"
## script = '''
## FROM rust-base AS dep-l-heck-0.4.1-2f387b4601b8b6b0
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-heck-0.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="heck" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Without Boats <woboats@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="heck is a case conversion library." \
##         CARGO_PKG_HOMEPAGE="https://github.com/withoutboats/heck" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="heck" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/withoutboats/heck" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.4.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'heck' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unicode", "unicode-segmentation"))' '-C' 'metadata=a7eceebcc0d13c4d' '-C' 'extra-filename=-2f387b4601b8b6b0' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-2f387b4601b8b6b0"
## script = """
## FROM scratch AS out-2f387b4601b8b6b0
## COPY --from=dep-l-heck-0.4.1-2f387b4601b8b6b0 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-2f387b4601b8b6b0* /"""

FROM scratch AS cratesio-unicode-ident-1.0.12
ADD --chmod=0664 --checksum=sha256:3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b \
  https://static.crates.io/crates/unicode-ident/unicode-ident-1.0.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-unicode-ident-1.0.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="unicode_ident" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="(MIT OR Apache-2.0) AND Unicode-DFS-2016" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="unicode-ident" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/unicode-ident" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.12" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'unicode_ident' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=2f113e6ba7735965' '-C' 'extra-filename=-4c1dc76c11b3deb8' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4c1dc76c11b3deb8
COPY --from=dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4c1dc76c11b3deb8* /

## this = "4c1dc76c11b3deb8"
## writes = [
##     "deps/unicode_ident-4c1dc76c11b3deb8.d",
##     "deps/libunicode_ident-4c1dc76c11b3deb8.rmeta",
##     "deps/libunicode_ident-4c1dc76c11b3deb8.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/unicode_ident-4c1dc76c11b3deb8.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-unicode-ident-1.0.12"
## script = '''
## FROM scratch AS cratesio-unicode-ident-1.0.12
## ADD --chmod=0664 --checksum=sha256:3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b \
##   https://static.crates.io/crates/unicode-ident/unicode-ident-1.0.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8"
## script = '''
## FROM rust-base AS dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-unicode-ident-1.0.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="unicode_ident" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="(MIT OR Apache-2.0) AND Unicode-DFS-2016" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="unicode-ident" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/unicode-ident" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.12" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'unicode_ident' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=2f113e6ba7735965' '-C' 'extra-filename=-4c1dc76c11b3deb8' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4c1dc76c11b3deb8"
## script = """
## FROM scratch AS out-4c1dc76c11b3deb8
## COPY --from=dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4c1dc76c11b3deb8* /"""

FROM scratch AS cratesio-proc-macro2-1.0.83
ADD --chmod=0664 --checksum=sha256:0b33eb56c327dec362a9e55b3ad14f9d2f0904fb5a5b03b513ab5465399e9f43 \
  https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.83.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-proc-macro2-1.0.83-7d64fd1b28e07289
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-proc-macro2-1.0.83,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83 \
  --mount=from=crate_out-fb15d033100480ee,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="proc_macro2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="proc-macro2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/proc-macro2" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.83" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="83" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'proc_macro2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' '-C' 'metadata=46b25729ea81604e' '-C' 'extra-filename=-7d64fd1b28e07289' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'unicode_ident=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' '--cfg' 'wrap_proc_macro' '--check-cfg' 'cfg(fuzzing)' '--check-cfg' 'cfg(no_is_available)' '--check-cfg' 'cfg(no_literal_byte_character)' '--check-cfg' 'cfg(no_literal_c_string)' '--check-cfg' 'cfg(no_source_text)' '--check-cfg' 'cfg(proc_macro_span)' '--check-cfg' 'cfg(procmacro2_backtrace)' '--check-cfg' 'cfg(procmacro2_nightly_testing)' '--check-cfg' 'cfg(procmacro2_semver_exempt)' '--check-cfg' 'cfg(randomize_layout)' '--check-cfg' 'cfg(span_locations)' '--check-cfg' 'cfg(super_unstable)' '--check-cfg' 'cfg(wrap_proc_macro)' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7d64fd1b28e07289
COPY --from=dep-l-proc-macro2-1.0.83-7d64fd1b28e07289 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7d64fd1b28e07289* /

## this = "7d64fd1b28e07289"
## deps = ["4c1dc76c11b3deb8"]
## short_externs = ["unicode_ident-4c1dc76c11b3deb8"]
## writes = [
##     "deps/proc_macro2-7d64fd1b28e07289.d",
##     "deps/libproc_macro2-7d64fd1b28e07289.rmeta",
##     "deps/libproc_macro2-7d64fd1b28e07289.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/proc_macro2-7d64fd1b28e07289.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-proc-macro2-1.0.83"
## script = '''
## FROM scratch AS cratesio-proc-macro2-1.0.83
## ADD --chmod=0664 --checksum=sha256:0b33eb56c327dec362a9e55b3ad14f9d2f0904fb5a5b03b513ab5465399e9f43 \
##   https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.83.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-proc-macro2-1.0.83-7d64fd1b28e07289"
## script = '''
## FROM rust-base AS dep-l-proc-macro2-1.0.83-7d64fd1b28e07289
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-proc-macro2-1.0.83,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83 \
##   --mount=from=crate_out-fb15d033100480ee,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="proc_macro2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="proc-macro2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/proc-macro2" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.83" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="83" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'proc_macro2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' '-C' 'metadata=46b25729ea81604e' '-C' 'extra-filename=-7d64fd1b28e07289' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'unicode_ident=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' '--cfg' 'wrap_proc_macro' '--check-cfg' 'cfg(fuzzing)' '--check-cfg' 'cfg(no_is_available)' '--check-cfg' 'cfg(no_literal_byte_character)' '--check-cfg' 'cfg(no_literal_c_string)' '--check-cfg' 'cfg(no_source_text)' '--check-cfg' 'cfg(proc_macro_span)' '--check-cfg' 'cfg(procmacro2_backtrace)' '--check-cfg' 'cfg(procmacro2_nightly_testing)' '--check-cfg' 'cfg(procmacro2_semver_exempt)' '--check-cfg' 'cfg(randomize_layout)' '--check-cfg' 'cfg(span_locations)' '--check-cfg' 'cfg(super_unstable)' '--check-cfg' 'cfg(wrap_proc_macro)' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.83/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7d64fd1b28e07289"
## script = """
## FROM scratch AS out-7d64fd1b28e07289
## COPY --from=dep-l-proc-macro2-1.0.83-7d64fd1b28e07289 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7d64fd1b28e07289* /"""

FROM scratch AS cratesio-quote-1.0.36
ADD --chmod=0664 --checksum=sha256:0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7 \
  https://static.crates.io/crates/quote/quote-1.0.36.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-quote-1.0.36-693b08ca69220922
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-quote-1.0.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="quote" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Quasi-quoting macro quote!(...)" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="quote" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/quote" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.36" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="36" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'quote' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "proc-macro"))' '-C' 'metadata=2e4ee4db2e956cca' '-C' 'extra-filename=-693b08ca69220922' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-693b08ca69220922
COPY --from=dep-l-quote-1.0.36-693b08ca69220922 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-693b08ca69220922* /

## this = "693b08ca69220922"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
## ]
## writes = [
##     "deps/quote-693b08ca69220922.d",
##     "deps/libquote-693b08ca69220922.rmeta",
##     "deps/libquote-693b08ca69220922.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/quote-693b08ca69220922.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-quote-1.0.36"
## script = '''
## FROM scratch AS cratesio-quote-1.0.36
## ADD --chmod=0664 --checksum=sha256:0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7 \
##   https://static.crates.io/crates/quote/quote-1.0.36.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-quote-1.0.36-693b08ca69220922"
## script = '''
## FROM rust-base AS dep-l-quote-1.0.36-693b08ca69220922
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-quote-1.0.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="quote" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Quasi-quoting macro quote!(...)" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="quote" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/quote" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.36" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="36" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'quote' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "proc-macro"))' '-C' 'metadata=2e4ee4db2e956cca' '-C' 'extra-filename=-693b08ca69220922' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.36/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-693b08ca69220922"
## script = """
## FROM scratch AS out-693b08ca69220922
## COPY --from=dep-l-quote-1.0.36-693b08ca69220922 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-693b08ca69220922* /"""

FROM scratch AS cratesio-syn-2.0.65
ADD --chmod=0664 --checksum=sha256:d2863d96a84c6439701d7a38f9de935ec562c8832cc55d1dde0f513b52fad106 \
  https://static.crates.io/crates/syn/syn-2.0.65.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-syn-2.0.65-956fbe8af8dd641b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-syn-2.0.65,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="syn" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Parser for Rust source code" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="syn" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/syn" \
        CARGO_PKG_RUST_VERSION="1.60" \
        CARGO_PKG_VERSION="2.0.65" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="65" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'syn' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="clone-impls"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="extra-traits"' '--cfg' 'feature="full"' '--cfg' 'feature="parsing"' '--cfg' 'feature="printing"' '--cfg' 'feature="proc-macro"' '--cfg' 'feature="visit-mut"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "test", "visit", "visit-mut"))' '-C' 'metadata=eb5a4aecc24e4b58' '-C' 'extra-filename=-956fbe8af8dd641b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta' '--extern' 'unicode_ident=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-956fbe8af8dd641b
COPY --from=dep-l-syn-2.0.65-956fbe8af8dd641b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-956fbe8af8dd641b* /

## this = "956fbe8af8dd641b"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
## ]
## writes = [
##     "deps/syn-956fbe8af8dd641b.d",
##     "deps/libsyn-956fbe8af8dd641b.rmeta",
##     "deps/libsyn-956fbe8af8dd641b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/syn-956fbe8af8dd641b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-syn-2.0.65"
## script = '''
## FROM scratch AS cratesio-syn-2.0.65
## ADD --chmod=0664 --checksum=sha256:d2863d96a84c6439701d7a38f9de935ec562c8832cc55d1dde0f513b52fad106 \
##   https://static.crates.io/crates/syn/syn-2.0.65.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-syn-2.0.65-956fbe8af8dd641b"
## script = '''
## FROM rust-base AS dep-l-syn-2.0.65-956fbe8af8dd641b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-syn-2.0.65,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="syn" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Parser for Rust source code" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="syn" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/syn" \
##         CARGO_PKG_RUST_VERSION="1.60" \
##         CARGO_PKG_VERSION="2.0.65" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="65" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'syn' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="clone-impls"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="extra-traits"' '--cfg' 'feature="full"' '--cfg' 'feature="parsing"' '--cfg' 'feature="printing"' '--cfg' 'feature="proc-macro"' '--cfg' 'feature="visit-mut"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "test", "visit", "visit-mut"))' '-C' 'metadata=eb5a4aecc24e4b58' '-C' 'extra-filename=-956fbe8af8dd641b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta' '--extern' 'unicode_ident=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.65/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-956fbe8af8dd641b"
## script = """
## FROM scratch AS out-956fbe8af8dd641b
## COPY --from=dep-l-syn-2.0.65-956fbe8af8dd641b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-956fbe8af8dd641b* /"""

FROM scratch AS cratesio-clap_derive-4.3.12
ADD --chmod=0664 --checksum=sha256:54a9bb5758fc5dfe728d1019941681eccaf0cf8a4189b692a0ee2f2ecf90a050 \
  https://static.crates.io/crates/clap_derive/clap_derive-4.3.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-clap_derive-4.3.12-8367bfef6900e2ab
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-clap_derive-4.3.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12 \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_derive" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Parse command line argument by defining a struct, derive crate." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap_derive" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_derive" \
        CARGO_PKG_RUST_VERSION="1.64.0" \
        CARGO_PKG_VERSION="4.3.12" \
        CARGO_PKG_VERSION_MAJOR="4" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_derive' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("debug", "default", "deprecated", "raw-deprecated", "unstable-v5"))' '-C' 'metadata=134da800f27271e2' '-C' 'extra-filename=-8367bfef6900e2ab' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'heck=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8367bfef6900e2ab
COPY --from=dep-p-clap_derive-4.3.12-8367bfef6900e2ab /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-8367bfef6900e2ab* /

## this = "8367bfef6900e2ab"
## deps = [
##     "2f387b4601b8b6b0",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "heck-2f387b4601b8b6b0",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/clap_derive-8367bfef6900e2ab.d",
##     "deps/libclap_derive-8367bfef6900e2ab.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/clap_derive-8367bfef6900e2ab.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap_derive-4.3.12"
## script = '''
## FROM scratch AS cratesio-clap_derive-4.3.12
## ADD --chmod=0664 --checksum=sha256:54a9bb5758fc5dfe728d1019941681eccaf0cf8a4189b692a0ee2f2ecf90a050 \
##   https://static.crates.io/crates/clap_derive/clap_derive-4.3.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-clap_derive-4.3.12-8367bfef6900e2ab"
## script = '''
## FROM rust-base AS dep-p-clap_derive-4.3.12-8367bfef6900e2ab
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-clap_derive-4.3.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12 \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_derive" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Parse command line argument by defining a struct, derive crate." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap_derive" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_derive" \
##         CARGO_PKG_RUST_VERSION="1.64.0" \
##         CARGO_PKG_VERSION="4.3.12" \
##         CARGO_PKG_VERSION_MAJOR="4" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_derive' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("debug", "default", "deprecated", "raw-deprecated", "unstable-v5"))' '-C' 'metadata=134da800f27271e2' '-C' 'extra-filename=-8367bfef6900e2ab' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'heck=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.3.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8367bfef6900e2ab"
## script = """
## FROM scratch AS out-8367bfef6900e2ab
## COPY --from=dep-p-clap_derive-4.3.12-8367bfef6900e2ab /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-8367bfef6900e2ab* /"""

FROM scratch AS cratesio-clap-4.3.24
ADD --chmod=0664 --checksum=sha256:fb690e81c7840c0d7aade59f242ea3b41b9bc27bcd5997890e7702ae4b32e487 \
  https://static.crates.io/crates/clap/clap-4.3.24.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap-4.3.24-16e2da0234453b1e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-clap-4.3.24,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24 \
  --mount=from=out-1766526499f805fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rmeta,source=/libclap_builder-1766526499f805fd.rmeta \
  --mount=from=out-482be7a2d5144817,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta,source=/libanstyle-482be7a2d5144817.rmeta \
  --mount=from=out-17d155ce44043f8d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta,source=/libclap_lex-17d155ce44043f8d.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
  --mount=from=out-8367bfef6900e2ab,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so,source=/libclap_derive-8367bfef6900e2ab.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
        CARGO_PKG_RUST_VERSION="1.64.0" \
        CARGO_PKG_VERSION="4.3.24" \
        CARGO_PKG_VERSION_MAJOR="4" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="24" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="cargo"' '--cfg' 'feature="derive"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "derive", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=536d9ffaa220f5be' '-C' 'extra-filename=-16e2da0234453b1e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'clap_builder=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rmeta' '--extern' 'clap_derive=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-16e2da0234453b1e
COPY --from=dep-l-clap-4.3.24-16e2da0234453b1e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-16e2da0234453b1e* /

## this = "16e2da0234453b1e"
## deps = [
##     "1766526499f805fd",
##     "482be7a2d5144817",
##     "17d155ce44043f8d",
##     "6ed51fafe322ecba",
##     "fd42a4ea370e31ec",
##     "8367bfef6900e2ab",
##     "2f387b4601b8b6b0",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "clap_builder-1766526499f805fd",
##     "anstyle-482be7a2d5144817",
##     "clap_lex-17d155ce44043f8d",
##     "once_cell-6ed51fafe322ecba",
##     "strsim-fd42a4ea370e31ec",
##     "clap_derive-8367bfef6900e2ab",
##     "heck-2f387b4601b8b6b0",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/clap-16e2da0234453b1e.d",
##     "deps/libclap-16e2da0234453b1e.rmeta",
##     "deps/libclap-16e2da0234453b1e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/clap-16e2da0234453b1e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap-16e2da0234453b1e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap-16e2da0234453b1e.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap-4.3.24"
## script = '''
## FROM scratch AS cratesio-clap-4.3.24
## ADD --chmod=0664 --checksum=sha256:fb690e81c7840c0d7aade59f242ea3b41b9bc27bcd5997890e7702ae4b32e487 \
##   https://static.crates.io/crates/clap/clap-4.3.24.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap-4.3.24-16e2da0234453b1e"
## script = '''
## FROM rust-base AS dep-l-clap-4.3.24-16e2da0234453b1e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-clap-4.3.24,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24 \
##   --mount=from=out-1766526499f805fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rmeta,source=/libclap_builder-1766526499f805fd.rmeta \
##   --mount=from=out-482be7a2d5144817,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rmeta,source=/libanstyle-482be7a2d5144817.rmeta \
##   --mount=from=out-17d155ce44043f8d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rmeta,source=/libclap_lex-17d155ce44043f8d.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
##   --mount=from=out-8367bfef6900e2ab,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so,source=/libclap_derive-8367bfef6900e2ab.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
##         CARGO_PKG_RUST_VERSION="1.64.0" \
##         CARGO_PKG_VERSION="4.3.24" \
##         CARGO_PKG_VERSION_MAJOR="4" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="24" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="cargo"' '--cfg' 'feature="derive"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "derive", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=536d9ffaa220f5be' '-C' 'extra-filename=-16e2da0234453b1e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'clap_builder=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rmeta' '--extern' 'clap_derive=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.3.24/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-16e2da0234453b1e"
## script = """
## FROM scratch AS out-16e2da0234453b1e
## COPY --from=dep-l-clap-4.3.24-16e2da0234453b1e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-16e2da0234453b1e* /"""

FROM scratch AS cratesio-futures-core-0.3.30
ADD --chmod=0664 --checksum=sha256:dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d \
  https://static.crates.io/crates/futures-core/futures-core-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-core-0.3.30-da7454144a4b1d2d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-futures-core-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The core traits and types in for the `futures` library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-core" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "portable-atomic", "std", "unstable"))' '-C' 'metadata=59eb21831d3d0d1c' '-C' 'extra-filename=-da7454144a4b1d2d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-da7454144a4b1d2d
COPY --from=dep-l-futures-core-0.3.30-da7454144a4b1d2d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-da7454144a4b1d2d* /

## this = "da7454144a4b1d2d"
## writes = [
##     "deps/futures_core-da7454144a4b1d2d.d",
##     "deps/libfutures_core-da7454144a4b1d2d.rmeta",
##     "deps/libfutures_core-da7454144a4b1d2d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/futures_core-da7454144a4b1d2d.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"trait `AssertSync` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/task/__internal/atomic_waker.rs","byte_start":8157,"byte_end":8167,"line_start":209,"line_end":209,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"        trait AssertSync: Sync {}","highlight_start":15,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertSync` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/task/__internal/atomic_waker.rs:209:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        trait AssertSync: Sync {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-core-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-core-0.3.30
## ADD --chmod=0664 --checksum=sha256:dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d \
##   https://static.crates.io/crates/futures-core/futures-core-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-core-0.3.30-da7454144a4b1d2d"
## script = '''
## FROM rust-base AS dep-l-futures-core-0.3.30-da7454144a4b1d2d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-futures-core-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The core traits and types in for the `futures` library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-core" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "portable-atomic", "std", "unstable"))' '-C' 'metadata=59eb21831d3d0d1c' '-C' 'extra-filename=-da7454144a4b1d2d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-da7454144a4b1d2d"
## script = """
## FROM scratch AS out-da7454144a4b1d2d
## COPY --from=dep-l-futures-core-0.3.30-da7454144a4b1d2d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-da7454144a4b1d2d* /"""

FROM scratch AS cratesio-futures-task-0.3.30
ADD --chmod=0664 --checksum=sha256:38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004 \
  https://static.crates.io/crates/futures-task/futures-task-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-task-0.3.30-6c36b04a10bba36c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-futures-task-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_task" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Tools for working with tasks.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-task" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_task' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "std", "unstable"))' '-C' 'metadata=89639bd8ca93fe02' '-C' 'extra-filename=-6c36b04a10bba36c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6c36b04a10bba36c
COPY --from=dep-l-futures-task-0.3.30-6c36b04a10bba36c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6c36b04a10bba36c* /

## this = "6c36b04a10bba36c"
## writes = [
##     "deps/futures_task-6c36b04a10bba36c.d",
##     "deps/libfutures_task-6c36b04a10bba36c.rmeta",
##     "deps/libfutures_task-6c36b04a10bba36c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/futures_task-6c36b04a10bba36c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-task-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-task-0.3.30
## ADD --chmod=0664 --checksum=sha256:38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004 \
##   https://static.crates.io/crates/futures-task/futures-task-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-task-0.3.30-6c36b04a10bba36c"
## script = '''
## FROM rust-base AS dep-l-futures-task-0.3.30-6c36b04a10bba36c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-futures-task-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_task" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Tools for working with tasks.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-task" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_task' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "std", "unstable"))' '-C' 'metadata=89639bd8ca93fe02' '-C' 'extra-filename=-6c36b04a10bba36c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6c36b04a10bba36c"
## script = """
## FROM scratch AS out-6c36b04a10bba36c
## COPY --from=dep-l-futures-task-0.3.30-6c36b04a10bba36c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6c36b04a10bba36c* /"""

FROM scratch AS cratesio-pin-project-lite-0.2.14
ADD --chmod=0664 --checksum=sha256:bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02 \
  https://static.crates.io/crates/pin-project-lite/pin-project-lite-0.2.14.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-pin-project-lite-0.2.14-32982cb980ef9328
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-pin-project-lite-0.2.14,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="pin_project_lite" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A lightweight version of pin-project written with declarative macros.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="pin-project-lite" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/taiki-e/pin-project-lite" \
        CARGO_PKG_RUST_VERSION="1.37" \
        CARGO_PKG_VERSION="0.2.14" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="14" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'pin_project_lite' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'unreachable_pub' '--warn' 'clippy::undocumented_unsafe_blocks' '--warn' 'clippy::transmute_undefined_repr' '--warn' 'clippy::trailing_empty_array' '--warn' 'single_use_lifetimes' '--warn' 'rust_2018_idioms' '--warn' 'clippy::pedantic' '--warn' 'non_ascii_idents' '--warn' 'clippy::inline_asm_x86_att_syntax' '--warn' 'improper_ctypes_definitions' '--warn' 'improper_ctypes' '--warn' 'clippy::default_union_representation' '--warn' 'clippy::as_ptr_cast_mut' '--warn' 'clippy::all' '--allow' 'clippy::type_complexity' '--allow' 'clippy::too_many_lines' '--allow' 'clippy::too_many_arguments' '--allow' 'clippy::struct_field_names' '--allow' 'clippy::struct_excessive_bools' '--allow' 'clippy::single_match_else' '--allow' 'clippy::single_match' '--allow' 'clippy::similar_names' '--allow' 'clippy::module_name_repetitions' '--allow' 'clippy::missing_errors_doc' '--allow' 'clippy::manual_range_contains' '--allow' 'clippy::manual_assert' '--allow' 'clippy::float_cmp' '--allow' 'clippy::doc_markdown' '--allow' 'clippy::declare_interior_mutable_const' '--allow' 'clippy::borrow_as_ptr' '--allow' 'clippy::bool_assert_comparison' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=4446bbbb89f9b38b' '-C' 'extra-filename=-32982cb980ef9328' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-32982cb980ef9328
COPY --from=dep-l-pin-project-lite-0.2.14-32982cb980ef9328 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-32982cb980ef9328* /

## this = "32982cb980ef9328"
## writes = [
##     "deps/pin_project_lite-32982cb980ef9328.d",
##     "deps/libpin_project_lite-32982cb980ef9328.rmeta",
##     "deps/libpin_project_lite-32982cb980ef9328.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/pin_project_lite-32982cb980ef9328.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-pin-project-lite-0.2.14"
## script = '''
## FROM scratch AS cratesio-pin-project-lite-0.2.14
## ADD --chmod=0664 --checksum=sha256:bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02 \
##   https://static.crates.io/crates/pin-project-lite/pin-project-lite-0.2.14.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-pin-project-lite-0.2.14-32982cb980ef9328"
## script = '''
## FROM rust-base AS dep-l-pin-project-lite-0.2.14-32982cb980ef9328
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-pin-project-lite-0.2.14,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="pin_project_lite" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A lightweight version of pin-project written with declarative macros.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="pin-project-lite" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/taiki-e/pin-project-lite" \
##         CARGO_PKG_RUST_VERSION="1.37" \
##         CARGO_PKG_VERSION="0.2.14" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="14" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'pin_project_lite' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'unreachable_pub' '--warn' 'clippy::undocumented_unsafe_blocks' '--warn' 'clippy::transmute_undefined_repr' '--warn' 'clippy::trailing_empty_array' '--warn' 'single_use_lifetimes' '--warn' 'rust_2018_idioms' '--warn' 'clippy::pedantic' '--warn' 'non_ascii_idents' '--warn' 'clippy::inline_asm_x86_att_syntax' '--warn' 'improper_ctypes_definitions' '--warn' 'improper_ctypes' '--warn' 'clippy::default_union_representation' '--warn' 'clippy::as_ptr_cast_mut' '--warn' 'clippy::all' '--allow' 'clippy::type_complexity' '--allow' 'clippy::too_many_lines' '--allow' 'clippy::too_many_arguments' '--allow' 'clippy::struct_field_names' '--allow' 'clippy::struct_excessive_bools' '--allow' 'clippy::single_match_else' '--allow' 'clippy::single_match' '--allow' 'clippy::similar_names' '--allow' 'clippy::module_name_repetitions' '--allow' 'clippy::missing_errors_doc' '--allow' 'clippy::manual_range_contains' '--allow' 'clippy::manual_assert' '--allow' 'clippy::float_cmp' '--allow' 'clippy::doc_markdown' '--allow' 'clippy::declare_interior_mutable_const' '--allow' 'clippy::borrow_as_ptr' '--allow' 'clippy::bool_assert_comparison' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=4446bbbb89f9b38b' '-C' 'extra-filename=-32982cb980ef9328' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.14/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-32982cb980ef9328"
## script = """
## FROM scratch AS out-32982cb980ef9328
## COPY --from=dep-l-pin-project-lite-0.2.14-32982cb980ef9328 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-32982cb980ef9328* /"""

FROM scratch AS cratesio-pin-utils-0.1.0
ADD --chmod=0664 --checksum=sha256:8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184 \
  https://static.crates.io/crates/pin-utils/pin-utils-0.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-pin-utils-0.1.0-b74f2a8eb0482878
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-pin-utils-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="pin_utils" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Josef Brandl <mail@josefbrandl.de>" \
        CARGO_PKG_DESCRIPTION="Utilities for pinning\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="pin-utils" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang-nursery/pin-utils" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'pin_utils' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c09f673a2d3f007a' '-C' 'extra-filename=-b74f2a8eb0482878' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b74f2a8eb0482878
COPY --from=dep-l-pin-utils-0.1.0-b74f2a8eb0482878 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b74f2a8eb0482878* /

## this = "b74f2a8eb0482878"
## writes = [
##     "deps/pin_utils-b74f2a8eb0482878.d",
##     "deps/libpin_utils-b74f2a8eb0482878.rmeta",
##     "deps/libpin_utils-b74f2a8eb0482878.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/pin_utils-b74f2a8eb0482878.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-pin-utils-0.1.0"
## script = '''
## FROM scratch AS cratesio-pin-utils-0.1.0
## ADD --chmod=0664 --checksum=sha256:8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184 \
##   https://static.crates.io/crates/pin-utils/pin-utils-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-pin-utils-0.1.0-b74f2a8eb0482878"
## script = '''
## FROM rust-base AS dep-l-pin-utils-0.1.0-b74f2a8eb0482878
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-pin-utils-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="pin_utils" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Josef Brandl <mail@josefbrandl.de>" \
##         CARGO_PKG_DESCRIPTION="Utilities for pinning\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="pin-utils" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang-nursery/pin-utils" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'pin_utils' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c09f673a2d3f007a' '-C' 'extra-filename=-b74f2a8eb0482878' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b74f2a8eb0482878"
## script = """
## FROM scratch AS out-b74f2a8eb0482878
## COPY --from=dep-l-pin-utils-0.1.0-b74f2a8eb0482878 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b74f2a8eb0482878* /"""

FROM scratch AS cratesio-slab-0.4.9
ADD --chmod=0664 --checksum=sha256:8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67 \
  https://static.crates.io/crates/slab/slab-0.4.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-slab-0.4.9-9a31c9ae14e5d0d4
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-slab-0.4.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="slab" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>" \
        CARGO_PKG_DESCRIPTION="Pre-allocated storage for a uniform data type" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="slab" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/slab" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="0.4.9" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/slab-4fec3cf510f65ab6/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'slab' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=3782095e410000ff' '-C' 'extra-filename=-9a31c9ae14e5d0d4' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-9a31c9ae14e5d0d4
COPY --from=dep-l-slab-0.4.9-9a31c9ae14e5d0d4 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-9a31c9ae14e5d0d4* /

## this = "9a31c9ae14e5d0d4"
## writes = [
##     "deps/slab-9a31c9ae14e5d0d4.d",
##     "deps/libslab-9a31c9ae14e5d0d4.rmeta",
##     "deps/libslab-9a31c9ae14e5d0d4.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/slab-9a31c9ae14e5d0d4.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_const_vec_new`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":6820,"byte_end":6841,"line_start":250,"line_end":250,"column_start":15,"column_end":36,"is_primary":true,"text":[{"text":"    #[cfg(not(slab_no_const_vec_new))]","highlight_start":15,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_const_vec_new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:250:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(slab_no_const_vec_new))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_const_vec_new`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":7242,"byte_end":7263,"line_start":264,"line_end":264,"column_start":11,"column_end":32,"is_primary":true,"text":[{"text":"    #[cfg(slab_no_const_vec_new)]","highlight_start":11,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_const_vec_new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:264:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(slab_no_const_vec_new)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":28618,"byte_end":28638,"line_start":929,"line_end":929,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:929:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":33825,"byte_end":33845,"line_start":1098,"line_end":1098,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:1098:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1098\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":36659,"byte_end":36679,"line_start":1206,"line_end":1206,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:1206:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":36939,"byte_end":36959,"line_start":1216,"line_end":1216,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:1216:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-slab-0.4.9"
## script = '''
## FROM scratch AS cratesio-slab-0.4.9
## ADD --chmod=0664 --checksum=sha256:8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67 \
##   https://static.crates.io/crates/slab/slab-0.4.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-slab-0.4.9-9a31c9ae14e5d0d4"
## script = '''
## FROM rust-base AS dep-l-slab-0.4.9-9a31c9ae14e5d0d4
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-slab-0.4.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="slab" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>" \
##         CARGO_PKG_DESCRIPTION="Pre-allocated storage for a uniform data type" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="slab" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/slab" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="0.4.9" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/slab-4fec3cf510f65ab6/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'slab' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=3782095e410000ff' '-C' 'extra-filename=-9a31c9ae14e5d0d4' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-9a31c9ae14e5d0d4"
## script = """
## FROM scratch AS out-9a31c9ae14e5d0d4
## COPY --from=dep-l-slab-0.4.9-9a31c9ae14e5d0d4 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-9a31c9ae14e5d0d4* /"""

FROM scratch AS cratesio-futures-util-0.3.30
ADD --chmod=0664 --checksum=sha256:3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48 \
  https://static.crates.io/crates/futures-util/futures-util-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-util-0.3.30-85ef45b09b00482a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-futures-util-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30 \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
  --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_util" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Common utilities and extension traits for the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-util" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_util' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="slab"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "async-await", "async-await-macro", "bilock", "cfg-target-has-atomic", "channel", "compat", "default", "futures-channel", "futures-io", "futures-macro", "futures-sink", "futures_01", "io", "io-compat", "memchr", "portable-atomic", "sink", "slab", "std", "tokio-io", "unstable", "write-all-vectored"))' '-C' 'metadata=c9cc5a0c87585b2a' '-C' 'extra-filename=-85ef45b09b00482a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'futures_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta' '--extern' 'futures_task=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'pin_utils=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta' '--extern' 'slab=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-85ef45b09b00482a
COPY --from=dep-l-futures-util-0.3.30-85ef45b09b00482a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-85ef45b09b00482a* /

## this = "85ef45b09b00482a"
## deps = [
##     "da7454144a4b1d2d",
##     "6c36b04a10bba36c",
##     "32982cb980ef9328",
##     "b74f2a8eb0482878",
##     "9a31c9ae14e5d0d4",
## ]
## short_externs = [
##     "futures_core-da7454144a4b1d2d",
##     "futures_task-6c36b04a10bba36c",
##     "pin_project_lite-32982cb980ef9328",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-9a31c9ae14e5d0d4",
## ]
## writes = [
##     "deps/futures_util-85ef45b09b00482a.d",
##     "deps/libfutures_util-85ef45b09b00482a.rmeta",
##     "deps/libfutures_util-85ef45b09b00482a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/futures_util-85ef45b09b00482a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-util-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-util-0.3.30
## ADD --chmod=0664 --checksum=sha256:3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48 \
##   https://static.crates.io/crates/futures-util/futures-util-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-util-0.3.30-85ef45b09b00482a"
## script = '''
## FROM rust-base AS dep-l-futures-util-0.3.30-85ef45b09b00482a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-futures-util-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30 \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##   --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_util" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Common utilities and extension traits for the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-util" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_util' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="slab"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "async-await", "async-await-macro", "bilock", "cfg-target-has-atomic", "channel", "compat", "default", "futures-channel", "futures-io", "futures-macro", "futures-sink", "futures_01", "io", "io-compat", "memchr", "portable-atomic", "sink", "slab", "std", "tokio-io", "unstable", "write-all-vectored"))' '-C' 'metadata=c9cc5a0c87585b2a' '-C' 'extra-filename=-85ef45b09b00482a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'futures_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta' '--extern' 'futures_task=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'pin_utils=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta' '--extern' 'slab=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-85ef45b09b00482a"
## script = """
## FROM scratch AS out-85ef45b09b00482a
## COPY --from=dep-l-futures-util-0.3.30-85ef45b09b00482a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-85ef45b09b00482a* /"""

FROM scratch AS cratesio-cfg-if-1.0.0
ADD --chmod=0664 --checksum=sha256:baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd \
  https://static.crates.io/crates/cfg-if/cfg-if-1.0.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-cfg-if-1.0.0-da34da6838abd7f1
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-cfg-if-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="cfg_if" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="A macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/cfg-if" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="cfg-if" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/cfg-if" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'cfg_if' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std"))' '-C' 'metadata=f774a8b1a0b6ae97' '-C' 'extra-filename=-da34da6838abd7f1' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-da34da6838abd7f1
COPY --from=dep-l-cfg-if-1.0.0-da34da6838abd7f1 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-da34da6838abd7f1* /

## this = "da34da6838abd7f1"
## writes = [
##     "deps/cfg_if-da34da6838abd7f1.d",
##     "deps/libcfg_if-da34da6838abd7f1.rmeta",
##     "deps/libcfg_if-da34da6838abd7f1.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/cfg_if-da34da6838abd7f1.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-cfg-if-1.0.0"
## script = '''
## FROM scratch AS cratesio-cfg-if-1.0.0
## ADD --chmod=0664 --checksum=sha256:baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd \
##   https://static.crates.io/crates/cfg-if/cfg-if-1.0.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-cfg-if-1.0.0-da34da6838abd7f1"
## script = '''
## FROM rust-base AS dep-l-cfg-if-1.0.0-da34da6838abd7f1
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-cfg-if-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="cfg_if" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="A macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/cfg-if" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="cfg-if" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/cfg-if" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'cfg_if' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std"))' '-C' 'metadata=f774a8b1a0b6ae97' '-C' 'extra-filename=-da34da6838abd7f1' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-da34da6838abd7f1"
## script = """
## FROM scratch AS out-da34da6838abd7f1
## COPY --from=dep-l-cfg-if-1.0.0-da34da6838abd7f1 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-da34da6838abd7f1* /"""

FROM scratch AS cratesio-data-encoding-2.6.0
ADD --chmod=0664 --checksum=sha256:e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2 \
  https://static.crates.io/crates/data-encoding/data-encoding-2.6.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-data-encoding-2.6.0-e3ffa7a902242322
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-data-encoding-2.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="data_encoding" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Julien Cretin <git@ia0.eu>" \
        CARGO_PKG_DESCRIPTION="Efficient and customizable data-encoding functions like base64, base32, and hex" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="data-encoding" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/ia0/data-encoding" \
        CARGO_PKG_RUST_VERSION="1.48" \
        CARGO_PKG_VERSION="2.6.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'data_encoding' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=3b0f5db6368309b7' '-C' 'extra-filename=-e3ffa7a902242322' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-e3ffa7a902242322
COPY --from=dep-l-data-encoding-2.6.0-e3ffa7a902242322 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-e3ffa7a902242322* /

## this = "e3ffa7a902242322"
## writes = [
##     "deps/data_encoding-e3ffa7a902242322.d",
##     "deps/libdata_encoding-e3ffa7a902242322.rmeta",
##     "deps/libdata_encoding-e3ffa7a902242322.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/data_encoding-e3ffa7a902242322.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-data-encoding-2.6.0"
## script = '''
## FROM scratch AS cratesio-data-encoding-2.6.0
## ADD --chmod=0664 --checksum=sha256:e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2 \
##   https://static.crates.io/crates/data-encoding/data-encoding-2.6.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-data-encoding-2.6.0-e3ffa7a902242322"
## script = '''
## FROM rust-base AS dep-l-data-encoding-2.6.0-e3ffa7a902242322
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-data-encoding-2.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="data_encoding" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Julien Cretin <git@ia0.eu>" \
##         CARGO_PKG_DESCRIPTION="Efficient and customizable data-encoding functions like base64, base32, and hex" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="data-encoding" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/ia0/data-encoding" \
##         CARGO_PKG_RUST_VERSION="1.48" \
##         CARGO_PKG_VERSION="2.6.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'data_encoding' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=3b0f5db6368309b7' '-C' 'extra-filename=-e3ffa7a902242322' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/data-encoding-2.6.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-e3ffa7a902242322"
## script = """
## FROM scratch AS out-e3ffa7a902242322
## COPY --from=dep-l-data-encoding-2.6.0-e3ffa7a902242322 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-e3ffa7a902242322* /"""

FROM scratch AS cratesio-futures-channel-0.3.30
ADD --chmod=0664 --checksum=sha256:eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78 \
  https://static.crates.io/crates/futures-channel/futures-channel-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-channel-0.3.30-adcb9d3de5d6fae9
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-futures-channel-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30 \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_channel" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Channels for asynchronous communication using futures-rs.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-channel" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_channel' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "futures-sink", "sink", "std", "unstable"))' '-C' 'metadata=e3aeb6fff0037017' '-C' 'extra-filename=-adcb9d3de5d6fae9' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'futures_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-adcb9d3de5d6fae9
COPY --from=dep-l-futures-channel-0.3.30-adcb9d3de5d6fae9 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-adcb9d3de5d6fae9* /

## this = "adcb9d3de5d6fae9"
## deps = ["da7454144a4b1d2d"]
## short_externs = ["futures_core-da7454144a4b1d2d"]
## writes = [
##     "deps/futures_channel-adcb9d3de5d6fae9.d",
##     "deps/libfutures_channel-adcb9d3de5d6fae9.rmeta",
##     "deps/libfutures_channel-adcb9d3de5d6fae9.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/futures_channel-adcb9d3de5d6fae9.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"trait `AssertKinds` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/mpsc/mod.rs","byte_start":5478,"byte_end":5489,"line_start":130,"line_end":130,"column_start":7,"column_end":18,"is_primary":true,"text":[{"text":"trait AssertKinds: Send + Sync + Clone {}","highlight_start":7,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertKinds` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/mpsc/mod.rs:130:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait AssertKinds: Send + Sync + Clone {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-channel-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-channel-0.3.30
## ADD --chmod=0664 --checksum=sha256:eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78 \
##   https://static.crates.io/crates/futures-channel/futures-channel-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-channel-0.3.30-adcb9d3de5d6fae9"
## script = '''
## FROM rust-base AS dep-l-futures-channel-0.3.30-adcb9d3de5d6fae9
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-futures-channel-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30 \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_channel" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Channels for asynchronous communication using futures-rs.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-channel" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_channel' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "futures-sink", "sink", "std", "unstable"))' '-C' 'metadata=e3aeb6fff0037017' '-C' 'extra-filename=-adcb9d3de5d6fae9' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'futures_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-adcb9d3de5d6fae9"
## script = """
## FROM scratch AS out-adcb9d3de5d6fae9
## COPY --from=dep-l-futures-channel-0.3.30-adcb9d3de5d6fae9 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-adcb9d3de5d6fae9* /"""

FROM scratch AS cratesio-async-recursion-1.1.1
ADD --chmod=0664 --checksum=sha256:3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11 \
  https://static.crates.io/crates/async-recursion/async-recursion-1.1.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-async-recursion-1.1.1-fd8b71f0a4504cc7
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-async-recursion-1.1.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="async_recursion" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Robert Usher <266585+dcchut@users.noreply.github.com>" \
        CARGO_PKG_DESCRIPTION="Recursion for async functions" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="async-recursion" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dcchut/async-recursion" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.1.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'async_recursion' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=3363ea3bb37413be' '-C' 'extra-filename=-fd8b71f0a4504cc7' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fd8b71f0a4504cc7
COPY --from=dep-p-async-recursion-1.1.1-fd8b71f0a4504cc7 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-fd8b71f0a4504cc7* /

## this = "fd8b71f0a4504cc7"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/async_recursion-fd8b71f0a4504cc7.d",
##     "deps/libasync_recursion-fd8b71f0a4504cc7.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/async_recursion-fd8b71f0a4504cc7.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-async-recursion-1.1.1"
## script = '''
## FROM scratch AS cratesio-async-recursion-1.1.1
## ADD --chmod=0664 --checksum=sha256:3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11 \
##   https://static.crates.io/crates/async-recursion/async-recursion-1.1.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-async-recursion-1.1.1-fd8b71f0a4504cc7"
## script = '''
## FROM rust-base AS dep-p-async-recursion-1.1.1-fd8b71f0a4504cc7
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-async-recursion-1.1.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="async_recursion" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Robert Usher <266585+dcchut@users.noreply.github.com>" \
##         CARGO_PKG_DESCRIPTION="Recursion for async functions" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="async-recursion" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dcchut/async-recursion" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.1.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'async_recursion' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=3363ea3bb37413be' '-C' 'extra-filename=-fd8b71f0a4504cc7' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.1.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fd8b71f0a4504cc7"
## script = """
## FROM scratch AS out-fd8b71f0a4504cc7
## COPY --from=dep-p-async-recursion-1.1.1-fd8b71f0a4504cc7 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-fd8b71f0a4504cc7* /"""

FROM scratch AS cratesio-async-trait-0.1.80
ADD --chmod=0664 --checksum=sha256:c6fa2087f2753a7da8cc1c0dbfcf89579dd57458e36769de5ac750b4671737ca \
  https://static.crates.io/crates/async-trait/async-trait-0.1.80.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-async-trait-0.1.80-3fb14aec5601ab5a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-async-trait-0.1.80,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="async_trait" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Type erasure for async trait methods" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="async-trait" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/async-trait" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.1.80" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="80" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'async_trait' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=3af36e8ff8fc4d4a' '-C' 'extra-filename=-3fb14aec5601ab5a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-3fb14aec5601ab5a
COPY --from=dep-p-async-trait-0.1.80-3fb14aec5601ab5a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3fb14aec5601ab5a* /

## this = "3fb14aec5601ab5a"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/async_trait-3fb14aec5601ab5a.d",
##     "deps/libasync_trait-3fb14aec5601ab5a.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/async_trait-3fb14aec5601ab5a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-async-trait-0.1.80"
## script = '''
## FROM scratch AS cratesio-async-trait-0.1.80
## ADD --chmod=0664 --checksum=sha256:c6fa2087f2753a7da8cc1c0dbfcf89579dd57458e36769de5ac750b4671737ca \
##   https://static.crates.io/crates/async-trait/async-trait-0.1.80.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-async-trait-0.1.80-3fb14aec5601ab5a"
## script = '''
## FROM rust-base AS dep-p-async-trait-0.1.80-3fb14aec5601ab5a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-async-trait-0.1.80,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="async_trait" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Type erasure for async trait methods" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="async-trait" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/async-trait" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.1.80" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="80" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'async_trait' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=3af36e8ff8fc4d4a' '-C' 'extra-filename=-3fb14aec5601ab5a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.80/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-3fb14aec5601ab5a"
## script = """
## FROM scratch AS out-3fb14aec5601ab5a
## COPY --from=dep-p-async-trait-0.1.80-3fb14aec5601ab5a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3fb14aec5601ab5a* /"""

FROM scratch AS cratesio-bitflags-2.5.0
ADD --chmod=0664 --checksum=sha256:cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1 \
  https://static.crates.io/crates/bitflags/bitflags-2.5.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bitflags-2.5.0-053eac235c7ed568
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-bitflags-2.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bitflags" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="A macro to generate structures which behave like bitflags.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/bitflags/bitflags" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bitflags" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bitflags/bitflags" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="2.5.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bitflags' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "bytemuck", "compiler_builtins", "core", "example_generated", "rustc-dep-of-std", "serde", "std"))' '-C' 'metadata=a121413ae0058fa0' '-C' 'extra-filename=-053eac235c7ed568' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-053eac235c7ed568
COPY --from=dep-l-bitflags-2.5.0-053eac235c7ed568 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-053eac235c7ed568* /

## this = "053eac235c7ed568"
## writes = [
##     "deps/bitflags-053eac235c7ed568.d",
##     "deps/libbitflags-053eac235c7ed568.rmeta",
##     "deps/libbitflags-053eac235c7ed568.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/bitflags-053eac235c7ed568.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bitflags-2.5.0"
## script = '''
## FROM scratch AS cratesio-bitflags-2.5.0
## ADD --chmod=0664 --checksum=sha256:cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1 \
##   https://static.crates.io/crates/bitflags/bitflags-2.5.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bitflags-2.5.0-053eac235c7ed568"
## script = '''
## FROM rust-base AS dep-l-bitflags-2.5.0-053eac235c7ed568
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-bitflags-2.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bitflags" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="A macro to generate structures which behave like bitflags.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/bitflags/bitflags" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bitflags" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bitflags/bitflags" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="2.5.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bitflags' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "bytemuck", "compiler_builtins", "core", "example_generated", "rustc-dep-of-std", "serde", "std"))' '-C' 'metadata=a121413ae0058fa0' '-C' 'extra-filename=-053eac235c7ed568' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.5.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-053eac235c7ed568"
## script = """
## FROM scratch AS out-053eac235c7ed568
## COPY --from=dep-l-bitflags-2.5.0-053eac235c7ed568 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-053eac235c7ed568* /"""

FROM scratch AS cratesio-enum-as-inner-0.6.0
ADD --chmod=0664 --checksum=sha256:5ffccbb6966c05b32ef8fbac435df276c4ae4d3dc55a8cd0eb9745e6c12f546a \
  https://static.crates.io/crates/enum-as-inner/enum-as-inner-0.6.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-enum-as-inner-0.6.0-002f3af3555cdc1d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-enum-as-inner-0.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0 \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="enum_as_inner" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Benjamin Fry <benjaminfry@me.com>" \
        CARGO_PKG_DESCRIPTION="A proc-macro for deriving inner field accessor functions on enums.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="enum-as-inner" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bluejekyll/enum-as-inner" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.6.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'enum_as_inner' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=2723dd575a8b5e0b' '-C' 'extra-filename=-002f3af3555cdc1d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'heck=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-002f3af3555cdc1d
COPY --from=dep-p-enum-as-inner-0.6.0-002f3af3555cdc1d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-002f3af3555cdc1d* /

## this = "002f3af3555cdc1d"
## deps = [
##     "2f387b4601b8b6b0",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "heck-2f387b4601b8b6b0",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/enum_as_inner-002f3af3555cdc1d.d",
##     "deps/libenum_as_inner-002f3af3555cdc1d.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/enum_as_inner-002f3af3555cdc1d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-enum-as-inner-0.6.0"
## script = '''
## FROM scratch AS cratesio-enum-as-inner-0.6.0
## ADD --chmod=0664 --checksum=sha256:5ffccbb6966c05b32ef8fbac435df276c4ae4d3dc55a8cd0eb9745e6c12f546a \
##   https://static.crates.io/crates/enum-as-inner/enum-as-inner-0.6.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-enum-as-inner-0.6.0-002f3af3555cdc1d"
## script = '''
## FROM rust-base AS dep-p-enum-as-inner-0.6.0-002f3af3555cdc1d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-enum-as-inner-0.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0 \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="enum_as_inner" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Benjamin Fry <benjaminfry@me.com>" \
##         CARGO_PKG_DESCRIPTION="A proc-macro for deriving inner field accessor functions on enums.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="enum-as-inner" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bluejekyll/enum-as-inner" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.6.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'enum_as_inner' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=2723dd575a8b5e0b' '-C' 'extra-filename=-002f3af3555cdc1d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'heck=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/enum-as-inner-0.6.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-002f3af3555cdc1d"
## script = """
## FROM scratch AS out-002f3af3555cdc1d
## COPY --from=dep-p-enum-as-inner-0.6.0-002f3af3555cdc1d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-002f3af3555cdc1d* /"""

FROM scratch AS cratesio-futures-io-0.3.30
ADD --chmod=0664 --checksum=sha256:a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1 \
  https://static.crates.io/crates/futures-io/futures-io-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-io-0.3.30-9a295684e8a14a09
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-futures-io-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_io" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and `AsyncBufRead` traits for the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-io" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_io' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std", "unstable"))' '-C' 'metadata=309599a65ba7b85d' '-C' 'extra-filename=-9a295684e8a14a09' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-9a295684e8a14a09
COPY --from=dep-l-futures-io-0.3.30-9a295684e8a14a09 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-9a295684e8a14a09* /

## this = "9a295684e8a14a09"
## writes = [
##     "deps/futures_io-9a295684e8a14a09.d",
##     "deps/libfutures_io-9a295684e8a14a09.rmeta",
##     "deps/libfutures_io-9a295684e8a14a09.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/futures_io-9a295684e8a14a09.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-io-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-io-0.3.30
## ADD --chmod=0664 --checksum=sha256:a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1 \
##   https://static.crates.io/crates/futures-io/futures-io-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-io-0.3.30-9a295684e8a14a09"
## script = '''
## FROM rust-base AS dep-l-futures-io-0.3.30-9a295684e8a14a09
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-futures-io-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_io" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and `AsyncBufRead` traits for the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-io" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_io' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std", "unstable"))' '-C' 'metadata=309599a65ba7b85d' '-C' 'extra-filename=-9a295684e8a14a09' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-9a295684e8a14a09"
## script = """
## FROM scratch AS out-9a295684e8a14a09
## COPY --from=dep-l-futures-io-0.3.30-9a295684e8a14a09 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-9a295684e8a14a09* /"""

FROM scratch AS cratesio-unicode-bidi-0.3.15
ADD --chmod=0664 --checksum=sha256:08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75 \
  https://static.crates.io/crates/unicode-bidi/unicode-bidi-0.3.15.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-unicode-bidi-0.3.15-a08113fabad3cd3f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-unicode-bidi-0.3.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="unicode_bidi" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Servo Project Developers" \
        CARGO_PKG_DESCRIPTION="Implementation of the Unicode Bidirectional Algorithm" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="unicode-bidi" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/servo/unicode-bidi" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.15" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="15" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'unicode_bidi' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="hardcoded-data"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bench_it", "default", "flame", "flame_it", "flamer", "hardcoded-data", "serde", "std", "unstable", "with_serde"))' '-C' 'metadata=0d86c3be01285db1' '-C' 'extra-filename=-a08113fabad3cd3f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a08113fabad3cd3f
COPY --from=dep-l-unicode-bidi-0.3.15-a08113fabad3cd3f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a08113fabad3cd3f* /

## this = "a08113fabad3cd3f"
## writes = [
##     "deps/unicode_bidi-a08113fabad3cd3f.d",
##     "deps/libunicode_bidi-a08113fabad3cd3f.rmeta",
##     "deps/libunicode_bidi-a08113fabad3cd3f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/unicode_bidi-a08113fabad3cd3f.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-unicode-bidi-0.3.15"
## script = '''
## FROM scratch AS cratesio-unicode-bidi-0.3.15
## ADD --chmod=0664 --checksum=sha256:08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75 \
##   https://static.crates.io/crates/unicode-bidi/unicode-bidi-0.3.15.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-unicode-bidi-0.3.15-a08113fabad3cd3f"
## script = '''
## FROM rust-base AS dep-l-unicode-bidi-0.3.15-a08113fabad3cd3f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-unicode-bidi-0.3.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="unicode_bidi" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Servo Project Developers" \
##         CARGO_PKG_DESCRIPTION="Implementation of the Unicode Bidirectional Algorithm" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="unicode-bidi" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/unicode-bidi" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.15" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="15" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'unicode_bidi' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="hardcoded-data"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bench_it", "default", "flame", "flame_it", "flamer", "hardcoded-data", "serde", "std", "unstable", "with_serde"))' '-C' 'metadata=0d86c3be01285db1' '-C' 'extra-filename=-a08113fabad3cd3f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-bidi-0.3.15/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a08113fabad3cd3f"
## script = """
## FROM scratch AS out-a08113fabad3cd3f
## COPY --from=dep-l-unicode-bidi-0.3.15-a08113fabad3cd3f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a08113fabad3cd3f* /"""

FROM scratch AS cratesio-tinyvec_macros-0.1.1
ADD --chmod=0664 --checksum=sha256:1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20 \
  https://static.crates.io/crates/tinyvec_macros/tinyvec_macros-0.1.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tinyvec_macros-0.1.1-7b6822ef8e67fb50
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tinyvec_macros-0.1.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tinyvec_macros" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Soveu <marx.tomasz@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Some macros for tiny containers" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0 OR Zlib" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tinyvec_macros" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/Soveu/tinyvec_macros" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tinyvec_macros' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=93ef417b61dcc69e' '-C' 'extra-filename=-7b6822ef8e67fb50' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7b6822ef8e67fb50
COPY --from=dep-l-tinyvec_macros-0.1.1-7b6822ef8e67fb50 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7b6822ef8e67fb50* /

## this = "7b6822ef8e67fb50"
## writes = [
##     "deps/tinyvec_macros-7b6822ef8e67fb50.d",
##     "deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta",
##     "deps/libtinyvec_macros-7b6822ef8e67fb50.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tinyvec_macros-7b6822ef8e67fb50.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tinyvec_macros-0.1.1"
## script = '''
## FROM scratch AS cratesio-tinyvec_macros-0.1.1
## ADD --chmod=0664 --checksum=sha256:1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20 \
##   https://static.crates.io/crates/tinyvec_macros/tinyvec_macros-0.1.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tinyvec_macros-0.1.1-7b6822ef8e67fb50"
## script = '''
## FROM rust-base AS dep-l-tinyvec_macros-0.1.1-7b6822ef8e67fb50
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tinyvec_macros-0.1.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tinyvec_macros" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Soveu <marx.tomasz@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Some macros for tiny containers" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0 OR Zlib" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tinyvec_macros" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/Soveu/tinyvec_macros" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tinyvec_macros' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=93ef417b61dcc69e' '-C' 'extra-filename=-7b6822ef8e67fb50' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec_macros-0.1.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7b6822ef8e67fb50"
## script = """
## FROM scratch AS out-7b6822ef8e67fb50
## COPY --from=dep-l-tinyvec_macros-0.1.1-7b6822ef8e67fb50 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7b6822ef8e67fb50* /"""

FROM scratch AS cratesio-tinyvec-1.6.0
ADD --chmod=0664 --checksum=sha256:87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50 \
  https://static.crates.io/crates/tinyvec/tinyvec-1.6.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tinyvec-1.6.0-b009c33fe21f2d06
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tinyvec-1.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0 \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tinyvec" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Lokathor <zefria@gmail.com>" \
        CARGO_PKG_DESCRIPTION="`tinyvec` provides 100% safe vec-like data structures." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Zlib OR Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tinyvec" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Lokathor/tinyvec" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.6.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tinyvec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="tinyvec_macros"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "arbitrary", "default", "experimental_write_impl", "grab_spare_slice", "nightly_slice_partition_dedup", "real_blackbox", "rustc_1_40", "rustc_1_55", "rustc_1_57", "serde", "std", "tinyvec_macros"))' '-C' 'metadata=8f89fd25f11613d7' '-C' 'extra-filename=-b009c33fe21f2d06' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'tinyvec_macros=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b009c33fe21f2d06
COPY --from=dep-l-tinyvec-1.6.0-b009c33fe21f2d06 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b009c33fe21f2d06* /

## this = "b009c33fe21f2d06"
## deps = ["7b6822ef8e67fb50"]
## short_externs = ["tinyvec_macros-7b6822ef8e67fb50"]
## writes = [
##     "deps/tinyvec-b009c33fe21f2d06.d",
##     "deps/libtinyvec-b009c33fe21f2d06.rmeta",
##     "deps/libtinyvec-b009c33fe21f2d06.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tinyvec-b009c33fe21f2d06.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/lib.rs","byte_start":179,"byte_end":186,"line_start":7,"line_end":7,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(docs_rs, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/lib.rs","byte_start":179,"byte_end":186,"line_start":7,"line_end":7,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(docs_rs, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/lib.rs:7:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(docs_rs, feature(doc_cfg))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nightly_const_generics`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/arrayvec.rs","byte_start":6022,"byte_end":6056,"line_start":219,"line_end":219,"column_start":34,"column_end":68,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"arbitrary\", feature = \"nightly_const_generics\"))]","highlight_start":34,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `arbitrary`, `default`, `experimental_write_impl`, `grab_spare_slice`, `nightly_slice_partition_dedup`, `real_blackbox`, `rustc_1_40`, `rustc_1_55`, `rustc_1_57`, `serde`, `std`, and `tinyvec_macros`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nightly_const_generics` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nightly_const_generics`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/arrayvec.rs:219:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"arbitrary\", feature = \"nightly_const_generics\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `arbitrary`, `default`, `experimental_write_impl`, `grab_spare_slice`, `nightly_slice_partition_dedup`, `real_blackbox`, `rustc_1_40`, `rustc_1_55`, `rustc_1_57`, `serde`, `std`, and `tinyvec_macros`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nightly_const_generics` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":1165,"byte_end":1172,"line_start":38,"line_end":38,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":1165,"byte_end":1172,"line_start":38,"line_end":38,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs:38:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":3111,"byte_end":3118,"line_start":97,"line_end":97,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":3111,"byte_end":3118,"line_start":97,"line_end":97,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs:97:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":30785,"byte_end":30792,"line_start":1062,"line_end":1062,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":30785,"byte_end":30792,"line_start":1062,"line_end":1062,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs:1062:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1062\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":32087,"byte_end":32094,"line_start":1112,"line_end":1112,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":32087,"byte_end":32094,"line_start":1112,"line_end":1112,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs:1112:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":36977,"byte_end":36984,"line_start":1332,"line_end":1332,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs","byte_start":36977,"byte_end":36984,"line_start":1332,"line_end":1332,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/tinyvec.rs:1332:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(docs_rs, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tinyvec-1.6.0"
## script = '''
## FROM scratch AS cratesio-tinyvec-1.6.0
## ADD --chmod=0664 --checksum=sha256:87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50 \
##   https://static.crates.io/crates/tinyvec/tinyvec-1.6.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tinyvec-1.6.0-b009c33fe21f2d06"
## script = '''
## FROM rust-base AS dep-l-tinyvec-1.6.0-b009c33fe21f2d06
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tinyvec-1.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0 \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tinyvec" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Lokathor <zefria@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="`tinyvec` provides 100% safe vec-like data structures." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Zlib OR Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tinyvec" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Lokathor/tinyvec" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.6.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tinyvec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="tinyvec_macros"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "arbitrary", "default", "experimental_write_impl", "grab_spare_slice", "nightly_slice_partition_dedup", "real_blackbox", "rustc_1_40", "rustc_1_55", "rustc_1_57", "serde", "std", "tinyvec_macros"))' '-C' 'metadata=8f89fd25f11613d7' '-C' 'extra-filename=-b009c33fe21f2d06' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'tinyvec_macros=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tinyvec-1.6.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b009c33fe21f2d06"
## script = """
## FROM scratch AS out-b009c33fe21f2d06
## COPY --from=dep-l-tinyvec-1.6.0-b009c33fe21f2d06 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b009c33fe21f2d06* /"""

FROM scratch AS cratesio-unicode-normalization-0.1.23
ADD --chmod=0664 --checksum=sha256:a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5 \
  https://static.crates.io/crates/unicode-normalization/unicode-normalization-0.1.23.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-unicode-normalization-0.1.23-337fcf711f0ba199
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-unicode-normalization-0.1.23,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23 \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="unicode_normalization" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23/Cargo.toml" \
        CARGO_PKG_AUTHORS="kwantam <kwantam@gmail.com>:Manish Goregaokar <manishsmail@gmail.com>" \
        CARGO_PKG_DESCRIPTION="This crate provides functions for normalization of\nUnicode strings, including Canonical and Compatible\nDecomposition and Recomposition, as described in\nUnicode Standard Annex #15.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/unicode-rs/unicode-normalization" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="unicode-normalization" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/unicode-rs/unicode-normalization" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.23" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="23" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'unicode_normalization' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std"))' '-C' 'metadata=2b0b191fb81f97dc' '-C' 'extra-filename=-337fcf711f0ba199' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'tinyvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-337fcf711f0ba199
COPY --from=dep-l-unicode-normalization-0.1.23-337fcf711f0ba199 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-337fcf711f0ba199* /

## this = "337fcf711f0ba199"
## deps = [
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
## ]
## short_externs = [
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
## ]
## writes = [
##     "deps/unicode_normalization-337fcf711f0ba199.d",
##     "deps/libunicode_normalization-337fcf711f0ba199.rmeta",
##     "deps/libunicode_normalization-337fcf711f0ba199.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/unicode_normalization-337fcf711f0ba199.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-unicode-normalization-0.1.23"
## script = '''
## FROM scratch AS cratesio-unicode-normalization-0.1.23
## ADD --chmod=0664 --checksum=sha256:a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5 \
##   https://static.crates.io/crates/unicode-normalization/unicode-normalization-0.1.23.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-unicode-normalization-0.1.23-337fcf711f0ba199"
## script = '''
## FROM rust-base AS dep-l-unicode-normalization-0.1.23-337fcf711f0ba199
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-unicode-normalization-0.1.23,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23 \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="unicode_normalization" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23/Cargo.toml" \
##         CARGO_PKG_AUTHORS="kwantam <kwantam@gmail.com>:Manish Goregaokar <manishsmail@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="This crate provides functions for normalization of\nUnicode strings, including Canonical and Compatible\nDecomposition and Recomposition, as described in\nUnicode Standard Annex #15.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/unicode-rs/unicode-normalization" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="unicode-normalization" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/unicode-rs/unicode-normalization" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.23" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="23" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'unicode_normalization' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std"))' '-C' 'metadata=2b0b191fb81f97dc' '-C' 'extra-filename=-337fcf711f0ba199' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'tinyvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-normalization-0.1.23/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-337fcf711f0ba199"
## script = """
## FROM scratch AS out-337fcf711f0ba199
## COPY --from=dep-l-unicode-normalization-0.1.23-337fcf711f0ba199 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-337fcf711f0ba199* /"""

FROM scratch AS cratesio-idna-0.5.0
ADD --chmod=0664 --checksum=sha256:634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6 \
  https://static.crates.io/crates/idna/idna-0.5.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-idna-0.5.0-c78132bf36574e8f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-idna-0.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0 \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="idna" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="The rust-url developers" \
        CARGO_PKG_DESCRIPTION="IDNA (Internationalizing Domain Names in Applications) and Punycode." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="idna" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url/" \
        CARGO_PKG_RUST_VERSION="1.51" \
        CARGO_PKG_VERSION="0.5.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'idna' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=9b30ab53364f2019' '-C' 'extra-filename=-c78132bf36574e8f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'unicode_bidi=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta' '--extern' 'unicode_normalization=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c78132bf36574e8f
COPY --from=dep-l-idna-0.5.0-c78132bf36574e8f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c78132bf36574e8f* /

## this = "c78132bf36574e8f"
## deps = [
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
## ]
## short_externs = [
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
## ]
## writes = [
##     "deps/idna-c78132bf36574e8f.d",
##     "deps/libidna-c78132bf36574e8f.rmeta",
##     "deps/libidna-c78132bf36574e8f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/idna-c78132bf36574e8f.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-idna-0.5.0"
## script = '''
## FROM scratch AS cratesio-idna-0.5.0
## ADD --chmod=0664 --checksum=sha256:634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6 \
##   https://static.crates.io/crates/idna/idna-0.5.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-idna-0.5.0-c78132bf36574e8f"
## script = '''
## FROM rust-base AS dep-l-idna-0.5.0-c78132bf36574e8f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-idna-0.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0 \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="idna" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The rust-url developers" \
##         CARGO_PKG_DESCRIPTION="IDNA (Internationalizing Domain Names in Applications) and Punycode." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="idna" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url/" \
##         CARGO_PKG_RUST_VERSION="1.51" \
##         CARGO_PKG_VERSION="0.5.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'idna' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=9b30ab53364f2019' '-C' 'extra-filename=-c78132bf36574e8f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'unicode_bidi=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta' '--extern' 'unicode_normalization=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/idna-0.5.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c78132bf36574e8f"
## script = """
## FROM scratch AS out-c78132bf36574e8f
## COPY --from=dep-l-idna-0.5.0-c78132bf36574e8f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c78132bf36574e8f* /"""

FROM scratch AS cratesio-serde_derive-1.0.202
ADD --chmod=0664 --checksum=sha256:6048858004bcff69094cd972ed40a32500f153bd3be9f716b2eed2e8217c4838 \
  https://static.crates.io/crates/serde_derive/serde_derive-1.0.202.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-serde_derive-1.0.202-674ffdbedbb0cc24
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-serde_derive-1.0.202,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde_derive" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Macros 1.1 implementation of #[derive(Serialize, Deserialize)]" \
        CARGO_PKG_HOMEPAGE="https://serde.rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde_derive" \
        CARGO_PKG_README="crates-io.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.202" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="202" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde_derive' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "deserialize_in_place"))' '-C' 'metadata=1fed5465a70967d7' '-C' 'extra-filename=-674ffdbedbb0cc24' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-674ffdbedbb0cc24
COPY --from=dep-p-serde_derive-1.0.202-674ffdbedbb0cc24 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-674ffdbedbb0cc24* /

## this = "674ffdbedbb0cc24"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/serde_derive-674ffdbedbb0cc24.d",
##     "deps/libserde_derive-674ffdbedbb0cc24.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/serde_derive-674ffdbedbb0cc24.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde_derive-1.0.202"
## script = '''
## FROM scratch AS cratesio-serde_derive-1.0.202
## ADD --chmod=0664 --checksum=sha256:6048858004bcff69094cd972ed40a32500f153bd3be9f716b2eed2e8217c4838 \
##   https://static.crates.io/crates/serde_derive/serde_derive-1.0.202.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-serde_derive-1.0.202-674ffdbedbb0cc24"
## script = '''
## FROM rust-base AS dep-p-serde_derive-1.0.202-674ffdbedbb0cc24
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-serde_derive-1.0.202,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde_derive" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Macros 1.1 implementation of #[derive(Serialize, Deserialize)]" \
##         CARGO_PKG_HOMEPAGE="https://serde.rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde_derive" \
##         CARGO_PKG_README="crates-io.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.202" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="202" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde_derive' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "deserialize_in_place"))' '-C' 'metadata=1fed5465a70967d7' '-C' 'extra-filename=-674ffdbedbb0cc24' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.202/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-674ffdbedbb0cc24"
## script = """
## FROM scratch AS out-674ffdbedbb0cc24
## COPY --from=dep-p-serde_derive-1.0.202-674ffdbedbb0cc24 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-674ffdbedbb0cc24* /"""

FROM scratch AS cratesio-serde-1.0.202
ADD --chmod=0664 --checksum=sha256:226b61a0d411b2ba5ff6d7f73a476ac4f8bb900373459cd00fab8512828ba395 \
  https://static.crates.io/crates/serde/serde-1.0.202.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-serde-1.0.202-26e91440ed3c2207
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-serde-1.0.202,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202 \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A generic serialization/deserialization framework" \
        CARGO_PKG_HOMEPAGE="https://serde.rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde" \
        CARGO_PKG_README="crates-io.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.202" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="202" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/serde-c3826d83db7fe1da/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="serde_derive"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' '-C' 'metadata=22185f7a1bb52818' '-C' 'extra-filename=-26e91440ed3c2207' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'serde_derive=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so' '--cap-lints' 'warn' '--check-cfg' 'cfg(doc_cfg)' '--check-cfg' 'cfg(no_core_cstr)' '--check-cfg' 'cfg(no_core_num_saturating)' '--check-cfg' 'cfg(no_core_try_from)' '--check-cfg' 'cfg(no_float_copysign)' '--check-cfg' 'cfg(no_num_nonzero_signed)' '--check-cfg' 'cfg(no_relaxed_trait_bounds)' '--check-cfg' 'cfg(no_serde_derive)' '--check-cfg' 'cfg(no_std_atomic)' '--check-cfg' 'cfg(no_std_atomic64)' '--check-cfg' 'cfg(no_systemtime_checked_add)' '--check-cfg' 'cfg(no_target_has_atomic)' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-26e91440ed3c2207
COPY --from=dep-l-serde-1.0.202-26e91440ed3c2207 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-26e91440ed3c2207* /

## this = "26e91440ed3c2207"
## deps = [
##     "674ffdbedbb0cc24",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "serde_derive-674ffdbedbb0cc24",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/serde-26e91440ed3c2207.d",
##     "deps/libserde-26e91440ed3c2207.rmeta",
##     "deps/libserde-26e91440ed3c2207.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/serde-26e91440ed3c2207.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde-1.0.202"
## script = '''
## FROM scratch AS cratesio-serde-1.0.202
## ADD --chmod=0664 --checksum=sha256:226b61a0d411b2ba5ff6d7f73a476ac4f8bb900373459cd00fab8512828ba395 \
##   https://static.crates.io/crates/serde/serde-1.0.202.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-serde-1.0.202-26e91440ed3c2207"
## script = '''
## FROM rust-base AS dep-l-serde-1.0.202-26e91440ed3c2207
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-serde-1.0.202,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202 \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A generic serialization/deserialization framework" \
##         CARGO_PKG_HOMEPAGE="https://serde.rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde" \
##         CARGO_PKG_README="crates-io.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.202" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="202" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/serde-c3826d83db7fe1da/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="serde_derive"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' '-C' 'metadata=22185f7a1bb52818' '-C' 'extra-filename=-26e91440ed3c2207' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'serde_derive=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so' '--cap-lints' 'warn' '--check-cfg' 'cfg(doc_cfg)' '--check-cfg' 'cfg(no_core_cstr)' '--check-cfg' 'cfg(no_core_num_saturating)' '--check-cfg' 'cfg(no_core_try_from)' '--check-cfg' 'cfg(no_float_copysign)' '--check-cfg' 'cfg(no_num_nonzero_signed)' '--check-cfg' 'cfg(no_relaxed_trait_bounds)' '--check-cfg' 'cfg(no_serde_derive)' '--check-cfg' 'cfg(no_std_atomic)' '--check-cfg' 'cfg(no_std_atomic64)' '--check-cfg' 'cfg(no_systemtime_checked_add)' '--check-cfg' 'cfg(no_target_has_atomic)' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.202/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-26e91440ed3c2207"
## script = """
## FROM scratch AS out-26e91440ed3c2207
## COPY --from=dep-l-serde-1.0.202-26e91440ed3c2207 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-26e91440ed3c2207* /"""

FROM scratch AS cratesio-ipnet-2.9.0
ADD --chmod=0664 --checksum=sha256:8f518f335dce6725a761382244631d86cf0ccb2863413590b31338feb467f9c3 \
  https://static.crates.io/crates/ipnet/ipnet-2.9.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-ipnet-2.9.0-c991228b632df552
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-ipnet-2.9.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0 \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="ipnet" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Kris Price <kris@krisprice.nz>" \
        CARGO_PKG_DESCRIPTION="Provides types and useful methods for working with IPv4 and IPv6 network addresses, commonly called IP prefixes. The new `IpNet`, `Ipv4Net`, and `Ipv6Net` types build on the existing `IpAddr`, `Ipv4Addr`, and `Ipv6Addr` types already provided in Rust's standard library and align to their design to stay consistent. The module also provides useful traits that extend `Ipv4Addr` and `Ipv6Addr` with methods for `Add`, `Sub`, `BitAnd`, and `BitOr` operations. The module only uses stable feature so it is guaranteed to compile using the stable toolchain." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="ipnet" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/krisprice/ipnet" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="2.9.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'ipnet' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="serde"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "heapless", "json", "schemars", "ser_as_str", "serde", "std"))' '-C' 'metadata=59e219d161db3307' '-C' 'extra-filename=-c991228b632df552' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c991228b632df552
COPY --from=dep-l-ipnet-2.9.0-c991228b632df552 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c991228b632df552* /

## this = "c991228b632df552"
## deps = [
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/ipnet-c991228b632df552.d",
##     "deps/libipnet-c991228b632df552.rmeta",
##     "deps/libipnet-c991228b632df552.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/ipnet-c991228b632df552.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-ipnet-2.9.0"
## script = '''
## FROM scratch AS cratesio-ipnet-2.9.0
## ADD --chmod=0664 --checksum=sha256:8f518f335dce6725a761382244631d86cf0ccb2863413590b31338feb467f9c3 \
##   https://static.crates.io/crates/ipnet/ipnet-2.9.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-ipnet-2.9.0-c991228b632df552"
## script = '''
## FROM rust-base AS dep-l-ipnet-2.9.0-c991228b632df552
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-ipnet-2.9.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0 \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="ipnet" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Kris Price <kris@krisprice.nz>" \
##         CARGO_PKG_DESCRIPTION="Provides types and useful methods for working with IPv4 and IPv6 network addresses, commonly called IP prefixes. The new `IpNet`, `Ipv4Net`, and `Ipv6Net` types build on the existing `IpAddr`, `Ipv4Addr`, and `Ipv6Addr` types already provided in Rust's standard library and align to their design to stay consistent. The module also provides useful traits that extend `Ipv4Addr` and `Ipv6Addr` with methods for `Add`, `Sub`, `BitAnd`, and `BitOr` operations. The module only uses stable feature so it is guaranteed to compile using the stable toolchain." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="ipnet" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/krisprice/ipnet" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="2.9.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'ipnet' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="serde"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "heapless", "json", "schemars", "ser_as_str", "serde", "std"))' '-C' 'metadata=59e219d161db3307' '-C' 'extra-filename=-c991228b632df552' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ipnet-2.9.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c991228b632df552"
## script = """
## FROM scratch AS out-c991228b632df552
## COPY --from=dep-l-ipnet-2.9.0-c991228b632df552 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c991228b632df552* /"""

FROM scratch AS cratesio-libc-0.2.155
ADD --chmod=0664 --checksum=sha256:97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c \
  https://static.crates.io/crates/libc/libc-0.2.155.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-libc-0.2.155-a7905fdc410bdfce
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-libc-0.2.155,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="libc" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Raw FFI bindings to platform libraries like libc.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/libc" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="libc" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/libc" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.155" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="155" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libc-00f4a26e03f113ca/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'libc' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' '-C' 'metadata=f6bb218c1ccc899a' '-C' 'extra-filename=-a7905fdc410bdfce' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' '--cfg' 'freebsd11' '--cfg' 'libc_priv_mod_use' '--cfg' 'libc_union' '--cfg' 'libc_const_size_of' '--cfg' 'libc_align' '--cfg' 'libc_int128' '--cfg' 'libc_core_cvoid' '--cfg' 'libc_packedN' '--cfg' 'libc_cfg_target_vendor' '--cfg' 'libc_non_exhaustive' '--cfg' 'libc_long_array' '--cfg' 'libc_ptr_addr_of' '--cfg' 'libc_underscore_const_names' '--cfg' 'libc_const_extern_fn' '--check-cfg' 'cfg(emscripten_new_stat_abi)' '--check-cfg' 'cfg(espidf_time64)' '--check-cfg' 'cfg(freebsd10)' '--check-cfg' 'cfg(freebsd11)' '--check-cfg' 'cfg(freebsd12)' '--check-cfg' 'cfg(freebsd13)' '--check-cfg' 'cfg(freebsd14)' '--check-cfg' 'cfg(freebsd15)' '--check-cfg' 'cfg(libc_align)' '--check-cfg' 'cfg(libc_cfg_target_vendor)' '--check-cfg' 'cfg(libc_const_extern_fn)' '--check-cfg' 'cfg(libc_const_extern_fn_unstable)' '--check-cfg' 'cfg(libc_const_size_of)' '--check-cfg' 'cfg(libc_core_cvoid)' '--check-cfg' 'cfg(libc_deny_warnings)' '--check-cfg' 'cfg(libc_int128)' '--check-cfg' 'cfg(libc_long_array)' '--check-cfg' 'cfg(libc_non_exhaustive)' '--check-cfg' 'cfg(libc_packedN)' '--check-cfg' 'cfg(libc_priv_mod_use)' '--check-cfg' 'cfg(libc_ptr_addr_of)' '--check-cfg' 'cfg(libc_thread_local)' '--check-cfg' 'cfg(libc_underscore_const_names)' '--check-cfg' 'cfg(libc_union)' '--check-cfg' 'cfg(target_os,values("switch","aix","ohos","hurd","visionos"))' '--check-cfg' 'cfg(target_env,values("illumos","wasi","aix","ohos"))' '--check-cfg' 'cfg(target_arch,values("loongarch64","mips32r6","mips64r6","csky"))' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a7905fdc410bdfce
COPY --from=dep-l-libc-0.2.155-a7905fdc410bdfce /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a7905fdc410bdfce* /

## this = "a7905fdc410bdfce"
## writes = [
##     "deps/libc-a7905fdc410bdfce.d",
##     "deps/liblibc-a7905fdc410bdfce.rmeta",
##     "deps/liblibc-a7905fdc410bdfce.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libc-a7905fdc410bdfce.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs","byte_start":54818,"byte_end":54824,"line_start":1447,"line_end":1447,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(missing_abi)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs","byte_start":54818,"byte_end":54824,"line_start":1447,"line_end":1447,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs:1447:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(missing_abi)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs","byte_start":57462,"byte_end":57468,"line_start":1507,"line_end":1507,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs","byte_start":57462,"byte_end":57468,"line_start":1507,"line_end":1507,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs:1507:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs","byte_start":59069,"byte_end":59075,"line_start":1548,"line_end":1548,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs","byte_start":59069,"byte_end":59075,"line_start":1548,"line_end":1548,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/mod.rs:1548:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6858,"byte_end":6864,"line_start":194,"line_end":194,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/mod.rs","byte_start":54792,"byte_end":56298,"line_start":1540,"line_end":1587,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":64},{"text":"        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":76},{"text":"            (*mhdr).msg_control as *mut cmsghdr","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_DATA(cmsg: *const cmsghdr) -> *mut ::c_uchar {","highlight_start":1,"highlight_end":63},{"text":"        cmsg.offset(1) as *mut ::c_uchar","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_SPACE(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":62},{"text":"        (CMSG_ALIGN(length as usize) + CMSG_ALIGN(::mem::size_of::<cmsghdr>()))","highlight_start":1,"highlight_end":80},{"text":"            as ::c_uint","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_LEN(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":60},{"text":"        CMSG_ALIGN(::mem::size_of::<cmsghdr>()) as ::c_uint + length","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_CLR(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] &= !(1 << (fd % size));","highlight_start":1,"highlight_end":59},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ISSET(fd: ::c_int, set: *const fd_set) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_SET(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] |= 1 << (fd % size);","highlight_start":1,"highlight_end":56},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ZERO(set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":45},{"text":"        for slot in (*set).fds_bits.iter_mut() {","highlight_start":1,"highlight_end":49},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6537,"byte_end":6551,"line_start":186,"line_end":186,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6858,"byte_end":6864,"line_start":194,"line_end":194,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/mod.rs","byte_start":54792,"byte_end":56298,"line_start":1540,"line_end":1587,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":64},{"text":"        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":76},{"text":"            (*mhdr).msg_control as *mut cmsghdr","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_DATA(cmsg: *const cmsghdr) -> *mut ::c_uchar {","highlight_start":1,"highlight_end":63},{"text":"        cmsg.offset(1) as *mut ::c_uchar","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_SPACE(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":62},{"text":"        (CMSG_ALIGN(length as usize) + CMSG_ALIGN(::mem::size_of::<cmsghdr>()))","highlight_start":1,"highlight_end":80},{"text":"            as ::c_uint","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_LEN(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":60},{"text":"        CMSG_ALIGN(::mem::size_of::<cmsghdr>()) as ::c_uint + length","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_CLR(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] &= !(1 << (fd % size));","highlight_start":1,"highlight_end":59},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ISSET(fd: ::c_int, set: *const fd_set) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_SET(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] |= 1 << (fd % size);","highlight_start":1,"highlight_end":56},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ZERO(set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":45},{"text":"        for slot in (*set).fds_bits.iter_mut() {","highlight_start":1,"highlight_end":49},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6537,"byte_end":6551,"line_start":186,"line_end":186,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs:194:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* unsafe extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/mod.rs:1540:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mf! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (*mhdr).msg_control as *mut cmsghdr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7320,"byte_end":7326,"line_start":209,"line_end":209,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/mod.rs","byte_start":56300,"byte_end":58092,"line_start":1589,"line_end":1665,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub fn SIGRTMAX() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmax() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SIGRTMIN() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmin() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSTOPPED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":57},{"text":"        (status & 0xff) == 0x7f","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WSTOPSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFCONTINUED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":59},{"text":"        status == 0xffff","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSIGNALED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":58},{"text":"        ((status & 0x7f) + 1) as i8 >= 2","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WTERMSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        status & 0x7f","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFEXITED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x7f) == 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WEXITSTATUS(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":61},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WCOREDUMP(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x80) != 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_EXITCODE(ret: ::c_int, sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":71},{"text":"        (ret << 8) | sig","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_STOPCODE(sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":57},{"text":"        (sig << 8) | 0x7f","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn QCMD(cmd: ::c_int, type_: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":67},{"text":"        (cmd << 8) | (type_ & 0x00ff)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_COPIED(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_COPY","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_CLASS(o: u8) -> u8 {","highlight_start":1,"highlight_end":46},{"text":"        o & IPOPT_CLASS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_NUMBER(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_NUMBER_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPTOS_ECN(x: u8) -> u8 {","highlight_start":1,"highlight_end":44},{"text":"        x & ::IPTOS_ECN_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(ellipsis_inclusive_range_patterns)]","highlight_start":1,"highlight_end":48},{"text":"    pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {","highlight_start":1,"highlight_end":67},{"text":"        ((a << 16) + (b << 8)) + match c {","highlight_start":1,"highlight_end":43},{"text":"            0 ... 255 => c,","highlight_start":1,"highlight_end":28},{"text":"            _ => 255,","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7001,"byte_end":7020,"line_start":201,"line_end":201,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7320,"byte_end":7326,"line_start":209,"line_end":209,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/mod.rs","byte_start":56300,"byte_end":58092,"line_start":1589,"line_end":1665,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub fn SIGRTMAX() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmax() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SIGRTMIN() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmin() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSTOPPED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":57},{"text":"        (status & 0xff) == 0x7f","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WSTOPSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFCONTINUED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":59},{"text":"        status == 0xffff","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSIGNALED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":58},{"text":"        ((status & 0x7f) + 1) as i8 >= 2","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WTERMSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        status & 0x7f","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFEXITED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x7f) == 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WEXITSTATUS(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":61},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WCOREDUMP(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x80) != 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_EXITCODE(ret: ::c_int, sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":71},{"text":"        (ret << 8) | sig","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_STOPCODE(sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":57},{"text":"        (sig << 8) | 0x7f","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn QCMD(cmd: ::c_int, type_: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":67},{"text":"        (cmd << 8) | (type_ & 0x00ff)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_COPIED(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_COPY","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_CLASS(o: u8) -> u8 {","highlight_start":1,"highlight_end":46},{"text":"        o & IPOPT_CLASS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_NUMBER(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_NUMBER_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPTOS_ECN(x: u8) -> u8 {","highlight_start":1,"highlight_end":44},{"text":"        x & ::IPTOS_ECN_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(ellipsis_inclusive_range_patterns)]","highlight_start":1,"highlight_end":48},{"text":"    pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {","highlight_start":1,"highlight_end":67},{"text":"        ((a << 16) + (b << 8)) + match c {","highlight_start":1,"highlight_end":43},{"text":"            0 ... 255 => c,","highlight_start":1,"highlight_end":28},{"text":"            _ => 255,","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7001,"byte_end":7020,"line_start":201,"line_end":201,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs:209:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/mod.rs:1589:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1589\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafe_f! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn SIGRTMAX() -> ::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { __libc_current_sigrtmax() }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1665\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `safe_f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6858,"byte_end":6864,"line_start":194,"line_end":194,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/mod.rs","byte_start":163263,"byte_end":167531,"line_start":4667,"line_end":4809,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn NLA_ALIGN(len: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":48},{"text":"        return ((len) + NLA_ALIGNTO - 1) & !(NLA_ALIGNTO - 1)","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_NXTHDR(mhdr: *const msghdr,","highlight_start":1,"highlight_end":44},{"text":"                       cmsg: *const cmsghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":63},{"text":"        if ((*cmsg).cmsg_len as usize) < ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":71},{"text":"            return 0 as *mut cmsghdr;","highlight_start":1,"highlight_end":38},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        let next = (cmsg as usize +","highlight_start":1,"highlight_end":36},{"text":"                    super::CMSG_ALIGN((*cmsg).cmsg_len as usize))","highlight_start":1,"highlight_end":66},{"text":"            as *mut cmsghdr;","highlight_start":1,"highlight_end":29},{"text":"        let max = (*mhdr).msg_control as usize","highlight_start":1,"highlight_end":47},{"text":"            + (*mhdr).msg_controllen as usize;","highlight_start":1,"highlight_end":47},{"text":"        if (next.wrapping_offset(1)) as usize > max ||","highlight_start":1,"highlight_end":55},{"text":"            next as usize + super::CMSG_ALIGN((*next).cmsg_len as usize) > max","highlight_start":1,"highlight_end":79},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            next as *mut cmsghdr","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_ALLOC_SIZE(count: ::c_int) -> ::size_t {","highlight_start":1,"highlight_end":56},{"text":"        let _dummy: cpu_set_t = ::mem::zeroed();","highlight_start":1,"highlight_end":49},{"text":"        let size_in_bits = 8 * ::mem::size_of_val(&_dummy.bits[0]);","highlight_start":1,"highlight_end":68},{"text":"        ((count as ::size_t + size_in_bits - 1) / 8) as ::size_t","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_ZERO(cpuset: &mut cpu_set_t) -> () {","highlight_start":1,"highlight_end":52},{"text":"        for slot in cpuset.bits.iter_mut() {","highlight_start":1,"highlight_end":45},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_SET(cpu: usize, cpuset: &mut cpu_set_t) -> () {","highlight_start":1,"highlight_end":63},{"text":"        let size_in_bits","highlight_start":1,"highlight_end":25},{"text":"            = 8 * ::mem::size_of_val(&cpuset.bits[0]); // 32, 64 etc","highlight_start":1,"highlight_end":69},{"text":"        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);","highlight_start":1,"highlight_end":70},{"text":"        cpuset.bits[idx] |= 1 << offset;","highlight_start":1,"highlight_end":41},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_CLR(cpu: usize, cpuset: &mut cpu_set_t) -> () {","highlight_start":1,"highlight_end":63},{"text":"        let size_in_bits","highlight_start":1,"highlight_end":25},{"text":"            = 8 * ::mem::size_of_val(&cpuset.bits[0]); // 32, 64 etc","highlight_start":1,"highlight_end":69},{"text":"        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);","highlight_start":1,"highlight_end":70},{"text":"        cpuset.bits[idx] &= !(1 << offset);","highlight_start":1,"highlight_end":44},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_ISSET(cpu: usize, cpuset: &cpu_set_t) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let size_in_bits = 8 * ::mem::size_of_val(&cpuset.bits[0]);","highlight_start":1,"highlight_end":68},{"text":"        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);","highlight_start":1,"highlight_end":70},{"text":"        0 != (cpuset.bits[idx] & (1 << offset))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_COUNT_S(size: usize, cpuset: &cpu_set_t) -> ::c_int {","highlight_start":1,"highlight_end":69},{"text":"        let mut s: u32 = 0;","highlight_start":1,"highlight_end":28},{"text":"        let size_of_mask = ::mem::size_of_val(&cpuset.bits[0]);","highlight_start":1,"highlight_end":64},{"text":"        for i in cpuset.bits[..(size / size_of_mask)].iter() {","highlight_start":1,"highlight_end":63},{"text":"            s += i.count_ones();","highlight_start":1,"highlight_end":33},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        s as ::c_int","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_COUNT(cpuset: &cpu_set_t) -> ::c_int {","highlight_start":1,"highlight_end":54},{"text":"        CPU_COUNT_S(::mem::size_of::<cpu_set_t>(), cpuset)","highlight_start":1,"highlight_end":59},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_EQUAL(set1: &cpu_set_t, set2: &cpu_set_t) -> bool {","highlight_start":1,"highlight_end":67},{"text":"        set1.bits == set2.bits","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SCTP_PR_INDEX(policy: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":55},{"text":"        policy >> 4 - 1","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SCTP_PR_POLICY(policy: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":56},{"text":"        policy & SCTP_PR_SCTP_MASK","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SCTP_PR_SET_POLICY(flags: &mut ::c_int, policy: ::c_int) -> () {","highlight_start":1,"highlight_end":76},{"text":"        *flags &= !SCTP_PR_SCTP_MASK;","highlight_start":1,"highlight_end":38},{"text":"        *flags |= policy;","highlight_start":1,"highlight_end":26},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn major(dev: ::dev_t) -> ::c_uint {","highlight_start":1,"highlight_end":45},{"text":"        let mut major = 0;","highlight_start":1,"highlight_end":27},{"text":"        major |= (dev & 0x00000000000fff00) >> 8;","highlight_start":1,"highlight_end":50},{"text":"        major |= (dev & 0xfffff00000000000) >> 32;","highlight_start":1,"highlight_end":51},{"text":"        major as ::c_uint","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn minor(dev: ::dev_t) -> ::c_uint {","highlight_start":1,"highlight_end":45},{"text":"        let mut minor = 0;","highlight_start":1,"highlight_end":27},{"text":"        minor |= (dev & 0x00000000000000ff) >> 0;","highlight_start":1,"highlight_end":50},{"text":"        minor |= (dev & 0x00000ffffff00000) >> 12;","highlight_start":1,"highlight_end":51},{"text":"        minor as ::c_uint","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn IPTOS_TOS(tos: u8) -> u8 {","highlight_start":1,"highlight_end":38},{"text":"        tos & IPTOS_TOS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn IPTOS_PREC(tos: u8) -> u8 {","highlight_start":1,"highlight_end":39},{"text":"        tos & IPTOS_PREC_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn RT_TOS(tos: u8) -> u8 {","highlight_start":1,"highlight_end":35},{"text":"        tos & ::IPTOS_TOS_MASK","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn RT_ADDRCLASS(flags: u32) -> u32 {","highlight_start":1,"highlight_end":45},{"text":"        flags >> 23","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn RT_LOCALADDR(flags: u32) -> bool {","highlight_start":1,"highlight_end":46},{"text":"        (flags & RTF_ADDRCLASSMASK) == (RTF_LOCAL | RTF_INTERFACE)","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SO_EE_OFFENDER(ee: *const ::sock_extended_err) -> *mut ::sockaddr {","highlight_start":1,"highlight_end":79},{"text":"        ee.offset(1) as *mut ::sockaddr","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_RVAL(code: ::__u32) -> ::__u32 {","highlight_start":1,"highlight_end":48},{"text":"        code & 0x18","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_MISCOP(code: ::__u32) -> ::__u32 {","highlight_start":1,"highlight_end":50},{"text":"        code & 0xf8","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_STMT(code: ::__u16, k: ::__u32) -> sock_filter {","highlight_start":1,"highlight_end":64},{"text":"        sock_filter{code: code, jt: 0, jf: 0, k: k}","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_JUMP(code: ::__u16, k: ::__u32, jt: ::__u8, jf: ::__u8) -> sock_filter {","highlight_start":1,"highlight_end":88},{"text":"        sock_filter{code: code, jt: jt, jf: jf, k: k}","highlight_start":1,"highlight_end":54},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6537,"byte_end":6551,"line_start":186,"line_end":186,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6858,"byte_end":6864,"line_start":194,"line_end":194,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/mod.rs","byte_start":163263,"byte_end":167531,"line_start":4667,"line_end":4809,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn NLA_ALIGN(len: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":48},{"text":"        return ((len) + NLA_ALIGNTO - 1) & !(NLA_ALIGNTO - 1)","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_NXTHDR(mhdr: *const msghdr,","highlight_start":1,"highlight_end":44},{"text":"                       cmsg: *const cmsghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":63},{"text":"        if ((*cmsg).cmsg_len as usize) < ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":71},{"text":"            return 0 as *mut cmsghdr;","highlight_start":1,"highlight_end":38},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        let next = (cmsg as usize +","highlight_start":1,"highlight_end":36},{"text":"                    super::CMSG_ALIGN((*cmsg).cmsg_len as usize))","highlight_start":1,"highlight_end":66},{"text":"            as *mut cmsghdr;","highlight_start":1,"highlight_end":29},{"text":"        let max = (*mhdr).msg_control as usize","highlight_start":1,"highlight_end":47},{"text":"            + (*mhdr).msg_controllen as usize;","highlight_start":1,"highlight_end":47},{"text":"        if (next.wrapping_offset(1)) as usize > max ||","highlight_start":1,"highlight_end":55},{"text":"            next as usize + super::CMSG_ALIGN((*next).cmsg_len as usize) > max","highlight_start":1,"highlight_end":79},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            next as *mut cmsghdr","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_ALLOC_SIZE(count: ::c_int) -> ::size_t {","highlight_start":1,"highlight_end":56},{"text":"        let _dummy: cpu_set_t = ::mem::zeroed();","highlight_start":1,"highlight_end":49},{"text":"        let size_in_bits = 8 * ::mem::size_of_val(&_dummy.bits[0]);","highlight_start":1,"highlight_end":68},{"text":"        ((count as ::size_t + size_in_bits - 1) / 8) as ::size_t","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_ZERO(cpuset: &mut cpu_set_t) -> () {","highlight_start":1,"highlight_end":52},{"text":"        for slot in cpuset.bits.iter_mut() {","highlight_start":1,"highlight_end":45},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_SET(cpu: usize, cpuset: &mut cpu_set_t) -> () {","highlight_start":1,"highlight_end":63},{"text":"        let size_in_bits","highlight_start":1,"highlight_end":25},{"text":"            = 8 * ::mem::size_of_val(&cpuset.bits[0]); // 32, 64 etc","highlight_start":1,"highlight_end":69},{"text":"        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);","highlight_start":1,"highlight_end":70},{"text":"        cpuset.bits[idx] |= 1 << offset;","highlight_start":1,"highlight_end":41},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_CLR(cpu: usize, cpuset: &mut cpu_set_t) -> () {","highlight_start":1,"highlight_end":63},{"text":"        let size_in_bits","highlight_start":1,"highlight_end":25},{"text":"            = 8 * ::mem::size_of_val(&cpuset.bits[0]); // 32, 64 etc","highlight_start":1,"highlight_end":69},{"text":"        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);","highlight_start":1,"highlight_end":70},{"text":"        cpuset.bits[idx] &= !(1 << offset);","highlight_start":1,"highlight_end":44},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_ISSET(cpu: usize, cpuset: &cpu_set_t) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let size_in_bits = 8 * ::mem::size_of_val(&cpuset.bits[0]);","highlight_start":1,"highlight_end":68},{"text":"        let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);","highlight_start":1,"highlight_end":70},{"text":"        0 != (cpuset.bits[idx] & (1 << offset))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_COUNT_S(size: usize, cpuset: &cpu_set_t) -> ::c_int {","highlight_start":1,"highlight_end":69},{"text":"        let mut s: u32 = 0;","highlight_start":1,"highlight_end":28},{"text":"        let size_of_mask = ::mem::size_of_val(&cpuset.bits[0]);","highlight_start":1,"highlight_end":64},{"text":"        for i in cpuset.bits[..(size / size_of_mask)].iter() {","highlight_start":1,"highlight_end":63},{"text":"            s += i.count_ones();","highlight_start":1,"highlight_end":33},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        s as ::c_int","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_COUNT(cpuset: &cpu_set_t) -> ::c_int {","highlight_start":1,"highlight_end":54},{"text":"        CPU_COUNT_S(::mem::size_of::<cpu_set_t>(), cpuset)","highlight_start":1,"highlight_end":59},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CPU_EQUAL(set1: &cpu_set_t, set2: &cpu_set_t) -> bool {","highlight_start":1,"highlight_end":67},{"text":"        set1.bits == set2.bits","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SCTP_PR_INDEX(policy: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":55},{"text":"        policy >> 4 - 1","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SCTP_PR_POLICY(policy: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":56},{"text":"        policy & SCTP_PR_SCTP_MASK","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SCTP_PR_SET_POLICY(flags: &mut ::c_int, policy: ::c_int) -> () {","highlight_start":1,"highlight_end":76},{"text":"        *flags &= !SCTP_PR_SCTP_MASK;","highlight_start":1,"highlight_end":38},{"text":"        *flags |= policy;","highlight_start":1,"highlight_end":26},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn major(dev: ::dev_t) -> ::c_uint {","highlight_start":1,"highlight_end":45},{"text":"        let mut major = 0;","highlight_start":1,"highlight_end":27},{"text":"        major |= (dev & 0x00000000000fff00) >> 8;","highlight_start":1,"highlight_end":50},{"text":"        major |= (dev & 0xfffff00000000000) >> 32;","highlight_start":1,"highlight_end":51},{"text":"        major as ::c_uint","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn minor(dev: ::dev_t) -> ::c_uint {","highlight_start":1,"highlight_end":45},{"text":"        let mut minor = 0;","highlight_start":1,"highlight_end":27},{"text":"        minor |= (dev & 0x00000000000000ff) >> 0;","highlight_start":1,"highlight_end":50},{"text":"        minor |= (dev & 0x00000ffffff00000) >> 12;","highlight_start":1,"highlight_end":51},{"text":"        minor as ::c_uint","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn IPTOS_TOS(tos: u8) -> u8 {","highlight_start":1,"highlight_end":38},{"text":"        tos & IPTOS_TOS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn IPTOS_PREC(tos: u8) -> u8 {","highlight_start":1,"highlight_end":39},{"text":"        tos & IPTOS_PREC_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn RT_TOS(tos: u8) -> u8 {","highlight_start":1,"highlight_end":35},{"text":"        tos & ::IPTOS_TOS_MASK","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn RT_ADDRCLASS(flags: u32) -> u32 {","highlight_start":1,"highlight_end":45},{"text":"        flags >> 23","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn RT_LOCALADDR(flags: u32) -> bool {","highlight_start":1,"highlight_end":46},{"text":"        (flags & RTF_ADDRCLASSMASK) == (RTF_LOCAL | RTF_INTERFACE)","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SO_EE_OFFENDER(ee: *const ::sock_extended_err) -> *mut ::sockaddr {","highlight_start":1,"highlight_end":79},{"text":"        ee.offset(1) as *mut ::sockaddr","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_RVAL(code: ::__u32) -> ::__u32 {","highlight_start":1,"highlight_end":48},{"text":"        code & 0x18","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_MISCOP(code: ::__u32) -> ::__u32 {","highlight_start":1,"highlight_end":50},{"text":"        code & 0xf8","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_STMT(code: ::__u16, k: ::__u32) -> sock_filter {","highlight_start":1,"highlight_end":64},{"text":"        sock_filter{code: code, jt: 0, jf: 0, k: k}","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn BPF_JUMP(code: ::__u16, k: ::__u32, jt: ::__u8, jf: ::__u8) -> sock_filter {","highlight_start":1,"highlight_end":88},{"text":"        sock_filter{code: code, jt: jt, jf: jf, k: k}","highlight_start":1,"highlight_end":54},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":6537,"byte_end":6551,"line_start":186,"line_end":186,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs:194:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* unsafe extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/mod.rs:4667:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mf! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn NLA_ALIGN(len: ::c_int) -> ::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return ((len) + NLA_ALIGNTO - 1) & !(NLA_ALIGNTO - 1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4809\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7320,"byte_end":7326,"line_start":209,"line_end":209,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/mod.rs","byte_start":167533,"byte_end":168233,"line_start":4811,"line_end":4834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub {const} fn makedev(major: ::c_uint, minor: ::c_uint) -> ::dev_t {","highlight_start":1,"highlight_end":74},{"text":"        let major = major as ::dev_t;","highlight_start":1,"highlight_end":38},{"text":"        let minor = minor as ::dev_t;","highlight_start":1,"highlight_end":38},{"text":"        let mut dev = 0;","highlight_start":1,"highlight_end":25},{"text":"        dev |= (major & 0x00000fff) << 8;","highlight_start":1,"highlight_end":42},{"text":"        dev |= (major & 0xfffff000) << 32;","highlight_start":1,"highlight_end":43},{"text":"        dev |= (minor & 0x000000ff) << 0;","highlight_start":1,"highlight_end":42},{"text":"        dev |= (minor & 0xffffff00) << 12;","highlight_start":1,"highlight_end":43},{"text":"        dev","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn SCTP_PR_TTL_ENABLED(policy: ::c_int) -> bool {","highlight_start":1,"highlight_end":66},{"text":"        policy == SCTP_PR_SCTP_TTL","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn SCTP_PR_RTX_ENABLED(policy: ::c_int) -> bool {","highlight_start":1,"highlight_end":66},{"text":"        policy == SCTP_PR_SCTP_RTX","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn SCTP_PR_PRIO_ENABLED(policy: ::c_int) -> bool {","highlight_start":1,"highlight_end":67},{"text":"        policy == SCTP_PR_SCTP_PRIO","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7001,"byte_end":7020,"line_start":201,"line_end":201,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7320,"byte_end":7326,"line_start":209,"line_end":209,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/mod.rs","byte_start":167533,"byte_end":168233,"line_start":4811,"line_end":4834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub {const} fn makedev(major: ::c_uint, minor: ::c_uint) -> ::dev_t {","highlight_start":1,"highlight_end":74},{"text":"        let major = major as ::dev_t;","highlight_start":1,"highlight_end":38},{"text":"        let minor = minor as ::dev_t;","highlight_start":1,"highlight_end":38},{"text":"        let mut dev = 0;","highlight_start":1,"highlight_end":25},{"text":"        dev |= (major & 0x00000fff) << 8;","highlight_start":1,"highlight_end":42},{"text":"        dev |= (major & 0xfffff000) << 32;","highlight_start":1,"highlight_end":43},{"text":"        dev |= (minor & 0x000000ff) << 0;","highlight_start":1,"highlight_end":42},{"text":"        dev |= (minor & 0xffffff00) << 12;","highlight_start":1,"highlight_end":43},{"text":"        dev","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn SCTP_PR_TTL_ENABLED(policy: ::c_int) -> bool {","highlight_start":1,"highlight_end":66},{"text":"        policy == SCTP_PR_SCTP_TTL","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn SCTP_PR_RTX_ENABLED(policy: ::c_int) -> bool {","highlight_start":1,"highlight_end":66},{"text":"        policy == SCTP_PR_SCTP_RTX","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn SCTP_PR_PRIO_ENABLED(policy: ::c_int) -> bool {","highlight_start":1,"highlight_end":67},{"text":"        policy == SCTP_PR_SCTP_PRIO","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs","byte_start":7001,"byte_end":7020,"line_start":201,"line_end":201,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/macros.rs:209:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/mod.rs:4811:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4811\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafe_f! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4812\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub {const} fn makedev(major: ::c_uint, minor: ::c_uint) -> ::dev_t {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4813\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let major = major as ::dev_t;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4814\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let minor = minor as ::dev_t;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `safe_f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs","byte_start":515,"byte_end":521,"line_start":19,"line_end":19,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"        pub sa_restorer: ::Option<extern fn()>,","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs","byte_start":515,"byte_end":521,"line_start":19,"line_end":19,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"        pub sa_restorer: ::Option<extern fn()>,","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/unix/linux_like/linux/gnu/b64/x86_64/mod.rs:19:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub sa_restorer: ::Option<extern fn()>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-libc-0.2.155"
## script = '''
## FROM scratch AS cratesio-libc-0.2.155
## ADD --chmod=0664 --checksum=sha256:97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c \
##   https://static.crates.io/crates/libc/libc-0.2.155.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-libc-0.2.155-a7905fdc410bdfce"
## script = '''
## FROM rust-base AS dep-l-libc-0.2.155-a7905fdc410bdfce
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-libc-0.2.155,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="libc" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Raw FFI bindings to platform libraries like libc.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/libc" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="libc" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/libc" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.155" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="155" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libc-00f4a26e03f113ca/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'libc' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' '-C' 'metadata=f6bb218c1ccc899a' '-C' 'extra-filename=-a7905fdc410bdfce' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' '--cfg' 'freebsd11' '--cfg' 'libc_priv_mod_use' '--cfg' 'libc_union' '--cfg' 'libc_const_size_of' '--cfg' 'libc_align' '--cfg' 'libc_int128' '--cfg' 'libc_core_cvoid' '--cfg' 'libc_packedN' '--cfg' 'libc_cfg_target_vendor' '--cfg' 'libc_non_exhaustive' '--cfg' 'libc_long_array' '--cfg' 'libc_ptr_addr_of' '--cfg' 'libc_underscore_const_names' '--cfg' 'libc_const_extern_fn' '--check-cfg' 'cfg(emscripten_new_stat_abi)' '--check-cfg' 'cfg(espidf_time64)' '--check-cfg' 'cfg(freebsd10)' '--check-cfg' 'cfg(freebsd11)' '--check-cfg' 'cfg(freebsd12)' '--check-cfg' 'cfg(freebsd13)' '--check-cfg' 'cfg(freebsd14)' '--check-cfg' 'cfg(freebsd15)' '--check-cfg' 'cfg(libc_align)' '--check-cfg' 'cfg(libc_cfg_target_vendor)' '--check-cfg' 'cfg(libc_const_extern_fn)' '--check-cfg' 'cfg(libc_const_extern_fn_unstable)' '--check-cfg' 'cfg(libc_const_size_of)' '--check-cfg' 'cfg(libc_core_cvoid)' '--check-cfg' 'cfg(libc_deny_warnings)' '--check-cfg' 'cfg(libc_int128)' '--check-cfg' 'cfg(libc_long_array)' '--check-cfg' 'cfg(libc_non_exhaustive)' '--check-cfg' 'cfg(libc_packedN)' '--check-cfg' 'cfg(libc_priv_mod_use)' '--check-cfg' 'cfg(libc_ptr_addr_of)' '--check-cfg' 'cfg(libc_thread_local)' '--check-cfg' 'cfg(libc_underscore_const_names)' '--check-cfg' 'cfg(libc_union)' '--check-cfg' 'cfg(target_os,values("switch","aix","ohos","hurd","visionos"))' '--check-cfg' 'cfg(target_env,values("illumos","wasi","aix","ohos"))' '--check-cfg' 'cfg(target_arch,values("loongarch64","mips32r6","mips64r6","csky"))' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.155/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a7905fdc410bdfce"
## script = """
## FROM scratch AS out-a7905fdc410bdfce
## COPY --from=dep-l-libc-0.2.155-a7905fdc410bdfce /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a7905fdc410bdfce* /"""

FROM scratch AS cratesio-ppv-lite86-0.2.17
ADD --chmod=0664 --checksum=sha256:5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de \
  https://static.crates.io/crates/ppv-lite86/ppv-lite86-0.2.17.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-ppv-lite86-0.2.17-af198cb5433f3d0c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-ppv-lite86-0.2.17,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="ppv_lite86" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17/Cargo.toml" \
        CARGO_PKG_AUTHORS="The CryptoCorrosion Contributors" \
        CARGO_PKG_DESCRIPTION="Implementation of the crypto-simd API for x86" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="ppv-lite86" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/cryptocorrosion/cryptocorrosion" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.17" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="17" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'ppv_lite86' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="simd"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "no_simd", "simd", "std"))' '-C' 'metadata=aaf213b1c0f9fc76' '-C' 'extra-filename=-af198cb5433f3d0c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-af198cb5433f3d0c
COPY --from=dep-l-ppv-lite86-0.2.17-af198cb5433f3d0c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-af198cb5433f3d0c* /

## this = "af198cb5433f3d0c"
## writes = [
##     "deps/ppv_lite86-af198cb5433f3d0c.d",
##     "deps/libppv_lite86-af198cb5433f3d0c.rmeta",
##     "deps/libppv_lite86-af198cb5433f3d0c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/ppv_lite86-af198cb5433f3d0c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-ppv-lite86-0.2.17"
## script = '''
## FROM scratch AS cratesio-ppv-lite86-0.2.17
## ADD --chmod=0664 --checksum=sha256:5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de \
##   https://static.crates.io/crates/ppv-lite86/ppv-lite86-0.2.17.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-ppv-lite86-0.2.17-af198cb5433f3d0c"
## script = '''
## FROM rust-base AS dep-l-ppv-lite86-0.2.17-af198cb5433f3d0c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-ppv-lite86-0.2.17,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="ppv_lite86" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The CryptoCorrosion Contributors" \
##         CARGO_PKG_DESCRIPTION="Implementation of the crypto-simd API for x86" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="ppv-lite86" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/cryptocorrosion/cryptocorrosion" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.17" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="17" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'ppv_lite86' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="simd"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "no_simd", "simd", "std"))' '-C' 'metadata=aaf213b1c0f9fc76' '-C' 'extra-filename=-af198cb5433f3d0c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ppv-lite86-0.2.17/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-af198cb5433f3d0c"
## script = """
## FROM scratch AS out-af198cb5433f3d0c
## COPY --from=dep-l-ppv-lite86-0.2.17-af198cb5433f3d0c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-af198cb5433f3d0c* /"""

FROM scratch AS cratesio-getrandom-0.2.15
ADD --chmod=0664 --checksum=sha256:c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7 \
  https://static.crates.io/crates/getrandom/getrandom-0.2.15.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-getrandom-0.2.15-84473f2ddfbb434a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-getrandom-0.2.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="getrandom" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rand Project Developers" \
        CARGO_PKG_DESCRIPTION="A small cross-platform library for retrieving random data from system source" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="getrandom" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-random/getrandom" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.15" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="15" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'getrandom' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "custom", "js", "js-sys", "linux_disable_fallback", "rdrand", "rustc-dep-of-std", "std", "test-in-browser", "wasm-bindgen"))' '-C' 'metadata=b85a1c392b28b82e' '-C' 'extra-filename=-84473f2ddfbb434a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-84473f2ddfbb434a
COPY --from=dep-l-getrandom-0.2.15-84473f2ddfbb434a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-84473f2ddfbb434a* /

## this = "84473f2ddfbb434a"
## deps = [
##     "da34da6838abd7f1",
##     "a7905fdc410bdfce",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "libc-a7905fdc410bdfce",
## ]
## writes = [
##     "deps/getrandom-84473f2ddfbb434a.d",
##     "deps/libgetrandom-84473f2ddfbb434a.rmeta",
##     "deps/libgetrandom-84473f2ddfbb434a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/getrandom-84473f2ddfbb434a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-getrandom-0.2.15"
## script = '''
## FROM scratch AS cratesio-getrandom-0.2.15
## ADD --chmod=0664 --checksum=sha256:c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7 \
##   https://static.crates.io/crates/getrandom/getrandom-0.2.15.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-getrandom-0.2.15-84473f2ddfbb434a"
## script = '''
## FROM rust-base AS dep-l-getrandom-0.2.15-84473f2ddfbb434a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-getrandom-0.2.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="getrandom" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rand Project Developers" \
##         CARGO_PKG_DESCRIPTION="A small cross-platform library for retrieving random data from system source" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="getrandom" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-random/getrandom" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.15" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="15" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'getrandom' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "custom", "js", "js-sys", "linux_disable_fallback", "rdrand", "rustc-dep-of-std", "std", "test-in-browser", "wasm-bindgen"))' '-C' 'metadata=b85a1c392b28b82e' '-C' 'extra-filename=-84473f2ddfbb434a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/getrandom-0.2.15/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-84473f2ddfbb434a"
## script = """
## FROM scratch AS out-84473f2ddfbb434a
## COPY --from=dep-l-getrandom-0.2.15-84473f2ddfbb434a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-84473f2ddfbb434a* /"""

FROM scratch AS cratesio-rand_core-0.6.4
ADD --chmod=0664 --checksum=sha256:ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c \
  https://static.crates.io/crates/rand_core/rand_core-0.6.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rand_core-0.6.4-434e8a9dd58e4456
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rand_core-0.6.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4 \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rand_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rand Project Developers:The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Core random number generator traits and tools for implementation.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-random.github.io/book" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rand_core" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-random/rand" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.6.4" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rand_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="getrandom"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "getrandom", "serde", "serde1", "std"))' '-C' 'metadata=3387514d18f28e83' '-C' 'extra-filename=-434e8a9dd58e4456' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'getrandom=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-434e8a9dd58e4456
COPY --from=dep-l-rand_core-0.6.4-434e8a9dd58e4456 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-434e8a9dd58e4456* /

## this = "434e8a9dd58e4456"
## deps = [
##     "84473f2ddfbb434a",
##     "da34da6838abd7f1",
##     "a7905fdc410bdfce",
## ]
## short_externs = [
##     "getrandom-84473f2ddfbb434a",
##     "cfg_if-da34da6838abd7f1",
##     "libc-a7905fdc410bdfce",
## ]
## writes = [
##     "deps/rand_core-434e8a9dd58e4456.d",
##     "deps/librand_core-434e8a9dd58e4456.rmeta",
##     "deps/librand_core-434e8a9dd58e4456.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rand_core-434e8a9dd58e4456.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/lib.rs","byte_start":1522,"byte_end":1529,"line_start":38,"line_end":38,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/lib.rs:38:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/error.rs","byte_start":2073,"byte_end":2080,"line_start":50,"line_end":50,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/error.rs:50:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/error.rs","byte_start":2524,"byte_end":2531,"line_start":64,"line_end":64,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/error.rs:64:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/error.rs","byte_start":2916,"byte_end":2923,"line_start":75,"line_end":75,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/error.rs:75:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/os.rs","byte_start":1716,"byte_end":1723,"line_start":46,"line_end":46,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"getrandom\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/os.rs:46:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"getrandom\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/lib.rs","byte_start":17130,"byte_end":17137,"line_start":411,"line_end":411,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"getrandom\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/lib.rs:411:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"getrandom\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rand_core-0.6.4"
## script = '''
## FROM scratch AS cratesio-rand_core-0.6.4
## ADD --chmod=0664 --checksum=sha256:ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c \
##   https://static.crates.io/crates/rand_core/rand_core-0.6.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rand_core-0.6.4-434e8a9dd58e4456"
## script = '''
## FROM rust-base AS dep-l-rand_core-0.6.4-434e8a9dd58e4456
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rand_core-0.6.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4 \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rand_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rand Project Developers:The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Core random number generator traits and tools for implementation.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-random.github.io/book" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rand_core" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-random/rand" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.6.4" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rand_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="getrandom"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "getrandom", "serde", "serde1", "std"))' '-C' 'metadata=3387514d18f28e83' '-C' 'extra-filename=-434e8a9dd58e4456' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'getrandom=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_core-0.6.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-434e8a9dd58e4456"
## script = """
## FROM scratch AS out-434e8a9dd58e4456
## COPY --from=dep-l-rand_core-0.6.4-434e8a9dd58e4456 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-434e8a9dd58e4456* /"""

FROM scratch AS cratesio-rand_chacha-0.3.1
ADD --chmod=0664 --checksum=sha256:e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88 \
  https://static.crates.io/crates/rand_chacha/rand_chacha-0.3.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rand_chacha-0.3.1-8e2f025dcc32e9af
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rand_chacha-0.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1 \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rand_chacha" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rand Project Developers:The Rust Project Developers:The CryptoCorrosion Contributors" \
        CARGO_PKG_DESCRIPTION="ChaCha random number generator\n" \
        CARGO_PKG_HOMEPAGE="https://rust-random.github.io/book" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rand_chacha" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-random/rand" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rand_chacha' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "serde1", "simd", "std"))' '-C' 'metadata=f3ab709609c9e3db' '-C' 'extra-filename=-8e2f025dcc32e9af' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ppv_lite86=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta' '--extern' 'rand_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8e2f025dcc32e9af
COPY --from=dep-l-rand_chacha-0.3.1-8e2f025dcc32e9af /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-8e2f025dcc32e9af* /

## this = "8e2f025dcc32e9af"
## deps = [
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "da34da6838abd7f1",
##     "a7905fdc410bdfce",
## ]
## short_externs = [
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "cfg_if-da34da6838abd7f1",
##     "libc-a7905fdc410bdfce",
## ]
## writes = [
##     "deps/rand_chacha-8e2f025dcc32e9af.d",
##     "deps/librand_chacha-8e2f025dcc32e9af.rmeta",
##     "deps/librand_chacha-8e2f025dcc32e9af.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rand_chacha-8e2f025dcc32e9af.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rand_chacha-0.3.1"
## script = '''
## FROM scratch AS cratesio-rand_chacha-0.3.1
## ADD --chmod=0664 --checksum=sha256:e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88 \
##   https://static.crates.io/crates/rand_chacha/rand_chacha-0.3.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rand_chacha-0.3.1-8e2f025dcc32e9af"
## script = '''
## FROM rust-base AS dep-l-rand_chacha-0.3.1-8e2f025dcc32e9af
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rand_chacha-0.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1 \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rand_chacha" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rand Project Developers:The Rust Project Developers:The CryptoCorrosion Contributors" \
##         CARGO_PKG_DESCRIPTION="ChaCha random number generator\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-random.github.io/book" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rand_chacha" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-random/rand" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rand_chacha' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "serde1", "simd", "std"))' '-C' 'metadata=f3ab709609c9e3db' '-C' 'extra-filename=-8e2f025dcc32e9af' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ppv_lite86=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta' '--extern' 'rand_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand_chacha-0.3.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8e2f025dcc32e9af"
## script = """
## FROM scratch AS out-8e2f025dcc32e9af
## COPY --from=dep-l-rand_chacha-0.3.1-8e2f025dcc32e9af /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-8e2f025dcc32e9af* /"""

FROM scratch AS cratesio-rand-0.8.5
ADD --chmod=0664 --checksum=sha256:34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404 \
  https://static.crates.io/crates/rand/rand-0.8.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rand-0.8.5-5161209caf71d483
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rand-0.8.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5 \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rand" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rand Project Developers:The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Random number generators and other randomness functionality.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-random.github.io/book" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rand" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-random/rand" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.8.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rand' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="getrandom"' '--cfg' 'feature="libc"' '--cfg' 'feature="rand_chacha"' '--cfg' 'feature="std"' '--cfg' 'feature="std_rng"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "getrandom", "libc", "log", "min_const_gen", "nightly", "packed_simd", "rand_chacha", "serde", "serde1", "simd_support", "small_rng", "std", "std_rng"))' '-C' 'metadata=26b2e4280c900bcf' '-C' 'extra-filename=-5161209caf71d483' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'rand_chacha=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta' '--extern' 'rand_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-5161209caf71d483
COPY --from=dep-l-rand-0.8.5-5161209caf71d483 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-5161209caf71d483* /

## this = "5161209caf71d483"
## deps = [
##     "a7905fdc410bdfce",
##     "8e2f025dcc32e9af",
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "da34da6838abd7f1",
## ]
## short_externs = [
##     "libc-a7905fdc410bdfce",
##     "rand_chacha-8e2f025dcc32e9af",
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "cfg_if-da34da6838abd7f1",
## ]
## writes = [
##     "deps/rand-5161209caf71d483.d",
##     "deps/librand-5161209caf71d483.rmeta",
##     "deps/librand-5161209caf71d483.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rand-5161209caf71d483.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/lib.rs","byte_start":1937,"byte_end":1944,"line_start":53,"line_end":53,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/lib.rs:53:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/lib.rs","byte_start":5646,"byte_end":5653,"line_start":181,"line_end":181,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", feature = \"std_rng\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/lib.rs:181:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", feature = \"std_rng\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/mod.rs","byte_start":4796,"byte_end":4803,"line_start":116,"line_end":116,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/mod.rs:116:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `features`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/distribution.rs","byte_start":5194,"byte_end":5214,"line_start":162,"line_end":162,"column_start":7,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(features = \"nightly\")]","highlight_start":7,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name and value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/distribution.rs","byte_start":5194,"byte_end":5202,"line_start":162,"line_end":162,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(features = \"nightly\")]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":"feature","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `features`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/distribution.rs:162:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(features = \"nightly\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a config with a similar name and value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m#[cfg(\u001b[0m\u001b[0m\u001b[38;5;9mfeatures\u001b[0m\u001b[0m = \"nightly\")]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m#[cfg(\u001b[0m\u001b[0m\u001b[38;5;10mfeature\u001b[0m\u001b[0m = \"nightly\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `std`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8082,"byte_end":8085,"line_start":235,"line_end":235,"column_start":11,"column_end":14,"is_primary":true,"text":[{"text":"#[cfg(not(std))]","highlight_start":11,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(std)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(std)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8082,"byte_end":8085,"line_start":235,"line_end":235,"column_start":11,"column_end":14,"is_primary":true,"text":[{"text":"#[cfg(not(std))]","highlight_start":11,"highlight_end":14}],"label":null,"suggested_replacement":"feature = \"std\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs:235:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(std))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"std\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(std)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(std)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `std`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9274,"byte_end":9277,"line_start":291,"line_end":291,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        #[cfg(not(std))]","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":10987,"byte_end":11015,"line_start":359,"line_end":359,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"scalar_float_impl!(f32, u32);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"scalar_float_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9190,"byte_end":9220,"line_start":289,"line_end":289,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! scalar_float_impl {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(std)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(std)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9274,"byte_end":9277,"line_start":291,"line_end":291,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        #[cfg(not(std))]","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":"feature = \"std\"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":10987,"byte_end":11015,"line_start":359,"line_end":359,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"scalar_float_impl!(f32, u32);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"scalar_float_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9190,"byte_end":9220,"line_start":289,"line_end":289,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! scalar_float_impl {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs:291:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(std))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"std\"`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mscalar_float_impl!(f32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(std)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(std)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `std`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9274,"byte_end":9277,"line_start":291,"line_end":291,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        #[cfg(not(std))]","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":11017,"byte_end":11045,"line_start":360,"line_end":360,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"scalar_float_impl!(f64, u64);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"scalar_float_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9190,"byte_end":9220,"line_start":289,"line_end":289,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! scalar_float_impl {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(std)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(std)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9274,"byte_end":9277,"line_start":291,"line_end":291,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        #[cfg(not(std))]","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":"feature = \"std\"","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":11017,"byte_end":11045,"line_start":360,"line_end":360,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"scalar_float_impl!(f64, u64);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"scalar_float_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":9190,"byte_end":9220,"line_start":289,"line_end":289,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! scalar_float_impl {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs:291:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(std))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"std\"`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mscalar_float_impl!(f64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(std)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(std)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `scalar_float_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/weighted_index.rs","byte_start":3297,"byte_end":3304,"line_start":80,"line_end":80,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/weighted_index.rs:80:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/weighted_index.rs","byte_start":15232,"byte_end":15239,"line_start":429,"line_end":429,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/weighted_index.rs:429:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rng.rs","byte_start":12752,"byte_end":12759,"line_start":395,"line_end":395,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"min_const_gen\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rng.rs:395:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m395\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"min_const_gen\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/mod.rs","byte_start":5102,"byte_end":5109,"line_start":99,"line_end":99,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/mod.rs:99:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/mod.rs","byte_start":5862,"byte_end":5869,"line_start":118,"line_end":118,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"getrandom\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/mod.rs:118:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"getrandom\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/std.rs","byte_start":1360,"byte_end":1367,"line_start":32,"line_end":32,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std_rng\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/std.rs:32:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std_rng\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/thread.rs","byte_start":2732,"byte_end":2739,"line_start":60,"line_end":60,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", feature = \"std_rng\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/thread.rs:60:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", feature = \"std_rng\"))))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/thread.rs","byte_start":3856,"byte_end":3863,"line_start":87,"line_end":87,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", feature = \"std_rng\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/rngs/thread.rs:87:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", feature = \"std_rng\"))))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":986,"byte_end":993,"line_start":29,"line_end":29,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:29:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":22557,"byte_end":22564,"line_start":623,"line_end":623,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:623:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/index.rs","byte_start":8714,"byte_end":8721,"line_start":276,"line_end":276,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/index.rs:276:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":3739,"byte_end":3746,"line_start":114,"line_end":114,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:114:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":4950,"byte_end":4957,"line_start":142,"line_end":142,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:142:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":6062,"byte_end":6069,"line_start":170,"line_end":170,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:170:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":8300,"byte_end":8307,"line_start":219,"line_end":219,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:219:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs","byte_start":17539,"byte_end":17546,"line_start":465,"line_end":465,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/seq/mod.rs:465:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"trait `Float` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8194,"byte_end":8199,"line_start":238,"line_end":238,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"pub(crate) trait Float: Sized {","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `Float` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs:238:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Float: Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"associated items `lanes`, `extract`, and `replace` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8399,"byte_end":8410,"line_start":245,"line_end":245,"column_start":18,"column_end":29,"is_primary":false,"text":[{"text":"pub(crate) trait FloatAsSIMD: Sized {","highlight_start":18,"highlight_end":29}],"label":"associated items in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8449,"byte_end":8454,"line_start":247,"line_end":247,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn lanes() -> usize {","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8593,"byte_end":8600,"line_start":255,"line_end":255,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn extract(self, index: usize) -> Self {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8715,"byte_end":8722,"line_start":260,"line_end":260,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn replace(self, index: usize, new_value: Self) -> Self {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `lanes`, `extract`, and `replace` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs:247:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait FloatAsSIMD: Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[inline(always)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn lanes() -> usize {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn extract(self, index: usize) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn replace(self, index: usize, new_value: Self) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"method `all` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8850,"byte_end":8860,"line_start":266,"line_end":266,"column_start":18,"column_end":28,"is_primary":false,"text":[{"text":"pub(crate) trait BoolAsSIMD: Sized {","highlight_start":18,"highlight_end":28}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs","byte_start":8903,"byte_end":8906,"line_start":268,"line_end":268,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn all(self) -> bool;","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `all` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/distributions/utils.rs:268:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait BoolAsSIMD: Sized {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn any(self) -> bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn all(self) -> bool;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"26 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 26 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rand-0.8.5"
## script = '''
## FROM scratch AS cratesio-rand-0.8.5
## ADD --chmod=0664 --checksum=sha256:34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404 \
##   https://static.crates.io/crates/rand/rand-0.8.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rand-0.8.5-5161209caf71d483"
## script = '''
## FROM rust-base AS dep-l-rand-0.8.5-5161209caf71d483
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rand-0.8.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5 \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rand" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rand Project Developers:The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Random number generators and other randomness functionality.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-random.github.io/book" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rand" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-random/rand" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.8.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rand' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="getrandom"' '--cfg' 'feature="libc"' '--cfg' 'feature="rand_chacha"' '--cfg' 'feature="std"' '--cfg' 'feature="std_rng"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "getrandom", "libc", "log", "min_const_gen", "nightly", "packed_simd", "rand_chacha", "serde", "serde1", "simd_support", "small_rng", "std", "std_rng"))' '-C' 'metadata=26b2e4280c900bcf' '-C' 'extra-filename=-5161209caf71d483' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'rand_chacha=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta' '--extern' 'rand_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rand-0.8.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-5161209caf71d483"
## script = """
## FROM scratch AS out-5161209caf71d483
## COPY --from=dep-l-rand-0.8.5-5161209caf71d483 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-5161209caf71d483* /"""

FROM scratch AS cratesio-spin-0.9.8
ADD --chmod=0664 --checksum=sha256:6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67 \
  https://static.crates.io/crates/spin/spin-0.9.8.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-spin-0.9.8-126f99f44d356e93
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-spin-0.9.8,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="spin" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8/Cargo.toml" \
        CARGO_PKG_AUTHORS="Mathijs van de Nes <git@mathijs.vd-nes.nl>:John Ericson <git@JohnEricson.me>:Joshua Barretto <joshua.s.barretto@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Spin-based synchronization primitives" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="spin" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/mvdnes/spin-rs.git" \
        CARGO_PKG_RUST_VERSION="1.38" \
        CARGO_PKG_VERSION="0.9.8" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="8" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'spin' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="once"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("barrier", "default", "fair_mutex", "lazy", "lock_api", "lock_api_crate", "mutex", "once", "portable-atomic", "portable_atomic", "rwlock", "spin_mutex", "std", "ticket_mutex", "use_ticket_mutex"))' '-C' 'metadata=60813e2ad9e2eb14' '-C' 'extra-filename=-126f99f44d356e93' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-126f99f44d356e93
COPY --from=dep-l-spin-0.9.8-126f99f44d356e93 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-126f99f44d356e93* /

## this = "126f99f44d356e93"
## writes = [
##     "deps/spin-126f99f44d356e93.d",
##     "deps/libspin-126f99f44d356e93.rmeta",
##     "deps/libspin-126f99f44d356e93.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/spin-126f99f44d356e93.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-spin-0.9.8"
## script = '''
## FROM scratch AS cratesio-spin-0.9.8
## ADD --chmod=0664 --checksum=sha256:6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67 \
##   https://static.crates.io/crates/spin/spin-0.9.8.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-spin-0.9.8-126f99f44d356e93"
## script = '''
## FROM rust-base AS dep-l-spin-0.9.8-126f99f44d356e93
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-spin-0.9.8,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="spin" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Mathijs van de Nes <git@mathijs.vd-nes.nl>:John Ericson <git@JohnEricson.me>:Joshua Barretto <joshua.s.barretto@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Spin-based synchronization primitives" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="spin" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/mvdnes/spin-rs.git" \
##         CARGO_PKG_RUST_VERSION="1.38" \
##         CARGO_PKG_VERSION="0.9.8" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="8" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'spin' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="once"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("barrier", "default", "fair_mutex", "lazy", "lock_api", "lock_api_crate", "mutex", "once", "portable-atomic", "portable_atomic", "rwlock", "spin_mutex", "std", "ticket_mutex", "use_ticket_mutex"))' '-C' 'metadata=60813e2ad9e2eb14' '-C' 'extra-filename=-126f99f44d356e93' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/spin-0.9.8/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-126f99f44d356e93"
## script = """
## FROM scratch AS out-126f99f44d356e93
## COPY --from=dep-l-spin-0.9.8-126f99f44d356e93 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-126f99f44d356e93* /"""

FROM scratch AS cratesio-untrusted-0.9.0
ADD --chmod=0664 --checksum=sha256:8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1 \
  https://static.crates.io/crates/untrusted/untrusted-0.9.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-untrusted-0.9.0-2cf0189e0a6f5785
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-untrusted-0.9.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="untrusted" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Brian Smith <brian@briansmith.org>" \
        CARGO_PKG_DESCRIPTION="Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="ISC" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="untrusted" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/briansmith/untrusted" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.9.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'untrusted' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=e184a6c513ada7de' '-C' 'extra-filename=-2cf0189e0a6f5785' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-2cf0189e0a6f5785
COPY --from=dep-l-untrusted-0.9.0-2cf0189e0a6f5785 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-2cf0189e0a6f5785* /

## this = "2cf0189e0a6f5785"
## writes = [
##     "deps/untrusted-2cf0189e0a6f5785.d",
##     "deps/libuntrusted-2cf0189e0a6f5785.rmeta",
##     "deps/libuntrusted-2cf0189e0a6f5785.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/untrusted-2cf0189e0a6f5785.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-untrusted-0.9.0"
## script = '''
## FROM scratch AS cratesio-untrusted-0.9.0
## ADD --chmod=0664 --checksum=sha256:8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1 \
##   https://static.crates.io/crates/untrusted/untrusted-0.9.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-untrusted-0.9.0-2cf0189e0a6f5785"
## script = '''
## FROM rust-base AS dep-l-untrusted-0.9.0-2cf0189e0a6f5785
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-untrusted-0.9.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="untrusted" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Brian Smith <brian@briansmith.org>" \
##         CARGO_PKG_DESCRIPTION="Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="ISC" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="untrusted" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/briansmith/untrusted" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.9.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'untrusted' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=e184a6c513ada7de' '-C' 'extra-filename=-2cf0189e0a6f5785' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/untrusted-0.9.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-2cf0189e0a6f5785"
## script = """
## FROM scratch AS out-2cf0189e0a6f5785
## COPY --from=dep-l-untrusted-0.9.0-2cf0189e0a6f5785 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-2cf0189e0a6f5785* /"""

FROM scratch AS cratesio-ring-0.17.8
ADD --chmod=0664 --checksum=sha256:c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d \
  https://static.crates.io/crates/ring/ring-0.17.8.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-ring-0.17.8-63b94b1c8b4a1192
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-ring-0.17.8,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8 \
  --mount=from=crate_out-d0e0a17ed08cc243,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="ring" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8/Cargo.toml" \
        CARGO_PKG_AUTHORS="Brian Smith <brian@briansmith.org>" \
        CARGO_PKG_DESCRIPTION="Safe, fast, small crypto using Rust." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE= \
        CARGO_PKG_LICENSE_FILE="LICENSE" \
        CARGO_PKG_NAME="ring" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/briansmith/ring" \
        CARGO_PKG_RUST_VERSION="1.61.0" \
        CARGO_PKG_VERSION="0.17.8" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="17" \
        CARGO_PKG_VERSION_PATCH="8" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out" \
        CARGOGREEN=1 \
        RING_CORE_PREFIX="ring_core_0_17_8_" \
      rustc '--crate-name' 'ring' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="dev_urandom_fallback"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dev_urandom_fallback", "less-safe-getrandom-custom-or-rdrand", "slow_tests", "std", "test_logging", "unstable-testing-arm-no-hw", "unstable-testing-arm-no-neon", "wasm32_unknown_unknown_js"))' '-C' 'metadata=c2f277f9f4150513' '-C' 'extra-filename=-63b94b1c8b4a1192' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'getrandom=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta' '--extern' 'spin=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta' '--extern' 'untrusted=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' '-l' 'static=ring_core_0_17_8_' '-l' 'static=ring_core_0_17_8_test' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-63b94b1c8b4a1192
COPY --from=dep-l-ring-0.17.8-63b94b1c8b4a1192 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-63b94b1c8b4a1192* /

## this = "63b94b1c8b4a1192"
## deps = [
##     "da34da6838abd7f1",
##     "84473f2ddfbb434a",
##     "a7905fdc410bdfce",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "getrandom-84473f2ddfbb434a",
##     "libc-a7905fdc410bdfce",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
## ]
## writes = [
##     "deps/ring-63b94b1c8b4a1192.d",
##     "deps/libring-63b94b1c8b4a1192.rmeta",
##     "deps/libring-63b94b1c8b4a1192.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/ring-63b94b1c8b4a1192.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `pregenerate_asm_only`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8/src/lib.rs","byte_start":2343,"byte_end":2363,"line_start":47,"line_end":47,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"#![cfg(not(pregenerate_asm_only))]","highlight_start":12,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(pregenerate_asm_only)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(pregenerate_asm_only)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `pregenerate_asm_only`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8/src/lib.rs:47:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg(not(pregenerate_asm_only))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(pregenerate_asm_only)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(pregenerate_asm_only)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-ring-0.17.8"
## script = '''
## FROM scratch AS cratesio-ring-0.17.8
## ADD --chmod=0664 --checksum=sha256:c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d \
##   https://static.crates.io/crates/ring/ring-0.17.8.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-ring-0.17.8-63b94b1c8b4a1192"
## script = '''
## FROM rust-base AS dep-l-ring-0.17.8-63b94b1c8b4a1192
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-ring-0.17.8,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8 \
##   --mount=from=crate_out-d0e0a17ed08cc243,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="ring" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Brian Smith <brian@briansmith.org>" \
##         CARGO_PKG_DESCRIPTION="Safe, fast, small crypto using Rust." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE= \
##         CARGO_PKG_LICENSE_FILE="LICENSE" \
##         CARGO_PKG_NAME="ring" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/briansmith/ring" \
##         CARGO_PKG_RUST_VERSION="1.61.0" \
##         CARGO_PKG_VERSION="0.17.8" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="17" \
##         CARGO_PKG_VERSION_PATCH="8" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out" \
##         CARGOGREEN=1 \
##         RING_CORE_PREFIX="ring_core_0_17_8_" \
##       rustc '--crate-name' 'ring' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="dev_urandom_fallback"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dev_urandom_fallback", "less-safe-getrandom-custom-or-rdrand", "slow_tests", "std", "test_logging", "unstable-testing-arm-no-hw", "unstable-testing-arm-no-neon", "wasm32_unknown_unknown_js"))' '-C' 'metadata=c2f277f9f4150513' '-C' 'extra-filename=-63b94b1c8b4a1192' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'getrandom=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta' '--extern' 'spin=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta' '--extern' 'untrusted=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' '-l' 'static=ring_core_0_17_8_' '-l' 'static=ring_core_0_17_8_test' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ring-0.17.8/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-63b94b1c8b4a1192"
## script = """
## FROM scratch AS out-63b94b1c8b4a1192
## COPY --from=dep-l-ring-0.17.8-63b94b1c8b4a1192 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-63b94b1c8b4a1192* /"""

FROM scratch AS cratesio-log-0.4.21
ADD --chmod=0664 --checksum=sha256:90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c \
  https://static.crates.io/crates/log/log-0.4.21.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-log-0.4.21-b81976489825f26e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-log-0.4.21,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="log" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="A lightweight logging facade for Rust\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="log" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/log" \
        CARGO_PKG_RUST_VERSION="1.60.0" \
        CARGO_PKG_VERSION="0.4.21" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="21" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'log' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("kv", "kv_serde", "kv_std", "kv_sval", "kv_unstable", "kv_unstable_serde", "kv_unstable_std", "kv_unstable_sval", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "serde", "std", "sval", "sval_ref", "value-bag"))' '-C' 'metadata=e560afee748dde6e' '-C' 'extra-filename=-b81976489825f26e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b81976489825f26e
COPY --from=dep-l-log-0.4.21-b81976489825f26e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b81976489825f26e* /

## this = "b81976489825f26e"
## writes = [
##     "deps/log-b81976489825f26e.d",
##     "deps/liblog-b81976489825f26e.rmeta",
##     "deps/liblog-b81976489825f26e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/log-b81976489825f26e.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustbuild`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/src/lib.rs","byte_start":12903,"byte_end":12912,"line_start":342,"line_end":342,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(rustbuild, feature(staged_api, rustc_private))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustbuild`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/src/lib.rs:342:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustbuild, feature(staged_api, rustc_private))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustbuild`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/src/lib.rs","byte_start":12963,"byte_end":12972,"line_start":343,"line_end":343,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustbuild`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/src/lib.rs:343:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-log-0.4.21"
## script = '''
## FROM scratch AS cratesio-log-0.4.21
## ADD --chmod=0664 --checksum=sha256:90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c \
##   https://static.crates.io/crates/log/log-0.4.21.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-log-0.4.21-b81976489825f26e"
## script = '''
## FROM rust-base AS dep-l-log-0.4.21-b81976489825f26e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-log-0.4.21,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="log" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="A lightweight logging facade for Rust\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="log" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/log" \
##         CARGO_PKG_RUST_VERSION="1.60.0" \
##         CARGO_PKG_VERSION="0.4.21" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="21" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'log' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("kv", "kv_serde", "kv_std", "kv_sval", "kv_unstable", "kv_unstable_serde", "kv_unstable_std", "kv_unstable_sval", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "serde", "std", "sval", "sval_ref", "value-bag"))' '-C' 'metadata=e560afee748dde6e' '-C' 'extra-filename=-b81976489825f26e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.21/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b81976489825f26e"
## script = """
## FROM scratch AS out-b81976489825f26e
## COPY --from=dep-l-log-0.4.21-b81976489825f26e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b81976489825f26e* /"""

FROM scratch AS cratesio-rustls-webpki-0.101.7
ADD --chmod=0664 --checksum=sha256:8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765 \
  https://static.crates.io/crates/rustls-webpki/rustls-webpki-0.101.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rustls-webpki-0.101.7-ebc0ad471b520844
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rustls-webpki-0.101.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7 \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="webpki" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Web PKI X.509 Certificate Verification." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="ISC" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustls-webpki" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rustls/webpki" \
        CARGO_PKG_RUST_VERSION="1.61" \
        CARGO_PKG_VERSION="0.101.7" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="101" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'webpki' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=984392ac1410f7fd' '-C' 'extra-filename=-ebc0ad471b520844' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'untrusted=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ebc0ad471b520844
COPY --from=dep-l-rustls-webpki-0.101.7-ebc0ad471b520844 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-ebc0ad471b520844* /

## this = "ebc0ad471b520844"
## deps = [
##     "63b94b1c8b4a1192",
##     "da34da6838abd7f1",
##     "84473f2ddfbb434a",
##     "a7905fdc410bdfce",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
## ]
## short_externs = [
##     "ring-63b94b1c8b4a1192",
##     "cfg_if-da34da6838abd7f1",
##     "getrandom-84473f2ddfbb434a",
##     "libc-a7905fdc410bdfce",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
## ]
## writes = [
##     "deps/webpki-ebc0ad471b520844.d",
##     "deps/libwebpki-ebc0ad471b520844.rmeta",
##     "deps/libwebpki-ebc0ad471b520844.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/webpki-ebc0ad471b520844.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/subject_name/name.rs","byte_start":3083,"byte_end":3097,"line_start":67,"line_end":67,"column_start":42,"column_end":56,"is_primary":true,"text":[{"text":"    fn from(dns_name: DnsNameRef<'a>) -> SubjectNameRef {","highlight_start":42,"highlight_end":56}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/subject_name/name.rs","byte_start":2992,"byte_end":2994,"line_start":66,"line_end":66,"column_start":6,"column_end":8,"is_primary":false,"text":[{"text":"impl<'a> From<DnsNameRef<'a>> for SubjectNameRef<'a> {","highlight_start":6,"highlight_end":8}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/lib.rs","byte_start":1305,"byte_end":1313,"line_start":29,"line_end":29,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"#![deny(warnings, missing_docs, clippy::as_conversions)]","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(elided_named_lifetimes)]` implied by `#[warn(warnings)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/subject_name/name.rs:67:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<'a> From<DnsNameRef<'a>> for SubjectNameRef<'a> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(dns_name: DnsNameRef<'a>) -> SubjectNameRef {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/lib.rs:29:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![deny(warnings, missing_docs, clippy::as_conversions)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` implied by `#[warn(warnings)]`\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/subject_name/name.rs","byte_start":3259,"byte_end":3273,"line_start":73,"line_end":73,"column_start":41,"column_end":55,"is_primary":true,"text":[{"text":"    fn from(dns_name: IpAddrRef<'a>) -> SubjectNameRef {","highlight_start":41,"highlight_end":55}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/subject_name/name.rs","byte_start":3170,"byte_end":3172,"line_start":72,"line_end":72,"column_start":6,"column_end":8,"is_primary":false,"text":[{"text":"impl<'a> From<IpAddrRef<'a>> for SubjectNameRef<'a> {","highlight_start":6,"highlight_end":8}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/subject_name/name.rs:73:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<'a> From<IpAddrRef<'a>> for SubjectNameRef<'a> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(dns_name: IpAddrRef<'a>) -> SubjectNameRef {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustls-webpki-0.101.7"
## script = '''
## FROM scratch AS cratesio-rustls-webpki-0.101.7
## ADD --chmod=0664 --checksum=sha256:8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765 \
##   https://static.crates.io/crates/rustls-webpki/rustls-webpki-0.101.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rustls-webpki-0.101.7-ebc0ad471b520844"
## script = '''
## FROM rust-base AS dep-l-rustls-webpki-0.101.7-ebc0ad471b520844
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rustls-webpki-0.101.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7 \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="webpki" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Web PKI X.509 Certificate Verification." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="ISC" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustls-webpki" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rustls/webpki" \
##         CARGO_PKG_RUST_VERSION="1.61" \
##         CARGO_PKG_VERSION="0.101.7" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="101" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'webpki' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=984392ac1410f7fd' '-C' 'extra-filename=-ebc0ad471b520844' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'untrusted=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-webpki-0.101.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ebc0ad471b520844"
## script = """
## FROM scratch AS out-ebc0ad471b520844
## COPY --from=dep-l-rustls-webpki-0.101.7-ebc0ad471b520844 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-ebc0ad471b520844* /"""

FROM scratch AS cratesio-sct-0.7.1
ADD --chmod=0664 --checksum=sha256:da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414 \
  https://static.crates.io/crates/sct/sct-0.7.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-sct-0.7.1-95ad8239e8e57c79
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-sct-0.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1 \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="sct" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Joseph Birr-Pixton <jpixton@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Certificate transparency SCT verification library" \
        CARGO_PKG_HOMEPAGE="https://github.com/rustls/sct.rs" \
        CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="sct" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rustls/sct.rs" \
        CARGO_PKG_RUST_VERSION="1.61" \
        CARGO_PKG_VERSION="0.7.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'sct' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=8ac21fad3296b065' '-C' 'extra-filename=-95ad8239e8e57c79' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'untrusted=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-95ad8239e8e57c79
COPY --from=dep-l-sct-0.7.1-95ad8239e8e57c79 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-95ad8239e8e57c79* /

## this = "95ad8239e8e57c79"
## deps = [
##     "63b94b1c8b4a1192",
##     "da34da6838abd7f1",
##     "84473f2ddfbb434a",
##     "a7905fdc410bdfce",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
## ]
## short_externs = [
##     "ring-63b94b1c8b4a1192",
##     "cfg_if-da34da6838abd7f1",
##     "getrandom-84473f2ddfbb434a",
##     "libc-a7905fdc410bdfce",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
## ]
## writes = [
##     "deps/sct-95ad8239e8e57c79.d",
##     "deps/libsct-95ad8239e8e57c79.rmeta",
##     "deps/libsct-95ad8239e8e57c79.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/sct-95ad8239e8e57c79.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-sct-0.7.1"
## script = '''
## FROM scratch AS cratesio-sct-0.7.1
## ADD --chmod=0664 --checksum=sha256:da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414 \
##   https://static.crates.io/crates/sct/sct-0.7.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-sct-0.7.1-95ad8239e8e57c79"
## script = '''
## FROM rust-base AS dep-l-sct-0.7.1-95ad8239e8e57c79
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-sct-0.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1 \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="sct" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Joseph Birr-Pixton <jpixton@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Certificate transparency SCT verification library" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rustls/sct.rs" \
##         CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="sct" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rustls/sct.rs" \
##         CARGO_PKG_RUST_VERSION="1.61" \
##         CARGO_PKG_VERSION="0.7.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'sct' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=8ac21fad3296b065' '-C' 'extra-filename=-95ad8239e8e57c79' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'untrusted=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sct-0.7.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-95ad8239e8e57c79"
## script = """
## FROM scratch AS out-95ad8239e8e57c79
## COPY --from=dep-l-sct-0.7.1-95ad8239e8e57c79 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-95ad8239e8e57c79* /"""

FROM scratch AS cratesio-rustls-0.21.12
ADD --chmod=0664 --checksum=sha256:3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e \
  https://static.crates.io/crates/rustls/rustls-0.21.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rustls-0.21.12-264210de0fb2469c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rustls-0.21.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12 \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rustls" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Rustls is a modern TLS library written in Rust." \
        CARGO_PKG_HOMEPAGE="https://github.com/rustls/rustls" \
        CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustls" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rustls/rustls" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.21.12" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="21" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/rustls-f17518382360d3e4/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rustls' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="log"' '--cfg' 'feature="logging"' '--cfg' 'feature="tls12"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("dangerous_configuration", "default", "log", "logging", "quic", "read_buf", "rustversion", "secret_extraction", "tls12"))' '-C' 'metadata=6fd4e7026582907e' '-C' 'extra-filename=-264210de0fb2469c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'log=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'webpki=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta' '--extern' 'sct=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-264210de0fb2469c
COPY --from=dep-l-rustls-0.21.12-264210de0fb2469c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-264210de0fb2469c* /

## this = "264210de0fb2469c"
## deps = [
##     "b81976489825f26e",
##     "63b94b1c8b4a1192",
##     "da34da6838abd7f1",
##     "84473f2ddfbb434a",
##     "a7905fdc410bdfce",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
## ]
## short_externs = [
##     "log-b81976489825f26e",
##     "ring-63b94b1c8b4a1192",
##     "cfg_if-da34da6838abd7f1",
##     "getrandom-84473f2ddfbb434a",
##     "libc-a7905fdc410bdfce",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
## ]
## writes = [
##     "deps/rustls-264210de0fb2469c.d",
##     "deps/librustls-264210de0fb2469c.rmeta",
##     "deps/librustls-264210de0fb2469c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rustls-264210de0fb2469c.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":11425,"byte_end":11433,"line_start":268,"line_end":268,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"#![cfg_attr(not(any(read_buf, bench)), forbid(unstable_features))]","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":11425,"byte_end":11433,"line_start":268,"line_end":268,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"#![cfg_attr(not(any(read_buf, bench)), forbid(unstable_features))]","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs:268:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(any(read_buf, bench)), forbid(unstable_features))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bench`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":11435,"byte_end":11440,"line_start":268,"line_end":268,"column_start":31,"column_end":36,"is_primary":true,"text":[{"text":"#![cfg_attr(not(any(read_buf, bench)), forbid(unstable_features))]","highlight_start":31,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bench`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs:268:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(any(read_buf, bench)), forbid(unstable_features))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":12999,"byte_end":13007,"line_start":307,"line_end":307,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"#![cfg_attr(read_buf, feature(read_buf))]","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":12999,"byte_end":13007,"line_start":307,"line_end":307,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"#![cfg_attr(read_buf, feature(read_buf))]","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs:307:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(read_buf, feature(read_buf))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":13041,"byte_end":13049,"line_start":308,"line_end":308,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"#![cfg_attr(read_buf, feature(core_io_borrowed_buf))]","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":13041,"byte_end":13049,"line_start":308,"line_end":308,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"#![cfg_attr(read_buf, feature(core_io_borrowed_buf))]","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs:308:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(read_buf, feature(core_io_borrowed_buf))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bench`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":13095,"byte_end":13100,"line_start":309,"line_end":309,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"#![cfg_attr(bench, feature(test))]","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bench`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs:309:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m309\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(bench, feature(test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bench`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs","byte_start":13183,"byte_end":13188,"line_start":312,"line_end":312,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"#[cfg(bench)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bench`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs:312:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(bench)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/conn.rs","byte_start":7632,"byte_end":7640,"line_start":199,"line_end":199,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/conn.rs","byte_start":7632,"byte_end":7640,"line_start":199,"line_end":199,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/conn.rs:199:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(read_buf)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/stream.rs","byte_start":1997,"byte_end":2005,"line_start":68,"line_end":68,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/stream.rs","byte_start":1997,"byte_end":2005,"line_start":68,"line_end":68,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/stream.rs:68:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(read_buf)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/stream.rs","byte_start":5528,"byte_end":5536,"line_start":196,"line_end":196,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/stream.rs","byte_start":5528,"byte_end":5536,"line_start":196,"line_end":196,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/stream.rs:196:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(read_buf)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bench`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/tls12/prf.rs","byte_start":2260,"byte_end":2265,"line_start":69,"line_end":69,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"#[cfg(bench)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bench`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/tls12/prf.rs:69:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(bench)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bench`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/tls13/key_schedule.rs","byte_start":32629,"byte_end":32634,"line_start":1005,"line_end":1005,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"#[cfg(bench)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bench`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/tls13/key_schedule.rs:1005:7\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(bench)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bench)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bench)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/vecbuf.rs","byte_start":2897,"byte_end":2905,"line_start":108,"line_end":108,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/vecbuf.rs","byte_start":2897,"byte_end":2905,"line_start":108,"line_end":108,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/vecbuf.rs:108:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(read_buf)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs","byte_start":27253,"byte_end":27261,"line_start":749,"line_end":749,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(read_buf)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs","byte_start":27253,"byte_end":27261,"line_start":749,"line_end":749,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(read_buf)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs:749:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(read_buf)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs","byte_start":14095,"byte_end":14103,"line_start":360,"line_end":360,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs","byte_start":14095,"byte_end":14103,"line_start":360,"line_end":360,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs:360:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(read_buf)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `read_buf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs","byte_start":26369,"byte_end":26377,"line_start":720,"line_end":720,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs","byte_start":26369,"byte_end":26377,"line_start":720,"line_end":720,"column_start":11,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(read_buf)]","highlight_start":11,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"read_buf\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `read_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/server/server_conn.rs:720:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(read_buf)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"read_buf\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(read_buf)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(read_buf)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"15 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 15 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustls-0.21.12"
## script = '''
## FROM scratch AS cratesio-rustls-0.21.12
## ADD --chmod=0664 --checksum=sha256:3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e \
##   https://static.crates.io/crates/rustls/rustls-0.21.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rustls-0.21.12-264210de0fb2469c"
## script = '''
## FROM rust-base AS dep-l-rustls-0.21.12-264210de0fb2469c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rustls-0.21.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12 \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rustls" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Rustls is a modern TLS library written in Rust." \
##         CARGO_PKG_HOMEPAGE="https://github.com/rustls/rustls" \
##         CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustls" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rustls/rustls" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.21.12" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="21" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/rustls-f17518382360d3e4/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rustls' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="log"' '--cfg' 'feature="logging"' '--cfg' 'feature="tls12"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("dangerous_configuration", "default", "log", "logging", "quic", "read_buf", "rustversion", "secret_extraction", "tls12"))' '-C' 'metadata=6fd4e7026582907e' '-C' 'extra-filename=-264210de0fb2469c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'log=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'webpki=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta' '--extern' 'sct=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-0.21.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-264210de0fb2469c"
## script = """
## FROM scratch AS out-264210de0fb2469c
## COPY --from=dep-l-rustls-0.21.12-264210de0fb2469c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-264210de0fb2469c* /"""

FROM scratch AS cratesio-openssl-probe-0.1.5
ADD --chmod=0664 --checksum=sha256:ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf \
  https://static.crates.io/crates/openssl-probe/openssl-probe-0.1.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-openssl-probe-0.1.5-0ee236ae7bf0c632
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-openssl-probe-0.1.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="openssl_probe" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="Tool for helping to find SSL certificate locations on the system for OpenSSL\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/openssl-probe" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="openssl-probe" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/openssl-probe" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'openssl_probe' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=aeffdc3a0f5740b3' '-C' 'extra-filename=-0ee236ae7bf0c632' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0ee236ae7bf0c632
COPY --from=dep-l-openssl-probe-0.1.5-0ee236ae7bf0c632 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0ee236ae7bf0c632* /

## this = "0ee236ae7bf0c632"
## writes = [
##     "deps/openssl_probe-0ee236ae7bf0c632.d",
##     "deps/libopenssl_probe-0ee236ae7bf0c632.rmeta",
##     "deps/libopenssl_probe-0ee236ae7bf0c632.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/openssl_probe-0ee236ae7bf0c632.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-openssl-probe-0.1.5"
## script = '''
## FROM scratch AS cratesio-openssl-probe-0.1.5
## ADD --chmod=0664 --checksum=sha256:ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf \
##   https://static.crates.io/crates/openssl-probe/openssl-probe-0.1.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-openssl-probe-0.1.5-0ee236ae7bf0c632"
## script = '''
## FROM rust-base AS dep-l-openssl-probe-0.1.5-0ee236ae7bf0c632
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-openssl-probe-0.1.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="openssl_probe" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="Tool for helping to find SSL certificate locations on the system for OpenSSL\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/openssl-probe" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="openssl-probe" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/openssl-probe" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'openssl_probe' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=aeffdc3a0f5740b3' '-C' 'extra-filename=-0ee236ae7bf0c632' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/openssl-probe-0.1.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0ee236ae7bf0c632"
## script = """
## FROM scratch AS out-0ee236ae7bf0c632
## COPY --from=dep-l-openssl-probe-0.1.5-0ee236ae7bf0c632 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0ee236ae7bf0c632* /"""

FROM scratch AS cratesio-base64-0.21.7
ADD --chmod=0664 --checksum=sha256:9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567 \
  https://static.crates.io/crates/base64/base64-0.21.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-base64-0.21.7-de6de5507c11303f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-base64-0.21.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="base64" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alice Maz <alice@alicemaz.com>:Marshall Pierce <marshall@mpierce.org>" \
        CARGO_PKG_DESCRIPTION="encodes and decodes base64 as bytes or utf8" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="base64" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/marshallpierce/rust-base64" \
        CARGO_PKG_RUST_VERSION="1.48.0" \
        CARGO_PKG_VERSION="0.21.7" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="21" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'base64' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=f4de7b3da49dcbc4' '-C' 'extra-filename=-de6de5507c11303f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-de6de5507c11303f
COPY --from=dep-l-base64-0.21.7-de6de5507c11303f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-de6de5507c11303f* /

## this = "de6de5507c11303f"
## writes = [
##     "deps/base64-de6de5507c11303f.d",
##     "deps/libbase64-de6de5507c11303f.rmeta",
##     "deps/libbase64-de6de5507c11303f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/base64-de6de5507c11303f.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `cargo-clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/src/lib.rs","byte_start":9108,"byte_end":9132,"line_start":223,"line_end":223,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"#![cfg_attr(feature = \"cargo-clippy\", allow(clippy::cast_lossless))]","highlight_start":13,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `default`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `cargo-clippy` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/src/lib.rs","byte_start":9344,"byte_end":9352,"line_start":232,"line_end":232,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    warnings","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` implied by `#[warn(warnings)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `cargo-clippy`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/src/lib.rs:223:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(feature = \"cargo-clippy\", allow(clippy::cast_lossless))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `default`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `cargo-clippy` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/src/lib.rs:232:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    warnings\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` implied by `#[warn(warnings)]`\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-base64-0.21.7"
## script = '''
## FROM scratch AS cratesio-base64-0.21.7
## ADD --chmod=0664 --checksum=sha256:9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567 \
##   https://static.crates.io/crates/base64/base64-0.21.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-base64-0.21.7-de6de5507c11303f"
## script = '''
## FROM rust-base AS dep-l-base64-0.21.7-de6de5507c11303f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-base64-0.21.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="base64" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alice Maz <alice@alicemaz.com>:Marshall Pierce <marshall@mpierce.org>" \
##         CARGO_PKG_DESCRIPTION="encodes and decodes base64 as bytes or utf8" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="base64" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/marshallpierce/rust-base64" \
##         CARGO_PKG_RUST_VERSION="1.48.0" \
##         CARGO_PKG_VERSION="0.21.7" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="21" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'base64' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=f4de7b3da49dcbc4' '-C' 'extra-filename=-de6de5507c11303f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/base64-0.21.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-de6de5507c11303f"
## script = """
## FROM scratch AS out-de6de5507c11303f
## COPY --from=dep-l-base64-0.21.7-de6de5507c11303f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-de6de5507c11303f* /"""

FROM scratch AS cratesio-rustls-pemfile-1.0.4
ADD --chmod=0664 --checksum=sha256:1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c \
  https://static.crates.io/crates/rustls-pemfile/rustls-pemfile-1.0.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rustls-pemfile-1.0.4-a38c83241847def9
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rustls-pemfile-1.0.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4 \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rustls_pemfile" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Basic .pem file parser for keys and certificates" \
        CARGO_PKG_HOMEPAGE="https://github.com/rustls/pemfile" \
        CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustls-pemfile" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rustls/pemfile" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.4" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rustls_pemfile' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=044135a043f3cb1c' '-C' 'extra-filename=-a38c83241847def9' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'base64=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a38c83241847def9
COPY --from=dep-l-rustls-pemfile-1.0.4-a38c83241847def9 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a38c83241847def9* /

## this = "a38c83241847def9"
## deps = ["de6de5507c11303f"]
## short_externs = ["base64-de6de5507c11303f"]
## writes = [
##     "deps/rustls_pemfile-a38c83241847def9.d",
##     "deps/librustls_pemfile-a38c83241847def9.rmeta",
##     "deps/librustls_pemfile-a38c83241847def9.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rustls_pemfile-a38c83241847def9.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/pemfile.rs","byte_start":4362,"byte_end":4384,"line_start":132,"line_end":132,"column_start":6,"column_end":28,"is_primary":true,"text":[{"text":") -> std::io::Result<usize> {","highlight_start":6,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/lib.rs","byte_start":1825,"byte_end":1846,"line_start":41,"line_end":41,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    unused_qualifications","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/pemfile.rs","byte_start":4362,"byte_end":4367,"line_start":132,"line_end":132,"column_start":6,"column_end":11,"is_primary":true,"text":[{"text":") -> std::io::Result<usize> {","highlight_start":6,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/pemfile.rs:132:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> std::io::Result<usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/lib.rs:41:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unused_qualifications\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m) -> \u001b[0m\u001b[0m\u001b[38;5;9mstd::\u001b[0m\u001b[0mio::Result<usize> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m) -> io::Result<usize> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustls-pemfile-1.0.4"
## script = '''
## FROM scratch AS cratesio-rustls-pemfile-1.0.4
## ADD --chmod=0664 --checksum=sha256:1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c \
##   https://static.crates.io/crates/rustls-pemfile/rustls-pemfile-1.0.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rustls-pemfile-1.0.4-a38c83241847def9"
## script = '''
## FROM rust-base AS dep-l-rustls-pemfile-1.0.4-a38c83241847def9
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rustls-pemfile-1.0.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4 \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rustls_pemfile" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Basic .pem file parser for keys and certificates" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rustls/pemfile" \
##         CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustls-pemfile" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rustls/pemfile" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.4" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rustls_pemfile' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=044135a043f3cb1c' '-C' 'extra-filename=-a38c83241847def9' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'base64=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-pemfile-1.0.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a38c83241847def9"
## script = """
## FROM scratch AS out-a38c83241847def9
## COPY --from=dep-l-rustls-pemfile-1.0.4-a38c83241847def9 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a38c83241847def9* /"""

FROM scratch AS cratesio-rustls-native-certs-0.6.3
ADD --chmod=0664 --checksum=sha256:a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00 \
  https://static.crates.io/crates/rustls-native-certs/rustls-native-certs-0.6.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rustls-native-certs-0.6.3-c785b10cd1fa3185
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rustls-native-certs-0.6.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3 \
  --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
  --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rustls_native_certs" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="rustls-native-certs allows rustls to use the platform native certificate store" \
        CARGO_PKG_HOMEPAGE="https://github.com/ctz/rustls-native-certs" \
        CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustls-native-certs" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/ctz/rustls-native-certs" \
        CARGO_PKG_RUST_VERSION="1.60" \
        CARGO_PKG_VERSION="0.6.3" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rustls_native_certs' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=d47800736359f853' '-C' 'extra-filename=-c785b10cd1fa3185' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'openssl_probe=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta' '--extern' 'rustls_pemfile=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c785b10cd1fa3185
COPY --from=dep-l-rustls-native-certs-0.6.3-c785b10cd1fa3185 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c785b10cd1fa3185* /

## this = "c785b10cd1fa3185"
## deps = [
##     "0ee236ae7bf0c632",
##     "a38c83241847def9",
##     "de6de5507c11303f",
## ]
## short_externs = [
##     "openssl_probe-0ee236ae7bf0c632",
##     "rustls_pemfile-a38c83241847def9",
##     "base64-de6de5507c11303f",
## ]
## writes = [
##     "deps/rustls_native_certs-c785b10cd1fa3185.d",
##     "deps/librustls_native_certs-c785b10cd1fa3185.rmeta",
##     "deps/librustls_native_certs-c785b10cd1fa3185.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rustls_native_certs-c785b10cd1fa3185.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustls-native-certs-0.6.3"
## script = '''
## FROM scratch AS cratesio-rustls-native-certs-0.6.3
## ADD --chmod=0664 --checksum=sha256:a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00 \
##   https://static.crates.io/crates/rustls-native-certs/rustls-native-certs-0.6.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rustls-native-certs-0.6.3-c785b10cd1fa3185"
## script = '''
## FROM rust-base AS dep-l-rustls-native-certs-0.6.3-c785b10cd1fa3185
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rustls-native-certs-0.6.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3 \
##   --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
##   --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rustls_native_certs" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="rustls-native-certs allows rustls to use the platform native certificate store" \
##         CARGO_PKG_HOMEPAGE="https://github.com/ctz/rustls-native-certs" \
##         CARGO_PKG_LICENSE="Apache-2.0 OR ISC OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustls-native-certs" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/ctz/rustls-native-certs" \
##         CARGO_PKG_RUST_VERSION="1.60" \
##         CARGO_PKG_VERSION="0.6.3" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rustls_native_certs' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=d47800736359f853' '-C' 'extra-filename=-c785b10cd1fa3185' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'openssl_probe=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta' '--extern' 'rustls_pemfile=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustls-native-certs-0.6.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c785b10cd1fa3185"
## script = """
## FROM scratch AS out-c785b10cd1fa3185
## COPY --from=dep-l-rustls-native-certs-0.6.3-c785b10cd1fa3185 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c785b10cd1fa3185* /"""

FROM scratch AS cratesio-thiserror-impl-1.0.61
ADD --chmod=0664 --checksum=sha256:46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533 \
  https://static.crates.io/crates/thiserror-impl/thiserror-impl-1.0.61.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-thiserror-impl-1.0.61-b31d1031030a1f93
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-thiserror-impl-1.0.61,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="thiserror_impl" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Implementation detail of the `thiserror` crate" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="thiserror-impl" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/thiserror" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.61" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="61" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'thiserror_impl' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=43ad0b501c391ad4' '-C' 'extra-filename=-b31d1031030a1f93' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b31d1031030a1f93
COPY --from=dep-p-thiserror-impl-1.0.61-b31d1031030a1f93 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b31d1031030a1f93* /

## this = "b31d1031030a1f93"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/thiserror_impl-b31d1031030a1f93.d",
##     "deps/libthiserror_impl-b31d1031030a1f93.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/thiserror_impl-b31d1031030a1f93.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-thiserror-impl-1.0.61"
## script = '''
## FROM scratch AS cratesio-thiserror-impl-1.0.61
## ADD --chmod=0664 --checksum=sha256:46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533 \
##   https://static.crates.io/crates/thiserror-impl/thiserror-impl-1.0.61.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-thiserror-impl-1.0.61-b31d1031030a1f93"
## script = '''
## FROM rust-base AS dep-p-thiserror-impl-1.0.61-b31d1031030a1f93
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-thiserror-impl-1.0.61,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="thiserror_impl" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Implementation detail of the `thiserror` crate" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="thiserror-impl" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/thiserror" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.61" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="61" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'thiserror_impl' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=43ad0b501c391ad4' '-C' 'extra-filename=-b31d1031030a1f93' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-impl-1.0.61/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b31d1031030a1f93"
## script = """
## FROM scratch AS out-b31d1031030a1f93
## COPY --from=dep-p-thiserror-impl-1.0.61-b31d1031030a1f93 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b31d1031030a1f93* /"""

FROM scratch AS cratesio-thiserror-1.0.61
ADD --chmod=0664 --checksum=sha256:c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709 \
  https://static.crates.io/crates/thiserror/thiserror-1.0.61.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-thiserror-1.0.61-a653fbb7540bf139
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-thiserror-1.0.61,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61 \
  --mount=from=crate_out-24468494741c1625,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out \
  --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="thiserror" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="derive(Error)" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="thiserror" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/thiserror" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.61" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="61" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'thiserror' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=1e6df0cda89a4c5e' '-C' 'extra-filename=-a653fbb7540bf139' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'thiserror_impl=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so' '--cap-lints' 'warn' '--check-cfg' 'cfg(error_generic_member_access)' '--check-cfg' 'cfg(thiserror_nightly_testing)' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a653fbb7540bf139
COPY --from=dep-l-thiserror-1.0.61-a653fbb7540bf139 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a653fbb7540bf139* /

## this = "a653fbb7540bf139"
## deps = [
##     "b31d1031030a1f93",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "thiserror_impl-b31d1031030a1f93",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/thiserror-a653fbb7540bf139.d",
##     "deps/libthiserror-a653fbb7540bf139.rmeta",
##     "deps/libthiserror-a653fbb7540bf139.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/thiserror-a653fbb7540bf139.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-24468494741c1625"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out"
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-thiserror-1.0.61"
## script = '''
## FROM scratch AS cratesio-thiserror-1.0.61
## ADD --chmod=0664 --checksum=sha256:c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709 \
##   https://static.crates.io/crates/thiserror/thiserror-1.0.61.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-thiserror-1.0.61-a653fbb7540bf139"
## script = '''
## FROM rust-base AS dep-l-thiserror-1.0.61-a653fbb7540bf139
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-thiserror-1.0.61,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61 \
##   --mount=from=crate_out-24468494741c1625,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out \
##   --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="thiserror" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="derive(Error)" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="thiserror" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/thiserror" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.61" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="61" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'thiserror' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=1e6df0cda89a4c5e' '-C' 'extra-filename=-a653fbb7540bf139' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'thiserror_impl=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so' '--cap-lints' 'warn' '--check-cfg' 'cfg(error_generic_member_access)' '--check-cfg' 'cfg(thiserror_nightly_testing)' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thiserror-1.0.61/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a653fbb7540bf139"
## script = """
## FROM scratch AS out-a653fbb7540bf139
## COPY --from=dep-l-thiserror-1.0.61-a653fbb7540bf139 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a653fbb7540bf139* /"""

FROM scratch AS cratesio-bytes-1.6.0
ADD --chmod=0664 --checksum=sha256:514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9 \
  https://static.crates.io/crates/bytes/bytes-1.6.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bytes-1.6.0-17cf73a7d3f13d95
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-bytes-1.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bytes" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Sean McArthur <sean@seanmonstar.com>" \
        CARGO_PKG_DESCRIPTION="Types and traits for working with bytes" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bytes" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/bytes" \
        CARGO_PKG_RUST_VERSION="1.39" \
        CARGO_PKG_VERSION="1.6.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bytes' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=eefdb7d6e7fd0e6f' '-C' 'extra-filename=-17cf73a7d3f13d95' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-17cf73a7d3f13d95
COPY --from=dep-l-bytes-1.6.0-17cf73a7d3f13d95 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-17cf73a7d3f13d95* /

## this = "17cf73a7d3f13d95"
## writes = [
##     "deps/bytes-17cf73a7d3f13d95.d",
##     "deps/libbytes-17cf73a7d3f13d95.rmeta",
##     "deps/libbytes-17cf73a7d3f13d95.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/bytes-17cf73a7d3f13d95.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs","byte_start":36630,"byte_end":36634,"line_start":1321,"line_end":1321,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs:1321:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs","byte_start":4906,"byte_end":4910,"line_start":135,"line_end":135,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg(not(all(loom, test)))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs:135:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs","byte_start":5147,"byte_end":5151,"line_start":143,"line_end":143,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(all(loom, test))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs:143:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(loom, test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs","byte_start":5644,"byte_end":5648,"line_start":163,"line_end":163,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg(not(all(loom, test)))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs:163:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs","byte_start":5917,"byte_end":5921,"line_start":173,"line_end":173,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(all(loom, test))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes.rs:173:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(loom, test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes_mut.rs","byte_start":52583,"byte_end":52587,"line_start":1774,"line_end":1774,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/bytes_mut.rs:1774:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1774\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/loom.rs","byte_start":20,"byte_end":24,"line_start":1,"line_end":1,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(all(test, loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/loom.rs:1:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(test, loom)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/loom.rs","byte_start":585,"byte_end":589,"line_start":23,"line_end":23,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/loom.rs:23:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bytes-1.6.0"
## script = '''
## FROM scratch AS cratesio-bytes-1.6.0
## ADD --chmod=0664 --checksum=sha256:514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9 \
##   https://static.crates.io/crates/bytes/bytes-1.6.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bytes-1.6.0-17cf73a7d3f13d95"
## script = '''
## FROM rust-base AS dep-l-bytes-1.6.0-17cf73a7d3f13d95
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-bytes-1.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bytes" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Sean McArthur <sean@seanmonstar.com>" \
##         CARGO_PKG_DESCRIPTION="Types and traits for working with bytes" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bytes" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/bytes" \
##         CARGO_PKG_RUST_VERSION="1.39" \
##         CARGO_PKG_VERSION="1.6.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bytes' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=eefdb7d6e7fd0e6f' '-C' 'extra-filename=-17cf73a7d3f13d95' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.6.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-17cf73a7d3f13d95"
## script = """
## FROM scratch AS out-17cf73a7d3f13d95
## COPY --from=dep-l-bytes-1.6.0-17cf73a7d3f13d95 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-17cf73a7d3f13d95* /"""

FROM scratch AS cratesio-mio-0.8.11
ADD --chmod=0664 --checksum=sha256:a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c \
  https://static.crates.io/crates/mio/mio-0.8.11.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-mio-0.8.11-57de3125ece5b1fd
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-mio-0.8.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11 \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="mio" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/Cargo.toml" \
        CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>:Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Lightweight non-blocking I/O." \
        CARGO_PKG_HOMEPAGE="https://github.com/tokio-rs/mio" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="mio" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/mio" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.8.11" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="11" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'mio' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="net"' '--cfg' 'feature="os-ext"' '--cfg' 'feature="os-poll"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "log", "net", "os-ext", "os-poll"))' '-C' 'metadata=4481a9b8971fe568' '-C' 'extra-filename=-57de3125ece5b1fd' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-57de3125ece5b1fd
COPY --from=dep-l-mio-0.8.11-57de3125ece5b1fd /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-57de3125ece5b1fd* /

## this = "57de3125ece5b1fd"
## deps = ["a7905fdc410bdfce"]
## short_externs = ["libc-a7905fdc410bdfce"]
## writes = [
##     "deps/mio-57de3125ece5b1fd.d",
##     "deps/libmio-57de3125ece5b1fd.rmeta",
##     "deps/libmio-57de3125ece5b1fd.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/mio-57de3125ece5b1fd.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs","byte_start":29,"byte_end":60,"line_start":3,"line_end":3,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs:3:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs","byte_start":17992,"byte_end":18023,"line_start":432,"line_end":432,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs:432:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs","byte_start":28900,"byte_end":28931,"line_start":723,"line_end":723,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs:723:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs","byte_start":29156,"byte_end":29187,"line_start":735,"line_end":735,"column_start":13,"column_end":44,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_poll_poll),","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/poll.rs:735:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs","byte_start":3281,"byte_end":3313,"line_start":102,"line_end":102,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"        mio_unsupported_force_waker_pipe,","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs:102:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs","byte_start":944,"byte_end":975,"line_start":38,"line_end":38,"column_start":23,"column_end":54,"is_primary":true,"text":[{"text":"        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\")))]","highlight_start":23,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs:38:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs","byte_start":2808,"byte_end":2839,"line_start":91,"line_end":91,"column_start":23,"column_end":54,"is_primary":true,"text":[{"text":"        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\",target_os = \"vita\")))]","highlight_start":23,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs:91:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\",target_os = \"vita\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs","byte_start":2970,"byte_end":3001,"line_start":94,"line_end":94,"column_start":19,"column_end":50,"is_primary":true,"text":[{"text":"        #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]","highlight_start":19,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/mod.rs:94:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":19,"byte_end":50,"line_start":2,"line_end":2,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:2:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":223,"byte_end":254,"line_start":13,"line_end":13,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":474,"byte_end":505,"line_start":24,"line_end":24,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":587,"byte_end":618,"line_start":31,"line_end":31,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":913,"byte_end":944,"line_start":43,"line_end":43,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:43:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":1238,"byte_end":1269,"line_start":58,"line_end":58,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:58:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs","byte_start":767,"byte_end":798,"line_start":38,"line_end":38,"column_start":15,"column_end":46,"is_primary":true,"text":[{"text":"    #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]","highlight_start":15,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/selector/mod.rs:38:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":19,"byte_end":50,"line_start":2,"line_end":2,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:2:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":78,"byte_end":110,"line_start":4,"line_end":4,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_waker_pipe),","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:4:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":1445,"byte_end":1476,"line_start":55,"line_end":55,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:55:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":1504,"byte_end":1536,"line_start":57,"line_end":57,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_waker_pipe),","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:57:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":1847,"byte_end":1879,"line_start":71,"line_end":71,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:71:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":4377,"byte_end":4408,"line_start":143,"line_end":143,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:143:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":4418,"byte_end":4450,"line_start":144,"line_end":144,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:144:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":4596,"byte_end":4628,"line_start":150,"line_end":150,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:150:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":5734,"byte_end":5766,"line_start":191,"line_end":191,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:191:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":5979,"byte_end":6011,"line_start":203,"line_end":203,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    mio_unsupported_force_waker_pipe,","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:203:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":8560,"byte_end":8591,"line_start":288,"line_end":288,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"        mio_unsupported_force_poll_poll,","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:288:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":8618,"byte_end":8650,"line_start":290,"line_end":290,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"            mio_unsupported_force_waker_pipe,","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:290:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":8987,"byte_end":9018,"line_start":305,"line_end":305,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:305:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":9595,"byte_end":9626,"line_start":335,"line_end":335,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:335:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":412,"byte_end":444,"line_start":17,"line_end":17,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_waker_pipe),","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:17:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":592,"byte_end":624,"line_start":22,"line_end":22,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"        mio_unsupported_force_waker_pipe,","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:22:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs","byte_start":3568,"byte_end":3599,"line_start":117,"line_end":117,"column_start":15,"column_end":46,"is_primary":true,"text":[{"text":"        #[cfg(mio_unsupported_force_poll_poll)]","highlight_start":15,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/sys/unix/waker.rs:117:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(mio_unsupported_force_poll_poll)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"32 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 32 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-mio-0.8.11"
## script = '''
## FROM scratch AS cratesio-mio-0.8.11
## ADD --chmod=0664 --checksum=sha256:a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c \
##   https://static.crates.io/crates/mio/mio-0.8.11.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-mio-0.8.11-57de3125ece5b1fd"
## script = '''
## FROM rust-base AS dep-l-mio-0.8.11-57de3125ece5b1fd
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-mio-0.8.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11 \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="mio" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>:Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Lightweight non-blocking I/O." \
##         CARGO_PKG_HOMEPAGE="https://github.com/tokio-rs/mio" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="mio" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/mio" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.8.11" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="11" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'mio' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="net"' '--cfg' 'feature="os-ext"' '--cfg' 'feature="os-poll"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "log", "net", "os-ext", "os-poll"))' '-C' 'metadata=4481a9b8971fe568' '-C' 'extra-filename=-57de3125ece5b1fd' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.11/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-57de3125ece5b1fd"
## script = """
## FROM scratch AS out-57de3125ece5b1fd
## COPY --from=dep-l-mio-0.8.11-57de3125ece5b1fd /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-57de3125ece5b1fd* /"""

FROM scratch AS cratesio-num_cpus-1.16.0
ADD --chmod=0664 --checksum=sha256:4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43 \
  https://static.crates.io/crates/num_cpus/num_cpus-1.16.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-num_cpus-1.16.0-516d6049f106f6a2
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-num_cpus-1.16.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0 \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="num_cpus" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Sean McArthur <sean@seanmonstar.com>" \
        CARGO_PKG_DESCRIPTION="Get the number of CPUs on a machine." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="num_cpus" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/seanmonstar/num_cpus" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.16.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="16" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'num_cpus' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=9343f2e59e30aaf3' '-C' 'extra-filename=-516d6049f106f6a2' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-516d6049f106f6a2
COPY --from=dep-l-num_cpus-1.16.0-516d6049f106f6a2 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-516d6049f106f6a2* /

## this = "516d6049f106f6a2"
## deps = ["a7905fdc410bdfce"]
## short_externs = ["libc-a7905fdc410bdfce"]
## writes = [
##     "deps/num_cpus-516d6049f106f6a2.d",
##     "deps/libnum_cpus-516d6049f106f6a2.rmeta",
##     "deps/libnum_cpus-516d6049f106f6a2.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/num_cpus-516d6049f106f6a2.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nacl`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs","byte_start":9940,"byte_end":9958,"line_start":355,"line_end":355,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    target_os = \"nacl\",","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nacl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs:355:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_os = \"nacl\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nacl`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs","byte_start":12204,"byte_end":12222,"line_start":437,"line_end":437,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    target_os = \"nacl\",","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nacl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs:437:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_os = \"nacl\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-num_cpus-1.16.0"
## script = '''
## FROM scratch AS cratesio-num_cpus-1.16.0
## ADD --chmod=0664 --checksum=sha256:4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43 \
##   https://static.crates.io/crates/num_cpus/num_cpus-1.16.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-num_cpus-1.16.0-516d6049f106f6a2"
## script = '''
## FROM rust-base AS dep-l-num_cpus-1.16.0-516d6049f106f6a2
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-num_cpus-1.16.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0 \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="num_cpus" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Sean McArthur <sean@seanmonstar.com>" \
##         CARGO_PKG_DESCRIPTION="Get the number of CPUs on a machine." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="num_cpus" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/seanmonstar/num_cpus" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.16.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="16" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'num_cpus' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=9343f2e59e30aaf3' '-C' 'extra-filename=-516d6049f106f6a2' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-516d6049f106f6a2"
## script = """
## FROM scratch AS out-516d6049f106f6a2
## COPY --from=dep-l-num_cpus-1.16.0-516d6049f106f6a2 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-516d6049f106f6a2* /"""

FROM scratch AS cratesio-socket2-0.5.7
ADD --chmod=0664 --checksum=sha256:ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c \
  https://static.crates.io/crates/socket2/socket2-0.5.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-socket2-0.5.7-4f06700ac893bf17
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-socket2-0.5.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7 \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="socket2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Utilities for handling networking sockets with a maximal amount of configuration\npossible intended.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/socket2" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="socket2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/socket2" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.5.7" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'socket2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="all"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all"))' '-C' 'metadata=f9cf30be7cc8aee9' '-C' 'extra-filename=-4f06700ac893bf17' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4f06700ac893bf17
COPY --from=dep-l-socket2-0.5.7-4f06700ac893bf17 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4f06700ac893bf17* /

## this = "4f06700ac893bf17"
## deps = ["a7905fdc410bdfce"]
## short_externs = ["libc-a7905fdc410bdfce"]
## writes = [
##     "deps/socket2-4f06700ac893bf17.d",
##     "deps/libsocket2-4f06700ac893bf17.rmeta",
##     "deps/libsocket2-4f06700ac893bf17.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/socket2-4f06700ac893bf17.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-socket2-0.5.7"
## script = '''
## FROM scratch AS cratesio-socket2-0.5.7
## ADD --chmod=0664 --checksum=sha256:ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c \
##   https://static.crates.io/crates/socket2/socket2-0.5.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-socket2-0.5.7-4f06700ac893bf17"
## script = '''
## FROM rust-base AS dep-l-socket2-0.5.7-4f06700ac893bf17
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-socket2-0.5.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7 \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="socket2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Utilities for handling networking sockets with a maximal amount of configuration\npossible intended.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/socket2" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="socket2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/socket2" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.5.7" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'socket2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="all"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all"))' '-C' 'metadata=f9cf30be7cc8aee9' '-C' 'extra-filename=-4f06700ac893bf17' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4f06700ac893bf17"
## script = """
## FROM scratch AS out-4f06700ac893bf17
## COPY --from=dep-l-socket2-0.5.7-4f06700ac893bf17 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4f06700ac893bf17* /"""

FROM scratch AS cratesio-tokio-macros-2.2.0
ADD --chmod=0664 --checksum=sha256:5b8a1e28f2deaa14e508979454cb3a223b10b938b45af148bc0986de36f1923b \
  https://static.crates.io/crates/tokio-macros/tokio-macros-2.2.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-tokio-macros-2.2.0-c40240aa85c27d5d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tokio-macros-2.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio_macros" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Tokio's proc macros.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio-macros" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="2.2.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio_macros' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=fd59cb293ce59562' '-C' 'extra-filename=-c40240aa85c27d5d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c40240aa85c27d5d
COPY --from=dep-p-tokio-macros-2.2.0-c40240aa85c27d5d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c40240aa85c27d5d* /

## this = "c40240aa85c27d5d"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/tokio_macros-c40240aa85c27d5d.d",
##     "deps/libtokio_macros-c40240aa85c27d5d.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tokio_macros-c40240aa85c27d5d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-macros-2.2.0"
## script = '''
## FROM scratch AS cratesio-tokio-macros-2.2.0
## ADD --chmod=0664 --checksum=sha256:5b8a1e28f2deaa14e508979454cb3a223b10b938b45af148bc0986de36f1923b \
##   https://static.crates.io/crates/tokio-macros/tokio-macros-2.2.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-tokio-macros-2.2.0-c40240aa85c27d5d"
## script = '''
## FROM rust-base AS dep-p-tokio-macros-2.2.0-c40240aa85c27d5d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tokio-macros-2.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio_macros" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Tokio's proc macros.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio-macros" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="2.2.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio_macros' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=fd59cb293ce59562' '-C' 'extra-filename=-c40240aa85c27d5d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c40240aa85c27d5d"
## script = """
## FROM scratch AS out-c40240aa85c27d5d
## COPY --from=dep-p-tokio-macros-2.2.0-c40240aa85c27d5d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c40240aa85c27d5d* /"""

FROM scratch AS cratesio-tokio-1.37.0
ADD --chmod=0664 --checksum=sha256:1adbebffeca75fcfd058afa480fb6c0b81e165a0323f9c9d39c9697e37c46787 \
  https://static.crates.io/crates/tokio/tokio-1.37.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tokio-1.37.0-0724e68cddf1b06e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tokio-1.37.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0 \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="1.37.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="37" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bytes"' '--cfg' 'feature="default"' '--cfg' 'feature="io-util"' '--cfg' 'feature="libc"' '--cfg' 'feature="macros"' '--cfg' 'feature="mio"' '--cfg' 'feature="net"' '--cfg' 'feature="num_cpus"' '--cfg' 'feature="rt"' '--cfg' 'feature="rt-multi-thread"' '--cfg' 'feature="socket2"' '--cfg' 'feature="sync"' '--cfg' 'feature="time"' '--cfg' 'feature="tokio-macros"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bytes", "default", "fs", "full", "io-std", "io-util", "libc", "macros", "mio", "net", "num_cpus", "parking_lot", "process", "rt", "rt-multi-thread", "signal", "signal-hook-registry", "socket2", "sync", "test-util", "time", "tokio-macros", "tracing", "windows-sys"))' '-C' 'metadata=436999f0521bbb61' '-C' 'extra-filename=-0724e68cddf1b06e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'bytes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'mio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta' '--extern' 'num_cpus=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'socket2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta' '--extern' 'tokio_macros=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0724e68cddf1b06e
COPY --from=dep-l-tokio-1.37.0-0724e68cddf1b06e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0724e68cddf1b06e* /

## this = "0724e68cddf1b06e"
## deps = [
##     "17cf73a7d3f13d95",
##     "a7905fdc410bdfce",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "32982cb980ef9328",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "bytes-17cf73a7d3f13d95",
##     "libc-a7905fdc410bdfce",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "pin_project_lite-32982cb980ef9328",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = ["deps/tokio-0724e68cddf1b06e.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tokio-0724e68cddf1b06e.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":491,"byte_end":495,"line_start":20,"line_end":20,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"#![cfg_attr(loom, allow(dead_code, unreachable_pub))]","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:20:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(loom, allow(dead_code, unreachable_pub))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `128`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":18253,"byte_end":18281,"line_start":452,"line_end":452,"column_start":5,"column_end":33,"is_primary":true,"text":[{"text":"    target_pointer_width = \"128\"","highlight_start":5,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_pointer_width` are: `16`, `32`, and `64`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `128`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:452:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_pointer_width = \"128\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_pointer_width` are: `16`, `32`, and `64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":18400,"byte_end":18414,"line_start":459,"line_end":459,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    not(tokio_unstable),","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:459:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(tokio_unstable),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":18733,"byte_end":18747,"line_start":472,"line_end":472,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(all(not(tokio_unstable), tokio_taskdump))]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:472:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(tokio_unstable), tokio_taskdump))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":18750,"byte_end":18764,"line_start":472,"line_end":472,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"#[cfg(all(not(tokio_unstable), tokio_taskdump))]","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:472:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(tokio_unstable), tokio_taskdump))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":18865,"byte_end":18879,"line_start":476,"line_end":476,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    tokio_taskdump,","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:476:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tokio_taskdump,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/net/mod.rs","byte_start":11,"byte_end":15,"line_start":1,"line_end":1,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#![cfg(not(loom))]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/net/mod.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg(not(loom))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs","byte_start":24205,"byte_end":24212,"line_start":694,"line_end":694,"column_start":7,"column_end":14,"is_primary":true,"text":[{"text":"#[cfg(fuzzing)]","highlight_start":7,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs:694:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(fuzzing)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/sync/mod.rs","byte_start":12,"byte_end":16,"line_start":1,"line_end":1,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"#![cfg_attr(loom, allow(dead_code, unreachable_pub, unused_imports))]","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/sync/mod.rs:1:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(loom, allow(dead_code, unreachable_pub, unused_imports))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10476,"byte_end":10490,"line_start":473,"line_end":473,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, feature = \"tracing\"))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/mod.rs","byte_start":213,"byte_end":259,"line_start":21,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_trace! {","highlight_start":1,"highlight_end":13},{"text":"    #[macro_use]","highlight_start":1,"highlight_end":17},{"text":"    mod trace;","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10392,"byte_end":10414,"line_start":470,"line_end":470,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! cfg_trace {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:473:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, feature = \"tracing\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/mod.rs:21:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[macro_use]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod trace;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/thread_local.rs","byte_start":10,"byte_end":14,"line_start":1,"line_end":1,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(all(loom, test))]","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/thread_local.rs:1:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(loom, test))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/thread_local.rs","byte_start":345,"byte_end":349,"line_start":13,"line_end":13,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(not(all(loom, test)))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/thread_local.rs:13:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10476,"byte_end":10490,"line_start":473,"line_end":473,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, feature = \"tracing\"))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/future/mod.rs","byte_start":383,"byte_end":497,"line_start":22,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_trace! {","highlight_start":1,"highlight_end":13},{"text":"    mod trace;","highlight_start":1,"highlight_end":15},{"text":"    #[allow(unused_imports)]","highlight_start":1,"highlight_end":29},{"text":"    pub(crate) use trace::InstrumentedFuture as Future;","highlight_start":1,"highlight_end":56},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10392,"byte_end":10414,"line_start":470,"line_end":470,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! cfg_trace {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:473:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, feature = \"tracing\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/future/mod.rs:22:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod trace;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(unused_imports)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) use trace::InstrumentedFuture as Future;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10927,"byte_end":10941,"line_start":493,"line_end":493,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"            #[cfg(any(not(tokio_unstable), not(feature = \"tracing\")))]","highlight_start":27,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/future/mod.rs","byte_start":499,"byte_end":581,"line_start":28,"line_end":32,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_not_trace! {","highlight_start":1,"highlight_end":17},{"text":"    cfg_rt! {","highlight_start":1,"highlight_end":14},{"text":"        pub(crate) use std::future::Future;","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_not_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10835,"byte_end":10861,"line_start":490,"line_end":490,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! cfg_not_trace {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:493:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(not(tokio_unstable), not(feature = \"tracing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/future/mod.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_not_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_rt! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use std::future::Future;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_not_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/io/mod.rs","byte_start":8680,"byte_end":8684,"line_start":229,"line_end":229,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(not(loom))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/io/mod.rs:229:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/io/poll_evented.rs","byte_start":8131,"byte_end":8162,"line_start":190,"line_end":190,"column_start":62,"column_end":93,"is_primary":true,"text":[{"text":"                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < len) {","highlight_start":62,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/io/poll_evented.rs:190:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < len) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/io/poll_evented.rs","byte_start":9638,"byte_end":9669,"line_start":223,"line_end":223,"column_start":62,"column_end":93,"is_primary":true,"text":[{"text":"                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < buf.len()) {","highlight_start":62,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/io/poll_evented.rs:223:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < buf.len()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10721,"byte_end":10735,"line_start":483,"line_end":483,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(tokio_unstable)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/net/tcp/listener.rs","byte_start":13481,"byte_end":13940,"line_start":417,"line_end":435,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_unstable! {","highlight_start":1,"highlight_end":16},{"text":"    #[cfg(target_os = \"wasi\")]","highlight_start":1,"highlight_end":31},{"text":"    mod sys {","highlight_start":1,"highlight_end":14},{"text":"        use super::TcpListener;","highlight_start":1,"highlight_end":32},{"text":"        use std::os::wasi::prelude::*;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl AsRawFd for TcpListener {","highlight_start":1,"highlight_end":39},{"text":"            fn as_raw_fd(&self) -> RawFd {","highlight_start":1,"highlight_end":43},{"text":"                self.io.as_raw_fd()","highlight_start":1,"highlight_end":36},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl AsFd for TcpListener {","highlight_start":1,"highlight_end":36},{"text":"            fn as_fd(&self) -> BorrowedFd<'_> {","highlight_start":1,"highlight_end":48},{"text":"                unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }","highlight_start":1,"highlight_end":68},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_unstable!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10638,"byte_end":10663,"line_start":480,"line_end":480,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_unstable {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:483:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(tokio_unstable)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/net/tcp/listener.rs:417:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_unstable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(target_os = \"wasi\")]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod sys {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use super::TcpListener;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/net/tcp/stream.rs","byte_start":49692,"byte_end":49706,"line_start":1408,"line_end":1408,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(tokio_unstable, target_os = \"wasi\"))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/net/tcp/stream.rs:1408:11\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tokio_unstable, target_os = \"wasi\"))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs","byte_start":148,"byte_end":152,"line_start":6,"line_end":6,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(all(test, loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(test, loom)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/std/mod.rs","byte_start":39,"byte_end":43,"line_start":1,"line_end":1,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"#![cfg_attr(any(not(feature = \"full\"), loom), allow(unused_imports, dead_code))]","highlight_start":40,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/std/mod.rs:1:40\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(any(not(feature = \"full\"), loom), allow(unused_imports, dead_code))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs","byte_start":186,"byte_end":190,"line_start":8,"line_end":8,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(all(test, loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs:8:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(test, loom)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs","byte_start":241,"byte_end":245,"line_start":11,"line_end":11,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs:11:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs","byte_start":277,"byte_end":281,"line_start":13,"line_end":13,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/loom/mod.rs:13:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/driver.rs","byte_start":267,"byte_end":281,"line_start":6,"line_end":6,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/driver.rs:6:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":6766,"byte_end":6770,"line_start":300,"line_end":300,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"        #[cfg(not(loom))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":14684,"byte_end":14724,"line_start":336,"line_end":338,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_process_driver! {","highlight_start":1,"highlight_end":22},{"text":"    mod process;","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_process_driver!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":6667,"byte_end":6698,"line_start":297,"line_end":297,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! cfg_process_driver {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:300:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:336:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_process_driver! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod process;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/task/mod.rs","byte_start":7685,"byte_end":7699,"line_start":169,"line_end":169,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"#![cfg_attr(not(tokio_unstable), allow(dead_code))]","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/task/mod.rs:169:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(tokio_unstable), allow(dead_code))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/config.rs","byte_start":29,"byte_end":43,"line_start":2,"line_end":2,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/config.rs:2:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10476,"byte_end":10490,"line_start":473,"line_end":473,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, feature = \"tracing\"))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":15032,"byte_end":15094,"line_start":358,"line_end":360,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_trace! {","highlight_start":5,"highlight_end":17},{"text":"        pub(crate) use blocking::Mandatory;","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10392,"byte_end":10414,"line_start":470,"line_end":470,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! cfg_trace {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:473:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, feature = \"tracing\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:358:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m358\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use blocking::Mandatory;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10721,"byte_end":10735,"line_start":483,"line_end":483,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(tokio_unstable)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":15233,"byte_end":15451,"line_start":368,"line_end":375,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_unstable! {","highlight_start":5,"highlight_end":20},{"text":"        mod id;","highlight_start":1,"highlight_end":16},{"text":"        #[cfg_attr(not(tokio_unstable), allow(unreachable_pub))]","highlight_start":1,"highlight_end":65},{"text":"        pub use id::Id;","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub use self::builder::UnhandledPanic;","highlight_start":1,"highlight_end":47},{"text":"        pub use crate::util::rand::RngSeed;","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_unstable!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":10638,"byte_end":10663,"line_start":480,"line_end":480,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_unstable {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:483:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(tokio_unstable)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:368:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m368\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_unstable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mod id;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg_attr(not(tokio_unstable), allow(unreachable_pub))]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub use id::Id;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub use crate::util::rand::RngSeed;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8956,"byte_end":8970,"line_start":404,"line_end":404,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_unstable,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":15457,"byte_end":15528,"line_start":377,"line_end":380,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_taskdump! {","highlight_start":5,"highlight_end":20},{"text":"        pub mod dump;","highlight_start":1,"highlight_end":22},{"text":"        pub use dump::Dump;","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_taskdump!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8852,"byte_end":8877,"line_start":400,"line_end":400,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_taskdump {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:404:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                tokio_unstable,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:377:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_taskdump! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod dump;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub use dump::Dump;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_taskdump` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8988,"byte_end":9002,"line_start":405,"line_end":405,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_taskdump,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":15457,"byte_end":15528,"line_start":377,"line_end":380,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_taskdump! {","highlight_start":5,"highlight_end":20},{"text":"        pub mod dump;","highlight_start":1,"highlight_end":22},{"text":"        pub use dump::Dump;","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_taskdump!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8852,"byte_end":8877,"line_start":400,"line_end":400,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_taskdump {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:405:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                tokio_taskdump,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:377:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_taskdump! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod dump;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub use dump::Dump;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_taskdump` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":4998,"byte_end":5012,"line_start":223,"line_end":223,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, not(loom)))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":15735,"byte_end":16014,"line_start":391,"line_end":400,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_metrics! {","highlight_start":5,"highlight_end":19},{"text":"        mod metrics;","highlight_start":1,"highlight_end":21},{"text":"        pub use metrics::{RuntimeMetrics, HistogramScale};","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub(crate) use metrics::{MetricsBatch, SchedulerMetrics, WorkerMetrics, HistogramBuilder};","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        cfg_net! {","highlight_start":1,"highlight_end":19},{"text":"        pub(crate) use metrics::IoDriverMetrics;","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_metrics!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":4776,"byte_end":4800,"line_start":218,"line_end":218,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_metrics {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:223:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, not(loom)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:391:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_metrics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mod metrics;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub use metrics::{RuntimeMetrics, HistogramScale};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":5018,"byte_end":5022,"line_start":223,"line_end":223,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, not(loom)))]","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":15735,"byte_end":16014,"line_start":391,"line_end":400,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_metrics! {","highlight_start":5,"highlight_end":19},{"text":"        mod metrics;","highlight_start":1,"highlight_end":21},{"text":"        pub use metrics::{RuntimeMetrics, HistogramScale};","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub(crate) use metrics::{MetricsBatch, SchedulerMetrics, WorkerMetrics, HistogramBuilder};","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        cfg_net! {","highlight_start":1,"highlight_end":19},{"text":"        pub(crate) use metrics::IoDriverMetrics;","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_metrics!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":4776,"byte_end":4800,"line_start":218,"line_end":218,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_metrics {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:223:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, not(loom)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:391:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_metrics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mod metrics;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub use metrics::{RuntimeMetrics, HistogramScale};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":5217,"byte_end":5231,"line_start":233,"line_end":233,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"            #[cfg(not(all(tokio_unstable, not(loom))))]","highlight_start":27,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":16020,"byte_end":16175,"line_start":402,"line_end":405,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_not_metrics! {","highlight_start":5,"highlight_end":23},{"text":"        pub(crate) mod metrics;","highlight_start":1,"highlight_end":32},{"text":"        pub(crate) use metrics::{SchedulerMetrics, WorkerMetrics, MetricsBatch, HistogramBuilder};","highlight_start":1,"highlight_end":99},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_not_metrics!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":5123,"byte_end":5151,"line_start":230,"line_end":230,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! cfg_not_metrics {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:233:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(all(tokio_unstable, not(loom))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:402:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_not_metrics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) mod metrics;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use metrics::{SchedulerMetrics, WorkerMetrics, MetricsBatch, HistogramBuilder};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_not_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":5237,"byte_end":5241,"line_start":233,"line_end":233,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"            #[cfg(not(all(tokio_unstable, not(loom))))]","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs","byte_start":16020,"byte_end":16175,"line_start":402,"line_end":405,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_not_metrics! {","highlight_start":5,"highlight_end":23},{"text":"        pub(crate) mod metrics;","highlight_start":1,"highlight_end":32},{"text":"        pub(crate) use metrics::{SchedulerMetrics, WorkerMetrics, MetricsBatch, HistogramBuilder};","highlight_start":1,"highlight_end":99},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_not_metrics!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":5123,"byte_end":5151,"line_start":230,"line_end":230,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! cfg_not_metrics {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:233:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(all(tokio_unstable, not(loom))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/mod.rs:402:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_not_metrics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) mod metrics;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use metrics::{SchedulerMetrics, WorkerMetrics, MetricsBatch, HistogramBuilder};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_not_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8956,"byte_end":8970,"line_start":404,"line_end":404,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_unstable,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":595,"byte_end":657,"line_start":26,"line_end":28,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_taskdump! {","highlight_start":5,"highlight_end":20},{"text":"        use crate::runtime::task::trace;","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_taskdump!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8852,"byte_end":8877,"line_start":400,"line_end":400,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_taskdump {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:404:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                tokio_unstable,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:26:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_taskdump! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use crate::runtime::task::trace;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_taskdump` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8988,"byte_end":9002,"line_start":405,"line_end":405,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_taskdump,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":595,"byte_end":657,"line_start":26,"line_end":28,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_taskdump! {","highlight_start":5,"highlight_end":20},{"text":"        use crate::runtime::task::trace;","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_taskdump!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8852,"byte_end":8877,"line_start":400,"line_end":400,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_taskdump {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:405:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                tokio_taskdump,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:26:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_taskdump! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use crate::runtime::task::trace;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_taskdump` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8956,"byte_end":8970,"line_start":404,"line_end":404,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_unstable,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":5565,"byte_end":5863,"line_start":186,"line_end":192,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_taskdump! {","highlight_start":5,"highlight_end":20},{"text":"        /// SAFETY: Callers of this function must ensure that trace frames always","highlight_start":1,"highlight_end":82},{"text":"        /// form a valid linked list.","highlight_start":1,"highlight_end":38},{"text":"        pub(crate) unsafe fn with_trace<R>(f: impl FnOnce(&trace::Context) -> R) -> Option<R> {","highlight_start":1,"highlight_end":96},{"text":"            CONTEXT.try_with(|c| f(&c.trace)).ok()","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_taskdump!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8852,"byte_end":8877,"line_start":400,"line_end":400,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_taskdump {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:404:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                tokio_unstable,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:186:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_taskdump! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// SAFETY: Callers of this function must ensure that trace frames always\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// form a valid linked list.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) unsafe fn with_trace<R>(f: impl FnOnce(&trace::Context) -> R) -> Option<R> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_taskdump` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8988,"byte_end":9002,"line_start":405,"line_end":405,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_taskdump,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":5565,"byte_end":5863,"line_start":186,"line_end":192,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_taskdump! {","highlight_start":5,"highlight_end":20},{"text":"        /// SAFETY: Callers of this function must ensure that trace frames always","highlight_start":1,"highlight_end":82},{"text":"        /// form a valid linked list.","highlight_start":1,"highlight_end":38},{"text":"        pub(crate) unsafe fn with_trace<R>(f: impl FnOnce(&trace::Context) -> R) -> Option<R> {","highlight_start":1,"highlight_end":96},{"text":"            CONTEXT.try_with(|c| f(&c.trace)).ok()","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_taskdump!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":8852,"byte_end":8877,"line_start":400,"line_end":400,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_taskdump {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:405:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                tokio_taskdump,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:186:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_taskdump! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// SAFETY: Callers of this function must ensure that trace frames always\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// form a valid linked list.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) unsafe fn with_trace<R>(f: impl FnOnce(&trace::Context) -> R) -> Option<R> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_taskdump` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":1841,"byte_end":1855,"line_start":68,"line_end":68,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        tokio_unstable,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:68:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio_unstable,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":1865,"byte_end":1879,"line_start":69,"line_end":69,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        tokio_taskdump,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:69:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio_taskdump,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":3252,"byte_end":3266,"line_start":109,"line_end":109,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_unstable,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:109:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                tokio_unstable,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs","byte_start":3284,"byte_end":3298,"line_start":110,"line_end":110,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"                tokio_taskdump,","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/context.rs:110:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                tokio_taskdump,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/coop.rs","byte_start":7898,"byte_end":7902,"line_start":245,"line_end":245,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(test, not(loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/coop.rs:245:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, not(loom)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":4998,"byte_end":5012,"line_start":223,"line_end":223,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, not(loom)))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/coop.rs","byte_start":6633,"byte_end":6907,"line_start":200,"line_end":207,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        cfg_metrics! {","highlight_start":9,"highlight_end":23},{"text":"            #[inline(always)]","highlight_start":1,"highlight_end":30},{"text":"            fn inc_budget_forced_yield_count() {","highlight_start":1,"highlight_end":49},{"text":"                let _ = context::with_current(|handle| {","highlight_start":1,"highlight_end":57},{"text":"                    handle.scheduler_metrics().inc_budget_forced_yield_count();","highlight_start":1,"highlight_end":80},{"text":"                });","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_metrics!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs","byte_start":4776,"byte_end":4800,"line_start":218,"line_end":218,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_metrics {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/macros/cfg.rs:223:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, not(loom)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/runtime/coop.rs:200:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        cfg_metrics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[inline(always)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fn inc_budget_forced_yield_count() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let _ = context::with_current(|handle| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-1.37.0"
## script = '''
## FROM scratch AS cratesio-tokio-1.37.0
## ADD --chmod=0664 --checksum=sha256:1adbebffeca75fcfd058afa480fb6c0b81e165a0323f9c9d39c9697e37c46787 \
##   https://static.crates.io/crates/tokio/tokio-1.37.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tokio-1.37.0-0724e68cddf1b06e"
## script = '''
## FROM rust-base AS dep-l-tokio-1.37.0-0724e68cddf1b06e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tokio-1.37.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0 \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="1.37.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="37" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bytes"' '--cfg' 'feature="default"' '--cfg' 'feature="io-util"' '--cfg' 'feature="libc"' '--cfg' 'feature="macros"' '--cfg' 'feature="mio"' '--cfg' 'feature="net"' '--cfg' 'feature="num_cpus"' '--cfg' 'feature="rt"' '--cfg' 'feature="rt-multi-thread"' '--cfg' 'feature="socket2"' '--cfg' 'feature="sync"' '--cfg' 'feature="time"' '--cfg' 'feature="tokio-macros"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bytes", "default", "fs", "full", "io-std", "io-util", "libc", "macros", "mio", "net", "num_cpus", "parking_lot", "process", "rt", "rt-multi-thread", "signal", "signal-hook-registry", "socket2", "sync", "test-util", "time", "tokio-macros", "tracing", "windows-sys"))' '-C' 'metadata=436999f0521bbb61' '-C' 'extra-filename=-0724e68cddf1b06e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'bytes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'mio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta' '--extern' 'num_cpus=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'socket2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta' '--extern' 'tokio_macros=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.37.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0724e68cddf1b06e"
## script = """
## FROM scratch AS out-0724e68cddf1b06e
## COPY --from=dep-l-tokio-1.37.0-0724e68cddf1b06e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0724e68cddf1b06e* /"""

FROM scratch AS cratesio-tokio-rustls-0.24.1
ADD --chmod=0664 --checksum=sha256:c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081 \
  https://static.crates.io/crates/tokio-rustls/tokio-rustls-0.24.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tokio-rustls-0.24.1-cef0e5e95c930be3
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tokio-rustls-0.24.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1 \
  --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio_rustls" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Asynchronous TLS/SSL streams for Tokio using Rustls." \
        CARGO_PKG_HOMEPAGE="https://github.com/rustls/tokio-rustls" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio-rustls" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rustls/tokio-rustls" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.24.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="24" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio_rustls' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="early-data"' '--cfg' 'feature="logging"' '--cfg' 'feature="tls12"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("dangerous_configuration", "default", "early-data", "logging", "secret_extraction", "tls12"))' '-C' 'metadata=f2f38f77f6fc4698' '-C' 'extra-filename=-cef0e5e95c930be3' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-cef0e5e95c930be3
COPY --from=dep-l-tokio-rustls-0.24.1-cef0e5e95c930be3 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cef0e5e95c930be3* /

## this = "cef0e5e95c930be3"
## deps = [
##     "264210de0fb2469c",
##     "b81976489825f26e",
##     "63b94b1c8b4a1192",
##     "da34da6838abd7f1",
##     "84473f2ddfbb434a",
##     "a7905fdc410bdfce",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
##     "0724e68cddf1b06e",
##     "17cf73a7d3f13d95",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "32982cb980ef9328",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "rustls-264210de0fb2469c",
##     "log-b81976489825f26e",
##     "ring-63b94b1c8b4a1192",
##     "cfg_if-da34da6838abd7f1",
##     "getrandom-84473f2ddfbb434a",
##     "libc-a7905fdc410bdfce",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
##     "tokio-0724e68cddf1b06e",
##     "bytes-17cf73a7d3f13d95",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "pin_project_lite-32982cb980ef9328",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/tokio_rustls-cef0e5e95c930be3.d",
##     "deps/libtokio_rustls-cef0e5e95c930be3.rmeta",
##     "deps/libtokio_rustls-cef0e5e95c930be3.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tokio_rustls-cef0e5e95c930be3.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-rustls-0.24.1"
## script = '''
## FROM scratch AS cratesio-tokio-rustls-0.24.1
## ADD --chmod=0664 --checksum=sha256:c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081 \
##   https://static.crates.io/crates/tokio-rustls/tokio-rustls-0.24.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tokio-rustls-0.24.1-cef0e5e95c930be3"
## script = '''
## FROM rust-base AS dep-l-tokio-rustls-0.24.1-cef0e5e95c930be3
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tokio-rustls-0.24.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1 \
##   --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio_rustls" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Asynchronous TLS/SSL streams for Tokio using Rustls." \
##         CARGO_PKG_HOMEPAGE="https://github.com/rustls/tokio-rustls" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio-rustls" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rustls/tokio-rustls" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.24.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="24" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio_rustls' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="early-data"' '--cfg' 'feature="logging"' '--cfg' 'feature="tls12"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("dangerous_configuration", "default", "early-data", "logging", "secret_extraction", "tls12"))' '-C' 'metadata=f2f38f77f6fc4698' '-C' 'extra-filename=-cef0e5e95c930be3' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-rustls-0.24.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-cef0e5e95c930be3"
## script = """
## FROM scratch AS out-cef0e5e95c930be3
## COPY --from=dep-l-tokio-rustls-0.24.1-cef0e5e95c930be3 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cef0e5e95c930be3* /"""

FROM scratch AS cratesio-tracing-attributes-0.1.27
ADD --chmod=0664 --checksum=sha256:34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7 \
  https://static.crates.io/crates/tracing-attributes/tracing-attributes-0.1.27.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-tracing-attributes-0.1.27-4a556d35209377d8
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tracing-attributes-0.1.27,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27 \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tracing_attributes" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>:Eliza Weisman <eliza@buoyant.io>:David Barsky <dbarsky@amazon.com>" \
        CARGO_PKG_DESCRIPTION="Procedural macro attributes for automatically instrumenting functions.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tracing-attributes" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="0.1.27" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="27" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tracing_attributes' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("async-await"))' '-C' 'metadata=93bb11ac7c2c752f' '-C' 'extra-filename=-4a556d35209377d8' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4a556d35209377d8
COPY --from=dep-p-tracing-attributes-0.1.27-4a556d35209377d8 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4a556d35209377d8* /

## this = "4a556d35209377d8"
## deps = [
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## is_proc_macro = true
## writes = [
##     "deps/tracing_attributes-4a556d35209377d8.d",
##     "deps/libtracing_attributes-4a556d35209377d8.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tracing_attributes-4a556d35209377d8.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27/src/lib.rs","byte_start":2431,"byte_end":2448,"line_start":73,"line_end":73,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    private_in_public,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27/src/lib.rs:73:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    private_in_public,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tracing-attributes-0.1.27"
## script = '''
## FROM scratch AS cratesio-tracing-attributes-0.1.27
## ADD --chmod=0664 --checksum=sha256:34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7 \
##   https://static.crates.io/crates/tracing-attributes/tracing-attributes-0.1.27.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-tracing-attributes-0.1.27-4a556d35209377d8"
## script = '''
## FROM rust-base AS dep-p-tracing-attributes-0.1.27-4a556d35209377d8
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tracing-attributes-0.1.27,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27 \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tracing_attributes" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>:Eliza Weisman <eliza@buoyant.io>:David Barsky <dbarsky@amazon.com>" \
##         CARGO_PKG_DESCRIPTION="Procedural macro attributes for automatically instrumenting functions.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tracing-attributes" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="0.1.27" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="27" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tracing_attributes' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("async-await"))' '-C' 'metadata=93bb11ac7c2c752f' '-C' 'extra-filename=-4a556d35209377d8' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'proc_macro2=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib' '--extern' 'quote=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib' '--extern' 'syn=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-attributes-0.1.27/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4a556d35209377d8"
## script = """
## FROM scratch AS out-4a556d35209377d8
## COPY --from=dep-p-tracing-attributes-0.1.27-4a556d35209377d8 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4a556d35209377d8* /"""

FROM scratch AS cratesio-tracing-core-0.1.32
ADD --chmod=0664 --checksum=sha256:c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54 \
  https://static.crates.io/crates/tracing-core/tracing-core-0.1.32.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tracing-core-0.1.32-8d324580670ac264
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tracing-core-0.1.32,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32 \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tracing_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Core primitives for application-level tracing.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tracing-core" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="0.1.32" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="32" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tracing_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="once_cell"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "once_cell", "std", "valuable"))' '-C' 'metadata=c213b90b405fae5b' '-C' 'extra-filename=-8d324580670ac264' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8d324580670ac264
COPY --from=dep-l-tracing-core-0.1.32-8d324580670ac264 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-8d324580670ac264* /

## this = "8d324580670ac264"
## deps = ["6ed51fafe322ecba"]
## short_externs = ["once_cell-6ed51fafe322ecba"]
## writes = [
##     "deps/tracing_core-8d324580670ac264.d",
##     "deps/libtracing_core-8d324580670ac264.rmeta",
##     "deps/libtracing_core-8d324580670ac264.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tracing_core-8d324580670ac264.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/lib.rs","byte_start":5184,"byte_end":5201,"line_start":138,"line_end":138,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    private_in_public,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/lib.rs:138:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    private_in_public,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `alloc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs","byte_start":5465,"byte_end":5482,"line_start":147,"line_end":147,"column_start":7,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(feature = \"alloc\")]","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `once_cell`, `std`, and `valuable`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `alloc` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `alloc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs:147:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"alloc\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `once_cell`, `std`, and `valuable`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `alloc` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `alloc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs","byte_start":5522,"byte_end":5539,"line_start":150,"line_end":150,"column_start":7,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(feature = \"alloc\")]","highlight_start":7,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `once_cell`, `std`, and `valuable`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `alloc` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `alloc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs:150:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"alloc\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `once_cell`, `std`, and `valuable`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `alloc` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tracing_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs","byte_start":14048,"byte_end":14064,"line_start":374,"line_end":374,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(all(tracing_unstable, feature = \"valuable\"))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tracing_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs:374:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tracing_unstable, feature = \"valuable\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tracing_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs","byte_start":23811,"byte_end":23827,"line_start":719,"line_end":719,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(all(tracing_unstable, feature = \"valuable\"))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tracing_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs:719:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tracing_unstable, feature = \"valuable\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tracing_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs","byte_start":23918,"byte_end":23934,"line_start":722,"line_end":722,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(all(tracing_unstable, feature = \"valuable\"))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tracing_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs:722:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tracing_unstable, feature = \"valuable\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tracing_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs","byte_start":24193,"byte_end":24209,"line_start":730,"line_end":730,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(all(tracing_unstable, feature = \"valuable\"))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tracing_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs:730:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tracing_unstable, feature = \"valuable\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tracing_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs","byte_start":24307,"byte_end":24323,"line_start":733,"line_end":733,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(all(tracing_unstable, feature = \"valuable\"))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tracing_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs:733:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tracing_unstable, feature = \"valuable\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tracing_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs","byte_start":10700,"byte_end":10716,"line_start":270,"line_end":270,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"    #[cfg(all(tracing_unstable, feature = \"valuable\"))]","highlight_start":15,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tracing_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/field.rs:270:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(tracing_unstable, feature = \"valuable\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tracing_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tracing_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"creating a shared reference to mutable static is discouraged","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs","byte_start":16239,"byte_end":16255,"line_start":458,"line_end":458,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        &GLOBAL_DISPATCH","highlight_start":9,"highlight_end":25}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(static_mut_refs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `&raw const` instead to create a raw pointer","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs","byte_start":16239,"byte_end":16240,"line_start":458,"line_end":458,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        &GLOBAL_DISPATCH","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"&raw const ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: creating a shared reference to mutable static is discouraged\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/dispatcher.rs:458:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &GLOBAL_DISPATCH\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mshared reference to mutable static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(static_mut_refs)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `&raw const` instead to create a raw pointer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m&raw const \u001b[0m\u001b[0mGLOBAL_DISPATCH\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"10 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 10 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tracing-core-0.1.32"
## script = '''
## FROM scratch AS cratesio-tracing-core-0.1.32
## ADD --chmod=0664 --checksum=sha256:c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54 \
##   https://static.crates.io/crates/tracing-core/tracing-core-0.1.32.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tracing-core-0.1.32-8d324580670ac264"
## script = '''
## FROM rust-base AS dep-l-tracing-core-0.1.32-8d324580670ac264
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tracing-core-0.1.32,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32 \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tracing_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Core primitives for application-level tracing.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tracing-core" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="0.1.32" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="32" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tracing_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="once_cell"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "once_cell", "std", "valuable"))' '-C' 'metadata=c213b90b405fae5b' '-C' 'extra-filename=-8d324580670ac264' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-core-0.1.32/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8d324580670ac264"
## script = """
## FROM scratch AS out-8d324580670ac264
## COPY --from=dep-l-tracing-core-0.1.32-8d324580670ac264 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-8d324580670ac264* /"""

FROM scratch AS cratesio-tracing-0.1.40
ADD --chmod=0664 --checksum=sha256:c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef \
  https://static.crates.io/crates/tracing/tracing-0.1.40.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tracing-0.1.40-320990e22bbf0744
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tracing-0.1.40,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40 \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tracing" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40/Cargo.toml" \
        CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>:Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Application-level tracing for Rust.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tracing" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="0.1.40" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="40" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tracing' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="attributes"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="tracing-attributes"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("async-await", "attributes", "default", "log", "log-always", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "std", "tracing-attributes", "valuable"))' '-C' 'metadata=6c7df1604fcc45bb' '-C' 'extra-filename=-320990e22bbf0744' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'tracing_attributes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so' '--extern' 'tracing_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-320990e22bbf0744
COPY --from=dep-l-tracing-0.1.40-320990e22bbf0744 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-320990e22bbf0744* /

## this = "320990e22bbf0744"
## deps = [
##     "32982cb980ef9328",
##     "4a556d35209377d8",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "8d324580670ac264",
##     "6ed51fafe322ecba",
## ]
## short_externs = [
##     "pin_project_lite-32982cb980ef9328",
##     "tracing_attributes-4a556d35209377d8",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "tracing_core-8d324580670ac264",
##     "once_cell-6ed51fafe322ecba",
## ]
## writes = [
##     "deps/tracing-320990e22bbf0744.d",
##     "deps/libtracing-320990e22bbf0744.rmeta",
##     "deps/libtracing-320990e22bbf0744.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tracing-320990e22bbf0744.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40/src/lib.rs","byte_start":39540,"byte_end":39557,"line_start":932,"line_end":932,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    private_in_public,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40/src/lib.rs:932:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m932\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    private_in_public,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tracing-0.1.40"
## script = '''
## FROM scratch AS cratesio-tracing-0.1.40
## ADD --chmod=0664 --checksum=sha256:c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef \
##   https://static.crates.io/crates/tracing/tracing-0.1.40.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tracing-0.1.40-320990e22bbf0744"
## script = '''
## FROM rust-base AS dep-l-tracing-0.1.40-320990e22bbf0744
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tracing-0.1.40,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40 \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tracing" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>:Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Application-level tracing for Rust.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tracing" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="0.1.40" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="40" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tracing' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="attributes"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="tracing-attributes"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("async-await", "attributes", "default", "log", "log-always", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "std", "tracing-attributes", "valuable"))' '-C' 'metadata=6c7df1604fcc45bb' '-C' 'extra-filename=-320990e22bbf0744' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'tracing_attributes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so' '--extern' 'tracing_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-0.1.40/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-320990e22bbf0744"
## script = """
## FROM scratch AS out-320990e22bbf0744
## COPY --from=dep-l-tracing-0.1.40-320990e22bbf0744 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-320990e22bbf0744* /"""

FROM scratch AS cratesio-percent-encoding-2.3.1
ADD --chmod=0664 --checksum=sha256:e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e \
  https://static.crates.io/crates/percent-encoding/percent-encoding-2.3.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-percent-encoding-2.3.1-cba19d70c6cf7027
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-percent-encoding-2.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="percent_encoding" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The rust-url developers" \
        CARGO_PKG_DESCRIPTION="Percent encoding and decoding" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="percent-encoding" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url/" \
        CARGO_PKG_RUST_VERSION="1.51" \
        CARGO_PKG_VERSION="2.3.1" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'percent_encoding' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=28531c7eaa2528e3' '-C' 'extra-filename=-cba19d70c6cf7027' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-cba19d70c6cf7027
COPY --from=dep-l-percent-encoding-2.3.1-cba19d70c6cf7027 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cba19d70c6cf7027* /

## this = "cba19d70c6cf7027"
## writes = [
##     "deps/percent_encoding-cba19d70c6cf7027.d",
##     "deps/libpercent_encoding-cba19d70c6cf7027.rmeta",
##     "deps/libpercent_encoding-cba19d70c6cf7027.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/percent_encoding-cba19d70c6cf7027.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"ambiguous wide pointer comparison, the comparison includes metadata which may not be expected","code":{"code":"ambiguous_wide_pointer_comparisons","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15228,"byte_end":15262,"line_start":466,"line_end":466,"column_start":35,"column_end":69,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":35,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ambiguous_wide_pointer_comparisons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `std::ptr::addr_eq` or untyped pointers to only compare their addresses","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15228,"byte_end":15228,"line_start":466,"line_end":466,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":"std::ptr::addr_eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15236,"byte_end":15240,"line_start":466,"line_end":466,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15262,"byte_end":15262,"line_start":466,"line_end":466,"column_start":69,"column_end":69,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":69,"highlight_end":69}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"use explicit `std::ptr::eq` method to compare metadata and addresses","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15228,"byte_end":15228,"line_start":466,"line_end":466,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":"std::ptr::eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15236,"byte_end":15240,"line_start":466,"line_end":466,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs","byte_start":15262,"byte_end":15262,"line_start":466,"line_end":466,"column_start":69,"column_end":69,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":69,"highlight_end":69}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs:466:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    debug_assert!(raw_utf8\u001b[0m\u001b[0m\u001b[38;5;9m == \u001b[0m\u001b[0m&*bytes as *const [u8]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    debug_assert!(\u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::addr_eq(\u001b[0m\u001b[0mraw_utf8\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&*bytes as *const [u8]\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use explicit `std::ptr::eq` method to compare metadata and addresses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    debug_assert!(raw_utf8\u001b[0m\u001b[0m\u001b[38;5;9m == \u001b[0m\u001b[0m&*bytes as *const [u8]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    debug_assert!(\u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::eq(\u001b[0m\u001b[0mraw_utf8\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&*bytes as *const [u8]\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-percent-encoding-2.3.1"
## script = '''
## FROM scratch AS cratesio-percent-encoding-2.3.1
## ADD --chmod=0664 --checksum=sha256:e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e \
##   https://static.crates.io/crates/percent-encoding/percent-encoding-2.3.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-percent-encoding-2.3.1-cba19d70c6cf7027"
## script = '''
## FROM rust-base AS dep-l-percent-encoding-2.3.1-cba19d70c6cf7027
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-percent-encoding-2.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="percent_encoding" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The rust-url developers" \
##         CARGO_PKG_DESCRIPTION="Percent encoding and decoding" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="percent-encoding" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url/" \
##         CARGO_PKG_RUST_VERSION="1.51" \
##         CARGO_PKG_VERSION="2.3.1" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'percent_encoding' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=28531c7eaa2528e3' '-C' 'extra-filename=-cba19d70c6cf7027' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/percent-encoding-2.3.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-cba19d70c6cf7027"
## script = """
## FROM scratch AS out-cba19d70c6cf7027
## COPY --from=dep-l-percent-encoding-2.3.1-cba19d70c6cf7027 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cba19d70c6cf7027* /"""

FROM scratch AS cratesio-form_urlencoded-1.2.1
ADD --chmod=0664 --checksum=sha256:e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456 \
  https://static.crates.io/crates/form_urlencoded/form_urlencoded-1.2.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-form_urlencoded-1.2.1-4251738685e38e22
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-form_urlencoded-1.2.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1 \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="form_urlencoded" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The rust-url developers" \
        CARGO_PKG_DESCRIPTION="Parser and serializer for the application/x-www-form-urlencoded syntax, as used by HTML forms." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="form_urlencoded" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url" \
        CARGO_PKG_RUST_VERSION="1.51" \
        CARGO_PKG_VERSION="1.2.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'form_urlencoded' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=581ad1e2005173de' '-C' 'extra-filename=-4251738685e38e22' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'percent_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4251738685e38e22
COPY --from=dep-l-form_urlencoded-1.2.1-4251738685e38e22 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4251738685e38e22* /

## this = "4251738685e38e22"
## deps = ["cba19d70c6cf7027"]
## short_externs = ["percent_encoding-cba19d70c6cf7027"]
## writes = [
##     "deps/form_urlencoded-4251738685e38e22.d",
##     "deps/libform_urlencoded-4251738685e38e22.rmeta",
##     "deps/libform_urlencoded-4251738685e38e22.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/form_urlencoded-4251738685e38e22.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"ambiguous wide pointer comparison, the comparison includes metadata which may not be expected","code":{"code":"ambiguous_wide_pointer_comparisons","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12859,"byte_end":12893,"line_start":414,"line_end":414,"column_start":35,"column_end":69,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":35,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ambiguous_wide_pointer_comparisons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `std::ptr::addr_eq` or untyped pointers to only compare their addresses","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12859,"byte_end":12859,"line_start":414,"line_end":414,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":"std::ptr::addr_eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12867,"byte_end":12871,"line_start":414,"line_end":414,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12893,"byte_end":12893,"line_start":414,"line_end":414,"column_start":69,"column_end":69,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":69,"highlight_end":69}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"use explicit `std::ptr::eq` method to compare metadata and addresses","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12859,"byte_end":12859,"line_start":414,"line_end":414,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":"std::ptr::eq(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12867,"byte_end":12871,"line_start":414,"line_end":414,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":", ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs","byte_start":12893,"byte_end":12893,"line_start":414,"line_end":414,"column_start":69,"column_end":69,"is_primary":true,"text":[{"text":"                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);","highlight_start":69,"highlight_end":69}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs:414:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    debug_assert!(raw_utf8 == &*bytes as *const [u8]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    debug_assert!(raw_utf8\u001b[0m\u001b[0m\u001b[38;5;9m == \u001b[0m\u001b[0m&*bytes as *const [u8]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    debug_assert!(\u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::addr_eq(\u001b[0m\u001b[0mraw_utf8\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&*bytes as *const [u8]\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use explicit `std::ptr::eq` method to compare metadata and addresses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    debug_assert!(raw_utf8\u001b[0m\u001b[0m\u001b[38;5;9m == \u001b[0m\u001b[0m&*bytes as *const [u8]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    debug_assert!(\u001b[0m\u001b[0m\u001b[38;5;10mstd::ptr::eq(\u001b[0m\u001b[0mraw_utf8\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&*bytes as *const [u8]\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-form_urlencoded-1.2.1"
## script = '''
## FROM scratch AS cratesio-form_urlencoded-1.2.1
## ADD --chmod=0664 --checksum=sha256:e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456 \
##   https://static.crates.io/crates/form_urlencoded/form_urlencoded-1.2.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-form_urlencoded-1.2.1-4251738685e38e22"
## script = '''
## FROM rust-base AS dep-l-form_urlencoded-1.2.1-4251738685e38e22
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-form_urlencoded-1.2.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1 \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="form_urlencoded" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The rust-url developers" \
##         CARGO_PKG_DESCRIPTION="Parser and serializer for the application/x-www-form-urlencoded syntax, as used by HTML forms." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="form_urlencoded" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url" \
##         CARGO_PKG_RUST_VERSION="1.51" \
##         CARGO_PKG_VERSION="1.2.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'form_urlencoded' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=581ad1e2005173de' '-C' 'extra-filename=-4251738685e38e22' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'percent_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/form_urlencoded-1.2.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4251738685e38e22"
## script = """
## FROM scratch AS out-4251738685e38e22
## COPY --from=dep-l-form_urlencoded-1.2.1-4251738685e38e22 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4251738685e38e22* /"""

FROM scratch AS cratesio-url-2.5.0
ADD --chmod=0664 --checksum=sha256:31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633 \
  https://static.crates.io/crates/url/url-2.5.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-url-2.5.0-7914ef07c5f53ddf
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-url-2.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0 \
  --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
  --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="url" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="The rust-url developers" \
        CARGO_PKG_DESCRIPTION="URL library for Rust, based on the WHATWG URL Standard" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="url" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="2.5.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'url' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("debugger_visualizer", "default", "expose_internals", "serde"))' '-C' 'metadata=ad8662fa4ea2d338' '-C' 'extra-filename=-7914ef07c5f53ddf' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'form_urlencoded=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta' '--extern' 'idna=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta' '--extern' 'percent_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7914ef07c5f53ddf
COPY --from=dep-l-url-2.5.0-7914ef07c5f53ddf /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7914ef07c5f53ddf* /

## this = "7914ef07c5f53ddf"
## deps = [
##     "4251738685e38e22",
##     "cba19d70c6cf7027",
##     "c78132bf36574e8f",
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "form_urlencoded-4251738685e38e22",
##     "percent_encoding-cba19d70c6cf7027",
##     "idna-c78132bf36574e8f",
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/url-7914ef07c5f53ddf.d",
##     "deps/liburl-7914ef07c5f53ddf.rmeta",
##     "deps/liburl-7914ef07c5f53ddf.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/url-7914ef07c5f53ddf.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-url-2.5.0"
## script = '''
## FROM scratch AS cratesio-url-2.5.0
## ADD --chmod=0664 --checksum=sha256:31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633 \
##   https://static.crates.io/crates/url/url-2.5.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-url-2.5.0-7914ef07c5f53ddf"
## script = '''
## FROM rust-base AS dep-l-url-2.5.0-7914ef07c5f53ddf
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-url-2.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0 \
##   --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
##   --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="url" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The rust-url developers" \
##         CARGO_PKG_DESCRIPTION="URL library for Rust, based on the WHATWG URL Standard" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="url" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/rust-url" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="2.5.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'url' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("debugger_visualizer", "default", "expose_internals", "serde"))' '-C' 'metadata=ad8662fa4ea2d338' '-C' 'extra-filename=-7914ef07c5f53ddf' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'form_urlencoded=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta' '--extern' 'idna=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta' '--extern' 'percent_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/url-2.5.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7914ef07c5f53ddf"
## script = """
## FROM scratch AS out-7914ef07c5f53ddf
## COPY --from=dep-l-url-2.5.0-7914ef07c5f53ddf /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7914ef07c5f53ddf* /"""

FROM scratch AS cratesio-hickory-proto-0.25.0-alpha.1
ADD --chmod=0664 --checksum=sha256:2dac1c02877cba0eb1c132ef7bfe13f92aaa44911e89bf9e15eddbb7e4114bed \
  https://static.crates.io/crates/hickory-proto/hickory-proto-0.25.0-alpha.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hickory-proto-0.25.0-alpha.1-038139804ab046ea
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hickory-proto-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1 \
  --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
  --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
  --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
  --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
  --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
  --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
  --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
  --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
  --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
  --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
  --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
  --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
  --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
  --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
  --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hickory_proto" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
        CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS library. This is the foundational DNS protocol library for all Hickory DNS projects.\n" \
        CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hickory-proto" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.25.0-alpha.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="25" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE="alpha.1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hickory_proto' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bitflags"' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="ring"' '--cfg' 'feature="rustls"' '--cfg' 'feature="rustls-pemfile"' '--cfg' 'feature="serde"' '--cfg' 'feature="serde-config"' '--cfg' 'feature="text-parsing"' '--cfg' 'feature="tokio"' '--cfg' 'feature="tokio-runtime"' '--cfg' 'feature="tokio-rustls"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "bitflags", "bytes", "default", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "h2", "h3", "h3-quinn", "http", "js-sys", "mdns", "native-certs", "native-tls", "openssl", "quinn", "ring", "rustls", "rustls-pemfile", "serde", "serde-config", "socket2", "testing", "text-parsing", "tokio", "tokio-native-tls", "tokio-openssl", "tokio-runtime", "tokio-rustls", "wasm-bindgen", "wasm-bindgen-crate", "webpki-roots"))' '-C' 'metadata=e38e1233a6feb1a5' '-C' 'extra-filename=-038139804ab046ea' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'async_recursion=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so' '--extern' 'async_trait=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so' '--extern' 'bitflags=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'data_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta' '--extern' 'enum_as_inner=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so' '--extern' 'futures_channel=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta' '--extern' 'futures_io=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'idna=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta' '--extern' 'ipnet=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'rand=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'rustls_native_certs=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta' '--extern' 'rustls_pemfile=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'tinyvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tokio_rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--extern' 'url=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-038139804ab046ea
COPY --from=dep-l-hickory-proto-0.25.0-alpha.1-038139804ab046ea /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-038139804ab046ea* /

## this = "038139804ab046ea"
## deps = [
##     "fd8b71f0a4504cc7",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "3fb14aec5601ab5a",
##     "053eac235c7ed568",
##     "da34da6838abd7f1",
##     "e3ffa7a902242322",
##     "002f3af3555cdc1d",
##     "2f387b4601b8b6b0",
##     "adcb9d3de5d6fae9",
##     "da7454144a4b1d2d",
##     "9a295684e8a14a09",
##     "85ef45b09b00482a",
##     "6c36b04a10bba36c",
##     "32982cb980ef9328",
##     "b74f2a8eb0482878",
##     "9a31c9ae14e5d0d4",
##     "c78132bf36574e8f",
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
##     "c991228b632df552",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "6ed51fafe322ecba",
##     "5161209caf71d483",
##     "a7905fdc410bdfce",
##     "8e2f025dcc32e9af",
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "63b94b1c8b4a1192",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "264210de0fb2469c",
##     "b81976489825f26e",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
##     "c785b10cd1fa3185",
##     "0ee236ae7bf0c632",
##     "a38c83241847def9",
##     "de6de5507c11303f",
##     "a653fbb7540bf139",
##     "b31d1031030a1f93",
##     "0724e68cddf1b06e",
##     "17cf73a7d3f13d95",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "cef0e5e95c930be3",
##     "320990e22bbf0744",
##     "4a556d35209377d8",
##     "8d324580670ac264",
##     "7914ef07c5f53ddf",
##     "4251738685e38e22",
##     "cba19d70c6cf7027",
## ]
## short_externs = [
##     "async_recursion-fd8b71f0a4504cc7",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "async_trait-3fb14aec5601ab5a",
##     "bitflags-053eac235c7ed568",
##     "cfg_if-da34da6838abd7f1",
##     "data_encoding-e3ffa7a902242322",
##     "enum_as_inner-002f3af3555cdc1d",
##     "heck-2f387b4601b8b6b0",
##     "futures_channel-adcb9d3de5d6fae9",
##     "futures_core-da7454144a4b1d2d",
##     "futures_io-9a295684e8a14a09",
##     "futures_util-85ef45b09b00482a",
##     "futures_task-6c36b04a10bba36c",
##     "pin_project_lite-32982cb980ef9328",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-9a31c9ae14e5d0d4",
##     "idna-c78132bf36574e8f",
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
##     "ipnet-c991228b632df552",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "once_cell-6ed51fafe322ecba",
##     "rand-5161209caf71d483",
##     "libc-a7905fdc410bdfce",
##     "rand_chacha-8e2f025dcc32e9af",
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "ring-63b94b1c8b4a1192",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "rustls-264210de0fb2469c",
##     "log-b81976489825f26e",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
##     "rustls_native_certs-c785b10cd1fa3185",
##     "openssl_probe-0ee236ae7bf0c632",
##     "rustls_pemfile-a38c83241847def9",
##     "base64-de6de5507c11303f",
##     "thiserror-a653fbb7540bf139",
##     "thiserror_impl-b31d1031030a1f93",
##     "tokio-0724e68cddf1b06e",
##     "bytes-17cf73a7d3f13d95",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "tokio_rustls-cef0e5e95c930be3",
##     "tracing-320990e22bbf0744",
##     "tracing_attributes-4a556d35209377d8",
##     "tracing_core-8d324580670ac264",
##     "url-7914ef07c5f53ddf",
##     "form_urlencoded-4251738685e38e22",
##     "percent_encoding-cba19d70c6cf7027",
## ]
## writes = [
##     "deps/hickory_proto-038139804ab046ea.d",
##     "deps/libhickory_proto-038139804ab046ea.rmeta",
##     "deps/libhickory_proto-038139804ab046ea.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hickory_proto-038139804ab046ea.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[contexts]]
## name = "crate_out-24468494741c1625"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hickory-proto-0.25.0-alpha.1"
## script = '''
## FROM scratch AS cratesio-hickory-proto-0.25.0-alpha.1
## ADD --chmod=0664 --checksum=sha256:2dac1c02877cba0eb1c132ef7bfe13f92aaa44911e89bf9e15eddbb7e4114bed \
##   https://static.crates.io/crates/hickory-proto/hickory-proto-0.25.0-alpha.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hickory-proto-0.25.0-alpha.1-038139804ab046ea"
## script = '''
## FROM rust-base AS dep-l-hickory-proto-0.25.0-alpha.1-038139804ab046ea
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hickory-proto-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1 \
##   --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
##   --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
##   --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
##   --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
##   --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##   --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##   --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
##   --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
##   --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
##   --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
##   --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
##   --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
##   --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##   --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
##   --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hickory_proto" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
##         CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS library. This is the foundational DNS protocol library for all Hickory DNS projects.\n" \
##         CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hickory-proto" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.25.0-alpha.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="25" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE="alpha.1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hickory_proto' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bitflags"' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="ring"' '--cfg' 'feature="rustls"' '--cfg' 'feature="rustls-pemfile"' '--cfg' 'feature="serde"' '--cfg' 'feature="serde-config"' '--cfg' 'feature="text-parsing"' '--cfg' 'feature="tokio"' '--cfg' 'feature="tokio-runtime"' '--cfg' 'feature="tokio-rustls"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "bitflags", "bytes", "default", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "h2", "h3", "h3-quinn", "http", "js-sys", "mdns", "native-certs", "native-tls", "openssl", "quinn", "ring", "rustls", "rustls-pemfile", "serde", "serde-config", "socket2", "testing", "text-parsing", "tokio", "tokio-native-tls", "tokio-openssl", "tokio-runtime", "tokio-rustls", "wasm-bindgen", "wasm-bindgen-crate", "webpki-roots"))' '-C' 'metadata=e38e1233a6feb1a5' '-C' 'extra-filename=-038139804ab046ea' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'async_recursion=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so' '--extern' 'async_trait=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so' '--extern' 'bitflags=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'data_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta' '--extern' 'enum_as_inner=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so' '--extern' 'futures_channel=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta' '--extern' 'futures_io=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'idna=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta' '--extern' 'ipnet=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'rand=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta' '--extern' 'ring=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'rustls_native_certs=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta' '--extern' 'rustls_pemfile=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'tinyvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tokio_rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--extern' 'url=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-proto-0.25.0-alpha.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-038139804ab046ea"
## script = """
## FROM scratch AS out-038139804ab046ea
## COPY --from=dep-l-hickory-proto-0.25.0-alpha.1-038139804ab046ea /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-038139804ab046ea* /"""

FROM scratch AS cratesio-endian-type-0.1.2
ADD --chmod=0664 --checksum=sha256:c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d \
  https://static.crates.io/crates/endian-type/endian-type-0.1.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-endian-type-0.1.2-49249c9006ab469a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-endian-type-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="endian_type" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Lolirofle <lolipopple@hotmail.com>" \
        CARGO_PKG_DESCRIPTION="Type safe wrappers for types with a defined byte order" \
        CARGO_PKG_HOMEPAGE="https://github.com/Lolirofle/endian-type" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="endian-type" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/Lolirofle/endian-type.git" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'endian_type' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=93e443a2eeb69f65' '-C' 'extra-filename=-49249c9006ab469a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-49249c9006ab469a
COPY --from=dep-l-endian-type-0.1.2-49249c9006ab469a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-49249c9006ab469a* /

## this = "49249c9006ab469a"
## writes = [
##     "deps/endian_type-49249c9006ab469a.d",
##     "deps/libendian_type-49249c9006ab469a.rmeta",
##     "deps/libendian_type-49249c9006ab469a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/endian_type-49249c9006ab469a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-endian-type-0.1.2"
## script = '''
## FROM scratch AS cratesio-endian-type-0.1.2
## ADD --chmod=0664 --checksum=sha256:c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d \
##   https://static.crates.io/crates/endian-type/endian-type-0.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-endian-type-0.1.2-49249c9006ab469a"
## script = '''
## FROM rust-base AS dep-l-endian-type-0.1.2-49249c9006ab469a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-endian-type-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="endian_type" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Lolirofle <lolipopple@hotmail.com>" \
##         CARGO_PKG_DESCRIPTION="Type safe wrappers for types with a defined byte order" \
##         CARGO_PKG_HOMEPAGE="https://github.com/Lolirofle/endian-type" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="endian-type" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/Lolirofle/endian-type.git" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'endian_type' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=93e443a2eeb69f65' '-C' 'extra-filename=-49249c9006ab469a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/endian-type-0.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-49249c9006ab469a"
## script = """
## FROM scratch AS out-49249c9006ab469a
## COPY --from=dep-l-endian-type-0.1.2-49249c9006ab469a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-49249c9006ab469a* /"""

FROM scratch AS cratesio-smallvec-1.13.2
ADD --chmod=0664 --checksum=sha256:3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67 \
  https://static.crates.io/crates/smallvec/smallvec-1.13.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-smallvec-1.13.2-52fbb4b19901b011
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-smallvec-1.13.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="smallvec" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Servo Project Developers" \
        CARGO_PKG_DESCRIPTION="'Small vector' optimization: store up to a small number of items on the stack" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="smallvec" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/servo/rust-smallvec" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.13.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="13" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'smallvec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "const_generics", "const_new", "debugger_visualizer", "drain_filter", "drain_keep_rest", "may_dangle", "serde", "specialization", "union", "write"))' '-C' 'metadata=232ae73459a6faf6' '-C' 'extra-filename=-52fbb4b19901b011' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-52fbb4b19901b011
COPY --from=dep-l-smallvec-1.13.2-52fbb4b19901b011 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-52fbb4b19901b011* /

## this = "52fbb4b19901b011"
## writes = [
##     "deps/smallvec-52fbb4b19901b011.d",
##     "deps/libsmallvec-52fbb4b19901b011.rmeta",
##     "deps/libsmallvec-52fbb4b19901b011.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/smallvec-52fbb4b19901b011.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-smallvec-1.13.2"
## script = '''
## FROM scratch AS cratesio-smallvec-1.13.2
## ADD --chmod=0664 --checksum=sha256:3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67 \
##   https://static.crates.io/crates/smallvec/smallvec-1.13.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-smallvec-1.13.2-52fbb4b19901b011"
## script = '''
## FROM rust-base AS dep-l-smallvec-1.13.2-52fbb4b19901b011
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-smallvec-1.13.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="smallvec" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Servo Project Developers" \
##         CARGO_PKG_DESCRIPTION="'Small vector' optimization: store up to a small number of items on the stack" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="smallvec" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/rust-smallvec" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.13.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="13" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'smallvec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "const_generics", "const_new", "debugger_visualizer", "drain_filter", "drain_keep_rest", "may_dangle", "serde", "specialization", "union", "write"))' '-C' 'metadata=232ae73459a6faf6' '-C' 'extra-filename=-52fbb4b19901b011' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.13.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-52fbb4b19901b011"
## script = """
## FROM scratch AS out-52fbb4b19901b011
## COPY --from=dep-l-smallvec-1.13.2-52fbb4b19901b011 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-52fbb4b19901b011* /"""

FROM scratch AS cratesio-nibble_vec-0.1.0
ADD --chmod=0664 --checksum=sha256:77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43 \
  https://static.crates.io/crates/nibble_vec/nibble_vec-0.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-nibble_vec-0.1.0-dc00d6cdaaa2dfe5
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-nibble_vec-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0 \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="nibble_vec" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Michael Sproul <micsproul@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Vector data-structure for half-byte values." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="nibble_vec" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/michaelsproul/rust_nibble_vec" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'nibble_vec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=f6461673daadbcb3' '-C' 'extra-filename=-dc00d6cdaaa2dfe5' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-dc00d6cdaaa2dfe5
COPY --from=dep-l-nibble_vec-0.1.0-dc00d6cdaaa2dfe5 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-dc00d6cdaaa2dfe5* /

## this = "dc00d6cdaaa2dfe5"
## deps = ["52fbb4b19901b011"]
## short_externs = ["smallvec-52fbb4b19901b011"]
## writes = [
##     "deps/nibble_vec-dc00d6cdaaa2dfe5.d",
##     "deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta",
##     "deps/libnibble_vec-dc00d6cdaaa2dfe5.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/nibble_vec-dc00d6cdaaa2dfe5.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-nibble_vec-0.1.0"
## script = '''
## FROM scratch AS cratesio-nibble_vec-0.1.0
## ADD --chmod=0664 --checksum=sha256:77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43 \
##   https://static.crates.io/crates/nibble_vec/nibble_vec-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-nibble_vec-0.1.0-dc00d6cdaaa2dfe5"
## script = '''
## FROM rust-base AS dep-l-nibble_vec-0.1.0-dc00d6cdaaa2dfe5
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-nibble_vec-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0 \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="nibble_vec" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Michael Sproul <micsproul@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Vector data-structure for half-byte values." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="nibble_vec" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/michaelsproul/rust_nibble_vec" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'nibble_vec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=f6461673daadbcb3' '-C' 'extra-filename=-dc00d6cdaaa2dfe5' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nibble_vec-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-dc00d6cdaaa2dfe5"
## script = """
## FROM scratch AS out-dc00d6cdaaa2dfe5
## COPY --from=dep-l-nibble_vec-0.1.0-dc00d6cdaaa2dfe5 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-dc00d6cdaaa2dfe5* /"""

FROM scratch AS cratesio-radix_trie-0.2.1
ADD --chmod=0664 --checksum=sha256:c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd \
  https://static.crates.io/crates/radix_trie/radix_trie-0.2.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-radix_trie-0.2.1-7d124cd7b95e1ff5
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-radix_trie-0.2.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1 \
  --mount=from=out-49249c9006ab469a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta,source=/libendian_type-49249c9006ab469a.rmeta \
  --mount=from=out-dc00d6cdaaa2dfe5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta,source=/libnibble_vec-dc00d6cdaaa2dfe5.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="radix_trie" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Michael Sproul <micsproul@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Generic radix trie data-structure." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="radix_trie" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/michaelsproul/rust_radix_trie" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'radix_trie' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde"))' '-C' 'metadata=34602c8923230d40' '-C' 'extra-filename=-7d124cd7b95e1ff5' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'endian_type=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta' '--extern' 'nibble_vec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7d124cd7b95e1ff5
COPY --from=dep-l-radix_trie-0.2.1-7d124cd7b95e1ff5 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7d124cd7b95e1ff5* /

## this = "7d124cd7b95e1ff5"
## deps = [
##     "49249c9006ab469a",
##     "dc00d6cdaaa2dfe5",
##     "52fbb4b19901b011",
## ]
## short_externs = [
##     "endian_type-49249c9006ab469a",
##     "nibble_vec-dc00d6cdaaa2dfe5",
##     "smallvec-52fbb4b19901b011",
## ]
## writes = [
##     "deps/radix_trie-7d124cd7b95e1ff5.d",
##     "deps/libradix_trie-7d124cd7b95e1ff5.rmeta",
##     "deps/libradix_trie-7d124cd7b95e1ff5.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/radix_trie-7d124cd7b95e1ff5.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-radix_trie-0.2.1"
## script = '''
## FROM scratch AS cratesio-radix_trie-0.2.1
## ADD --chmod=0664 --checksum=sha256:c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd \
##   https://static.crates.io/crates/radix_trie/radix_trie-0.2.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-radix_trie-0.2.1-7d124cd7b95e1ff5"
## script = '''
## FROM rust-base AS dep-l-radix_trie-0.2.1-7d124cd7b95e1ff5
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-radix_trie-0.2.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1 \
##   --mount=from=out-49249c9006ab469a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta,source=/libendian_type-49249c9006ab469a.rmeta \
##   --mount=from=out-dc00d6cdaaa2dfe5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta,source=/libnibble_vec-dc00d6cdaaa2dfe5.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="radix_trie" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Michael Sproul <micsproul@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Generic radix trie data-structure." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="radix_trie" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/michaelsproul/rust_radix_trie" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'radix_trie' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde"))' '-C' 'metadata=34602c8923230d40' '-C' 'extra-filename=-7d124cd7b95e1ff5' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'endian_type=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta' '--extern' 'nibble_vec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/radix_trie-0.2.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7d124cd7b95e1ff5"
## script = """
## FROM scratch AS out-7d124cd7b95e1ff5
## COPY --from=dep-l-radix_trie-0.2.1-7d124cd7b95e1ff5 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-7d124cd7b95e1ff5* /"""

FROM scratch AS cratesio-hickory-client-0.25.0-alpha.1
ADD --chmod=0664 --checksum=sha256:02e8e4296c6f31ab660eae808ab74f931226b9693d58d0ef3567aab7d8145402 \
  https://static.crates.io/crates/hickory-client/hickory-client-0.25.0-alpha.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hickory-client-0.25.0-alpha.1-3d2d9bf2c95b1d8e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hickory-client-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
  --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
  --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
  --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
  --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta,source=/libhickory_proto-038139804ab046ea.rmeta \
  --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
  --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
  --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
  --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
  --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
  --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
  --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
  --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
  --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
  --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
  --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
  --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
  --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
  --mount=from=out-7d124cd7b95e1ff5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rmeta,source=/libradix_trie-7d124cd7b95e1ff5.rmeta \
  --mount=from=out-49249c9006ab469a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta,source=/libendian_type-49249c9006ab469a.rmeta \
  --mount=from=out-dc00d6cdaaa2dfe5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta,source=/libnibble_vec-dc00d6cdaaa2dfe5.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hickory_client" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
        CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS library. This is the Client library with DNSSEC support.\n DNSSEC with NSEC validation for negative records, is complete. The client supports\n dynamic DNS with SIG0 authenticated requests, implementing easy to use high level\n functions. Hickory DNS is based on the Tokio and Futures libraries, which means\n it should be easily integrated into other software that also use those\n libraries.\n" \
        CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hickory-client" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.25.0-alpha.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="25" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE="alpha.1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hickory_client' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="native-certs"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "dns-over-https", "dns-over-https-openssl", "dns-over-https-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "mdns", "native-certs", "rustls", "serde", "serde-config", "webpki-roots"))' '-C' 'metadata=7a5cf59745f9a393' '-C' 'extra-filename=-3d2d9bf2c95b1d8e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'data_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta' '--extern' 'futures_channel=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'radix_trie=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rmeta' '--extern' 'rand=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-3d2d9bf2c95b1d8e
COPY --from=dep-l-hickory-client-0.25.0-alpha.1-3d2d9bf2c95b1d8e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3d2d9bf2c95b1d8e* /

## this = "3d2d9bf2c95b1d8e"
## deps = [
##     "da34da6838abd7f1",
##     "e3ffa7a902242322",
##     "adcb9d3de5d6fae9",
##     "da7454144a4b1d2d",
##     "85ef45b09b00482a",
##     "6c36b04a10bba36c",
##     "32982cb980ef9328",
##     "b74f2a8eb0482878",
##     "9a31c9ae14e5d0d4",
##     "038139804ab046ea",
##     "fd8b71f0a4504cc7",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "3fb14aec5601ab5a",
##     "053eac235c7ed568",
##     "002f3af3555cdc1d",
##     "2f387b4601b8b6b0",
##     "9a295684e8a14a09",
##     "c78132bf36574e8f",
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
##     "c991228b632df552",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "6ed51fafe322ecba",
##     "5161209caf71d483",
##     "a7905fdc410bdfce",
##     "8e2f025dcc32e9af",
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "63b94b1c8b4a1192",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "264210de0fb2469c",
##     "b81976489825f26e",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
##     "c785b10cd1fa3185",
##     "0ee236ae7bf0c632",
##     "a38c83241847def9",
##     "de6de5507c11303f",
##     "a653fbb7540bf139",
##     "b31d1031030a1f93",
##     "0724e68cddf1b06e",
##     "17cf73a7d3f13d95",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "cef0e5e95c930be3",
##     "320990e22bbf0744",
##     "4a556d35209377d8",
##     "8d324580670ac264",
##     "7914ef07c5f53ddf",
##     "4251738685e38e22",
##     "cba19d70c6cf7027",
##     "7d124cd7b95e1ff5",
##     "49249c9006ab469a",
##     "dc00d6cdaaa2dfe5",
##     "52fbb4b19901b011",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "data_encoding-e3ffa7a902242322",
##     "futures_channel-adcb9d3de5d6fae9",
##     "futures_core-da7454144a4b1d2d",
##     "futures_util-85ef45b09b00482a",
##     "futures_task-6c36b04a10bba36c",
##     "pin_project_lite-32982cb980ef9328",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-9a31c9ae14e5d0d4",
##     "hickory_proto-038139804ab046ea",
##     "async_recursion-fd8b71f0a4504cc7",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "async_trait-3fb14aec5601ab5a",
##     "bitflags-053eac235c7ed568",
##     "enum_as_inner-002f3af3555cdc1d",
##     "heck-2f387b4601b8b6b0",
##     "futures_io-9a295684e8a14a09",
##     "idna-c78132bf36574e8f",
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
##     "ipnet-c991228b632df552",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "once_cell-6ed51fafe322ecba",
##     "rand-5161209caf71d483",
##     "libc-a7905fdc410bdfce",
##     "rand_chacha-8e2f025dcc32e9af",
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "ring-63b94b1c8b4a1192",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "rustls-264210de0fb2469c",
##     "log-b81976489825f26e",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
##     "rustls_native_certs-c785b10cd1fa3185",
##     "openssl_probe-0ee236ae7bf0c632",
##     "rustls_pemfile-a38c83241847def9",
##     "base64-de6de5507c11303f",
##     "thiserror-a653fbb7540bf139",
##     "thiserror_impl-b31d1031030a1f93",
##     "tokio-0724e68cddf1b06e",
##     "bytes-17cf73a7d3f13d95",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "tokio_rustls-cef0e5e95c930be3",
##     "tracing-320990e22bbf0744",
##     "tracing_attributes-4a556d35209377d8",
##     "tracing_core-8d324580670ac264",
##     "url-7914ef07c5f53ddf",
##     "form_urlencoded-4251738685e38e22",
##     "percent_encoding-cba19d70c6cf7027",
##     "radix_trie-7d124cd7b95e1ff5",
##     "endian_type-49249c9006ab469a",
##     "nibble_vec-dc00d6cdaaa2dfe5",
##     "smallvec-52fbb4b19901b011",
## ]
## writes = [
##     "deps/hickory_client-3d2d9bf2c95b1d8e.d",
##     "deps/libhickory_client-3d2d9bf2c95b1d8e.rmeta",
##     "deps/libhickory_client-3d2d9bf2c95b1d8e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hickory_client-3d2d9bf2c95b1d8e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_client-3d2d9bf2c95b1d8e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_client-3d2d9bf2c95b1d8e.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[contexts]]
## name = "crate_out-24468494741c1625"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hickory-client-0.25.0-alpha.1"
## script = '''
## FROM scratch AS cratesio-hickory-client-0.25.0-alpha.1
## ADD --chmod=0664 --checksum=sha256:02e8e4296c6f31ab660eae808ab74f931226b9693d58d0ef3567aab7d8145402 \
##   https://static.crates.io/crates/hickory-client/hickory-client-0.25.0-alpha.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hickory-client-0.25.0-alpha.1-3d2d9bf2c95b1d8e"
## script = '''
## FROM rust-base AS dep-l-hickory-client-0.25.0-alpha.1-3d2d9bf2c95b1d8e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hickory-client-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
##   --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##   --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
##   --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
##   --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta,source=/libhickory_proto-038139804ab046ea.rmeta \
##   --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
##   --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
##   --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##   --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##   --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
##   --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
##   --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
##   --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
##   --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
##   --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
##   --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##   --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
##   --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
##   --mount=from=out-7d124cd7b95e1ff5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rmeta,source=/libradix_trie-7d124cd7b95e1ff5.rmeta \
##   --mount=from=out-49249c9006ab469a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rmeta,source=/libendian_type-49249c9006ab469a.rmeta \
##   --mount=from=out-dc00d6cdaaa2dfe5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rmeta,source=/libnibble_vec-dc00d6cdaaa2dfe5.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hickory_client" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
##         CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS library. This is the Client library with DNSSEC support.\n DNSSEC with NSEC validation for negative records, is complete. The client supports\n dynamic DNS with SIG0 authenticated requests, implementing easy to use high level\n functions. Hickory DNS is based on the Tokio and Futures libraries, which means\n it should be easily integrated into other software that also use those\n libraries.\n" \
##         CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hickory-client" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.25.0-alpha.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="25" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE="alpha.1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hickory_client' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="native-certs"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "dns-over-https", "dns-over-https-openssl", "dns-over-https-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "mdns", "native-certs", "rustls", "serde", "serde-config", "webpki-roots"))' '-C' 'metadata=7a5cf59745f9a393' '-C' 'extra-filename=-3d2d9bf2c95b1d8e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'data_encoding=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta' '--extern' 'futures_channel=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'radix_trie=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rmeta' '--extern' 'rand=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-client-0.25.0-alpha.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-3d2d9bf2c95b1d8e"
## script = """
## FROM scratch AS out-3d2d9bf2c95b1d8e
## COPY --from=dep-l-hickory-client-0.25.0-alpha.1-3d2d9bf2c95b1d8e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3d2d9bf2c95b1d8e* /"""

FROM scratch AS cratesio-basic-toml-0.1.9
ADD --chmod=0664 --checksum=sha256:823388e228f614e9558c6804262db37960ec8821856535f5c3f59913140558f8 \
  https://static.crates.io/crates/basic-toml/basic-toml-0.1.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-basic-toml-0.1.9-cef69be1d7480c78
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-basic-toml-0.1.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9 \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="basic_toml" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Minimal TOML library with few dependencies" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="basic-toml" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/basic-toml" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.9" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'basic_toml' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=e9537ad94e84af2c' '-C' 'extra-filename=-cef69be1d7480c78' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-cef69be1d7480c78
COPY --from=dep-l-basic-toml-0.1.9-cef69be1d7480c78 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cef69be1d7480c78* /

## this = "cef69be1d7480c78"
## deps = [
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/basic_toml-cef69be1d7480c78.d",
##     "deps/libbasic_toml-cef69be1d7480c78.rmeta",
##     "deps/libbasic_toml-cef69be1d7480c78.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/basic_toml-cef69be1d7480c78.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-basic-toml-0.1.9"
## script = '''
## FROM scratch AS cratesio-basic-toml-0.1.9
## ADD --chmod=0664 --checksum=sha256:823388e228f614e9558c6804262db37960ec8821856535f5c3f59913140558f8 \
##   https://static.crates.io/crates/basic-toml/basic-toml-0.1.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-basic-toml-0.1.9-cef69be1d7480c78"
## script = '''
## FROM rust-base AS dep-l-basic-toml-0.1.9-cef69be1d7480c78
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-basic-toml-0.1.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9 \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="basic_toml" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Minimal TOML library with few dependencies" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="basic-toml" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/basic-toml" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.9" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'basic_toml' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=e9537ad94e84af2c' '-C' 'extra-filename=-cef69be1d7480c78' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/basic-toml-0.1.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-cef69be1d7480c78"
## script = """
## FROM scratch AS out-cef69be1d7480c78
## COPY --from=dep-l-basic-toml-0.1.9-cef69be1d7480c78 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cef69be1d7480c78* /"""

FROM scratch AS cratesio-linked-hash-map-0.5.6
ADD --chmod=0664 --checksum=sha256:0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f \
  https://static.crates.io/crates/linked-hash-map/linked-hash-map-0.5.6.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-linked-hash-map-0.5.6-4904f0514f71f438
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-linked-hash-map-0.5.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="linked_hash_map" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/Cargo.toml" \
        CARGO_PKG_AUTHORS="Stepan Koltsov <stepan.koltsov@gmail.com>:Andrew Paseltiner <apaseltiner@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A HashMap wrapper that holds key-value pairs in insertion order" \
        CARGO_PKG_HOMEPAGE="https://github.com/contain-rs/linked-hash-map" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="linked-hash-map" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/contain-rs/linked-hash-map" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.5.6" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="6" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'linked_hash_map' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("heapsize", "heapsize_impl", "nightly", "serde", "serde_impl"))' '-C' 'metadata=6faba33615487674' '-C' 'extra-filename=-4904f0514f71f438' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4904f0514f71f438
COPY --from=dep-l-linked-hash-map-0.5.6-4904f0514f71f438 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4904f0514f71f438* /

## this = "4904f0514f71f438"
## writes = [
##     "deps/linked_hash_map-4904f0514f71f438.d",
##     "deps/liblinked_hash_map-4904f0514f71f438.rmeta",
##     "deps/liblinked_hash_map-4904f0514f71f438.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/linked_hash_map-4904f0514f71f438.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused return value of `Box::<T>::from_raw` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs","byte_start":4516,"byte_end":4534,"line_start":165,"line_end":165,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            Box::from_raw(cur);","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs","byte_start":4516,"byte_end":4516,"line_start":165,"line_end":165,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Box::from_raw(cur);","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `Box::<T>::from_raw` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs:165:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Box::from_raw(cur);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mBox::from_raw(cur);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unused return value of `Box::<T>::from_raw` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs","byte_start":35963,"byte_end":35987,"line_start":1300,"line_end":1300,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Box::from_raw(self.tail);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs","byte_start":35963,"byte_end":35963,"line_start":1300,"line_end":1300,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                Box::from_raw(self.tail);","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `Box::<T>::from_raw` that must be used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs:1300:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Box::from_raw(self.tail);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mBox::from_raw(self.tail);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-linked-hash-map-0.5.6"
## script = '''
## FROM scratch AS cratesio-linked-hash-map-0.5.6
## ADD --chmod=0664 --checksum=sha256:0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f \
##   https://static.crates.io/crates/linked-hash-map/linked-hash-map-0.5.6.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-linked-hash-map-0.5.6-4904f0514f71f438"
## script = '''
## FROM rust-base AS dep-l-linked-hash-map-0.5.6-4904f0514f71f438
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-linked-hash-map-0.5.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="linked_hash_map" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Stepan Koltsov <stepan.koltsov@gmail.com>:Andrew Paseltiner <apaseltiner@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A HashMap wrapper that holds key-value pairs in insertion order" \
##         CARGO_PKG_HOMEPAGE="https://github.com/contain-rs/linked-hash-map" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="linked-hash-map" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/contain-rs/linked-hash-map" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.5.6" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="6" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'linked_hash_map' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("heapsize", "heapsize_impl", "nightly", "serde", "serde_impl"))' '-C' 'metadata=6faba33615487674' '-C' 'extra-filename=-4904f0514f71f438' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linked-hash-map-0.5.6/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4904f0514f71f438"
## script = """
## FROM scratch AS out-4904f0514f71f438
## COPY --from=dep-l-linked-hash-map-0.5.6-4904f0514f71f438 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4904f0514f71f438* /"""

FROM scratch AS cratesio-lru-cache-0.1.2
ADD --chmod=0664 --checksum=sha256:31e24f1ad8321ca0e8a1e0ac13f23cb668e6f5466c2c57319f6a5cf1cc8e3b1c \
  https://static.crates.io/crates/lru-cache/lru-cache-0.1.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-lru-cache-0.1.2-f6bd03560b1f6bf6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-lru-cache-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2 \
  --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta,source=/liblinked_hash_map-4904f0514f71f438.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="lru_cache" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Stepan Koltsov <stepan.koltsov@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A cache that holds a limited number of key-value pairs" \
        CARGO_PKG_HOMEPAGE="https://github.com/contain-rs/lru-cache" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="lru-cache" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/contain-rs/lru-cache" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'lru_cache' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("heapsize", "heapsize_impl"))' '-C' 'metadata=5e56547db080f0ad' '-C' 'extra-filename=-f6bd03560b1f6bf6' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'linked_hash_map=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f6bd03560b1f6bf6
COPY --from=dep-l-lru-cache-0.1.2-f6bd03560b1f6bf6 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-f6bd03560b1f6bf6* /

## this = "f6bd03560b1f6bf6"
## deps = ["4904f0514f71f438"]
## short_externs = ["linked_hash_map-4904f0514f71f438"]
## writes = [
##     "deps/lru_cache-f6bd03560b1f6bf6.d",
##     "deps/liblru_cache-f6bd03560b1f6bf6.rmeta",
##     "deps/liblru_cache-f6bd03560b1f6bf6.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/lru_cache-f6bd03560b1f6bf6.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-lru-cache-0.1.2"
## script = '''
## FROM scratch AS cratesio-lru-cache-0.1.2
## ADD --chmod=0664 --checksum=sha256:31e24f1ad8321ca0e8a1e0ac13f23cb668e6f5466c2c57319f6a5cf1cc8e3b1c \
##   https://static.crates.io/crates/lru-cache/lru-cache-0.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-lru-cache-0.1.2-f6bd03560b1f6bf6"
## script = '''
## FROM rust-base AS dep-l-lru-cache-0.1.2-f6bd03560b1f6bf6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-lru-cache-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2 \
##   --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta,source=/liblinked_hash_map-4904f0514f71f438.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="lru_cache" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Stepan Koltsov <stepan.koltsov@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A cache that holds a limited number of key-value pairs" \
##         CARGO_PKG_HOMEPAGE="https://github.com/contain-rs/lru-cache" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="lru-cache" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/contain-rs/lru-cache" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'lru_cache' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("heapsize", "heapsize_impl"))' '-C' 'metadata=5e56547db080f0ad' '-C' 'extra-filename=-f6bd03560b1f6bf6' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'linked_hash_map=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lru-cache-0.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f6bd03560b1f6bf6"
## script = """
## FROM scratch AS out-f6bd03560b1f6bf6
## COPY --from=dep-l-lru-cache-0.1.2-f6bd03560b1f6bf6 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-f6bd03560b1f6bf6* /"""

FROM scratch AS cratesio-scopeguard-1.2.0
ADD --chmod=0664 --checksum=sha256:94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49 \
  https://static.crates.io/crates/scopeguard/scopeguard-1.2.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-scopeguard-1.2.0-b477fb82efd13fea
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-scopeguard-1.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="scopeguard" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="bluss" \
        CARGO_PKG_DESCRIPTION="A RAII scope guard that will run a given closure when it goes out of scope,\neven if the code between panics (assuming unwinding panic).\n\nDefines the macros `defer!`, `defer_on_unwind!`, `defer_on_success!` as\nshorthands for guards with one of the implemented strategies.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="scopeguard" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bluss/scopeguard" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.2.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'scopeguard' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "use_std"))' '-C' 'metadata=7130270c04ca018b' '-C' 'extra-filename=-b477fb82efd13fea' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b477fb82efd13fea
COPY --from=dep-l-scopeguard-1.2.0-b477fb82efd13fea /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b477fb82efd13fea* /

## this = "b477fb82efd13fea"
## writes = [
##     "deps/scopeguard-b477fb82efd13fea.d",
##     "deps/libscopeguard-b477fb82efd13fea.rmeta",
##     "deps/libscopeguard-b477fb82efd13fea.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/scopeguard-b477fb82efd13fea.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-scopeguard-1.2.0"
## script = '''
## FROM scratch AS cratesio-scopeguard-1.2.0
## ADD --chmod=0664 --checksum=sha256:94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49 \
##   https://static.crates.io/crates/scopeguard/scopeguard-1.2.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-scopeguard-1.2.0-b477fb82efd13fea"
## script = '''
## FROM rust-base AS dep-l-scopeguard-1.2.0-b477fb82efd13fea
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-scopeguard-1.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="scopeguard" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="bluss" \
##         CARGO_PKG_DESCRIPTION="A RAII scope guard that will run a given closure when it goes out of scope,\neven if the code between panics (assuming unwinding panic).\n\nDefines the macros `defer!`, `defer_on_unwind!`, `defer_on_success!` as\nshorthands for guards with one of the implemented strategies.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="scopeguard" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bluss/scopeguard" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.2.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'scopeguard' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "use_std"))' '-C' 'metadata=7130270c04ca018b' '-C' 'extra-filename=-b477fb82efd13fea' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b477fb82efd13fea"
## script = """
## FROM scratch AS out-b477fb82efd13fea
## COPY --from=dep-l-scopeguard-1.2.0-b477fb82efd13fea /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b477fb82efd13fea* /"""

FROM scratch AS cratesio-lock_api-0.4.12
ADD --chmod=0664 --checksum=sha256:07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17 \
  https://static.crates.io/crates/lock_api/lock_api-0.4.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-lock_api-0.4.12-6e751866151e591e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-lock_api-0.4.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12 \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="lock_api" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Wrappers to create fully-featured Mutex and RwLock types. Compatible with no_std." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="lock_api" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="0.4.12" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/lock_api-346da91a6e54bb07/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'lock_api' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="atomic_usize"' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "atomic_usize", "default", "nightly", "owning_ref", "serde"))' '-C' 'metadata=468db14eac87011f' '-C' 'extra-filename=-6e751866151e591e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'scopeguard=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta' '--cap-lints' 'warn' '--cfg' 'has_const_fn_trait_bound' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6e751866151e591e
COPY --from=dep-l-lock_api-0.4.12-6e751866151e591e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6e751866151e591e* /

## this = "6e751866151e591e"
## deps = ["b477fb82efd13fea"]
## short_externs = ["scopeguard-b477fb82efd13fea"]
## writes = [
##     "deps/lock_api-6e751866151e591e.d",
##     "deps/liblock_api-6e751866151e591e.rmeta",
##     "deps/liblock_api-6e751866151e591e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/lock_api-6e751866151e591e.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/mutex.rs","byte_start":5411,"byte_end":5435,"line_start":148,"line_end":148,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"    #[cfg(has_const_fn_trait_bound)]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/mutex.rs:148:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_const_fn_trait_bound)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/mutex.rs","byte_start":5675,"byte_end":5699,"line_start":158,"line_end":158,"column_start":15,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(not(has_const_fn_trait_bound))]","highlight_start":15,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/mutex.rs:158:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(has_const_fn_trait_bound))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/remutex.rs","byte_start":7737,"byte_end":7761,"line_start":232,"line_end":232,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"    #[cfg(has_const_fn_trait_bound)]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/remutex.rs:232:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_const_fn_trait_bound)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/remutex.rs","byte_start":8216,"byte_end":8240,"line_start":247,"line_end":247,"column_start":15,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(not(has_const_fn_trait_bound))]","highlight_start":15,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/remutex.rs:247:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(has_const_fn_trait_bound))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/rwlock.rs","byte_start":13554,"byte_end":13578,"line_start":369,"line_end":369,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"    #[cfg(has_const_fn_trait_bound)]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/rwlock.rs:369:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_const_fn_trait_bound)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/rwlock.rs","byte_start":13824,"byte_end":13848,"line_start":379,"line_end":379,"column_start":15,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(not(has_const_fn_trait_bound))]","highlight_start":15,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/rwlock.rs:379:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(has_const_fn_trait_bound))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/lib.rs","byte_start":3976,"byte_end":3987,"line_start":103,"line_end":103,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"pub struct GuardNoSend(*mut ());","highlight_start":12,"highlight_end":23}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/lib.rs","byte_start":3988,"byte_end":3995,"line_start":103,"line_end":103,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"pub struct GuardNoSend(*mut ());","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing this field","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/lib.rs:103:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GuardNoSend(*mut ());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-lock_api-0.4.12"
## script = '''
## FROM scratch AS cratesio-lock_api-0.4.12
## ADD --chmod=0664 --checksum=sha256:07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17 \
##   https://static.crates.io/crates/lock_api/lock_api-0.4.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-lock_api-0.4.12-6e751866151e591e"
## script = '''
## FROM rust-base AS dep-l-lock_api-0.4.12-6e751866151e591e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-lock_api-0.4.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12 \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="lock_api" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Wrappers to create fully-featured Mutex and RwLock types. Compatible with no_std." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="lock_api" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="0.4.12" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/lock_api-346da91a6e54bb07/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'lock_api' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="atomic_usize"' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "atomic_usize", "default", "nightly", "owning_ref", "serde"))' '-C' 'metadata=468db14eac87011f' '-C' 'extra-filename=-6e751866151e591e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'scopeguard=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta' '--cap-lints' 'warn' '--cfg' 'has_const_fn_trait_bound' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6e751866151e591e"
## script = """
## FROM scratch AS out-6e751866151e591e
## COPY --from=dep-l-lock_api-0.4.12-6e751866151e591e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6e751866151e591e* /"""

FROM scratch AS cratesio-parking_lot_core-0.9.10
ADD --chmod=0664 --checksum=sha256:1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8 \
  https://static.crates.io/crates/parking_lot_core/parking_lot_core-0.9.10.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-parking_lot_core-0.9.10-b8f9aa34d6c6f88b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-parking_lot_core-0.9.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="parking_lot_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="An advanced API for creating custom synchronization primitives." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="parking_lot_core" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="0.9.10" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="10" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/parking_lot_core-30b522a21fd329d5/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'parking_lot_core' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "deadlock_detection", "nightly", "petgraph", "thread-id"))' '-C' 'metadata=03a9c397c32e868e' '-C' 'extra-filename=-b8f9aa34d6c6f88b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b8f9aa34d6c6f88b
COPY --from=dep-l-parking_lot_core-0.9.10-b8f9aa34d6c6f88b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b8f9aa34d6c6f88b* /

## this = "b8f9aa34d6c6f88b"
## deps = [
##     "da34da6838abd7f1",
##     "a7905fdc410bdfce",
##     "52fbb4b19901b011",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "libc-a7905fdc410bdfce",
##     "smallvec-52fbb4b19901b011",
## ]
## writes = [
##     "deps/parking_lot_core-b8f9aa34d6c6f88b.d",
##     "deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta",
##     "deps/libparking_lot_core-b8f9aa34d6c6f88b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/parking_lot_core-b8f9aa34d6c6f88b.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused import: `UnparkHandle`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/thread_parker/mod.rs","byte_start":3078,"byte_end":3090,"line_start":85,"line_end":85,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"pub use self::imp::{thread_yield, ThreadParker, UnparkHandle};","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/thread_parker/mod.rs","byte_start":3076,"byte_end":3090,"line_start":85,"line_end":85,"column_start":47,"column_end":61,"is_primary":true,"text":[{"text":"pub use self::imp::{thread_yield, ThreadParker, UnparkHandle};","highlight_start":47,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `UnparkHandle`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/thread_parker/mod.rs:85:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use self::imp::{thread_yield, ThreadParker, UnparkHandle};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tsan_enabled`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/word_lock.rs","byte_start":10586,"byte_end":10598,"line_start":293,"line_end":293,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    if cfg!(tsan_enabled) {","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tsan_enabled)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tsan_enabled)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tsan_enabled`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/word_lock.rs:293:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if cfg!(tsan_enabled) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tsan_enabled)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tsan_enabled)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-parking_lot_core-0.9.10"
## script = '''
## FROM scratch AS cratesio-parking_lot_core-0.9.10
## ADD --chmod=0664 --checksum=sha256:1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8 \
##   https://static.crates.io/crates/parking_lot_core/parking_lot_core-0.9.10.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-parking_lot_core-0.9.10-b8f9aa34d6c6f88b"
## script = '''
## FROM rust-base AS dep-l-parking_lot_core-0.9.10-b8f9aa34d6c6f88b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-parking_lot_core-0.9.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="parking_lot_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="An advanced API for creating custom synchronization primitives." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="parking_lot_core" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="0.9.10" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="10" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/parking_lot_core-30b522a21fd329d5/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'parking_lot_core' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "deadlock_detection", "nightly", "petgraph", "thread-id"))' '-C' 'metadata=03a9c397c32e868e' '-C' 'extra-filename=-b8f9aa34d6c6f88b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.10/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b8f9aa34d6c6f88b"
## script = """
## FROM scratch AS out-b8f9aa34d6c6f88b
## COPY --from=dep-l-parking_lot_core-0.9.10-b8f9aa34d6c6f88b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-b8f9aa34d6c6f88b* /"""

FROM scratch AS cratesio-parking_lot-0.12.2
ADD --chmod=0664 --checksum=sha256:7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb \
  https://static.crates.io/crates/parking_lot/parking_lot-0.12.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-parking_lot-0.12.2-160b5b4e14748278
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-parking_lot-0.12.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2 \
  --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta,source=/liblock_api-6e751866151e591e.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta,source=/libparking_lot_core-b8f9aa34d6c6f88b.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="parking_lot" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="More compact and efficient implementations of the standard synchronization primitives." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="parking_lot" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.12.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="12" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'parking_lot' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "deadlock_detection", "default", "hardware-lock-elision", "nightly", "owning_ref", "send_guard", "serde"))' '-C' 'metadata=d15b4ad7c68f1dc5' '-C' 'extra-filename=-160b5b4e14748278' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'lock_api=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta' '--extern' 'parking_lot_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-160b5b4e14748278
COPY --from=dep-l-parking_lot-0.12.2-160b5b4e14748278 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-160b5b4e14748278* /

## this = "160b5b4e14748278"
## deps = [
##     "6e751866151e591e",
##     "b477fb82efd13fea",
##     "b8f9aa34d6c6f88b",
##     "da34da6838abd7f1",
##     "a7905fdc410bdfce",
##     "52fbb4b19901b011",
## ]
## short_externs = [
##     "lock_api-6e751866151e591e",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-b8f9aa34d6c6f88b",
##     "cfg_if-da34da6838abd7f1",
##     "libc-a7905fdc410bdfce",
##     "smallvec-52fbb4b19901b011",
## ]
## writes = [
##     "deps/parking_lot-160b5b4e14748278.d",
##     "deps/libparking_lot-160b5b4e14748278.rmeta",
##     "deps/libparking_lot-160b5b4e14748278.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/parking_lot-160b5b4e14748278.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-parking_lot-0.12.2"
## script = '''
## FROM scratch AS cratesio-parking_lot-0.12.2
## ADD --chmod=0664 --checksum=sha256:7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb \
##   https://static.crates.io/crates/parking_lot/parking_lot-0.12.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-parking_lot-0.12.2-160b5b4e14748278"
## script = '''
## FROM rust-base AS dep-l-parking_lot-0.12.2-160b5b4e14748278
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-parking_lot-0.12.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2 \
##   --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta,source=/liblock_api-6e751866151e591e.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta,source=/libparking_lot_core-b8f9aa34d6c6f88b.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="parking_lot" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="More compact and efficient implementations of the standard synchronization primitives." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="parking_lot" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.12.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="12" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'parking_lot' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "deadlock_detection", "default", "hardware-lock-elision", "nightly", "owning_ref", "send_guard", "serde"))' '-C' 'metadata=d15b4ad7c68f1dc5' '-C' 'extra-filename=-160b5b4e14748278' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'lock_api=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta' '--extern' 'parking_lot_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-160b5b4e14748278"
## script = """
## FROM scratch AS out-160b5b4e14748278
## COPY --from=dep-l-parking_lot-0.12.2-160b5b4e14748278 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-160b5b4e14748278* /"""

FROM scratch AS cratesio-match_cfg-0.1.0
ADD --chmod=0664 --checksum=sha256:ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4 \
  https://static.crates.io/crates/match_cfg/match_cfg-0.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-match_cfg-0.1.0-d800b5c94563c48b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-match_cfg-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="match_cfg" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="gnzlbg <gonzalobg88@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A convenience macro to ergonomically define an item depending on a large number\nof `#[cfg]` parameters. Structured like match statement, the first matching\nbranch is the item that gets emitted.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/gnzlbg/match_cfg" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="match_cfg" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/gnzlbg/match_cfg" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'match_cfg' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="use_core"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "use_core"))' '-C' 'metadata=eb51357649e7925f' '-C' 'extra-filename=-d800b5c94563c48b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d800b5c94563c48b
COPY --from=dep-l-match_cfg-0.1.0-d800b5c94563c48b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-d800b5c94563c48b* /

## this = "d800b5c94563c48b"
## writes = [
##     "deps/match_cfg-d800b5c94563c48b.d",
##     "deps/libmatch_cfg-d800b5c94563c48b.rmeta",
##     "deps/libmatch_cfg-d800b5c94563c48b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/match_cfg-d800b5c94563c48b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-match_cfg-0.1.0"
## script = '''
## FROM scratch AS cratesio-match_cfg-0.1.0
## ADD --chmod=0664 --checksum=sha256:ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4 \
##   https://static.crates.io/crates/match_cfg/match_cfg-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-match_cfg-0.1.0-d800b5c94563c48b"
## script = '''
## FROM rust-base AS dep-l-match_cfg-0.1.0-d800b5c94563c48b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-match_cfg-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="match_cfg" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="gnzlbg <gonzalobg88@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A convenience macro to ergonomically define an item depending on a large number\nof `#[cfg]` parameters. Structured like match statement, the first matching\nbranch is the item that gets emitted.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/gnzlbg/match_cfg" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="match_cfg" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/gnzlbg/match_cfg" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'match_cfg' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="use_core"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "use_core"))' '-C' 'metadata=eb51357649e7925f' '-C' 'extra-filename=-d800b5c94563c48b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/match_cfg-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d800b5c94563c48b"
## script = """
## FROM scratch AS out-d800b5c94563c48b
## COPY --from=dep-l-match_cfg-0.1.0-d800b5c94563c48b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-d800b5c94563c48b* /"""

FROM scratch AS cratesio-hostname-0.3.1
ADD --chmod=0664 --checksum=sha256:3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867 \
  https://static.crates.io/crates/hostname/hostname-0.3.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hostname-0.3.1-ca82cf5ad1bc156a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hostname-0.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1 \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hostname" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="fengcen <fengcen.love@gmail.com>:svartalf <self@svartalf.info>" \
        CARGO_PKG_DESCRIPTION="Cross-platform system's host name functions" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hostname" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/svartalf/hostname" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hostname' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "set"))' '-C' 'metadata=2961a34fb6c9d772' '-C' 'extra-filename=-ca82cf5ad1bc156a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'match_cfg=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ca82cf5ad1bc156a
COPY --from=dep-l-hostname-0.3.1-ca82cf5ad1bc156a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-ca82cf5ad1bc156a* /

## this = "ca82cf5ad1bc156a"
## deps = [
##     "a7905fdc410bdfce",
##     "d800b5c94563c48b",
## ]
## short_externs = [
##     "libc-a7905fdc410bdfce",
##     "match_cfg-d800b5c94563c48b",
## ]
## writes = [
##     "deps/hostname-ca82cf5ad1bc156a.d",
##     "deps/libhostname-ca82cf5ad1bc156a.rmeta",
##     "deps/libhostname-ca82cf5ad1bc156a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hostname-ca82cf5ad1bc156a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hostname-0.3.1"
## script = '''
## FROM scratch AS cratesio-hostname-0.3.1
## ADD --chmod=0664 --checksum=sha256:3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867 \
##   https://static.crates.io/crates/hostname/hostname-0.3.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hostname-0.3.1-ca82cf5ad1bc156a"
## script = '''
## FROM rust-base AS dep-l-hostname-0.3.1-ca82cf5ad1bc156a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hostname-0.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1 \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hostname" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="fengcen <fengcen.love@gmail.com>:svartalf <self@svartalf.info>" \
##         CARGO_PKG_DESCRIPTION="Cross-platform system's host name functions" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hostname" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/svartalf/hostname" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hostname' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "set"))' '-C' 'metadata=2961a34fb6c9d772' '-C' 'extra-filename=-ca82cf5ad1bc156a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'libc=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta' '--extern' 'match_cfg=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hostname-0.3.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ca82cf5ad1bc156a"
## script = """
## FROM scratch AS out-ca82cf5ad1bc156a
## COPY --from=dep-l-hostname-0.3.1-ca82cf5ad1bc156a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-ca82cf5ad1bc156a* /"""

FROM scratch AS cratesio-quick-error-1.2.3
ADD --chmod=0664 --checksum=sha256:a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0 \
  https://static.crates.io/crates/quick-error/quick-error-1.2.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-quick-error-1.2.3-bd3d4e33b0f59f1b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-quick-error-1.2.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="quick_error" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3/Cargo.toml" \
        CARGO_PKG_AUTHORS="Paul Colomiets <paul@colomiets.name>:Colin Kiegel <kiegel@gmx.de>" \
        CARGO_PKG_DESCRIPTION="    A macro which makes error types pleasant to write.\n" \
        CARGO_PKG_HOMEPAGE="http://github.com/tailhook/quick-error" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="quick-error" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="http://github.com/tailhook/quick-error" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.2.3" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'quick_error' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=55ff0ffe965b7f06' '-C' 'extra-filename=-bd3d4e33b0f59f1b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-bd3d4e33b0f59f1b
COPY --from=dep-l-quick-error-1.2.3-bd3d4e33b0f59f1b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-bd3d4e33b0f59f1b* /

## this = "bd3d4e33b0f59f1b"
## writes = [
##     "deps/quick_error-bd3d4e33b0f59f1b.d",
##     "deps/libquick_error-bd3d4e33b0f59f1b.rmeta",
##     "deps/libquick_error-bd3d4e33b0f59f1b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/quick_error-bd3d4e33b0f59f1b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-quick-error-1.2.3"
## script = '''
## FROM scratch AS cratesio-quick-error-1.2.3
## ADD --chmod=0664 --checksum=sha256:a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0 \
##   https://static.crates.io/crates/quick-error/quick-error-1.2.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-quick-error-1.2.3-bd3d4e33b0f59f1b"
## script = '''
## FROM rust-base AS dep-l-quick-error-1.2.3-bd3d4e33b0f59f1b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-quick-error-1.2.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="quick_error" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Paul Colomiets <paul@colomiets.name>:Colin Kiegel <kiegel@gmx.de>" \
##         CARGO_PKG_DESCRIPTION="    A macro which makes error types pleasant to write.\n" \
##         CARGO_PKG_HOMEPAGE="http://github.com/tailhook/quick-error" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="quick-error" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="http://github.com/tailhook/quick-error" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.2.3" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'quick_error' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=55ff0ffe965b7f06' '-C' 'extra-filename=-bd3d4e33b0f59f1b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-error-1.2.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-bd3d4e33b0f59f1b"
## script = """
## FROM scratch AS out-bd3d4e33b0f59f1b
## COPY --from=dep-l-quick-error-1.2.3-bd3d4e33b0f59f1b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-bd3d4e33b0f59f1b* /"""

FROM scratch AS cratesio-resolv-conf-0.7.0
ADD --chmod=0664 --checksum=sha256:52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00 \
  https://static.crates.io/crates/resolv-conf/resolv-conf-0.7.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-resolv-conf-0.7.0-826770d260f6e8ae
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-resolv-conf-0.7.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0 \
  --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta,source=/libhostname-ca82cf5ad1bc156a.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
  --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta,source=/libquick_error-bd3d4e33b0f59f1b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="resolv_conf" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="paul@colomiets.name" \
        CARGO_PKG_DESCRIPTION="    The resolv.conf file parser\n" \
        CARGO_PKG_HOMEPAGE="http://github.com/tailhook/resolv-conf" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="resolv-conf" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="http://github.com/tailhook/resolv-conf" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.7.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'resolv_conf' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="hostname"' '--cfg' 'feature="system"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("hostname", "system"))' '-C' 'metadata=0eaeadbc39c02c99' '-C' 'extra-filename=-826770d260f6e8ae' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'hostname=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta' '--extern' 'quick_error=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-826770d260f6e8ae
COPY --from=dep-l-resolv-conf-0.7.0-826770d260f6e8ae /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-826770d260f6e8ae* /

## this = "826770d260f6e8ae"
## deps = [
##     "ca82cf5ad1bc156a",
##     "a7905fdc410bdfce",
##     "d800b5c94563c48b",
##     "bd3d4e33b0f59f1b",
## ]
## short_externs = [
##     "hostname-ca82cf5ad1bc156a",
##     "libc-a7905fdc410bdfce",
##     "match_cfg-d800b5c94563c48b",
##     "quick_error-bd3d4e33b0f59f1b",
## ]
## writes = [
##     "deps/resolv_conf-826770d260f6e8ae.d",
##     "deps/libresolv_conf-826770d260f6e8ae.rmeta",
##     "deps/libresolv_conf-826770d260f6e8ae.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/resolv_conf-826770d260f6e8ae.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"use of deprecated method `std::error::Error::description`: use the Display impl or to_string()","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0/src/ip.rs","byte_start":3599,"byte_end":3610,"line_start":122,"line_end":122,"column_start":28,"column_end":39,"is_primary":true,"text":[{"text":"        fmt.write_str(self.description())","highlight_start":28,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0/src/ip.rs:122:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fmt.write_str(self.description())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-resolv-conf-0.7.0"
## script = '''
## FROM scratch AS cratesio-resolv-conf-0.7.0
## ADD --chmod=0664 --checksum=sha256:52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00 \
##   https://static.crates.io/crates/resolv-conf/resolv-conf-0.7.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-resolv-conf-0.7.0-826770d260f6e8ae"
## script = '''
## FROM rust-base AS dep-l-resolv-conf-0.7.0-826770d260f6e8ae
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-resolv-conf-0.7.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0 \
##   --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta,source=/libhostname-ca82cf5ad1bc156a.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
##   --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta,source=/libquick_error-bd3d4e33b0f59f1b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="resolv_conf" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="paul@colomiets.name" \
##         CARGO_PKG_DESCRIPTION="    The resolv.conf file parser\n" \
##         CARGO_PKG_HOMEPAGE="http://github.com/tailhook/resolv-conf" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="resolv-conf" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="http://github.com/tailhook/resolv-conf" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.7.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'resolv_conf' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="hostname"' '--cfg' 'feature="system"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("hostname", "system"))' '-C' 'metadata=0eaeadbc39c02c99' '-C' 'extra-filename=-826770d260f6e8ae' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'hostname=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta' '--extern' 'quick_error=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/resolv-conf-0.7.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-826770d260f6e8ae"
## script = """
## FROM scratch AS out-826770d260f6e8ae
## COPY --from=dep-l-resolv-conf-0.7.0-826770d260f6e8ae /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-826770d260f6e8ae* /"""

FROM scratch AS cratesio-hickory-resolver-0.25.0-alpha.1
ADD --chmod=0664 --checksum=sha256:37d43169d0878d2a8a2f05f21508368d52656947533e1527c4a75148c50421ed \
  https://static.crates.io/crates/hickory-resolver/hickory-resolver-0.25.0-alpha.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hickory-resolver-0.25.0-alpha.1-35823e6e41e36b61
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hickory-resolver-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
  --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
  --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta,source=/libhickory_proto-038139804ab046ea.rmeta \
  --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
  --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
  --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
  --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
  --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
  --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
  --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
  --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
  --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
  --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
  --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
  --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
  --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
  --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
  --mount=from=out-f6bd03560b1f6bf6,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta,source=/liblru_cache-f6bd03560b1f6bf6.rmeta \
  --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta,source=/liblinked_hash_map-4904f0514f71f438.rmeta \
  --mount=from=out-160b5b4e14748278,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta,source=/libparking_lot-160b5b4e14748278.rmeta \
  --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta,source=/liblock_api-6e751866151e591e.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta,source=/libparking_lot_core-b8f9aa34d6c6f88b.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
  --mount=from=out-826770d260f6e8ae,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta,source=/libresolv_conf-826770d260f6e8ae.rmeta \
  --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta,source=/libhostname-ca82cf5ad1bc156a.rmeta \
  --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
  --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta,source=/libquick_error-bd3d4e33b0f59f1b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hickory_resolver" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
        CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS library. This Resolver library  uses the Client library to perform all DNS queries. The Resolver is intended to be a high-level library for any DNS record resolution see Resolver and AsyncResolver for supported resolution types. The Client can be used for other queries.\n" \
        CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hickory-resolver" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.25.0-alpha.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="25" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE="alpha.1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hickory_resolver' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="ipconfig"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="resolv-conf"' '--cfg' 'feature="rustls"' '--cfg' 'feature="serde"' '--cfg' 'feature="serde-config"' '--cfg' 'feature="system-config"' '--cfg' 'feature="tokio"' '--cfg' 'feature="tokio-runtime"' '--cfg' 'feature="tokio-rustls"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "ipconfig", "native-certs", "resolv-conf", "rustls", "serde", "serde-config", "system-config", "testing", "tokio", "tokio-native-tls", "tokio-openssl", "tokio-runtime", "tokio-rustls", "webpki-roots"))' '-C' 'metadata=a540af69ea1e101c' '-C' 'extra-filename=-35823e6e41e36b61' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta' '--extern' 'lru_cache=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'parking_lot=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta' '--extern' 'rand=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta' '--extern' 'resolv_conf=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'rustls_native_certs=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tokio_rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-35823e6e41e36b61
COPY --from=dep-l-hickory-resolver-0.25.0-alpha.1-35823e6e41e36b61 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-35823e6e41e36b61* /

## this = "35823e6e41e36b61"
## deps = [
##     "da34da6838abd7f1",
##     "85ef45b09b00482a",
##     "da7454144a4b1d2d",
##     "6c36b04a10bba36c",
##     "32982cb980ef9328",
##     "b74f2a8eb0482878",
##     "9a31c9ae14e5d0d4",
##     "038139804ab046ea",
##     "fd8b71f0a4504cc7",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "3fb14aec5601ab5a",
##     "053eac235c7ed568",
##     "e3ffa7a902242322",
##     "002f3af3555cdc1d",
##     "2f387b4601b8b6b0",
##     "adcb9d3de5d6fae9",
##     "9a295684e8a14a09",
##     "c78132bf36574e8f",
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
##     "c991228b632df552",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "6ed51fafe322ecba",
##     "5161209caf71d483",
##     "a7905fdc410bdfce",
##     "8e2f025dcc32e9af",
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "63b94b1c8b4a1192",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "264210de0fb2469c",
##     "b81976489825f26e",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
##     "c785b10cd1fa3185",
##     "0ee236ae7bf0c632",
##     "a38c83241847def9",
##     "de6de5507c11303f",
##     "a653fbb7540bf139",
##     "b31d1031030a1f93",
##     "0724e68cddf1b06e",
##     "17cf73a7d3f13d95",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "cef0e5e95c930be3",
##     "320990e22bbf0744",
##     "4a556d35209377d8",
##     "8d324580670ac264",
##     "7914ef07c5f53ddf",
##     "4251738685e38e22",
##     "cba19d70c6cf7027",
##     "f6bd03560b1f6bf6",
##     "4904f0514f71f438",
##     "160b5b4e14748278",
##     "6e751866151e591e",
##     "b477fb82efd13fea",
##     "b8f9aa34d6c6f88b",
##     "52fbb4b19901b011",
##     "826770d260f6e8ae",
##     "ca82cf5ad1bc156a",
##     "d800b5c94563c48b",
##     "bd3d4e33b0f59f1b",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "futures_util-85ef45b09b00482a",
##     "futures_core-da7454144a4b1d2d",
##     "futures_task-6c36b04a10bba36c",
##     "pin_project_lite-32982cb980ef9328",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-9a31c9ae14e5d0d4",
##     "hickory_proto-038139804ab046ea",
##     "async_recursion-fd8b71f0a4504cc7",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "async_trait-3fb14aec5601ab5a",
##     "bitflags-053eac235c7ed568",
##     "data_encoding-e3ffa7a902242322",
##     "enum_as_inner-002f3af3555cdc1d",
##     "heck-2f387b4601b8b6b0",
##     "futures_channel-adcb9d3de5d6fae9",
##     "futures_io-9a295684e8a14a09",
##     "idna-c78132bf36574e8f",
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
##     "ipnet-c991228b632df552",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "once_cell-6ed51fafe322ecba",
##     "rand-5161209caf71d483",
##     "libc-a7905fdc410bdfce",
##     "rand_chacha-8e2f025dcc32e9af",
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "ring-63b94b1c8b4a1192",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "rustls-264210de0fb2469c",
##     "log-b81976489825f26e",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
##     "rustls_native_certs-c785b10cd1fa3185",
##     "openssl_probe-0ee236ae7bf0c632",
##     "rustls_pemfile-a38c83241847def9",
##     "base64-de6de5507c11303f",
##     "thiserror-a653fbb7540bf139",
##     "thiserror_impl-b31d1031030a1f93",
##     "tokio-0724e68cddf1b06e",
##     "bytes-17cf73a7d3f13d95",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "tokio_rustls-cef0e5e95c930be3",
##     "tracing-320990e22bbf0744",
##     "tracing_attributes-4a556d35209377d8",
##     "tracing_core-8d324580670ac264",
##     "url-7914ef07c5f53ddf",
##     "form_urlencoded-4251738685e38e22",
##     "percent_encoding-cba19d70c6cf7027",
##     "lru_cache-f6bd03560b1f6bf6",
##     "linked_hash_map-4904f0514f71f438",
##     "parking_lot-160b5b4e14748278",
##     "lock_api-6e751866151e591e",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-b8f9aa34d6c6f88b",
##     "smallvec-52fbb4b19901b011",
##     "resolv_conf-826770d260f6e8ae",
##     "hostname-ca82cf5ad1bc156a",
##     "match_cfg-d800b5c94563c48b",
##     "quick_error-bd3d4e33b0f59f1b",
## ]
## writes = [
##     "deps/hickory_resolver-35823e6e41e36b61.d",
##     "deps/libhickory_resolver-35823e6e41e36b61.rmeta",
##     "deps/libhickory_resolver-35823e6e41e36b61.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hickory_resolver-35823e6e41e36b61.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/dns_sd.rs","byte_start":390,"byte_end":406,"line_start":9,"line_end":9,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"#![cfg(feature = \"mdns\")]","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/dns_sd.rs:9:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/caching_client.rs","byte_start":5457,"byte_end":5473,"line_start":160,"line_end":160,"column_start":23,"column_end":39,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"mdns\")]","highlight_start":23,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/caching_client.rs:160:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/caching_client.rs","byte_start":5763,"byte_end":5779,"line_start":164,"line_end":164,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"mdns\"))]","highlight_start":27,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/caching_client.rs:164:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(not(feature = \"mdns\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs","byte_start":15465,"byte_end":15481,"line_start":348,"line_end":348,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"mdns\")]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs:348:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs","byte_start":16077,"byte_end":16093,"line_start":366,"line_end":366,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs:366:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs","byte_start":16771,"byte_end":16787,"line_start":389,"line_end":389,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs:389:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs","byte_start":17488,"byte_end":17504,"line_start":412,"line_end":412,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/config.rs:412:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m412\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs","byte_start":524,"byte_end":545,"line_start":16,"line_end":16,"column_start":7,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(feature = \"backtrace\")]","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `backtrace` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs:16:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"backtrace\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `backtrace` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs","byte_start":1706,"byte_end":1727,"line_start":56,"line_end":56,"column_start":11,"column_end":32,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"backtrace\")]","highlight_start":11,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `backtrace` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs:56:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"backtrace\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `backtrace` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs","byte_start":2709,"byte_end":2716,"line_start":94,"line_end":94,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"            if #[cfg(feature = \"backtrace\")] {","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `backtrace` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs:94:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if #[cfg(feature = \"backtrace\")] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `backtrace` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs","byte_start":3245,"byte_end":3266,"line_start":112,"line_end":112,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"backtrace\")]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `backtrace` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/error.rs:112:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"backtrace\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `backtrace` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/mod.rs","byte_start":729,"byte_end":745,"line_start":19,"line_end":19,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/mod.rs:19:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs","byte_start":1541,"byte_end":1557,"line_start":40,"line_end":40,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs:40:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs","byte_start":6617,"byte_end":6633,"line_start":170,"line_end":170,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"mdns\")]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs:170:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs","byte_start":8831,"byte_end":8847,"line_start":226,"line_end":226,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs:226:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs","byte_start":15762,"byte_end":15778,"line_start":405,"line_end":405,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/connection_provider.rs:405:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server.rs","byte_start":565,"byte_end":581,"line_start":17,"line_end":17,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server.rs:17:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server.rs","byte_start":942,"byte_end":958,"line_start":28,"line_end":28,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server.rs:28:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server.rs","byte_start":7374,"byte_end":7390,"line_start":231,"line_end":231,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server.rs:231:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":908,"byte_end":924,"line_start":27,"line_end":27,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:27:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":14560,"byte_end":14576,"line_start":400,"line_end":400,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"mdns\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:400:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":1646,"byte_end":1662,"line_start":43,"line_end":43,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"mdns\")]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:43:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":5232,"byte_end":5248,"line_start":146,"line_end":146,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"    #[cfg(not(feature = \"mdns\"))]","highlight_start":15,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:146:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(feature = \"mdns\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":5602,"byte_end":5618,"line_start":160,"line_end":160,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"mdns\")]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:160:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":4073,"byte_end":4089,"line_start":113,"line_end":113,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:113:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":5048,"byte_end":5064,"line_start":139,"line_end":139,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"mdns\")]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:139:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":8158,"byte_end":8174,"line_start":241,"line_end":241,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"mdns\")]","highlight_start":15,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:241:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"mdns\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `mdns`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs","byte_start":8365,"byte_end":8381,"line_start":245,"line_end":245,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"        #[cfg(not(feature = \"mdns\"))]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `mdns` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `mdns`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/name_server/name_server_pool.rs:245:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(feature = \"mdns\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `ipconfig`, `native-certs`, `resolv-conf`, `rustls`, `serde`, `serde-config`, `system-config`, `testing`, `tokio`, `tokio-native-tls`, `tokio-openssl`, `tokio-runtime`, `tokio-rustls`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `mdns` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"28 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 28 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[contexts]]
## name = "crate_out-24468494741c1625"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hickory-resolver-0.25.0-alpha.1"
## script = '''
## FROM scratch AS cratesio-hickory-resolver-0.25.0-alpha.1
## ADD --chmod=0664 --checksum=sha256:37d43169d0878d2a8a2f05f21508368d52656947533e1527c4a75148c50421ed \
##   https://static.crates.io/crates/hickory-resolver/hickory-resolver-0.25.0-alpha.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hickory-resolver-0.25.0-alpha.1-35823e6e41e36b61"
## script = '''
## FROM rust-base AS dep-l-hickory-resolver-0.25.0-alpha.1-35823e6e41e36b61
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hickory-resolver-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##   --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
##   --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta,source=/libhickory_proto-038139804ab046ea.rmeta \
##   --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
##   --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
##   --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
##   --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##   --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##   --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
##   --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
##   --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
##   --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
##   --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
##   --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
##   --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##   --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
##   --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
##   --mount=from=out-f6bd03560b1f6bf6,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta,source=/liblru_cache-f6bd03560b1f6bf6.rmeta \
##   --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta,source=/liblinked_hash_map-4904f0514f71f438.rmeta \
##   --mount=from=out-160b5b4e14748278,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta,source=/libparking_lot-160b5b4e14748278.rmeta \
##   --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta,source=/liblock_api-6e751866151e591e.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta,source=/libparking_lot_core-b8f9aa34d6c6f88b.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##   --mount=from=out-826770d260f6e8ae,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta,source=/libresolv_conf-826770d260f6e8ae.rmeta \
##   --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta,source=/libhostname-ca82cf5ad1bc156a.rmeta \
##   --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
##   --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta,source=/libquick_error-bd3d4e33b0f59f1b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hickory_resolver" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
##         CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS library. This Resolver library  uses the Client library to perform all DNS queries. The Resolver is intended to be a high-level library for any DNS record resolution see Resolver and AsyncResolver for supported resolution types. The Client can be used for other queries.\n" \
##         CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hickory-resolver" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.25.0-alpha.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="25" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE="alpha.1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hickory_resolver' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="ipconfig"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="resolv-conf"' '--cfg' 'feature="rustls"' '--cfg' 'feature="serde"' '--cfg' 'feature="serde-config"' '--cfg' 'feature="system-config"' '--cfg' 'feature="tokio"' '--cfg' 'feature="tokio-runtime"' '--cfg' 'feature="tokio-rustls"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "ipconfig", "native-certs", "resolv-conf", "rustls", "serde", "serde-config", "system-config", "testing", "tokio", "tokio-native-tls", "tokio-openssl", "tokio-runtime", "tokio-rustls", "webpki-roots"))' '-C' 'metadata=a540af69ea1e101c' '-C' 'extra-filename=-35823e6e41e36b61' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta' '--extern' 'lru_cache=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'parking_lot=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta' '--extern' 'rand=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta' '--extern' 'resolv_conf=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'rustls_native_certs=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tokio_rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-resolver-0.25.0-alpha.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-35823e6e41e36b61"
## script = """
## FROM scratch AS out-35823e6e41e36b61
## COPY --from=dep-l-hickory-resolver-0.25.0-alpha.1-35823e6e41e36b61 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-35823e6e41e36b61* /"""

FROM scratch AS cratesio-num-traits-0.2.19
ADD --chmod=0664 --checksum=sha256:071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841 \
  https://static.crates.io/crates/num-traits/num-traits-0.2.19.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-num-traits-0.2.19-db1f90f170a87e28
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-num-traits-0.2.19,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="num_traits" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Numeric traits for generic mathematics" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-num/num-traits" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="num-traits" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-num/num-traits" \
        CARGO_PKG_RUST_VERSION="1.60" \
        CARGO_PKG_VERSION="0.2.19" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="19" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/num-traits-b0c6e59a065c68eb/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'num_traits' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "i128", "libm", "std"))' '-C' 'metadata=56b2a000b8c1d2d3' '-C' 'extra-filename=-db1f90f170a87e28' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-db1f90f170a87e28
COPY --from=dep-l-num-traits-0.2.19-db1f90f170a87e28 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-db1f90f170a87e28* /

## this = "db1f90f170a87e28"
## writes = [
##     "deps/num_traits-db1f90f170a87e28.d",
##     "deps/libnum_traits-db1f90f170a87e28.rmeta",
##     "deps/libnum_traits-db1f90f170a87e28.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/num_traits-db1f90f170a87e28.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_total_cmp`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63609,"byte_end":63622,"line_start":2305,"line_end":2305,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"            #[cfg(has_total_cmp)]","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":64299,"byte_end":64334,"line_start":2325,"line_end":2325,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"totalorder_impl!(f64, i64, u64, 64);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"totalorder_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63453,"byte_end":63481,"line_start":2301,"line_end":2301,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! totalorder_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_total_cmp`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs:2305:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_total_cmp)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtotalorder_impl!(f64, i64, u64, 64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_total_cmp`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63843,"byte_end":63856,"line_start":2311,"line_end":2311,"column_start":23,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(not(has_total_cmp))]","highlight_start":23,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":64299,"byte_end":64334,"line_start":2325,"line_end":2325,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"totalorder_impl!(f64, i64, u64, 64);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"totalorder_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63453,"byte_end":63481,"line_start":2301,"line_end":2301,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! totalorder_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_total_cmp`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs:2311:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(not(has_total_cmp))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtotalorder_impl!(f64, i64, u64, 64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_total_cmp`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63609,"byte_end":63622,"line_start":2305,"line_end":2305,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"            #[cfg(has_total_cmp)]","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":64336,"byte_end":64371,"line_start":2326,"line_end":2326,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"totalorder_impl!(f32, i32, u32, 32);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"totalorder_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63453,"byte_end":63481,"line_start":2301,"line_end":2301,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! totalorder_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_total_cmp`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs:2305:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_total_cmp)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtotalorder_impl!(f32, i32, u32, 32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_total_cmp`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63843,"byte_end":63856,"line_start":2311,"line_end":2311,"column_start":23,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(not(has_total_cmp))]","highlight_start":23,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":64336,"byte_end":64371,"line_start":2326,"line_end":2326,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"totalorder_impl!(f32, i32, u32, 32);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"totalorder_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs","byte_start":63453,"byte_end":63481,"line_start":2301,"line_end":2301,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! totalorder_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_total_cmp`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/float.rs:2311:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(not(has_total_cmp))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtotalorder_impl!(f32, i32, u32, 32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_total_cmp)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_total_cmp)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `totalorder_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-num-traits-0.2.19"
## script = '''
## FROM scratch AS cratesio-num-traits-0.2.19
## ADD --chmod=0664 --checksum=sha256:071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841 \
##   https://static.crates.io/crates/num-traits/num-traits-0.2.19.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-num-traits-0.2.19-db1f90f170a87e28"
## script = '''
## FROM rust-base AS dep-l-num-traits-0.2.19-db1f90f170a87e28
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-num-traits-0.2.19,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="num_traits" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Numeric traits for generic mathematics" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-num/num-traits" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="num-traits" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-num/num-traits" \
##         CARGO_PKG_RUST_VERSION="1.60" \
##         CARGO_PKG_VERSION="0.2.19" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="19" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/num-traits-b0c6e59a065c68eb/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'num_traits' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "i128", "libm", "std"))' '-C' 'metadata=56b2a000b8c1d2d3' '-C' 'extra-filename=-db1f90f170a87e28' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.19/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-db1f90f170a87e28"
## script = """
## FROM scratch AS out-db1f90f170a87e28
## COPY --from=dep-l-num-traits-0.2.19-db1f90f170a87e28 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-db1f90f170a87e28* /"""

FROM scratch AS cratesio-prefix-trie-0.3.0
ADD --chmod=0664 --checksum=sha256:04cb065e4407d69a5a5265221262cceeafff7f1aabc545d01ed955cce92ee78b \
  https://static.crates.io/crates/prefix-trie/prefix-trie-0.3.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-prefix-trie-0.3.0-0cd8587a72e0b77d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-prefix-trie-0.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0 \
  --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-db1f90f170a87e28,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta,source=/libnum_traits-db1f90f170a87e28.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="prefix_trie" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Prefix trie datastructure (both a set and a map) that provides exact and longest-prefix matches." \
        CARGO_PKG_HOMEPAGE="https://github.com/tiborschneider/prefix-trie" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="prefix-trie" \
        CARGO_PKG_README="Readme.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tiborschneider/prefix-trie" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'prefix_trie' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="ipnet"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "ipnet", "ipnetwork", "serde"))' '-C' 'metadata=177815bf2c306924' '-C' 'extra-filename=-0cd8587a72e0b77d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ipnet=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta' '--extern' 'num_traits=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0cd8587a72e0b77d
COPY --from=dep-l-prefix-trie-0.3.0-0cd8587a72e0b77d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0cd8587a72e0b77d* /

## this = "0cd8587a72e0b77d"
## deps = [
##     "c991228b632df552",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "db1f90f170a87e28",
## ]
## short_externs = [
##     "ipnet-c991228b632df552",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "num_traits-db1f90f170a87e28",
## ]
## writes = [
##     "deps/prefix_trie-0cd8587a72e0b77d.d",
##     "deps/libprefix_trie-0cd8587a72e0b77d.rmeta",
##     "deps/libprefix_trie-0cd8587a72e0b77d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/prefix_trie-0cd8587a72e0b77d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-prefix-trie-0.3.0"
## script = '''
## FROM scratch AS cratesio-prefix-trie-0.3.0
## ADD --chmod=0664 --checksum=sha256:04cb065e4407d69a5a5265221262cceeafff7f1aabc545d01ed955cce92ee78b \
##   https://static.crates.io/crates/prefix-trie/prefix-trie-0.3.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-prefix-trie-0.3.0-0cd8587a72e0b77d"
## script = '''
## FROM rust-base AS dep-l-prefix-trie-0.3.0-0cd8587a72e0b77d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-prefix-trie-0.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0 \
##   --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-db1f90f170a87e28,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta,source=/libnum_traits-db1f90f170a87e28.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="prefix_trie" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Prefix trie datastructure (both a set and a map) that provides exact and longest-prefix matches." \
##         CARGO_PKG_HOMEPAGE="https://github.com/tiborschneider/prefix-trie" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="prefix-trie" \
##         CARGO_PKG_README="Readme.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tiborschneider/prefix-trie" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'prefix_trie' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="ipnet"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "ipnet", "ipnetwork", "serde"))' '-C' 'metadata=177815bf2c306924' '-C' 'extra-filename=-0cd8587a72e0b77d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ipnet=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta' '--extern' 'num_traits=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/prefix-trie-0.3.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0cd8587a72e0b77d"
## script = """
## FROM scratch AS out-0cd8587a72e0b77d
## COPY --from=dep-l-prefix-trie-0.3.0-0cd8587a72e0b77d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0cd8587a72e0b77d* /"""

FROM scratch AS cratesio-fallible-iterator-0.3.0
ADD --chmod=0664 --checksum=sha256:2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649 \
  https://static.crates.io/crates/fallible-iterator/fallible-iterator-0.3.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-fallible-iterator-0.3.0-15b199cebb28d6c1
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-fallible-iterator-0.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="fallible_iterator" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Steven Fackler <sfackler@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fallible iterator traits" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="fallible-iterator" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/sfackler/rust-fallible-iterator" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'fallible_iterator' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=211eff510223e479' '-C' 'extra-filename=-15b199cebb28d6c1' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-15b199cebb28d6c1
COPY --from=dep-l-fallible-iterator-0.3.0-15b199cebb28d6c1 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-15b199cebb28d6c1* /

## this = "15b199cebb28d6c1"
## writes = [
##     "deps/fallible_iterator-15b199cebb28d6c1.d",
##     "deps/libfallible_iterator-15b199cebb28d6c1.rmeta",
##     "deps/libfallible_iterator-15b199cebb28d6c1.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/fallible_iterator-15b199cebb28d6c1.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-fallible-iterator-0.3.0"
## script = '''
## FROM scratch AS cratesio-fallible-iterator-0.3.0
## ADD --chmod=0664 --checksum=sha256:2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649 \
##   https://static.crates.io/crates/fallible-iterator/fallible-iterator-0.3.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-fallible-iterator-0.3.0-15b199cebb28d6c1"
## script = '''
## FROM rust-base AS dep-l-fallible-iterator-0.3.0-15b199cebb28d6c1
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-fallible-iterator-0.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="fallible_iterator" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Steven Fackler <sfackler@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fallible iterator traits" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="fallible-iterator" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/sfackler/rust-fallible-iterator" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'fallible_iterator' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=211eff510223e479' '-C' 'extra-filename=-15b199cebb28d6c1' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-iterator-0.3.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-15b199cebb28d6c1"
## script = """
## FROM scratch AS out-15b199cebb28d6c1
## COPY --from=dep-l-fallible-iterator-0.3.0-15b199cebb28d6c1 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-15b199cebb28d6c1* /"""

FROM scratch AS cratesio-fallible-streaming-iterator-0.1.9
ADD --chmod=0664 --checksum=sha256:7360491ce676a36bf9bb3c56c1aa791658183a54d2744120f27285738d90465a \
  https://static.crates.io/crates/fallible-streaming-iterator/fallible-streaming-iterator-0.1.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-fallible-streaming-iterator-0.1.9-1ff04656bece776a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-fallible-streaming-iterator-0.1.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="fallible_streaming_iterator" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="Steven Fackler <sfackler@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fallible streaming iteration" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="fallible-streaming-iterator" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/sfackler/fallible-streaming-iterator" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.9" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'fallible_streaming_iterator' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("std"))' '-C' 'metadata=40218ebfb268b9f0' '-C' 'extra-filename=-1ff04656bece776a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-1ff04656bece776a
COPY --from=dep-l-fallible-streaming-iterator-0.1.9-1ff04656bece776a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-1ff04656bece776a* /

## this = "1ff04656bece776a"
## writes = [
##     "deps/fallible_streaming_iterator-1ff04656bece776a.d",
##     "deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta",
##     "deps/libfallible_streaming_iterator-1ff04656bece776a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/fallible_streaming_iterator-1ff04656bece776a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-fallible-streaming-iterator-0.1.9"
## script = '''
## FROM scratch AS cratesio-fallible-streaming-iterator-0.1.9
## ADD --chmod=0664 --checksum=sha256:7360491ce676a36bf9bb3c56c1aa791658183a54d2744120f27285738d90465a \
##   https://static.crates.io/crates/fallible-streaming-iterator/fallible-streaming-iterator-0.1.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-fallible-streaming-iterator-0.1.9-1ff04656bece776a"
## script = '''
## FROM rust-base AS dep-l-fallible-streaming-iterator-0.1.9-1ff04656bece776a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-fallible-streaming-iterator-0.1.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="fallible_streaming_iterator" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Steven Fackler <sfackler@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fallible streaming iteration" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="fallible-streaming-iterator" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/sfackler/fallible-streaming-iterator" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.9" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'fallible_streaming_iterator' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("std"))' '-C' 'metadata=40218ebfb268b9f0' '-C' 'extra-filename=-1ff04656bece776a' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fallible-streaming-iterator-0.1.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-1ff04656bece776a"
## script = """
## FROM scratch AS out-1ff04656bece776a
## COPY --from=dep-l-fallible-streaming-iterator-0.1.9-1ff04656bece776a /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-1ff04656bece776a* /"""

FROM scratch AS cratesio-zerocopy-0.7.34
ADD --chmod=0664 --checksum=sha256:ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087 \
  https://static.crates.io/crates/zerocopy/zerocopy-0.7.34.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-zerocopy-0.7.34-62e07187ba843221
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-zerocopy-0.7.34,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="zerocopy" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/Cargo.toml" \
        CARGO_PKG_AUTHORS="Joshua Liebow-Feeser <joshlf@google.com>" \
        CARGO_PKG_DESCRIPTION="Utilities for zero-copy parsing and serialization" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="BSD-2-Clause OR Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="zerocopy" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/google/zerocopy" \
        CARGO_PKG_RUST_VERSION="1.60.0" \
        CARGO_PKG_VERSION="0.7.34" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="34" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'zerocopy' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="simd"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("__internal_use_only_features_that_work_on_stable", "alloc", "byteorder", "default", "derive", "simd", "simd-nightly", "zerocopy-derive"))' '-C' 'metadata=f75e80ca5af7e2c3' '-C' 'extra-filename=-62e07187ba843221' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-62e07187ba843221
COPY --from=dep-l-zerocopy-0.7.34-62e07187ba843221 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-62e07187ba843221* /

## this = "62e07187ba843221"
## writes = [
##     "deps/zerocopy-62e07187ba843221.d",
##     "deps/libzerocopy-62e07187ba843221.rmeta",
##     "deps/libzerocopy-62e07187ba843221.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/zerocopy-62e07187ba843221.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/util.rs","byte_start":29099,"byte_end":29117,"line_start":597,"line_end":597,"column_start":32,"column_end":50,"is_primary":true,"text":[{"text":"    let remainder = t.addr() % mem::align_of::<U>();","highlight_start":32,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":8107,"byte_end":8128,"line_start":174,"line_end":174,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    unused_qualifications,","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/util.rs","byte_start":29099,"byte_end":29104,"line_start":597,"line_end":597,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"    let remainder = t.addr() % mem::align_of::<U>();","highlight_start":32,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/util.rs:597:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let remainder = t.addr() % mem::align_of::<U>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:174:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unused_qualifications,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let remainder = t.addr() % \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0malign_of::<U>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let remainder = t.addr() % align_of::<U>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":13210,"byte_end":13231,"line_start":333,"line_end":333,"column_start":35,"column_end":56,"is_primary":true,"text":[{"text":"const POINTER_WIDTH_BITS: usize = mem::size_of::<usize>() * 8;","highlight_start":35,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":13210,"byte_end":13215,"line_start":333,"line_end":333,"column_start":35,"column_end":40,"is_primary":true,"text":[{"text":"const POINTER_WIDTH_BITS: usize = mem::size_of::<usize>() * 8;","highlight_start":35,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:333:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst POINTER_WIDTH_BITS: usize = mem::size_of::<usize>() * 8;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst POINTER_WIDTH_BITS: usize = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<usize>() * 8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst POINTER_WIDTH_BITS: usize = size_of::<usize>() * 8;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":18954,"byte_end":18972,"line_start":488,"line_end":488,"column_start":44,"column_end":62,"is_primary":true,"text":[{"text":"            align: match NonZeroUsize::new(mem::align_of::<T>()) {","highlight_start":44,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":18954,"byte_end":18959,"line_start":488,"line_end":488,"column_start":44,"column_end":49,"is_primary":true,"text":[{"text":"            align: match NonZeroUsize::new(mem::align_of::<T>()) {","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:488:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            align: match NonZeroUsize::new(mem::align_of::<T>()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            align: match NonZeroUsize::new(\u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0malign_of::<T>()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            align: match NonZeroUsize::new(align_of::<T>()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":19119,"byte_end":19136,"line_start":492,"line_end":492,"column_start":49,"column_end":66,"is_primary":true,"text":[{"text":"            size_info: SizeInfo::Sized { _size: mem::size_of::<T>() },","highlight_start":49,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":19119,"byte_end":19124,"line_start":492,"line_end":492,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"            size_info: SizeInfo::Sized { _size: mem::size_of::<T>() },","highlight_start":49,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:492:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            size_info: SizeInfo::Sized { _size: mem::size_of::<T>() },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            size_info: SizeInfo::Sized { _size: \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>() },\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            size_info: SizeInfo::Sized { _size: size_of::<T>() },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":19959,"byte_end":19977,"line_start":511,"line_end":511,"column_start":44,"column_end":62,"is_primary":true,"text":[{"text":"            align: match NonZeroUsize::new(mem::align_of::<T>()) {","highlight_start":44,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":19959,"byte_end":19964,"line_start":511,"line_end":511,"column_start":44,"column_end":49,"is_primary":true,"text":[{"text":"            align: match NonZeroUsize::new(mem::align_of::<T>()) {","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:511:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            align: match NonZeroUsize::new(mem::align_of::<T>()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            align: match NonZeroUsize::new(\u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0malign_of::<T>()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            align: match NonZeroUsize::new(align_of::<T>()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":20196,"byte_end":20213,"line_start":517,"line_end":517,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"                _elem_size: mem::size_of::<T>(),","highlight_start":29,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":20196,"byte_end":20201,"line_start":517,"line_end":517,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"                _elem_size: mem::size_of::<T>(),","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:517:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _elem_size: mem::size_of::<T>(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                _elem_size: \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                _elem_size: size_of::<T>(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":61714,"byte_end":61730,"line_start":1418,"line_end":1418,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"        let len = mem::size_of_val(self);","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":61714,"byte_end":61719,"line_start":1418,"line_end":1418,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"        let len = mem::size_of_val(self);","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:1418:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let len = mem::size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let len = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of_val(self);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let len = size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":107281,"byte_end":107297,"line_start":2714,"line_end":2714,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"        let len = mem::size_of_val(self);","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":107281,"byte_end":107286,"line_start":2714,"line_end":2714,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"        let len = mem::size_of_val(self);","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:2714:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let len = mem::size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let len = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of_val(self);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let len = size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":109986,"byte_end":110002,"line_start":2789,"line_end":2789,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"        let len = mem::size_of_val(self);","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":109986,"byte_end":109991,"line_start":2789,"line_end":2789,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"        let len = mem::size_of_val(self);","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:2789:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let len = mem::size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let len = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of_val(self);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let len = size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":112654,"byte_end":112670,"line_start":2863,"line_end":2863,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"        if bytes.len() != mem::size_of_val(self) {","highlight_start":27,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":112654,"byte_end":112659,"line_start":2863,"line_end":2863,"column_start":27,"column_end":32,"is_primary":true,"text":[{"text":"        if bytes.len() != mem::size_of_val(self) {","highlight_start":27,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:2863:27\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if bytes.len() != mem::size_of_val(self) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        if bytes.len() != \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of_val(self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        if bytes.len() != size_of_val(self) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":114272,"byte_end":114288,"line_start":2920,"line_end":2920,"column_start":20,"column_end":36,"is_primary":true,"text":[{"text":"        let size = mem::size_of_val(self);","highlight_start":20,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":114272,"byte_end":114277,"line_start":2920,"line_end":2920,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"        let size = mem::size_of_val(self);","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:2920:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let size = mem::size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let size = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of_val(self);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let size = size_of_val(self);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":116129,"byte_end":116145,"line_start":2981,"line_end":2981,"column_start":45,"column_end":61,"is_primary":true,"text":[{"text":"        let start = bytes.len().checked_sub(mem::size_of_val(self))?;","highlight_start":45,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":116129,"byte_end":116134,"line_start":2981,"line_end":2981,"column_start":45,"column_end":50,"is_primary":true,"text":[{"text":"        let start = bytes.len().checked_sub(mem::size_of_val(self))?;","highlight_start":45,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:2981:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2981\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let start = bytes.len().checked_sub(mem::size_of_val(self))?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2981\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let start = bytes.len().checked_sub(\u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of_val(self))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2981\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let start = bytes.len().checked_sub(size_of_val(self))?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":171560,"byte_end":171577,"line_start":4161,"line_end":4161,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"        if bytes.len() != mem::size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":171560,"byte_end":171565,"line_start":4161,"line_end":4161,"column_start":27,"column_end":32,"is_primary":true,"text":[{"text":"        if bytes.len() != mem::size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {","highlight_start":27,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4161:27\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if bytes.len() != mem::size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        if bytes.len() != \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        if bytes.len() != size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":172229,"byte_end":172246,"line_start":4176,"line_end":4176,"column_start":26,"column_end":43,"is_primary":true,"text":[{"text":"        if bytes.len() < mem::size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {","highlight_start":26,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":172229,"byte_end":172234,"line_start":4176,"line_end":4176,"column_start":26,"column_end":31,"is_primary":true,"text":[{"text":"        if bytes.len() < mem::size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {","highlight_start":26,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4176:26\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if bytes.len() < mem::size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        if bytes.len() < \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        if bytes.len() < size_of::<T>() || !util::aligned_to::<_, T>(bytes.deref()) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":172375,"byte_end":172392,"line_start":4179,"line_end":4179,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"        let (bytes, suffix) = bytes.split_at(mem::size_of::<T>());","highlight_start":46,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":172375,"byte_end":172380,"line_start":4179,"line_end":4179,"column_start":46,"column_end":51,"is_primary":true,"text":[{"text":"        let (bytes, suffix) = bytes.split_at(mem::size_of::<T>());","highlight_start":46,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4179:46\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (bytes, suffix) = bytes.split_at(mem::size_of::<T>());\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let (bytes, suffix) = bytes.split_at(\u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let (bytes, suffix) = bytes.split_at(size_of::<T>());\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":173075,"byte_end":173092,"line_start":4194,"line_end":4194,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"        let split_at = bytes_len.checked_sub(mem::size_of::<T>())?;","highlight_start":46,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":173075,"byte_end":173080,"line_start":4194,"line_end":4194,"column_start":46,"column_end":51,"is_primary":true,"text":[{"text":"        let split_at = bytes_len.checked_sub(mem::size_of::<T>())?;","highlight_start":46,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4194:46\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let split_at = bytes_len.checked_sub(mem::size_of::<T>())?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let split_at = bytes_len.checked_sub(\u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>())?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let split_at = bytes_len.checked_sub(size_of::<T>())?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":173873,"byte_end":173890,"line_start":4221,"line_end":4221,"column_start":26,"column_end":43,"is_primary":true,"text":[{"text":"            .checked_rem(mem::size_of::<T>())","highlight_start":26,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":173873,"byte_end":173878,"line_start":4221,"line_end":4221,"column_start":26,"column_end":31,"is_primary":true,"text":[{"text":"            .checked_rem(mem::size_of::<T>())","highlight_start":26,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4221:26\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .checked_rem(mem::size_of::<T>())\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            .checked_rem(\u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            .checked_rem(size_of::<T>())\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":174898,"byte_end":174915,"line_start":4243,"line_end":4243,"column_start":34,"column_end":51,"is_primary":true,"text":[{"text":"        let expected_len = match mem::size_of::<T>().checked_mul(count) {","highlight_start":34,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":174898,"byte_end":174903,"line_start":4243,"line_end":4243,"column_start":34,"column_end":39,"is_primary":true,"text":[{"text":"        let expected_len = match mem::size_of::<T>().checked_mul(count) {","highlight_start":34,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4243:34\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let expected_len = match mem::size_of::<T>().checked_mul(count) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let expected_len = match \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>().checked_mul(count) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let expected_len = match size_of::<T>().checked_mul(count) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":175996,"byte_end":176013,"line_start":4268,"line_end":4268,"column_start":34,"column_end":51,"is_primary":true,"text":[{"text":"        let expected_len = match mem::size_of::<T>().checked_mul(count) {","highlight_start":34,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":175996,"byte_end":176001,"line_start":4268,"line_end":4268,"column_start":34,"column_end":39,"is_primary":true,"text":[{"text":"        let expected_len = match mem::size_of::<T>().checked_mul(count) {","highlight_start":34,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4268:34\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let expected_len = match mem::size_of::<T>().checked_mul(count) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let expected_len = match \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>().checked_mul(count) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let expected_len = match size_of::<T>().checked_mul(count) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":196534,"byte_end":196551,"line_start":4795,"line_end":4795,"column_start":25,"column_end":42,"is_primary":true,"text":[{"text":"        let elem_size = mem::size_of::<T>();","highlight_start":25,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":196534,"byte_end":196539,"line_start":4795,"line_end":4795,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"        let elem_size = mem::size_of::<T>();","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4795:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4795\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let elem_size = mem::size_of::<T>();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4795\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let elem_size = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4795\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let elem_size = size_of::<T>();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":197541,"byte_end":197558,"line_start":4825,"line_end":4825,"column_start":25,"column_end":42,"is_primary":true,"text":[{"text":"        let elem_size = mem::size_of::<T>();","highlight_start":25,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs","byte_start":197541,"byte_end":197546,"line_start":4825,"line_end":4825,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"        let elem_size = mem::size_of::<T>();","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs:4825:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4825\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let elem_size = mem::size_of::<T>();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4825\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let elem_size = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<T>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4825\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let elem_size = size_of::<T>();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"21 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 21 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-zerocopy-0.7.34"
## script = '''
## FROM scratch AS cratesio-zerocopy-0.7.34
## ADD --chmod=0664 --checksum=sha256:ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087 \
##   https://static.crates.io/crates/zerocopy/zerocopy-0.7.34.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-zerocopy-0.7.34-62e07187ba843221"
## script = '''
## FROM rust-base AS dep-l-zerocopy-0.7.34-62e07187ba843221
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-zerocopy-0.7.34,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="zerocopy" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Joshua Liebow-Feeser <joshlf@google.com>" \
##         CARGO_PKG_DESCRIPTION="Utilities for zero-copy parsing and serialization" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="BSD-2-Clause OR Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="zerocopy" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/google/zerocopy" \
##         CARGO_PKG_RUST_VERSION="1.60.0" \
##         CARGO_PKG_VERSION="0.7.34" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="34" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'zerocopy' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="simd"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("__internal_use_only_features_that_work_on_stable", "alloc", "byteorder", "default", "derive", "simd", "simd-nightly", "zerocopy-derive"))' '-C' 'metadata=f75e80ca5af7e2c3' '-C' 'extra-filename=-62e07187ba843221' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/zerocopy-0.7.34/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-62e07187ba843221"
## script = """
## FROM scratch AS out-62e07187ba843221
## COPY --from=dep-l-zerocopy-0.7.34-62e07187ba843221 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-62e07187ba843221* /"""

FROM scratch AS cratesio-ahash-0.8.11
ADD --chmod=0664 --checksum=sha256:e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011 \
  https://static.crates.io/crates/ahash/ahash-0.8.11.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-ahash-0.8.11-e3d10071ef13803b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-ahash-0.8.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="ahash" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tom Kaitchuck <Tom.Kaitchuck@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A non-cryptographic hash function using AES-NI for high performance" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="ahash" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tkaitchuck/ahash" \
        CARGO_PKG_RUST_VERSION="1.60.0" \
        CARGO_PKG_VERSION="0.8.11" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="11" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ahash-5f9763be15cfd55d/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'ahash' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("atomic-polyfill", "compile-time-rng", "const-random", "default", "getrandom", "nightly-arm-aes", "no-rng", "runtime-rng", "serde", "std"))' '-C' 'metadata=07d12dc1e2964968' '-C' 'extra-filename=-e3d10071ef13803b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'zerocopy=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta' '--cap-lints' 'warn' '--cfg' 'feature="folded_multiply"' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-e3d10071ef13803b
COPY --from=dep-l-ahash-0.8.11-e3d10071ef13803b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-e3d10071ef13803b* /

## this = "e3d10071ef13803b"
## deps = [
##     "da34da6838abd7f1",
##     "6ed51fafe322ecba",
##     "62e07187ba843221",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "once_cell-6ed51fafe322ecba",
##     "zerocopy-62e07187ba843221",
## ]
## writes = [
##     "deps/ahash-e3d10071ef13803b.d",
##     "deps/libahash-e3d10071ef13803b.rmeta",
##     "deps/libahash-e3d10071ef13803b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/ahash-e3d10071ef13803b.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":3244,"byte_end":3266,"line_start":100,"line_end":100,"column_start":13,"column_end":35,"is_primary":true,"text":[{"text":"#![cfg_attr(feature = \"specialize\", feature(min_specialization))]","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:100:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(feature = \"specialize\", feature(min_specialization))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":8153,"byte_end":8175,"line_start":202,"line_end":202,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:202:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":8331,"byte_end":8353,"line_start":209,"line_end":209,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:209:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":9361,"byte_end":9383,"line_start":253,"line_end":253,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:253:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":9510,"byte_end":9532,"line_start":257,"line_end":257,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:257:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":10294,"byte_end":10316,"line_start":300,"line_end":300,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:300:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":10530,"byte_end":10552,"line_start":305,"line_end":305,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:305:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":5898,"byte_end":5920,"line_start":118,"line_end":118,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"specialize\")]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:118:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `128`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs","byte_start":6847,"byte_end":6875,"line_start":164,"line_end":164,"column_start":11,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(target_pointer_width = \"128\")]","highlight_start":11,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_pointer_width` are: `16`, `32`, and `64`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `128`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/fallback_hash.rs:164:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(target_pointer_width = \"128\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_pointer_width` are: `16`, `32`, and `64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `folded_multiply`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/operations.rs","byte_start":655,"byte_end":682,"line_start":16,"line_end":16,"column_start":7,"column_end":34,"is_primary":true,"text":[{"text":"#[cfg(feature = \"folded_multiply\")]","highlight_start":7,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `folded_multiply` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `folded_multiply`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/operations.rs:16:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"folded_multiply\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `folded_multiply` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `folded_multiply`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/operations.rs","byte_start":905,"byte_end":932,"line_start":23,"line_end":23,"column_start":11,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"folded_multiply\"))]","highlight_start":11,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `folded_multiply` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `folded_multiply`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/operations.rs:23:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(feature = \"folded_multiply\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `folded_multiply` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs","byte_start":16877,"byte_end":16899,"line_start":468,"line_end":468,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs:468:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs","byte_start":487,"byte_end":494,"line_start":14,"line_end":14,"column_start":14,"column_end":21,"is_primary":true,"text":[{"text":"    if #[cfg(feature = \"specialize\")]{","highlight_start":14,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs:14:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(feature = \"specialize\")]{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs","byte_start":1352,"byte_end":1359,"line_start":53,"line_end":53,"column_start":58,"column_end":65,"is_primary":true,"text":[{"text":"    if #[cfg(all(feature = \"compile-time-rng\", any(test, fuzzing)))] {","highlight_start":58,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs:53:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(all(feature = \"compile-time-rng\", any(test, fuzzing)))] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs","byte_start":2001,"byte_end":2008,"line_start":73,"line_end":73,"column_start":54,"column_end":61,"is_primary":true,"text":[{"text":"    } else if #[cfg(all(feature = \"runtime-rng\", not(fuzzing)))] {","highlight_start":54,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs:73:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(all(feature = \"runtime-rng\", not(fuzzing)))] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs","byte_start":16737,"byte_end":16759,"line_start":461,"line_end":461,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"specialize\")]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/random_state.rs:461:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":183,"byte_end":205,"line_start":10,"line_end":10,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:10:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":241,"byte_end":263,"line_start":12,"line_end":12,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:12:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":299,"byte_end":321,"line_start":14,"line_end":14,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:14:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":728,"byte_end":750,"line_start":24,"line_end":24,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"specialize\"))]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:24:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(feature = \"specialize\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1037,"byte_end":1059,"line_start":37,"line_end":37,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:37:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1868,"byte_end":1890,"line_start":70,"line_end":70,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:70:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":2086,"byte_end":2108,"line_start":78,"line_end":78,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:78:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":2304,"byte_end":2326,"line_start":86,"line_end":86,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:86:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":2523,"byte_end":2545,"line_start":94,"line_end":94,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:94:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":2742,"byte_end":2764,"line_start":102,"line_end":102,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:102:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":2951,"byte_end":2973,"line_start":110,"line_end":110,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:110:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":3163,"byte_end":3185,"line_start":118,"line_end":118,"column_start":7,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(feature = \"specialize\")]","highlight_start":7,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:118:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":3375,"byte_end":3397,"line_start":126,"line_end":126,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"specialize\"))]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:126:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"specialize\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1671,"byte_end":1692,"line_start":61,"line_end":61,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"call_hasher_impl!(u8);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(u8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1694,"byte_end":1716,"line_start":62,"line_end":62,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"call_hasher_impl!(u16);","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(u16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1718,"byte_end":1740,"line_start":63,"line_end":63,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"call_hasher_impl!(u32);","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1742,"byte_end":1764,"line_start":64,"line_end":64,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"call_hasher_impl!(u64);","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(u64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1766,"byte_end":1787,"line_start":65,"line_end":65,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"call_hasher_impl!(i8);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(i8);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1789,"byte_end":1811,"line_start":66,"line_end":66,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"call_hasher_impl!(i16);","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(i16);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1813,"byte_end":1835,"line_start":67,"line_end":67,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"call_hasher_impl!(i32);","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(i32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1412,"byte_end":1434,"line_start":52,"line_end":52,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"specialize\")]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1837,"byte_end":1859,"line_start":68,"line_end":68,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"call_hasher_impl!(i64);","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"call_hasher_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs","byte_start":1347,"byte_end":1376,"line_start":50,"line_end":50,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! call_hasher_impl {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/specialize.rs:52:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcall_hasher_impl!(i64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":8446,"byte_end":8468,"line_start":265,"line_end":265,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"specialize\")]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:265:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":8680,"byte_end":8702,"line_start":272,"line_end":272,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"    #[cfg(not(feature = \"specialize\"))]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:272:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(feature = \"specialize\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":8903,"byte_end":8925,"line_start":279,"line_end":279,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"specialize\")]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:279:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":9146,"byte_end":9168,"line_start":286,"line_end":286,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"    #[cfg(not(feature = \"specialize\"))]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:286:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(feature = \"specialize\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":9378,"byte_end":9400,"line_start":293,"line_end":293,"column_start":11,"column_end":33,"is_primary":true,"text":[{"text":"    #[cfg(feature = \"specialize\")]","highlight_start":11,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:293:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(feature = \"specialize\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `specialize`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":9612,"byte_end":9634,"line_start":300,"line_end":300,"column_start":15,"column_end":37,"is_primary":true,"text":[{"text":"    #[cfg(not(feature = \"specialize\"))]","highlight_start":15,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `specialize` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `specialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:300:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(feature = \"specialize\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `specialize` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `BuildHasherExt` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs","byte_start":8088,"byte_end":8102,"line_start":252,"line_end":252,"column_start":18,"column_end":32,"is_primary":true,"text":[{"text":"pub(crate) trait BuildHasherExt: BuildHasher {","highlight_start":18,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `BuildHasherExt` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs:252:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait BuildHasherExt: BuildHasher {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs","byte_start":1883,"byte_end":1896,"line_start":75,"line_end":75,"column_start":18,"column_end":31,"is_primary":false,"text":[{"text":"pub(crate) trait ReadFromSlice {","highlight_start":18,"highlight_end":31}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs","byte_start":2068,"byte_end":2079,"line_start":80,"line_end":80,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"    fn read_u128x2(&self) -> ([u128; 2], &[u8]);","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs","byte_start":2117,"byte_end":2128,"line_start":81,"line_end":81,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"    fn read_u128x4(&self) -> ([u128; 4], &[u8]);","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs","byte_start":2166,"byte_end":2179,"line_start":82,"line_end":82,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn read_last_u16(&self) -> u16;","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs","byte_start":2312,"byte_end":2328,"line_start":86,"line_end":86,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn read_last_u128x2(&self) -> [u128; 2];","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs","byte_start":2357,"byte_end":2373,"line_start":87,"line_end":87,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn read_last_u128x4(&self) -> [u128; 4];","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/convert.rs:80:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait ReadFromSlice {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_u128x2(&self) -> ([u128; 2], &[u8]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_u128x4(&self) -> ([u128; 4], &[u8]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_last_u16(&self) -> u16;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_last_u128x2(&self) -> [u128; 2];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_last_u128x4(&self) -> [u128; 4];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"45 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 45 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-ahash-0.8.11"
## script = '''
## FROM scratch AS cratesio-ahash-0.8.11
## ADD --chmod=0664 --checksum=sha256:e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011 \
##   https://static.crates.io/crates/ahash/ahash-0.8.11.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-ahash-0.8.11-e3d10071ef13803b"
## script = '''
## FROM rust-base AS dep-l-ahash-0.8.11-e3d10071ef13803b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-ahash-0.8.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="ahash" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tom Kaitchuck <Tom.Kaitchuck@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A non-cryptographic hash function using AES-NI for high performance" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="ahash" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tkaitchuck/ahash" \
##         CARGO_PKG_RUST_VERSION="1.60.0" \
##         CARGO_PKG_VERSION="0.8.11" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="11" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ahash-5f9763be15cfd55d/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'ahash' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("atomic-polyfill", "compile-time-rng", "const-random", "default", "getrandom", "nightly-arm-aes", "no-rng", "runtime-rng", "serde", "std"))' '-C' 'metadata=07d12dc1e2964968' '-C' 'extra-filename=-e3d10071ef13803b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'zerocopy=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta' '--cap-lints' 'warn' '--cfg' 'feature="folded_multiply"' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ahash-0.8.11/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-e3d10071ef13803b"
## script = """
## FROM scratch AS out-e3d10071ef13803b
## COPY --from=dep-l-ahash-0.8.11-e3d10071ef13803b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-e3d10071ef13803b* /"""

FROM scratch AS cratesio-hashbrown-0.14.5
ADD --chmod=0664 --checksum=sha256:e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1 \
  https://static.crates.io/crates/hashbrown/hashbrown-0.14.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hashbrown-0.14.5-ae4e234b5a727d1b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hashbrown-0.14.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5 \
  --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hashbrown" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A Rust port of Google's SwissTable hash map" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hashbrown" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/hashbrown" \
        CARGO_PKG_RUST_VERSION="1.63.0" \
        CARGO_PKG_VERSION="0.14.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="14" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hashbrown' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="ahash"' '--cfg' 'feature="inline-more"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ahash", "alloc", "allocator-api2", "compiler_builtins", "core", "default", "equivalent", "inline-more", "nightly", "raw", "rayon", "rkyv", "rustc-dep-of-std", "rustc-internal-api", "serde"))' '-C' 'metadata=95f3fbe9236b211c' '-C' 'extra-filename=-ae4e234b5a727d1b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ahash=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ae4e234b5a727d1b
COPY --from=dep-l-hashbrown-0.14.5-ae4e234b5a727d1b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-ae4e234b5a727d1b* /

## this = "ae4e234b5a727d1b"
## deps = [
##     "e3d10071ef13803b",
##     "da34da6838abd7f1",
##     "6ed51fafe322ecba",
##     "62e07187ba843221",
## ]
## short_externs = [
##     "ahash-e3d10071ef13803b",
##     "cfg_if-da34da6838abd7f1",
##     "once_cell-6ed51fafe322ecba",
##     "zerocopy-62e07187ba843221",
## ]
## writes = [
##     "deps/hashbrown-ae4e234b5a727d1b.d",
##     "deps/libhashbrown-ae4e234b5a727d1b.rmeta",
##     "deps/libhashbrown-ae4e234b5a727d1b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hashbrown-ae4e234b5a727d1b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hashbrown-0.14.5"
## script = '''
## FROM scratch AS cratesio-hashbrown-0.14.5
## ADD --chmod=0664 --checksum=sha256:e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1 \
##   https://static.crates.io/crates/hashbrown/hashbrown-0.14.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hashbrown-0.14.5-ae4e234b5a727d1b"
## script = '''
## FROM rust-base AS dep-l-hashbrown-0.14.5-ae4e234b5a727d1b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hashbrown-0.14.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5 \
##   --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hashbrown" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A Rust port of Google's SwissTable hash map" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hashbrown" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/hashbrown" \
##         CARGO_PKG_RUST_VERSION="1.63.0" \
##         CARGO_PKG_VERSION="0.14.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="14" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hashbrown' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="ahash"' '--cfg' 'feature="inline-more"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ahash", "alloc", "allocator-api2", "compiler_builtins", "core", "default", "equivalent", "inline-more", "nightly", "raw", "rayon", "rkyv", "rustc-dep-of-std", "rustc-internal-api", "serde"))' '-C' 'metadata=95f3fbe9236b211c' '-C' 'extra-filename=-ae4e234b5a727d1b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'ahash=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ae4e234b5a727d1b"
## script = """
## FROM scratch AS out-ae4e234b5a727d1b
## COPY --from=dep-l-hashbrown-0.14.5-ae4e234b5a727d1b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-ae4e234b5a727d1b* /"""

FROM scratch AS cratesio-hashlink-0.9.1
ADD --chmod=0664 --checksum=sha256:6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af \
  https://static.crates.io/crates/hashlink/hashlink-0.9.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hashlink-0.9.1-eb10f7fd3a8f7cc4
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hashlink-0.9.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1 \
  --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta,source=/libhashbrown-ae4e234b5a727d1b.rmeta \
  --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hashlink" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="kyren <kerriganw@gmail.com>" \
        CARGO_PKG_DESCRIPTION="HashMap-like containers that hold their key-value pairs in a user controllable order" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hashlink" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/kyren/hashlink" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.9.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hashlink' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde", "serde_impl"))' '-C' 'metadata=2f52c81737f56b9f' '-C' 'extra-filename=-eb10f7fd3a8f7cc4' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'hashbrown=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-eb10f7fd3a8f7cc4
COPY --from=dep-l-hashlink-0.9.1-eb10f7fd3a8f7cc4 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-eb10f7fd3a8f7cc4* /

## this = "eb10f7fd3a8f7cc4"
## deps = [
##     "ae4e234b5a727d1b",
##     "e3d10071ef13803b",
##     "da34da6838abd7f1",
##     "6ed51fafe322ecba",
##     "62e07187ba843221",
## ]
## short_externs = [
##     "hashbrown-ae4e234b5a727d1b",
##     "ahash-e3d10071ef13803b",
##     "cfg_if-da34da6838abd7f1",
##     "once_cell-6ed51fafe322ecba",
##     "zerocopy-62e07187ba843221",
## ]
## writes = [
##     "deps/hashlink-eb10f7fd3a8f7cc4.d",
##     "deps/libhashlink-eb10f7fd3a8f7cc4.rmeta",
##     "deps/libhashlink-eb10f7fd3a8f7cc4.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hashlink-eb10f7fd3a8f7cc4.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hashlink-0.9.1"
## script = '''
## FROM scratch AS cratesio-hashlink-0.9.1
## ADD --chmod=0664 --checksum=sha256:6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af \
##   https://static.crates.io/crates/hashlink/hashlink-0.9.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hashlink-0.9.1-eb10f7fd3a8f7cc4"
## script = '''
## FROM rust-base AS dep-l-hashlink-0.9.1-eb10f7fd3a8f7cc4
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hashlink-0.9.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1 \
##   --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta,source=/libhashbrown-ae4e234b5a727d1b.rmeta \
##   --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hashlink" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="kyren <kerriganw@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="HashMap-like containers that hold their key-value pairs in a user controllable order" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hashlink" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/kyren/hashlink" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.9.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hashlink' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde", "serde_impl"))' '-C' 'metadata=2f52c81737f56b9f' '-C' 'extra-filename=-eb10f7fd3a8f7cc4' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'hashbrown=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashlink-0.9.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-eb10f7fd3a8f7cc4"
## script = """
## FROM scratch AS out-eb10f7fd3a8f7cc4
## COPY --from=dep-l-hashlink-0.9.1-eb10f7fd3a8f7cc4 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-eb10f7fd3a8f7cc4* /"""

FROM scratch AS cratesio-libsqlite3-sys-0.28.0
ADD --chmod=0664 --checksum=sha256:0c10584274047cb335c23d3e61bcef8e323adae7c5c8c760540f73610177fc3f \
  https://static.crates.io/crates/libsqlite3-sys/libsqlite3-sys-0.28.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-libsqlite3-sys-0.28.0-e92ab161973aaada
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-libsqlite3-sys-0.28.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0 \
  --mount=from=crate_out-95e8bf745fd1ec5b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="libsqlite3_sys" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="The rusqlite developers" \
        CARGO_PKG_DESCRIPTION="Native bindings to the libsqlite3 library" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="libsqlite3-sys" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rusqlite/rusqlite" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.28.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="28" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'libsqlite3_sys' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bundled"' '--cfg' 'feature="bundled_bindings"' '--cfg' 'feature="cc"' '--cfg' 'feature="default"' '--cfg' 'feature="min_sqlite_version_3_14_0"' '--cfg' 'feature="pkg-config"' '--cfg' 'feature="vcpkg"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bindgen", "buildtime_bindgen", "bundled", "bundled-sqlcipher", "bundled-sqlcipher-vendored-openssl", "bundled-windows", "bundled_bindings", "cc", "default", "in_gecko", "loadable_extension", "min_sqlite_version_3_14_0", "openssl-sys", "pkg-config", "prettyplease", "preupdate_hook", "quote", "session", "sqlcipher", "syn", "unlock_notify", "vcpkg", "wasm32-wasi-vfs", "with-asan"))' '-C' 'metadata=8b020b0c98cf0863' '-C' 'extra-filename=-e92ab161973aaada' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' '-l' 'static=sqlite3' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-e92ab161973aaada
COPY --from=dep-l-libsqlite3-sys-0.28.0-e92ab161973aaada /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-e92ab161973aaada* /

## this = "e92ab161973aaada"
## writes = [
##     "deps/libsqlite3_sys-e92ab161973aaada.d",
##     "deps/liblibsqlite3_sys-e92ab161973aaada.rmeta",
##     "deps/liblibsqlite3_sys-e92ab161973aaada.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsqlite3_sys-e92ab161973aaada.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-95e8bf745fd1ec5b"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-libsqlite3-sys-0.28.0"
## script = '''
## FROM scratch AS cratesio-libsqlite3-sys-0.28.0
## ADD --chmod=0664 --checksum=sha256:0c10584274047cb335c23d3e61bcef8e323adae7c5c8c760540f73610177fc3f \
##   https://static.crates.io/crates/libsqlite3-sys/libsqlite3-sys-0.28.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-libsqlite3-sys-0.28.0-e92ab161973aaada"
## script = '''
## FROM rust-base AS dep-l-libsqlite3-sys-0.28.0-e92ab161973aaada
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-libsqlite3-sys-0.28.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0 \
##   --mount=from=crate_out-95e8bf745fd1ec5b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="libsqlite3_sys" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The rusqlite developers" \
##         CARGO_PKG_DESCRIPTION="Native bindings to the libsqlite3 library" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="libsqlite3-sys" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rusqlite/rusqlite" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.28.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="28" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'libsqlite3_sys' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bundled"' '--cfg' 'feature="bundled_bindings"' '--cfg' 'feature="cc"' '--cfg' 'feature="default"' '--cfg' 'feature="min_sqlite_version_3_14_0"' '--cfg' 'feature="pkg-config"' '--cfg' 'feature="vcpkg"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bindgen", "buildtime_bindgen", "bundled", "bundled-sqlcipher", "bundled-sqlcipher-vendored-openssl", "bundled-windows", "bundled_bindings", "cc", "default", "in_gecko", "loadable_extension", "min_sqlite_version_3_14_0", "openssl-sys", "pkg-config", "prettyplease", "preupdate_hook", "quote", "session", "sqlcipher", "syn", "unlock_notify", "vcpkg", "wasm32-wasi-vfs", "with-asan"))' '-C' 'metadata=8b020b0c98cf0863' '-C' 'extra-filename=-e92ab161973aaada' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' '-l' 'static=sqlite3' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libsqlite3-sys-0.28.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-e92ab161973aaada"
## script = """
## FROM scratch AS out-e92ab161973aaada
## COPY --from=dep-l-libsqlite3-sys-0.28.0-e92ab161973aaada /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-e92ab161973aaada* /"""

FROM scratch AS cratesio-powerfmt-0.2.0
ADD --chmod=0664 --checksum=sha256:439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391 \
  https://static.crates.io/crates/powerfmt/powerfmt-0.2.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-powerfmt-0.2.0-3b9b90aa3c5625e4
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-powerfmt-0.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="powerfmt" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
        CARGO_PKG_DESCRIPTION="    `powerfmt` is a library that provides utilities for formatting values. This crate makes it\n    significantly easier to support filling to a minimum width with alignment, avoid heap\n    allocation, and avoid repetitive calculations.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="powerfmt" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/jhpratt/powerfmt" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.2.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'powerfmt' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "macros", "std"))' '-C' 'metadata=c7a4745c93bb095c' '-C' 'extra-filename=-3b9b90aa3c5625e4' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-3b9b90aa3c5625e4
COPY --from=dep-l-powerfmt-0.2.0-3b9b90aa3c5625e4 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3b9b90aa3c5625e4* /

## this = "3b9b90aa3c5625e4"
## writes = [
##     "deps/powerfmt-3b9b90aa3c5625e4.d",
##     "deps/libpowerfmt-3b9b90aa3c5625e4.rmeta",
##     "deps/libpowerfmt-3b9b90aa3c5625e4.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/powerfmt-3b9b90aa3c5625e4.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `__powerfmt_docs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/lib.rs","byte_start":298,"byte_end":313,"line_start":6,"line_end":6,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"#![cfg_attr(__powerfmt_docs, feature(doc_auto_cfg, rustc_attrs))]","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__powerfmt_docs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__powerfmt_docs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `__powerfmt_docs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/lib.rs:6:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(__powerfmt_docs, feature(doc_auto_cfg, rustc_attrs))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__powerfmt_docs)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__powerfmt_docs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `__powerfmt_docs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/lib.rs","byte_start":364,"byte_end":379,"line_start":7,"line_end":7,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"#![cfg_attr(__powerfmt_docs, allow(internal_features))]","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__powerfmt_docs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__powerfmt_docs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `__powerfmt_docs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/lib.rs:7:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(__powerfmt_docs, allow(internal_features))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__powerfmt_docs)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__powerfmt_docs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `__powerfmt_docs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/smart_display.rs","byte_start":21403,"byte_end":21418,"line_start":629,"line_end":629,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg_attr(__powerfmt_docs, rustc_must_implement_one_of(fmt, fmt_with_metadata))]","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__powerfmt_docs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__powerfmt_docs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `__powerfmt_docs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/smart_display.rs:629:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m629\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(__powerfmt_docs, rustc_must_implement_one_of(fmt, fmt_with_metadata))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__powerfmt_docs)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__powerfmt_docs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-powerfmt-0.2.0"
## script = '''
## FROM scratch AS cratesio-powerfmt-0.2.0
## ADD --chmod=0664 --checksum=sha256:439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391 \
##   https://static.crates.io/crates/powerfmt/powerfmt-0.2.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-powerfmt-0.2.0-3b9b90aa3c5625e4"
## script = '''
## FROM rust-base AS dep-l-powerfmt-0.2.0-3b9b90aa3c5625e4
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-powerfmt-0.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="powerfmt" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
##         CARGO_PKG_DESCRIPTION="    `powerfmt` is a library that provides utilities for formatting values. This crate makes it\n    significantly easier to support filling to a minimum width with alignment, avoid heap\n    allocation, and avoid repetitive calculations.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="powerfmt" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/jhpratt/powerfmt" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.2.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'powerfmt' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "macros", "std"))' '-C' 'metadata=c7a4745c93bb095c' '-C' 'extra-filename=-3b9b90aa3c5625e4' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/powerfmt-0.2.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-3b9b90aa3c5625e4"
## script = """
## FROM scratch AS out-3b9b90aa3c5625e4
## COPY --from=dep-l-powerfmt-0.2.0-3b9b90aa3c5625e4 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3b9b90aa3c5625e4* /"""

FROM scratch AS cratesio-deranged-0.3.11
ADD --chmod=0664 --checksum=sha256:b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4 \
  https://static.crates.io/crates/deranged/deranged-0.3.11.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-deranged-0.3.11-d1b20afe65258a7f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-deranged-0.3.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11 \
  --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="deranged" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
        CARGO_PKG_DESCRIPTION="Ranged integers" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="deranged" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/jhpratt/deranged" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.3.11" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="11" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'deranged' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="powerfmt"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "num", "powerfmt", "quickcheck", "rand", "serde", "std"))' '-C' 'metadata=6d47a60f1363737b' '-C' 'extra-filename=-d1b20afe65258a7f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'powerfmt=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d1b20afe65258a7f
COPY --from=dep-l-deranged-0.3.11-d1b20afe65258a7f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-d1b20afe65258a7f* /

## this = "d1b20afe65258a7f"
## deps = ["3b9b90aa3c5625e4"]
## short_externs = ["powerfmt-3b9b90aa3c5625e4"]
## writes = [
##     "deps/deranged-d1b20afe65258a7f.d",
##     "deps/libderanged-d1b20afe65258a7f.rmeta",
##     "deps/libderanged-d1b20afe65258a7f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/deranged-d1b20afe65258a7f.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"lint `illegal_floating_point_literal_pattern` has been removed: no longer a warning, float patterns behave the same as `==`","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs","byte_start":248,"byte_end":286,"line_start":9,"line_end":9,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    illegal_floating_point_literal_pattern,","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `illegal_floating_point_literal_pattern` has been removed: no longer a warning, float patterns behave the same as `==`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    illegal_floating_point_literal_pattern,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs","byte_start":12,"byte_end":19,"line_start":1,"line_end":1,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(docs_rs, feature(doc_auto_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs","byte_start":12,"byte_end":19,"line_start":1,"line_end":1,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(docs_rs, feature(doc_auto_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs:1:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(docs_rs, feature(doc_auto_cfg))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-deranged-0.3.11"
## script = '''
## FROM scratch AS cratesio-deranged-0.3.11
## ADD --chmod=0664 --checksum=sha256:b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4 \
##   https://static.crates.io/crates/deranged/deranged-0.3.11.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-deranged-0.3.11-d1b20afe65258a7f"
## script = '''
## FROM rust-base AS dep-l-deranged-0.3.11-d1b20afe65258a7f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-deranged-0.3.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11 \
##   --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="deranged" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
##         CARGO_PKG_DESCRIPTION="Ranged integers" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="deranged" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/jhpratt/deranged" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.3.11" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="11" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'deranged' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="powerfmt"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "num", "powerfmt", "quickcheck", "rand", "serde", "std"))' '-C' 'metadata=6d47a60f1363737b' '-C' 'extra-filename=-d1b20afe65258a7f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'powerfmt=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/deranged-0.3.11/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d1b20afe65258a7f"
## script = """
## FROM scratch AS out-d1b20afe65258a7f
## COPY --from=dep-l-deranged-0.3.11-d1b20afe65258a7f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-d1b20afe65258a7f* /"""

FROM scratch AS cratesio-itoa-1.0.11
ADD --chmod=0664 --checksum=sha256:49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b \
  https://static.crates.io/crates/itoa/itoa-1.0.11.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-itoa-1.0.11-95ec35c9faa8fa43
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-itoa-1.0.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="itoa" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fast integer primitive to string conversion" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="itoa" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/itoa" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="1.0.11" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="11" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'itoa' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("no-panic"))' '-C' 'metadata=2d3c6ff08e17fc95' '-C' 'extra-filename=-95ec35c9faa8fa43' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-95ec35c9faa8fa43
COPY --from=dep-l-itoa-1.0.11-95ec35c9faa8fa43 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-95ec35c9faa8fa43* /

## this = "95ec35c9faa8fa43"
## writes = [
##     "deps/itoa-95ec35c9faa8fa43.d",
##     "deps/libitoa-95ec35c9faa8fa43.rmeta",
##     "deps/libitoa-95ec35c9faa8fa43.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/itoa-95ec35c9faa8fa43.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-itoa-1.0.11"
## script = '''
## FROM scratch AS cratesio-itoa-1.0.11
## ADD --chmod=0664 --checksum=sha256:49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b \
##   https://static.crates.io/crates/itoa/itoa-1.0.11.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-itoa-1.0.11-95ec35c9faa8fa43"
## script = '''
## FROM rust-base AS dep-l-itoa-1.0.11-95ec35c9faa8fa43
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-itoa-1.0.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="itoa" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fast integer primitive to string conversion" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="itoa" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/itoa" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="1.0.11" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="11" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'itoa' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("no-panic"))' '-C' 'metadata=2d3c6ff08e17fc95' '-C' 'extra-filename=-95ec35c9faa8fa43' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.11/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-95ec35c9faa8fa43"
## script = """
## FROM scratch AS out-95ec35c9faa8fa43
## COPY --from=dep-l-itoa-1.0.11-95ec35c9faa8fa43 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-95ec35c9faa8fa43* /"""

FROM scratch AS cratesio-num-conv-0.1.0
ADD --chmod=0664 --checksum=sha256:51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9 \
  https://static.crates.io/crates/num-conv/num-conv-0.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-num-conv-0.1.0-4d9acac3d8710637
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-num-conv-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="num_conv" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
        CARGO_PKG_DESCRIPTION="`num_conv` is a crate to convert between integer types without using `as` casts. This provides\nbetter certainty when refactoring, makes the exact behavior of code more explicit, and allows using\nturbofish syntax.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="num-conv" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/jhpratt/num-conv" \
        CARGO_PKG_RUST_VERSION="1.57.0" \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'num_conv' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'unused' '--warn' 'unreachable-pub' '--deny' 'clippy::std-instead-of-core' '--warn' 'missing-docs' '--deny' 'clippy::alloc-instead-of-core' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=07106530b8730b26' '-C' 'extra-filename=-4d9acac3d8710637' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4d9acac3d8710637
COPY --from=dep-l-num-conv-0.1.0-4d9acac3d8710637 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4d9acac3d8710637* /

## this = "4d9acac3d8710637"
## writes = [
##     "deps/num_conv-4d9acac3d8710637.d",
##     "deps/libnum_conv-4d9acac3d8710637.rmeta",
##     "deps/libnum_conv-4d9acac3d8710637.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/num_conv-4d9acac3d8710637.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-num-conv-0.1.0"
## script = '''
## FROM scratch AS cratesio-num-conv-0.1.0
## ADD --chmod=0664 --checksum=sha256:51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9 \
##   https://static.crates.io/crates/num-conv/num-conv-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-num-conv-0.1.0-4d9acac3d8710637"
## script = '''
## FROM rust-base AS dep-l-num-conv-0.1.0-4d9acac3d8710637
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-num-conv-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="num_conv" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
##         CARGO_PKG_DESCRIPTION="`num_conv` is a crate to convert between integer types without using `as` casts. This provides\nbetter certainty when refactoring, makes the exact behavior of code more explicit, and allows using\nturbofish syntax.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="num-conv" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/jhpratt/num-conv" \
##         CARGO_PKG_RUST_VERSION="1.57.0" \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'num_conv' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'unused' '--warn' 'unreachable-pub' '--deny' 'clippy::std-instead-of-core' '--warn' 'missing-docs' '--deny' 'clippy::alloc-instead-of-core' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=07106530b8730b26' '-C' 'extra-filename=-4d9acac3d8710637' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4d9acac3d8710637"
## script = """
## FROM scratch AS out-4d9acac3d8710637
## COPY --from=dep-l-num-conv-0.1.0-4d9acac3d8710637 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-4d9acac3d8710637* /"""

FROM scratch AS cratesio-time-core-0.1.2
ADD --chmod=0664 --checksum=sha256:ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3 \
  https://static.crates.io/crates/time-core/time-core-0.1.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-time-core-0.1.2-1f0711c34dce700e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-time-core-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="time_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
        CARGO_PKG_DESCRIPTION="This crate is an implementation detail and should not be relied upon directly." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="time-core" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.1.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'time_core' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=0e08e6d0c03e1d80' '-C' 'extra-filename=-1f0711c34dce700e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-1f0711c34dce700e
COPY --from=dep-l-time-core-0.1.2-1f0711c34dce700e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-1f0711c34dce700e* /

## this = "1f0711c34dce700e"
## writes = [
##     "deps/time_core-1f0711c34dce700e.d",
##     "deps/libtime_core-1f0711c34dce700e.rmeta",
##     "deps/libtime_core-1f0711c34dce700e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/time_core-1f0711c34dce700e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-time-core-0.1.2"
## script = '''
## FROM scratch AS cratesio-time-core-0.1.2
## ADD --chmod=0664 --checksum=sha256:ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3 \
##   https://static.crates.io/crates/time-core/time-core-0.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-time-core-0.1.2-1f0711c34dce700e"
## script = '''
## FROM rust-base AS dep-l-time-core-0.1.2-1f0711c34dce700e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-time-core-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="time_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
##         CARGO_PKG_DESCRIPTION="This crate is an implementation detail and should not be relied upon directly." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="time-core" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.1.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'time_core' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=0e08e6d0c03e1d80' '-C' 'extra-filename=-1f0711c34dce700e' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-1f0711c34dce700e"
## script = """
## FROM scratch AS out-1f0711c34dce700e
## COPY --from=dep-l-time-core-0.1.2-1f0711c34dce700e /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-1f0711c34dce700e* /"""


FROM rust-base AS dep-l-num-conv-0.1.0-95c789b069138b83
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-num-conv-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="num_conv" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
        CARGO_PKG_DESCRIPTION="`num_conv` is a crate to convert between integer types without using `as` casts. This provides\nbetter certainty when refactoring, makes the exact behavior of code more explicit, and allows using\nturbofish syntax.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="num-conv" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/jhpratt/num-conv" \
        CARGO_PKG_RUST_VERSION="1.57.0" \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'num_conv' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '--warn' 'unused' '--warn' 'unreachable-pub' '--deny' 'clippy::std-instead-of-core' '--warn' 'missing-docs' '--deny' 'clippy::alloc-instead-of-core' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=80300e2a0c1f8218' '-C' 'extra-filename=-95c789b069138b83' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-95c789b069138b83
COPY --from=dep-l-num-conv-0.1.0-95c789b069138b83 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-95c789b069138b83* /

## this = "95c789b069138b83"
## writes = [
##     "deps/num_conv-95c789b069138b83.d",
##     "deps/libnum_conv-95c789b069138b83.rmeta",
##     "deps/libnum_conv-95c789b069138b83.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/num_conv-95c789b069138b83.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-num-conv-0.1.0"
## script = '''
## FROM scratch AS cratesio-num-conv-0.1.0
## ADD --chmod=0664 --checksum=sha256:51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9 \
##   https://static.crates.io/crates/num-conv/num-conv-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-num-conv-0.1.0-95c789b069138b83"
## script = '''
## FROM rust-base AS dep-l-num-conv-0.1.0-95c789b069138b83
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-num-conv-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="num_conv" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <jacob@jhpratt.dev>" \
##         CARGO_PKG_DESCRIPTION="`num_conv` is a crate to convert between integer types without using `as` casts. This provides\nbetter certainty when refactoring, makes the exact behavior of code more explicit, and allows using\nturbofish syntax.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="num-conv" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/jhpratt/num-conv" \
##         CARGO_PKG_RUST_VERSION="1.57.0" \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'num_conv' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '--warn' 'unused' '--warn' 'unreachable-pub' '--deny' 'clippy::std-instead-of-core' '--warn' 'missing-docs' '--deny' 'clippy::alloc-instead-of-core' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=80300e2a0c1f8218' '-C' 'extra-filename=-95c789b069138b83' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-conv-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-95c789b069138b83"
## script = """
## FROM scratch AS out-95c789b069138b83
## COPY --from=dep-l-num-conv-0.1.0-95c789b069138b83 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-95c789b069138b83* /"""


FROM rust-base AS dep-l-time-core-0.1.2-bb694424a192024c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-time-core-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="time_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
        CARGO_PKG_DESCRIPTION="This crate is an implementation detail and should not be relied upon directly." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="time-core" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.1.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'time_core' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=a7aa89bc07e90caa' '-C' 'extra-filename=-bb694424a192024c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-bb694424a192024c
COPY --from=dep-l-time-core-0.1.2-bb694424a192024c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-bb694424a192024c* /

## this = "bb694424a192024c"
## writes = [
##     "deps/time_core-bb694424a192024c.d",
##     "deps/libtime_core-bb694424a192024c.rmeta",
##     "deps/libtime_core-bb694424a192024c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/time_core-bb694424a192024c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-time-core-0.1.2"
## script = '''
## FROM scratch AS cratesio-time-core-0.1.2
## ADD --chmod=0664 --checksum=sha256:ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3 \
##   https://static.crates.io/crates/time-core/time-core-0.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-time-core-0.1.2-bb694424a192024c"
## script = '''
## FROM rust-base AS dep-l-time-core-0.1.2-bb694424a192024c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-time-core-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="time_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
##         CARGO_PKG_DESCRIPTION="This crate is an implementation detail and should not be relied upon directly." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="time-core" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.1.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'time_core' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=a7aa89bc07e90caa' '-C' 'extra-filename=-bb694424a192024c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-core-0.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-bb694424a192024c"
## script = """
## FROM scratch AS out-bb694424a192024c
## COPY --from=dep-l-time-core-0.1.2-bb694424a192024c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-bb694424a192024c* /"""

FROM scratch AS cratesio-time-macros-0.2.18
ADD --chmod=0664 --checksum=sha256:3f252a68540fde3a3877aeea552b832b40ab9a69e318efd078774a01ddee1ccf \
  https://static.crates.io/crates/time-macros/time-macros-0.2.18.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-time-macros-0.2.18-00f64a626ad29a7c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-time-macros-0.2.18,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18 \
  --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib,source=/libnum_conv-95c789b069138b83.rlib \
  --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib,source=/libtime_core-bb694424a192024c.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="time_macros" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
        CARGO_PKG_DESCRIPTION="    Procedural macros for the time crate.\n    This crate is an implementation detail and should not be relied upon directly.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="time-macros" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.2.18" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="18" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'time_macros' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '--warn' 'variant-size-differences' '--warn' 'clippy::use-debug' '--warn' 'clippy::unwrap-used' '--warn' 'clippy::unwrap-in-result' '--warn' 'unused-qualifications' '--warn' 'unused-lifetimes' '--warn' 'unused-import-braces' '--warn' 'unused' '--deny' 'unstable-syntax-pre-expansion' '--deny' 'unsafe-op-in-unsafe-fn' '--warn' 'unreachable-pub' '--warn' 'clippy::unnested-or-patterns' '--deny' 'unnameable-test-items' '--warn' 'clippy::uninlined-format-args' '--warn' 'clippy::unimplemented' '--warn' 'rustdoc::unescaped-backticks' '--deny' 'clippy::undocumented-unsafe-blocks' '--deny' 'unconditional-recursion' '--warn' 'trivial-numeric-casts' '--warn' 'trivial-casts' '--warn' 'clippy::todo' '--deny' 'temporary-cstring-as-ptr' '--deny' 'suspicious-double-ref-op' '--deny' 'clippy::std-instead-of-core' '--warn' 'single-use-lifetimes' '--warn' 'clippy::semicolon-outside-block' '--warn' 'rustdoc::private-doc-tests' '--warn' 'clippy::print-stdout' '--deny' 'overlapping-range-endpoints' '--deny' 'opaque-hidden-inferred-bound' '--warn' 'clippy::obfuscated-if-else' '--warn' 'clippy::nursery' '--warn' 'noop-method-call' '--deny' 'non-ascii-idents' '--deny' 'named-arguments-used-positionally' '--warn' 'clippy::missing-enforced-import-renames' '--warn' 'clippy::missing-docs-in-private-items' '--warn' 'missing-docs' '--warn' 'missing-debug-implementations' '--warn' 'missing-copy-implementations' '--warn' 'missing-abi' '--warn' 'meta-variable-misuse' '--warn' 'clippy::manual-let-else' '--warn' 'macro-use-extern-crate' '--warn' 'let-underscore' '--warn' 'keyword-idents' '--deny' 'invalid-value' '--deny' 'invalid-reference-casting' '--deny' 'invalid-nan-comparisons' '--deny' 'invalid-macro-export-arguments' '--deny' 'invalid-from-utf8' '--deny' 'improper-ctypes-definitions' '--deny' 'improper-ctypes' '--deny' 'hidden-glob-reexports' '--warn' 'clippy::get-unwrap' '--deny' 'future-incompatible' '--warn' 'clippy::explicit-auto-deref' '--deny' 'drop-bounds' '--deny' 'deref-nullptr' '--warn' 'clippy::decimal-literal-representation' '--warn' 'clippy::dbg-macro' '--deny' 'const-item-mutation' '--deny' 'clashing-extern-declarations' '--deny' 'ambiguous-glob-reexports' '--deny' 'clippy::alloc-instead-of-core' '--warn' 'clippy::all' '--warn' 'unstable-name-collisions' '--allow' 'clippy::redundant-pub-crate' '--allow' 'clippy::option-if-let-else' '-C' 'debug-assertions=off' '--cfg' 'feature="formatting"' '--cfg' 'feature="parsing"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("formatting", "large-dates", "parsing", "serde"))' '-C' 'metadata=ff659ddd94cfe0a4' '-C' 'extra-filename=-00f64a626ad29a7c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'num_conv=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib' '--extern' 'time_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-00f64a626ad29a7c
COPY --from=dep-p-time-macros-0.2.18-00f64a626ad29a7c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-00f64a626ad29a7c* /

## this = "00f64a626ad29a7c"
## deps = [
##     "95c789b069138b83",
##     "bb694424a192024c",
## ]
## short_externs = [
##     "num_conv-95c789b069138b83",
##     "time_core-bb694424a192024c",
## ]
## is_proc_macro = true
## writes = [
##     "deps/time_macros-00f64a626ad29a7c.d",
##     "deps/libtime_macros-00f64a626ad29a7c.so",
## ]
## stderr = [
##     '{"$message_type":"diagnostic","message":"lint `temporary_cstring_as_ptr` has been renamed to `dangling_pointers_from_temporaries`","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[],"children":[{"message":"use the new name `dangling_pointers_from_temporaries`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"requested on the command line with `-D temporary_cstring_as_ptr`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `temporary_cstring_as_ptr` has been renamed to `dangling_pointers_from_temporaries`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use the new name `dangling_pointers_from_temporaries`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: requested on the command line with `-D temporary_cstring_as_ptr`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/time_macros-00f64a626ad29a7c.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/helpers/mod.rs","byte_start":3063,"byte_end":3076,"line_start":100,"line_end":100,"column_start":6,"column_end":19,"is_primary":true,"text":[{"text":"    .cast_unsigned()","highlight_start":6,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"requested on the command line with `-W unstable-name-collisions`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/helpers/mod.rs:100:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    .cast_unsigned()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: requested on the command line with `-W unstable-name-collisions`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/offset.rs","byte_start":1828,"byte_end":1839,"line_start":63,"line_end":63,"column_start":44,"column_end":55,"is_primary":true,"text":[{"text":"    } else if minutes >= Minute::per(Hour).cast_signed() {","highlight_start":44,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/offset.rs:63:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if minutes >= Minute::per(Hour).cast_signed() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/offset.rs","byte_start":2092,"byte_end":2103,"line_start":70,"line_end":70,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"    } else if seconds >= Second::per(Minute).cast_signed() {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/offset.rs:70:46\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if seconds >= Second::per(Minute).cast_signed() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-time-macros-0.2.18"
## script = '''
## FROM scratch AS cratesio-time-macros-0.2.18
## ADD --chmod=0664 --checksum=sha256:3f252a68540fde3a3877aeea552b832b40ab9a69e318efd078774a01ddee1ccf \
##   https://static.crates.io/crates/time-macros/time-macros-0.2.18.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-time-macros-0.2.18-00f64a626ad29a7c"
## script = '''
## FROM rust-base AS dep-p-time-macros-0.2.18-00f64a626ad29a7c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-time-macros-0.2.18,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18 \
##   --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib,source=/libnum_conv-95c789b069138b83.rlib \
##   --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib,source=/libtime_core-bb694424a192024c.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="time_macros" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
##         CARGO_PKG_DESCRIPTION="    Procedural macros for the time crate.\n    This crate is an implementation detail and should not be relied upon directly.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="time-macros" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.2.18" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="18" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'time_macros' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '--warn' 'variant-size-differences' '--warn' 'clippy::use-debug' '--warn' 'clippy::unwrap-used' '--warn' 'clippy::unwrap-in-result' '--warn' 'unused-qualifications' '--warn' 'unused-lifetimes' '--warn' 'unused-import-braces' '--warn' 'unused' '--deny' 'unstable-syntax-pre-expansion' '--deny' 'unsafe-op-in-unsafe-fn' '--warn' 'unreachable-pub' '--warn' 'clippy::unnested-or-patterns' '--deny' 'unnameable-test-items' '--warn' 'clippy::uninlined-format-args' '--warn' 'clippy::unimplemented' '--warn' 'rustdoc::unescaped-backticks' '--deny' 'clippy::undocumented-unsafe-blocks' '--deny' 'unconditional-recursion' '--warn' 'trivial-numeric-casts' '--warn' 'trivial-casts' '--warn' 'clippy::todo' '--deny' 'temporary-cstring-as-ptr' '--deny' 'suspicious-double-ref-op' '--deny' 'clippy::std-instead-of-core' '--warn' 'single-use-lifetimes' '--warn' 'clippy::semicolon-outside-block' '--warn' 'rustdoc::private-doc-tests' '--warn' 'clippy::print-stdout' '--deny' 'overlapping-range-endpoints' '--deny' 'opaque-hidden-inferred-bound' '--warn' 'clippy::obfuscated-if-else' '--warn' 'clippy::nursery' '--warn' 'noop-method-call' '--deny' 'non-ascii-idents' '--deny' 'named-arguments-used-positionally' '--warn' 'clippy::missing-enforced-import-renames' '--warn' 'clippy::missing-docs-in-private-items' '--warn' 'missing-docs' '--warn' 'missing-debug-implementations' '--warn' 'missing-copy-implementations' '--warn' 'missing-abi' '--warn' 'meta-variable-misuse' '--warn' 'clippy::manual-let-else' '--warn' 'macro-use-extern-crate' '--warn' 'let-underscore' '--warn' 'keyword-idents' '--deny' 'invalid-value' '--deny' 'invalid-reference-casting' '--deny' 'invalid-nan-comparisons' '--deny' 'invalid-macro-export-arguments' '--deny' 'invalid-from-utf8' '--deny' 'improper-ctypes-definitions' '--deny' 'improper-ctypes' '--deny' 'hidden-glob-reexports' '--warn' 'clippy::get-unwrap' '--deny' 'future-incompatible' '--warn' 'clippy::explicit-auto-deref' '--deny' 'drop-bounds' '--deny' 'deref-nullptr' '--warn' 'clippy::decimal-literal-representation' '--warn' 'clippy::dbg-macro' '--deny' 'const-item-mutation' '--deny' 'clashing-extern-declarations' '--deny' 'ambiguous-glob-reexports' '--deny' 'clippy::alloc-instead-of-core' '--warn' 'clippy::all' '--warn' 'unstable-name-collisions' '--allow' 'clippy::redundant-pub-crate' '--allow' 'clippy::option-if-let-else' '-C' 'debug-assertions=off' '--cfg' 'feature="formatting"' '--cfg' 'feature="parsing"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("formatting", "large-dates", "parsing", "serde"))' '-C' 'metadata=ff659ddd94cfe0a4' '-C' 'extra-filename=-00f64a626ad29a7c' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'num_conv=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib' '--extern' 'time_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-macros-0.2.18/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-00f64a626ad29a7c"
## script = """
## FROM scratch AS out-00f64a626ad29a7c
## COPY --from=dep-p-time-macros-0.2.18-00f64a626ad29a7c /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-00f64a626ad29a7c* /"""

FROM scratch AS cratesio-time-0.3.36
ADD --chmod=0664 --checksum=sha256:5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885 \
  https://static.crates.io/crates/time/time-0.3.36.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-time-0.3.36-6f9611253b5d8f71
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-time-0.3.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36 \
  --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta,source=/libderanged-d1b20afe65258a7f.rmeta \
  --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
  --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta,source=/libitoa-95ec35c9faa8fa43.rmeta \
  --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta,source=/libnum_conv-4d9acac3d8710637.rmeta \
  --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta,source=/libtime_core-1f0711c34dce700e.rmeta \
  --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
  --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta,source=/libnum_conv-95c789b069138b83.rmeta \
  --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta,source=/libtime_core-bb694424a192024c.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="time" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
        CARGO_PKG_DESCRIPTION="Date and time library. Fully interoperable with the standard library. Mostly compatible with #![no_std]." \
        CARGO_PKG_HOMEPAGE="https://time-rs.github.io" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="time" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.3.36" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="36" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'time' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'variant-size-differences' '--warn' 'clippy::use-debug' '--warn' 'clippy::unwrap-used' '--warn' 'clippy::unwrap-in-result' '--warn' 'unused-qualifications' '--warn' 'unused-lifetimes' '--warn' 'unused-import-braces' '--warn' 'unused' '--deny' 'unstable-syntax-pre-expansion' '--deny' 'unsafe-op-in-unsafe-fn' '--warn' 'unreachable-pub' '--warn' 'clippy::unnested-or-patterns' '--deny' 'unnameable-test-items' '--warn' 'clippy::uninlined-format-args' '--warn' 'clippy::unimplemented' '--warn' 'rustdoc::unescaped-backticks' '--deny' 'clippy::undocumented-unsafe-blocks' '--deny' 'unconditional-recursion' '--warn' 'trivial-numeric-casts' '--warn' 'trivial-casts' '--warn' 'clippy::todo' '--deny' 'temporary-cstring-as-ptr' '--deny' 'suspicious-double-ref-op' '--deny' 'clippy::std-instead-of-core' '--warn' 'single-use-lifetimes' '--warn' 'clippy::semicolon-outside-block' '--warn' 'rustdoc::private-doc-tests' '--warn' 'clippy::print-stdout' '--deny' 'overlapping-range-endpoints' '--deny' 'opaque-hidden-inferred-bound' '--warn' 'clippy::obfuscated-if-else' '--warn' 'clippy::nursery' '--warn' 'noop-method-call' '--deny' 'non-ascii-idents' '--deny' 'named-arguments-used-positionally' '--warn' 'clippy::missing-enforced-import-renames' '--warn' 'clippy::missing-docs-in-private-items' '--warn' 'missing-docs' '--warn' 'missing-debug-implementations' '--warn' 'missing-copy-implementations' '--warn' 'missing-abi' '--warn' 'meta-variable-misuse' '--warn' 'clippy::manual-let-else' '--warn' 'macro-use-extern-crate' '--warn' 'let-underscore' '--warn' 'keyword-idents' '--deny' 'invalid-value' '--deny' 'invalid-reference-casting' '--deny' 'invalid-nan-comparisons' '--deny' 'invalid-macro-export-arguments' '--deny' 'invalid-from-utf8' '--deny' 'improper-ctypes-definitions' '--deny' 'improper-ctypes' '--deny' 'hidden-glob-reexports' '--warn' 'clippy::get-unwrap' '--deny' 'future-incompatible' '--warn' 'clippy::explicit-auto-deref' '--deny' 'drop-bounds' '--deny' 'deref-nullptr' '--warn' 'clippy::decimal-literal-representation' '--warn' 'clippy::dbg-macro' '--deny' 'const-item-mutation' '--deny' 'clashing-extern-declarations' '--deny' 'ambiguous-glob-reexports' '--deny' 'clippy::alloc-instead-of-core' '--warn' 'clippy::all' '--warn' 'unstable-name-collisions' '--allow' 'clippy::redundant-pub-crate' '--allow' 'clippy::option-if-let-else' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="formatting"' '--cfg' 'feature="macros"' '--cfg' 'feature="parsing"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "formatting", "large-dates", "local-offset", "macros", "parsing", "quickcheck", "rand", "serde", "serde-human-readable", "serde-well-known", "std", "wasm-bindgen"))' '-C' 'metadata=932e277fb3bf16ea' '-C' 'extra-filename=-6f9611253b5d8f71' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'deranged=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta' '--extern' 'itoa=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta' '--extern' 'num_conv=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta' '--extern' 'powerfmt=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta' '--extern' 'time_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta' '--extern' 'time_macros=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6f9611253b5d8f71
COPY --from=dep-l-time-0.3.36-6f9611253b5d8f71 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6f9611253b5d8f71* /

## this = "6f9611253b5d8f71"
## deps = [
##     "d1b20afe65258a7f",
##     "3b9b90aa3c5625e4",
##     "95ec35c9faa8fa43",
##     "4d9acac3d8710637",
##     "1f0711c34dce700e",
##     "00f64a626ad29a7c",
##     "95c789b069138b83",
##     "bb694424a192024c",
## ]
## short_externs = [
##     "deranged-d1b20afe65258a7f",
##     "powerfmt-3b9b90aa3c5625e4",
##     "itoa-95ec35c9faa8fa43",
##     "num_conv-4d9acac3d8710637",
##     "time_core-1f0711c34dce700e",
##     "time_macros-00f64a626ad29a7c",
##     "num_conv-95c789b069138b83",
##     "time_core-bb694424a192024c",
## ]
## writes = [
##     "deps/time-6f9611253b5d8f71.d",
##     "deps/libtime-6f9611253b5d8f71.rmeta",
##     "deps/libtime-6f9611253b5d8f71.rlib",
## ]
## stderr = [
##     '{"$message_type":"diagnostic","message":"lint `temporary_cstring_as_ptr` has been renamed to `dangling_pointers_from_temporaries`","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[],"children":[{"message":"use the new name `dangling_pointers_from_temporaries`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"requested on the command line with `-D temporary_cstring_as_ptr`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `temporary_cstring_as_ptr` has been renamed to `dangling_pointers_from_temporaries`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use the new name `dangling_pointers_from_temporaries`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: requested on the command line with `-D temporary_cstring_as_ptr`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/time-6f9611253b5d8f71.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `__time_03_docs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/lib.rs","byte_start":2708,"byte_end":2722,"line_start":70,"line_end":70,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"#![cfg_attr(__time_03_docs, feature(doc_auto_cfg, doc_notable_trait))]","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__time_03_docs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__time_03_docs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `__time_03_docs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/lib.rs:70:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(__time_03_docs, feature(doc_auto_cfg, doc_notable_trait))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__time_03_docs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__time_03_docs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `__time_03_docs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/formattable.rs","byte_start":857,"byte_end":871,"line_start":24,"line_end":24,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg_attr(__time_03_docs, doc(notable_trait))]","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__time_03_docs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__time_03_docs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `__time_03_docs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/formattable.rs:24:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(__time_03_docs, doc(notable_trait))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__time_03_docs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__time_03_docs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `__time_03_docs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":602,"byte_end":616,"line_start":18,"line_end":18,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg_attr(__time_03_docs, doc(notable_trait))]","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__time_03_docs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__time_03_docs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `__time_03_docs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:18:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(__time_03_docs, doc(notable_trait))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(__time_03_docs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(__time_03_docs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs","byte_start":11445,"byte_end":11456,"line_start":261,"line_end":261,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"                            -hour.cast_signed()","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"requested on the command line with `-W unstable-name-collisions`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs:261:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   -hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: requested on the command line with `-W unstable-name-collisions`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs","byte_start":11525,"byte_end":11536,"line_start":263,"line_end":263,"column_start":34,"column_end":45,"is_primary":true,"text":[{"text":"                            hour.cast_signed()","highlight_start":34,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs:263:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs","byte_start":12270,"byte_end":12281,"line_start":283,"line_end":283,"column_start":34,"column_end":45,"is_primary":true,"text":[{"text":"                            -min.cast_signed()","highlight_start":34,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs:283:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   -min.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs","byte_start":12349,"byte_end":12360,"line_start":285,"line_end":285,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"                            min.cast_signed()","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/iso8601.rs:285:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   min.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":49548,"byte_end":49559,"line_start":1289,"line_end":1289,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"            original.subsec_nanos().cast_signed(),","highlight_start":37,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs:1289:37\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1289\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            original.subsec_nanos().cast_signed(),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":53140,"byte_end":53151,"line_start":1426,"line_end":1426,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"                        .checked_mul(rhs.cast_signed().extend::<i128>())","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":53773,"byte_end":53822,"line_start":1451,"line_end":1451,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"duration_mul_div_int![i8, i16, i32, u8, u16, u32];","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"duration_mul_div_int!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":52824,"byte_end":52857,"line_start":1418,"line_end":1418,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! duration_mul_div_int {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs:1426:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .checked_mul(rhs.cast_signed().extend::<i128>())\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mduration_mul_div_int![i8, i16, i32, u8, u16, u32];\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `duration_mul_div_int` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":53689,"byte_end":53700,"line_start":1445,"line_end":1445,"column_start":52,"column_end":63,"is_primary":true,"text":[{"text":"                    self.whole_nanoseconds() / rhs.cast_signed().extend::<i128>()","highlight_start":52,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":53773,"byte_end":53822,"line_start":1451,"line_end":1451,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"duration_mul_div_int![i8, i16, i32, u8, u16, u32];","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"duration_mul_div_int!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":52824,"byte_end":52857,"line_start":1418,"line_end":1418,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! duration_mul_div_int {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs:1445:52\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    self.whole_nanoseconds() / rhs.cast_signed().extend::<i128>()\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mduration_mul_div_int![i8, i16, i32, u8, u16, u32];\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `duration_mul_div_int` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":55784,"byte_end":55797,"line_start":1543,"line_end":1543,"column_start":37,"column_end":50,"is_primary":true,"text":[{"text":"        if rhs.as_secs() > i64::MAX.cast_unsigned() {","highlight_start":37,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs:1543:37\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if rhs.as_secs() > i64::MAX.cast_unsigned() {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":55929,"byte_end":55940,"line_start":1549,"line_end":1549,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"                .cmp(&rhs.as_secs().cast_signed())","highlight_start":37,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs:1549:37\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .cmp(&rhs.as_secs().cast_signed())\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs","byte_start":56093,"byte_end":56104,"line_start":1553,"line_end":1553,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"                        .cmp(&rhs.subsec_nanos().cast_signed())","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/duration.rs:1553:50\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .cmp(&rhs.subsec_nanos().cast_signed())\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/formattable.rs","byte_start":6462,"byte_end":6475,"line_start":192,"line_end":192,"column_start":59,"column_end":72,"is_primary":true,"text":[{"text":"        bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;","highlight_start":59,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/formattable.rs:192:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/formattable.rs","byte_start":8118,"byte_end":8131,"line_start":234,"line_end":234,"column_start":59,"column_end":72,"is_primary":true,"text":[{"text":"        bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;","highlight_start":59,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/formattable.rs:234:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/iso8601.rs","byte_start":1187,"byte_end":1200,"line_start":31,"line_end":31,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/iso8601.rs:31:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/iso8601.rs","byte_start":2039,"byte_end":2052,"line_start":46,"line_end":46,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/iso8601.rs:46:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/iso8601.rs","byte_start":2909,"byte_end":2922,"line_start":61,"line_end":61,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/iso8601.rs:61:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                bytes += format_number_pad_zero::<4>(output, year.cast_unsigned())?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/mod.rs","byte_start":16519,"byte_end":16530,"line_start":475,"line_end":475,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"                / Nanosecond::per(Millisecond).cast_signed().extend::<i128>())","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/mod.rs:475:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                / Nanosecond::per(Millisecond).cast_signed().extend::<i128>())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/mod.rs","byte_start":16785,"byte_end":16796,"line_start":481,"line_end":481,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"                / Nanosecond::per(Microsecond).cast_signed().extend::<i128>())","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/formatting/mod.rs:481:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m481\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                / Nanosecond::per(Microsecond).cast_signed().extend::<i128>())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/combinator/rfc/iso8601.rs","byte_start":2071,"byte_end":2082,"line_start":67,"line_end":67,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"            let val = val.cast_signed();","highlight_start":27,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/combinator/rfc/iso8601.rs:67:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let val = val.cast_signed();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/combinator/rfc/iso8601.rs","byte_start":2213,"byte_end":2224,"line_start":70,"line_end":70,"column_start":66,"column_end":77,"is_primary":true,"text":[{"text":"        None => exactly_n_digits::<4, u32>(input)?.map(|val| val.cast_signed()),","highlight_start":66,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/combinator/rfc/iso8601.rs:70:66\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        None => exactly_n_digits::<4, u32>(input)?.map(|val| val.cast_signed()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":1217,"byte_end":1228,"line_start":30,"line_end":30,"column_start":60,"column_end":71,"is_primary":true,"text":[{"text":"                Some(b'-') => Some(ParsedItem(input, -year.cast_signed())),","highlight_start":60,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:30:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Some(b'-') => Some(ParsedItem(input, -year.cast_signed())),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":1362,"byte_end":1373,"line_start":32,"line_end":32,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"                _ => Some(ParsedItem(input, year.cast_signed())),","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:32:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => Some(ParsedItem(input, year.cast_signed())),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":1531,"byte_end":1542,"line_start":36,"line_end":36,"column_start":84,"column_end":95,"is_primary":true,"text":[{"text":"            exactly_n_digits_padded::<2, u32>(modifiers.padding)(input)?.map(|v| v.cast_signed()),","highlight_start":84,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:36:84\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            exactly_n_digits_padded::<2, u32>(modifiers.padding)(input)?.map(|v| v.cast_signed()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":10528,"byte_end":10539,"line_start":274,"line_end":274,"column_start":53,"column_end":64,"is_primary":true,"text":[{"text":"        Some(b'-') => Some(ParsedItem(input, (-hour.cast_signed(), true))),","highlight_start":53,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:274:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Some(b'-') => Some(ParsedItem(input, (-hour.cast_signed(), true))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":10647,"byte_end":10658,"line_start":276,"line_end":276,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        _ => Some(ParsedItem(input, (hour.cast_signed(), false))),","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:276:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _ => Some(ParsedItem(input, (hour.cast_signed(), false))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":10983,"byte_end":10994,"line_start":287,"line_end":287,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"            .map(|offset_minute| offset_minute.cast_signed()),","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:287:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map(|offset_minute| offset_minute.cast_signed()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":11310,"byte_end":11321,"line_start":298,"line_end":298,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"            .map(|offset_second| offset_second.cast_signed()),","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:298:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map(|offset_second| offset_second.cast_signed()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":12628,"byte_end":12639,"line_start":330,"line_end":330,"column_start":62,"column_end":73,"is_primary":true,"text":[{"text":"        Some(b'-') => Some(ParsedItem(input, -nano_timestamp.cast_signed())),","highlight_start":62,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:330:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Some(b'-') => Some(ParsedItem(input, -nano_timestamp.cast_signed())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs","byte_start":12749,"byte_end":12760,"line_start":332,"line_end":332,"column_start":52,"column_end":63,"is_primary":true,"text":[{"text":"        _ => Some(ParsedItem(input, nano_timestamp.cast_signed())),","highlight_start":52,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/component.rs:332:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _ => Some(ParsedItem(input, nano_timestamp.cast_signed())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":7718,"byte_end":7729,"line_start":219,"line_end":219,"column_start":74,"column_end":85,"is_primary":true,"text":[{"text":"                        item.consume_value(|value| parsed.set_year(value.cast_signed()))","highlight_start":74,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:219:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        item.consume_value(|value| parsed.set_year(value.cast_signed()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":8148,"byte_end":8159,"line_start":228,"line_end":228,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"                            .map(|year| year.cast_signed())","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:228:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .map(|year| year.cast_signed())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":11218,"byte_end":11229,"line_start":301,"line_end":301,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"                        -offset_hour.cast_signed()","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:301:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        -offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":11297,"byte_end":11308,"line_start":303,"line_end":303,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"                        offset_hour.cast_signed()","highlight_start":37,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:303:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":11656,"byte_end":11667,"line_start":311,"line_end":311,"column_start":82,"column_end":93,"is_primary":true,"text":[{"text":"                item.consume_value(|value| parsed.set_offset_minute_signed(value.cast_signed()))","highlight_start":82,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:311:82\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                item.consume_value(|value| parsed.set_offset_minute_signed(value.cast_signed()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":17318,"byte_end":17329,"line_start":444,"line_end":444,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"                            -offset_hour.cast_signed()","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:444:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m444\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   -offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":17405,"byte_end":17416,"line_start":446,"line_end":446,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"                            offset_hour.cast_signed()","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:446:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":17735,"byte_end":17746,"line_start":453,"line_end":453,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"            (input, offset_hour, offset_minute.cast_signed())","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:453:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (input, offset_hour, offset_minute.cast_signed())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":18291,"byte_end":18302,"line_start":474,"line_end":474,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"            let date = Date::from_calendar_date(year.cast_signed(), month, day)?;","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:474:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let date = Date::from_calendar_date(year.cast_signed(), month, day)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":19648,"byte_end":19659,"line_start":512,"line_end":512,"column_start":79,"column_end":90,"is_primary":true,"text":[{"text":"            .and_then(|item| item.consume_value(|value| parsed.set_year(value.cast_signed())))","highlight_start":79,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:512:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .and_then(|item| item.consume_value(|value| parsed.set_year(value.cast_signed())))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":22796,"byte_end":22807,"line_start":579,"line_end":579,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"                            -offset_hour.cast_signed()","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:579:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   -offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":22883,"byte_end":22894,"line_start":581,"line_end":581,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"                            offset_hour.cast_signed()","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:581:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":23370,"byte_end":23381,"line_start":592,"line_end":592,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"                        -offset_minute.cast_signed()","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:592:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        -offset_minute.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":23451,"byte_end":23462,"line_start":594,"line_end":594,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"                        offset_minute.cast_signed()","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:594:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        offset_minute.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":26841,"byte_end":26852,"line_start":663,"line_end":663,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"                        -offset_hour.cast_signed()","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:663:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        -offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":26920,"byte_end":26931,"line_start":665,"line_end":665,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"                        offset_hour.cast_signed()","highlight_start":37,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:665:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m665\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        offset_hour.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":27041,"byte_end":27052,"line_start":668,"line_end":668,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"                        -offset_minute.cast_signed()","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:668:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        -offset_minute.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":27122,"byte_end":27133,"line_start":670,"line_end":670,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"                        offset_minute.cast_signed()","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:670:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        offset_minute.cast_signed()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs","byte_start":28402,"byte_end":28413,"line_start":706,"line_end":706,"column_start":61,"column_end":72,"is_primary":true,"text":[{"text":"            .and_then(|month| Date::from_calendar_date(year.cast_signed(), month, day))","highlight_start":61,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsable.rs:706:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .and_then(|month| Date::from_calendar_date(year.cast_signed(), month, day))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":12909,"byte_end":12922,"line_start":300,"line_end":300,"column_start":54,"column_end":67,"is_primary":true,"text":[{"text":"                        self.set_year_last_two(value.cast_unsigned().truncate())","highlight_start":54,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:300:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.set_year_last_two(value.cast_unsigned().truncate())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":13159,"byte_end":13172,"line_start":304,"line_end":304,"column_start":58,"column_end":71,"is_primary":true,"text":[{"text":"                        self.set_iso_year_last_two(value.cast_unsigned().truncate())","highlight_start":58,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:304:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.set_iso_year_last_two(value.cast_unsigned().truncate())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":22774,"byte_end":22787,"line_start":546,"line_end":546,"column_start":28,"column_end":41,"is_primary":true,"text":[{"text":"        if value > i8::MAX.cast_unsigned() {","highlight_start":28,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:546:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m546\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if value > i8::MAX.cast_unsigned() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":22874,"byte_end":22885,"line_start":549,"line_end":549,"column_start":49,"column_end":60,"is_primary":true,"text":[{"text":"            self.set_offset_minute_signed(value.cast_signed())","highlight_start":49,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:549:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.set_offset_minute_signed(value.cast_signed())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":23177,"byte_end":23190,"line_start":560,"line_end":560,"column_start":28,"column_end":41,"is_primary":true,"text":[{"text":"        if value > i8::MAX.cast_unsigned() {","highlight_start":28,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:560:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if value > i8::MAX.cast_unsigned() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":23277,"byte_end":23288,"line_start":563,"line_end":563,"column_start":49,"column_end":60,"is_primary":true,"text":[{"text":"            self.set_offset_second_signed(value.cast_signed())","highlight_start":49,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:563:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.set_offset_second_signed(value.cast_signed())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":31285,"byte_end":31296,"line_start":774,"line_end":774,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"                (sunday_week_number.cast_signed().extend::<i16>() * 7","highlight_start":37,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:774:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m774\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (sunday_week_number.cast_signed().extend::<i16>() * 7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":31375,"byte_end":31386,"line_start":775,"line_end":775,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"                    + weekday.number_days_from_sunday().cast_signed().extend::<i16>()","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:775:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m775\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    + weekday.number_days_from_sunday().cast_signed().extend::<i16>()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":31469,"byte_end":31482,"line_start":777,"line_end":777,"column_start":26,"column_end":39,"is_primary":true,"text":[{"text":"                    + 1).cast_unsigned(),","highlight_start":26,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:777:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m777\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    + 1).cast_unsigned(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":31640,"byte_end":31651,"line_start":781,"line_end":781,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"                (monday_week_number.cast_signed().extend::<i16>() * 7","highlight_start":37,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:781:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m781\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (monday_week_number.cast_signed().extend::<i16>() * 7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":31730,"byte_end":31741,"line_start":782,"line_end":782,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"                    + weekday.number_days_from_monday().cast_signed().extend::<i16>()","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:782:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m782\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    + weekday.number_days_from_monday().cast_signed().extend::<i16>()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs","byte_start":31824,"byte_end":31837,"line_start":784,"line_end":784,"column_start":26,"column_end":39,"is_primary":true,"text":[{"text":"                    + 1).cast_unsigned(),","highlight_start":26,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_unsigned(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/parsing/parsed.rs:784:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    + 1).cast_unsigned(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_unsigned(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":31800,"byte_end":31811,"line_start":924,"line_end":924,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"        let hour_diff = self.hour.get().cast_signed() - rhs.hour.get().cast_signed();","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:924:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let hour_diff = self.hour.get().cast_signed() - rhs.hour.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":31831,"byte_end":31842,"line_start":924,"line_end":924,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        let hour_diff = self.hour.get().cast_signed() - rhs.hour.get().cast_signed();","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:924:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let hour_diff = self.hour.get().cast_signed() - rhs.hour.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":31890,"byte_end":31901,"line_start":925,"line_end":925,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let minute_diff = self.minute.get().cast_signed() - rhs.minute.get().cast_signed();","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:925:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let minute_diff = self.minute.get().cast_signed() - rhs.minute.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":31923,"byte_end":31934,"line_start":925,"line_end":925,"column_start":78,"column_end":89,"is_primary":true,"text":[{"text":"        let minute_diff = self.minute.get().cast_signed() - rhs.minute.get().cast_signed();","highlight_start":78,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:925:78\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let minute_diff = self.minute.get().cast_signed() - rhs.minute.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":31982,"byte_end":31993,"line_start":926,"line_end":926,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let second_diff = self.second.get().cast_signed() - rhs.second.get().cast_signed();","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:926:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m926\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let second_diff = self.second.get().cast_signed() - rhs.second.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":32015,"byte_end":32026,"line_start":926,"line_end":926,"column_start":78,"column_end":89,"is_primary":true,"text":[{"text":"        let second_diff = self.second.get().cast_signed() - rhs.second.get().cast_signed();","highlight_start":78,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:926:78\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m926\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let second_diff = self.second.get().cast_signed() - rhs.second.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":32094,"byte_end":32105,"line_start":928,"line_end":928,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"            self.nanosecond.get().cast_signed() - rhs.nanosecond.get().cast_signed();","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:928:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.nanosecond.get().cast_signed() - rhs.nanosecond.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":32131,"byte_end":32142,"line_start":928,"line_end":928,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"            self.nanosecond.get().cast_signed() - rhs.nanosecond.get().cast_signed();","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:928:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.nanosecond.get().cast_signed() - rhs.nanosecond.get().cast_signed();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an err',
##     '{"$message_type":"diagnostic","message":"a method with this name may be added to the standard library in the future","code":{"code":"unstable_name_collisions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs","byte_start":32746,"byte_end":32757,"line_start":942,"line_end":942,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"                nanosecond_diff - Nanosecond::per(Second).cast_signed(),","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"call with fully qualified syntax `cast_signed(...)` to keep using the current method","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: a method with this name may be added to the standard library in the future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/time.rs:942:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m942\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                nanosecond_diff - Nanosecond::per(Second).cast_signed(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: call with fully qualified syntax `cast_signed(...)` to keep using the current method\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"75 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 75 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-time-0.3.36"
## script = '''
## FROM scratch AS cratesio-time-0.3.36
## ADD --chmod=0664 --checksum=sha256:5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885 \
##   https://static.crates.io/crates/time/time-0.3.36.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-time-0.3.36-6f9611253b5d8f71"
## script = '''
## FROM rust-base AS dep-l-time-0.3.36-6f9611253b5d8f71
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-time-0.3.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36 \
##   --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta,source=/libderanged-d1b20afe65258a7f.rmeta \
##   --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
##   --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta,source=/libitoa-95ec35c9faa8fa43.rmeta \
##   --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta,source=/libnum_conv-4d9acac3d8710637.rmeta \
##   --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta,source=/libtime_core-1f0711c34dce700e.rmeta \
##   --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
##   --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta,source=/libnum_conv-95c789b069138b83.rmeta \
##   --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta,source=/libtime_core-bb694424a192024c.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="time" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jacob Pratt <open-source@jhpratt.dev>:Time contributors" \
##         CARGO_PKG_DESCRIPTION="Date and time library. Fully interoperable with the standard library. Mostly compatible with #![no_std]." \
##         CARGO_PKG_HOMEPAGE="https://time-rs.github.io" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="time" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/time-rs/time" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.3.36" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="36" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'time' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--warn' 'variant-size-differences' '--warn' 'clippy::use-debug' '--warn' 'clippy::unwrap-used' '--warn' 'clippy::unwrap-in-result' '--warn' 'unused-qualifications' '--warn' 'unused-lifetimes' '--warn' 'unused-import-braces' '--warn' 'unused' '--deny' 'unstable-syntax-pre-expansion' '--deny' 'unsafe-op-in-unsafe-fn' '--warn' 'unreachable-pub' '--warn' 'clippy::unnested-or-patterns' '--deny' 'unnameable-test-items' '--warn' 'clippy::uninlined-format-args' '--warn' 'clippy::unimplemented' '--warn' 'rustdoc::unescaped-backticks' '--deny' 'clippy::undocumented-unsafe-blocks' '--deny' 'unconditional-recursion' '--warn' 'trivial-numeric-casts' '--warn' 'trivial-casts' '--warn' 'clippy::todo' '--deny' 'temporary-cstring-as-ptr' '--deny' 'suspicious-double-ref-op' '--deny' 'clippy::std-instead-of-core' '--warn' 'single-use-lifetimes' '--warn' 'clippy::semicolon-outside-block' '--warn' 'rustdoc::private-doc-tests' '--warn' 'clippy::print-stdout' '--deny' 'overlapping-range-endpoints' '--deny' 'opaque-hidden-inferred-bound' '--warn' 'clippy::obfuscated-if-else' '--warn' 'clippy::nursery' '--warn' 'noop-method-call' '--deny' 'non-ascii-idents' '--deny' 'named-arguments-used-positionally' '--warn' 'clippy::missing-enforced-import-renames' '--warn' 'clippy::missing-docs-in-private-items' '--warn' 'missing-docs' '--warn' 'missing-debug-implementations' '--warn' 'missing-copy-implementations' '--warn' 'missing-abi' '--warn' 'meta-variable-misuse' '--warn' 'clippy::manual-let-else' '--warn' 'macro-use-extern-crate' '--warn' 'let-underscore' '--warn' 'keyword-idents' '--deny' 'invalid-value' '--deny' 'invalid-reference-casting' '--deny' 'invalid-nan-comparisons' '--deny' 'invalid-macro-export-arguments' '--deny' 'invalid-from-utf8' '--deny' 'improper-ctypes-definitions' '--deny' 'improper-ctypes' '--deny' 'hidden-glob-reexports' '--warn' 'clippy::get-unwrap' '--deny' 'future-incompatible' '--warn' 'clippy::explicit-auto-deref' '--deny' 'drop-bounds' '--deny' 'deref-nullptr' '--warn' 'clippy::decimal-literal-representation' '--warn' 'clippy::dbg-macro' '--deny' 'const-item-mutation' '--deny' 'clashing-extern-declarations' '--deny' 'ambiguous-glob-reexports' '--deny' 'clippy::alloc-instead-of-core' '--warn' 'clippy::all' '--warn' 'unstable-name-collisions' '--allow' 'clippy::redundant-pub-crate' '--allow' 'clippy::option-if-let-else' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="formatting"' '--cfg' 'feature="macros"' '--cfg' 'feature="parsing"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "formatting", "large-dates", "local-offset", "macros", "parsing", "quickcheck", "rand", "serde", "serde-human-readable", "serde-well-known", "std", "wasm-bindgen"))' '-C' 'metadata=932e277fb3bf16ea' '-C' 'extra-filename=-6f9611253b5d8f71' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'deranged=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta' '--extern' 'itoa=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta' '--extern' 'num_conv=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta' '--extern' 'powerfmt=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta' '--extern' 'time_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta' '--extern' 'time_macros=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/time-0.3.36/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6f9611253b5d8f71"
## script = """
## FROM scratch AS out-6f9611253b5d8f71
## COPY --from=dep-l-time-0.3.36-6f9611253b5d8f71 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6f9611253b5d8f71* /"""

FROM scratch AS cratesio-rusqlite-0.31.0
ADD --chmod=0664 --checksum=sha256:b838eba278d213a8beaf485bd313fd580ca4505a00d5871caeb1457c55322cae \
  https://static.crates.io/crates/rusqlite/rusqlite-0.31.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rusqlite-0.31.0-d16b058b0446e900
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-rusqlite-0.31.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0 \
  --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
  --mount=from=out-15b199cebb28d6c1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta,source=/libfallible_iterator-15b199cebb28d6c1.rmeta \
  --mount=from=out-1ff04656bece776a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta,source=/libfallible_streaming_iterator-1ff04656bece776a.rmeta \
  --mount=from=out-eb10f7fd3a8f7cc4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta,source=/libhashlink-eb10f7fd3a8f7cc4.rmeta \
  --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta,source=/libhashbrown-ae4e234b5a727d1b.rmeta \
  --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
  --mount=from=out-e92ab161973aaada,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta,source=/liblibsqlite3_sys-e92ab161973aaada.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
  --mount=from=out-6f9611253b5d8f71,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta,source=/libtime-6f9611253b5d8f71.rmeta \
  --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta,source=/libderanged-d1b20afe65258a7f.rmeta \
  --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
  --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta,source=/libitoa-95ec35c9faa8fa43.rmeta \
  --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta,source=/libnum_conv-4d9acac3d8710637.rmeta \
  --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta,source=/libtime_core-1f0711c34dce700e.rmeta \
  --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
  --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta,source=/libnum_conv-95c789b069138b83.rmeta \
  --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta,source=/libtime_core-bb694424a192024c.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rusqlite" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="The rusqlite developers" \
        CARGO_PKG_DESCRIPTION="Ergonomic wrapper for SQLite" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rusqlite" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rusqlite/rusqlite" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.31.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="31" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rusqlite' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bundled"' '--cfg' 'feature="modern_sqlite"' '--cfg' 'feature="time"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("array", "backup", "blob", "buildtime_bindgen", "bundled", "bundled-full", "bundled-sqlcipher", "bundled-sqlcipher-vendored-openssl", "bundled-windows", "chrono", "collation", "column_decltype", "csv", "csvtab", "extra_check", "functions", "hooks", "i128_blob", "in_gecko", "limits", "load_extension", "loadable_extension", "modern-full", "modern_sqlite", "release_memory", "rusqlite-macros", "serde_json", "serialize", "series", "session", "sqlcipher", "time", "trace", "unlock_notify", "url", "uuid", "vtab", "wasm32-wasi-vfs", "window", "with-asan"))' '-C' 'metadata=4484d7156a06c3d1' '-C' 'extra-filename=-d16b058b0446e900' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'bitflags=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta' '--extern' 'fallible_iterator=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta' '--extern' 'fallible_streaming_iterator=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta' '--extern' 'hashlink=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta' '--extern' 'libsqlite3_sys=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--extern' 'time=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d16b058b0446e900
COPY --from=dep-l-rusqlite-0.31.0-d16b058b0446e900 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-d16b058b0446e900* /

## this = "d16b058b0446e900"
## deps = [
##     "053eac235c7ed568",
##     "15b199cebb28d6c1",
##     "1ff04656bece776a",
##     "eb10f7fd3a8f7cc4",
##     "ae4e234b5a727d1b",
##     "e3d10071ef13803b",
##     "da34da6838abd7f1",
##     "6ed51fafe322ecba",
##     "62e07187ba843221",
##     "e92ab161973aaada",
##     "52fbb4b19901b011",
##     "6f9611253b5d8f71",
##     "d1b20afe65258a7f",
##     "3b9b90aa3c5625e4",
##     "95ec35c9faa8fa43",
##     "4d9acac3d8710637",
##     "1f0711c34dce700e",
##     "00f64a626ad29a7c",
##     "95c789b069138b83",
##     "bb694424a192024c",
## ]
## short_externs = [
##     "bitflags-053eac235c7ed568",
##     "fallible_iterator-15b199cebb28d6c1",
##     "fallible_streaming_iterator-1ff04656bece776a",
##     "hashlink-eb10f7fd3a8f7cc4",
##     "hashbrown-ae4e234b5a727d1b",
##     "ahash-e3d10071ef13803b",
##     "cfg_if-da34da6838abd7f1",
##     "once_cell-6ed51fafe322ecba",
##     "zerocopy-62e07187ba843221",
##     "libsqlite3_sys-e92ab161973aaada",
##     "smallvec-52fbb4b19901b011",
##     "time-6f9611253b5d8f71",
##     "deranged-d1b20afe65258a7f",
##     "powerfmt-3b9b90aa3c5625e4",
##     "itoa-95ec35c9faa8fa43",
##     "num_conv-4d9acac3d8710637",
##     "time_core-1f0711c34dce700e",
##     "time_macros-00f64a626ad29a7c",
##     "num_conv-95c789b069138b83",
##     "time_core-bb694424a192024c",
## ]
## writes = [
##     "deps/rusqlite-d16b058b0446e900.d",
##     "deps/librusqlite-d16b058b0446e900.rmeta",
##     "deps/librusqlite-d16b058b0446e900.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/rusqlite-d16b058b0446e900.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-95e8bf745fd1ec5b"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rusqlite-0.31.0"
## script = '''
## FROM scratch AS cratesio-rusqlite-0.31.0
## ADD --chmod=0664 --checksum=sha256:b838eba278d213a8beaf485bd313fd580ca4505a00d5871caeb1457c55322cae \
##   https://static.crates.io/crates/rusqlite/rusqlite-0.31.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rusqlite-0.31.0-d16b058b0446e900"
## script = '''
## FROM rust-base AS dep-l-rusqlite-0.31.0-d16b058b0446e900
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-rusqlite-0.31.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0 \
##   --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
##   --mount=from=out-15b199cebb28d6c1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta,source=/libfallible_iterator-15b199cebb28d6c1.rmeta \
##   --mount=from=out-1ff04656bece776a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta,source=/libfallible_streaming_iterator-1ff04656bece776a.rmeta \
##   --mount=from=out-eb10f7fd3a8f7cc4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta,source=/libhashlink-eb10f7fd3a8f7cc4.rmeta \
##   --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta,source=/libhashbrown-ae4e234b5a727d1b.rmeta \
##   --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
##   --mount=from=out-e92ab161973aaada,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta,source=/liblibsqlite3_sys-e92ab161973aaada.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##   --mount=from=out-6f9611253b5d8f71,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta,source=/libtime-6f9611253b5d8f71.rmeta \
##   --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta,source=/libderanged-d1b20afe65258a7f.rmeta \
##   --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
##   --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta,source=/libitoa-95ec35c9faa8fa43.rmeta \
##   --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta,source=/libnum_conv-4d9acac3d8710637.rmeta \
##   --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta,source=/libtime_core-1f0711c34dce700e.rmeta \
##   --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
##   --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta,source=/libnum_conv-95c789b069138b83.rmeta \
##   --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta,source=/libtime_core-bb694424a192024c.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rusqlite" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The rusqlite developers" \
##         CARGO_PKG_DESCRIPTION="Ergonomic wrapper for SQLite" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rusqlite" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rusqlite/rusqlite" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.31.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="31" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rusqlite' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bundled"' '--cfg' 'feature="modern_sqlite"' '--cfg' 'feature="time"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("array", "backup", "blob", "buildtime_bindgen", "bundled", "bundled-full", "bundled-sqlcipher", "bundled-sqlcipher-vendored-openssl", "bundled-windows", "chrono", "collation", "column_decltype", "csv", "csvtab", "extra_check", "functions", "hooks", "i128_blob", "in_gecko", "limits", "load_extension", "loadable_extension", "modern-full", "modern_sqlite", "release_memory", "rusqlite-macros", "serde_json", "serialize", "series", "session", "sqlcipher", "time", "trace", "unlock_notify", "url", "uuid", "vtab", "wasm32-wasi-vfs", "window", "with-asan"))' '-C' 'metadata=4484d7156a06c3d1' '-C' 'extra-filename=-d16b058b0446e900' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'bitflags=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta' '--extern' 'fallible_iterator=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta' '--extern' 'fallible_streaming_iterator=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta' '--extern' 'hashlink=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta' '--extern' 'libsqlite3_sys=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--extern' 'time=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rusqlite-0.31.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d16b058b0446e900"
## script = """
## FROM scratch AS out-d16b058b0446e900
## COPY --from=dep-l-rusqlite-0.31.0-d16b058b0446e900 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-d16b058b0446e900* /"""

FROM scratch AS cratesio-futures-sink-0.3.30
ADD --chmod=0664 --checksum=sha256:9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5 \
  https://static.crates.io/crates/futures-sink/futures-sink-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-sink-0.3.30-dbece67d843dd79b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-futures-sink-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_sink" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The asynchronous `Sink` trait for the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-sink" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_sink' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=4fde813b82d76051' '-C' 'extra-filename=-dbece67d843dd79b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-dbece67d843dd79b
COPY --from=dep-l-futures-sink-0.3.30-dbece67d843dd79b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-dbece67d843dd79b* /

## this = "dbece67d843dd79b"
## writes = [
##     "deps/futures_sink-dbece67d843dd79b.d",
##     "deps/libfutures_sink-dbece67d843dd79b.rmeta",
##     "deps/libfutures_sink-dbece67d843dd79b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/futures_sink-dbece67d843dd79b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-sink-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-sink-0.3.30
## ADD --chmod=0664 --checksum=sha256:9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5 \
##   https://static.crates.io/crates/futures-sink/futures-sink-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-sink-0.3.30-dbece67d843dd79b"
## script = '''
## FROM rust-base AS dep-l-futures-sink-0.3.30-dbece67d843dd79b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-futures-sink-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_sink" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The asynchronous `Sink` trait for the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-sink" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_sink' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=4fde813b82d76051' '-C' 'extra-filename=-dbece67d843dd79b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-dbece67d843dd79b"
## script = """
## FROM scratch AS out-dbece67d843dd79b
## COPY --from=dep-l-futures-sink-0.3.30-dbece67d843dd79b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-dbece67d843dd79b* /"""

FROM scratch AS cratesio-tokio-util-0.7.11
ADD --chmod=0664 --checksum=sha256:9cf6b47b3771c49ac75ad09a6162f53ad4b8088b76ac60e8ec1455b31a189fe1 \
  https://static.crates.io/crates/tokio-util/tokio-util-0.7.11.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tokio-util-0.7.11-0c86cba0aa0a3340
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tokio-util-0.7.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11 \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
  --mount=from=out-dbece67d843dd79b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta,source=/libfutures_sink-dbece67d843dd79b.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio_util" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Additional utilities for working with Tokio.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio-util" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.7.11" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="11" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio_util' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("__docs_rs", "codec", "compat", "default", "full", "futures-io", "futures-util", "hashbrown", "io", "io-util", "net", "rt", "slab", "time", "tracing"))' '-C' 'metadata=b8f8f995d256293f' '-C' 'extra-filename=-0c86cba0aa0a3340' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'bytes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta' '--extern' 'futures_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta' '--extern' 'futures_sink=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0c86cba0aa0a3340
COPY --from=dep-l-tokio-util-0.7.11-0c86cba0aa0a3340 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0c86cba0aa0a3340* /

## this = "0c86cba0aa0a3340"
## deps = [
##     "17cf73a7d3f13d95",
##     "da7454144a4b1d2d",
##     "dbece67d843dd79b",
##     "32982cb980ef9328",
##     "0724e68cddf1b06e",
##     "a7905fdc410bdfce",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
## ]
## short_externs = [
##     "bytes-17cf73a7d3f13d95",
##     "futures_core-da7454144a4b1d2d",
##     "futures_sink-dbece67d843dd79b",
##     "pin_project_lite-32982cb980ef9328",
##     "tokio-0724e68cddf1b06e",
##     "libc-a7905fdc410bdfce",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
## ]
## writes = [
##     "deps/tokio_util-0c86cba0aa0a3340.d",
##     "deps/libtokio_util-0c86cba0aa0a3340.rmeta",
##     "deps/libtokio_util-0c86cba0aa0a3340.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tokio_util-0c86cba0aa0a3340.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-util-0.7.11"
## script = '''
## FROM scratch AS cratesio-tokio-util-0.7.11
## ADD --chmod=0664 --checksum=sha256:9cf6b47b3771c49ac75ad09a6162f53ad4b8088b76ac60e8ec1455b31a189fe1 \
##   https://static.crates.io/crates/tokio-util/tokio-util-0.7.11.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tokio-util-0.7.11-0c86cba0aa0a3340"
## script = '''
## FROM rust-base AS dep-l-tokio-util-0.7.11-0c86cba0aa0a3340
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tokio-util-0.7.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11 \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##   --mount=from=out-dbece67d843dd79b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta,source=/libfutures_sink-dbece67d843dd79b.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio_util" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Additional utilities for working with Tokio.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio-util" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.7.11" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="11" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio_util' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("__docs_rs", "codec", "compat", "default", "full", "futures-io", "futures-util", "hashbrown", "io", "io-util", "net", "rt", "slab", "time", "tracing"))' '-C' 'metadata=b8f8f995d256293f' '-C' 'extra-filename=-0c86cba0aa0a3340' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'bytes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta' '--extern' 'futures_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta' '--extern' 'futures_sink=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta' '--extern' 'pin_project_lite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-util-0.7.11/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0c86cba0aa0a3340"
## script = """
## FROM scratch AS out-0c86cba0aa0a3340
## COPY --from=dep-l-tokio-util-0.7.11-0c86cba0aa0a3340 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-0c86cba0aa0a3340* /"""

FROM scratch AS cratesio-hickory-server-0.25.0-alpha.1
ADD --chmod=0664 --checksum=sha256:b883868b9d09e41d3963dc93476d1257547564a543ba70f692e0bf2c22e1d81f \
  https://static.crates.io/crates/hickory-server/hickory-server-0.25.0-alpha.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hickory-server-0.25.0-alpha.1-a9ec7d4c2a006148
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hickory-server-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1 \
  --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-cef69be1d7480c78,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rmeta,source=/libbasic_toml-cef69be1d7480c78.rmeta \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
  --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
  --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta,source=/libhickory_proto-038139804ab046ea.rmeta \
  --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
  --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
  --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
  --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
  --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
  --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
  --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
  --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
  --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
  --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
  --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
  --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
  --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
  --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
  --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
  --mount=from=out-35823e6e41e36b61,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rmeta,source=/libhickory_resolver-35823e6e41e36b61.rmeta \
  --mount=from=out-f6bd03560b1f6bf6,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta,source=/liblru_cache-f6bd03560b1f6bf6.rmeta \
  --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta,source=/liblinked_hash_map-4904f0514f71f438.rmeta \
  --mount=from=out-160b5b4e14748278,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta,source=/libparking_lot-160b5b4e14748278.rmeta \
  --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta,source=/liblock_api-6e751866151e591e.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta,source=/libparking_lot_core-b8f9aa34d6c6f88b.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
  --mount=from=out-826770d260f6e8ae,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta,source=/libresolv_conf-826770d260f6e8ae.rmeta \
  --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta,source=/libhostname-ca82cf5ad1bc156a.rmeta \
  --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
  --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta,source=/libquick_error-bd3d4e33b0f59f1b.rmeta \
  --mount=from=out-0cd8587a72e0b77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rmeta,source=/libprefix_trie-0cd8587a72e0b77d.rmeta \
  --mount=from=out-db1f90f170a87e28,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta,source=/libnum_traits-db1f90f170a87e28.rmeta \
  --mount=from=out-d16b058b0446e900,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rmeta,source=/librusqlite-d16b058b0446e900.rmeta \
  --mount=from=out-15b199cebb28d6c1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta,source=/libfallible_iterator-15b199cebb28d6c1.rmeta \
  --mount=from=out-1ff04656bece776a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta,source=/libfallible_streaming_iterator-1ff04656bece776a.rmeta \
  --mount=from=out-eb10f7fd3a8f7cc4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta,source=/libhashlink-eb10f7fd3a8f7cc4.rmeta \
  --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta,source=/libhashbrown-ae4e234b5a727d1b.rmeta \
  --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
  --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
  --mount=from=out-e92ab161973aaada,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta,source=/liblibsqlite3_sys-e92ab161973aaada.rmeta \
  --mount=from=out-6f9611253b5d8f71,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta,source=/libtime-6f9611253b5d8f71.rmeta \
  --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta,source=/libderanged-d1b20afe65258a7f.rmeta \
  --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
  --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta,source=/libitoa-95ec35c9faa8fa43.rmeta \
  --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta,source=/libnum_conv-4d9acac3d8710637.rmeta \
  --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta,source=/libtime_core-1f0711c34dce700e.rmeta \
  --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
  --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta,source=/libnum_conv-95c789b069138b83.rmeta \
  --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta,source=/libtime_core-bb694424a192024c.rmeta \
  --mount=from=out-0c86cba0aa0a3340,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rmeta,source=/libtokio_util-0c86cba0aa0a3340.rmeta \
  --mount=from=out-dbece67d843dd79b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta,source=/libfutures_sink-dbece67d843dd79b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hickory_server" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
        CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS server with DNSSEC support.\n Eventually this could be a replacement for BIND9. The DNSSEC support allows\n for live signing of all records, in it does not currently support\n records signed offline. The server supports dynamic DNS with SIG0 authenticated\n requests. Hickory DNS is based on the Tokio and Futures libraries, which means\n it should be easily integrated into other software that also use those\n libraries.\n" \
        CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hickory-server" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.25.0-alpha.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="25" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE="alpha.1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hickory_server' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="hickory-resolver"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="resolver"' '--cfg' 'feature="rusqlite"' '--cfg' 'feature="rustls"' '--cfg' 'feature="sqlite"' '--cfg' 'feature="tokio-rustls"' '--cfg' 'feature="toml"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "h2", "h3", "h3-quinn", "hickory-recursor", "hickory-resolver", "http", "native-certs", "openssl", "recursor", "resolver", "rusqlite", "rustls", "sqlite", "testing", "tls", "tls-openssl", "tokio-openssl", "tokio-rustls", "toml", "webpki-roots"))' '-C' 'metadata=6ce56088718b73f6' '-C' 'extra-filename=-a9ec7d4c2a006148' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'async_trait=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so' '--extern' 'basic_toml=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rmeta' '--extern' 'bytes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'enum_as_inner=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta' '--extern' 'hickory_resolver=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rmeta' '--extern' 'ipnet=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta' '--extern' 'prefix_trie=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rmeta' '--extern' 'rusqlite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rmeta' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'time=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tokio_rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta' '--extern' 'tokio_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a9ec7d4c2a006148
COPY --from=dep-l-hickory-server-0.25.0-alpha.1-a9ec7d4c2a006148 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a9ec7d4c2a006148* /

## this = "a9ec7d4c2a006148"
## deps = [
##     "3fb14aec5601ab5a",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "cef69be1d7480c78",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "17cf73a7d3f13d95",
##     "da34da6838abd7f1",
##     "002f3af3555cdc1d",
##     "2f387b4601b8b6b0",
##     "85ef45b09b00482a",
##     "da7454144a4b1d2d",
##     "6c36b04a10bba36c",
##     "32982cb980ef9328",
##     "b74f2a8eb0482878",
##     "9a31c9ae14e5d0d4",
##     "038139804ab046ea",
##     "fd8b71f0a4504cc7",
##     "053eac235c7ed568",
##     "e3ffa7a902242322",
##     "adcb9d3de5d6fae9",
##     "9a295684e8a14a09",
##     "c78132bf36574e8f",
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
##     "c991228b632df552",
##     "6ed51fafe322ecba",
##     "5161209caf71d483",
##     "a7905fdc410bdfce",
##     "8e2f025dcc32e9af",
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "63b94b1c8b4a1192",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "264210de0fb2469c",
##     "b81976489825f26e",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
##     "c785b10cd1fa3185",
##     "0ee236ae7bf0c632",
##     "a38c83241847def9",
##     "de6de5507c11303f",
##     "a653fbb7540bf139",
##     "b31d1031030a1f93",
##     "0724e68cddf1b06e",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "cef0e5e95c930be3",
##     "320990e22bbf0744",
##     "4a556d35209377d8",
##     "8d324580670ac264",
##     "7914ef07c5f53ddf",
##     "4251738685e38e22",
##     "cba19d70c6cf7027",
##     "35823e6e41e36b61",
##     "f6bd03560b1f6bf6",
##     "4904f0514f71f438",
##     "160b5b4e14748278",
##     "6e751866151e591e",
##     "b477fb82efd13fea",
##     "b8f9aa34d6c6f88b",
##     "52fbb4b19901b011",
##     "826770d260f6e8ae",
##     "ca82cf5ad1bc156a",
##     "d800b5c94563c48b",
##     "bd3d4e33b0f59f1b",
##     "0cd8587a72e0b77d",
##     "db1f90f170a87e28",
##     "d16b058b0446e900",
##     "15b199cebb28d6c1",
##     "1ff04656bece776a",
##     "eb10f7fd3a8f7cc4",
##     "ae4e234b5a727d1b",
##     "e3d10071ef13803b",
##     "62e07187ba843221",
##     "e92ab161973aaada",
##     "6f9611253b5d8f71",
##     "d1b20afe65258a7f",
##     "3b9b90aa3c5625e4",
##     "95ec35c9faa8fa43",
##     "4d9acac3d8710637",
##     "1f0711c34dce700e",
##     "00f64a626ad29a7c",
##     "95c789b069138b83",
##     "bb694424a192024c",
##     "0c86cba0aa0a3340",
##     "dbece67d843dd79b",
## ]
## short_externs = [
##     "async_trait-3fb14aec5601ab5a",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "basic_toml-cef69be1d7480c78",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "bytes-17cf73a7d3f13d95",
##     "cfg_if-da34da6838abd7f1",
##     "enum_as_inner-002f3af3555cdc1d",
##     "heck-2f387b4601b8b6b0",
##     "futures_util-85ef45b09b00482a",
##     "futures_core-da7454144a4b1d2d",
##     "futures_task-6c36b04a10bba36c",
##     "pin_project_lite-32982cb980ef9328",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-9a31c9ae14e5d0d4",
##     "hickory_proto-038139804ab046ea",
##     "async_recursion-fd8b71f0a4504cc7",
##     "bitflags-053eac235c7ed568",
##     "data_encoding-e3ffa7a902242322",
##     "futures_channel-adcb9d3de5d6fae9",
##     "futures_io-9a295684e8a14a09",
##     "idna-c78132bf36574e8f",
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
##     "ipnet-c991228b632df552",
##     "once_cell-6ed51fafe322ecba",
##     "rand-5161209caf71d483",
##     "libc-a7905fdc410bdfce",
##     "rand_chacha-8e2f025dcc32e9af",
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "ring-63b94b1c8b4a1192",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "rustls-264210de0fb2469c",
##     "log-b81976489825f26e",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
##     "rustls_native_certs-c785b10cd1fa3185",
##     "openssl_probe-0ee236ae7bf0c632",
##     "rustls_pemfile-a38c83241847def9",
##     "base64-de6de5507c11303f",
##     "thiserror-a653fbb7540bf139",
##     "thiserror_impl-b31d1031030a1f93",
##     "tokio-0724e68cddf1b06e",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "tokio_rustls-cef0e5e95c930be3",
##     "tracing-320990e22bbf0744",
##     "tracing_attributes-4a556d35209377d8",
##     "tracing_core-8d324580670ac264",
##     "url-7914ef07c5f53ddf",
##     "form_urlencoded-4251738685e38e22",
##     "percent_encoding-cba19d70c6cf7027",
##     "hickory_resolver-35823e6e41e36b61",
##     "lru_cache-f6bd03560b1f6bf6",
##     "linked_hash_map-4904f0514f71f438",
##     "parking_lot-160b5b4e14748278",
##     "lock_api-6e751866151e591e",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-b8f9aa34d6c6f88b",
##     "smallvec-52fbb4b19901b011",
##     "resolv_conf-826770d260f6e8ae",
##     "hostname-ca82cf5ad1bc156a",
##     "match_cfg-d800b5c94563c48b",
##     "quick_error-bd3d4e33b0f59f1b",
##     "prefix_trie-0cd8587a72e0b77d",
##     "num_traits-db1f90f170a87e28",
##     "rusqlite-d16b058b0446e900",
##     "fallible_iterator-15b199cebb28d6c1",
##     "fallible_streaming_iterator-1ff04656bece776a",
##     "hashlink-eb10f7fd3a8f7cc4",
##     "hashbrown-ae4e234b5a727d1b",
##     "ahash-e3d10071ef13803b",
##     "zerocopy-62e07187ba843221",
##     "libsqlite3_sys-e92ab161973aaada",
##     "time-6f9611253b5d8f71",
##     "deranged-d1b20afe65258a7f",
##     "powerfmt-3b9b90aa3c5625e4",
##     "itoa-95ec35c9faa8fa43",
##     "num_conv-4d9acac3d8710637",
##     "time_core-1f0711c34dce700e",
##     "time_macros-00f64a626ad29a7c",
##     "num_conv-95c789b069138b83",
##     "time_core-bb694424a192024c",
##     "tokio_util-0c86cba0aa0a3340",
##     "futures_sink-dbece67d843dd79b",
## ]
## writes = [
##     "deps/hickory_server-a9ec7d4c2a006148.d",
##     "deps/libhickory_server-a9ec7d4c2a006148.rmeta",
##     "deps/libhickory_server-a9ec7d4c2a006148.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hickory_server-a9ec7d4c2a006148.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `dns-over-https-openssl`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/src/server/server_future.rs","byte_start":25402,"byte_end":25436,"line_start":600,"line_end":600,"column_start":9,"column_end":43,"is_primary":true,"text":[{"text":"        feature = \"dns-over-https-openssl\",","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `backtrace`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `h2`, `h3`, `h3-quinn`, `hickory-recursor`, `hickory-resolver`, `http`, `native-certs`, `openssl`, `recursor`, `resolver`, `rusqlite`, `rustls`, `sqlite`, `testing`, `tls`, `tls-openssl`, `tokio-openssl`, `tokio-rustls`, `toml`, and `webpki-roots`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `dns-over-https-openssl` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/src/server/server_future.rs","byte_start":25412,"byte_end":25436,"line_start":600,"line_end":600,"column_start":19,"column_end":43,"is_primary":true,"text":[{"text":"        feature = \"dns-over-https-openssl\",","highlight_start":19,"highlight_end":43}],"label":null,"suggested_replacement":"\"dns-over-openssl\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `dns-over-https-openssl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/src/server/server_future.rs:600:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        feature = \"dns-over-https-openssl\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"dns-over-openssl\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `backtrace`, `dns-over-h3`, `dns-over-https`, `dns-over-https-rustls`, `dns-over-openssl`, `dns-over-quic`, `dns-over-rustls`, `dns-over-tls`, `dnssec`, `dnssec-openssl`, `dnssec-ring`, `h2`, `h3`, `h3-quinn`, `hickory-recursor`, `hickory-resolver`, `http`, `native-certs`, `openssl`, `recursor`, `resolver`, `rusqlite`, `rustls`, `sqlite`, `testing`, `tls`, `tls-openssl`, `tokio-openssl`, `tokio-rustls`, `toml`, and `webpki-roots`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `dns-over-https-openssl` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_server-a9ec7d4c2a006148.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_server-a9ec7d4c2a006148.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[contexts]]
## name = "crate_out-24468494741c1625"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out"
## 
## [[contexts]]
## name = "crate_out-95e8bf745fd1ec5b"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hickory-server-0.25.0-alpha.1"
## script = '''
## FROM scratch AS cratesio-hickory-server-0.25.0-alpha.1
## ADD --chmod=0664 --checksum=sha256:b883868b9d09e41d3963dc93476d1257547564a543ba70f692e0bf2c22e1d81f \
##   https://static.crates.io/crates/hickory-server/hickory-server-0.25.0-alpha.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hickory-server-0.25.0-alpha.1-a9ec7d4c2a006148"
## script = '''
## FROM rust-base AS dep-l-hickory-server-0.25.0-alpha.1-a9ec7d4c2a006148
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hickory-server-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1 \
##   --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-cef69be1d7480c78,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rmeta,source=/libbasic_toml-cef69be1d7480c78.rmeta \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta,source=/libserde-26e91440ed3c2207.rmeta \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta,source=/libbytes-17cf73a7d3f13d95.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta,source=/libfutures_util-85ef45b09b00482a.rmeta \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rmeta,source=/libfutures_core-da7454144a4b1d2d.rmeta \
##   --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rmeta,source=/libfutures_task-6c36b04a10bba36c.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rmeta,source=/libslab-9a31c9ae14e5d0d4.rmeta \
##   --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta,source=/libhickory_proto-038139804ab046ea.rmeta \
##   --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
##   --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rmeta,source=/libbitflags-053eac235c7ed568.rmeta \
##   --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rmeta,source=/libdata_encoding-e3ffa7a902242322.rmeta \
##   --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rmeta,source=/libfutures_channel-adcb9d3de5d6fae9.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rmeta,source=/libidna-c78132bf36574e8f.rmeta \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rmeta,source=/libunicode_bidi-a08113fabad3cd3f.rmeta \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rmeta,source=/libunicode_normalization-337fcf711f0ba199.rmeta \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rmeta,source=/libtinyvec-b009c33fe21f2d06.rmeta \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rmeta,source=/libtinyvec_macros-7b6822ef8e67fb50.rmeta \
##   --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta,source=/libipnet-c991228b632df552.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rmeta,source=/librand-5161209caf71d483.rmeta \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rmeta,source=/liblibc-a7905fdc410bdfce.rmeta \
##   --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rmeta,source=/librand_chacha-8e2f025dcc32e9af.rmeta \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rmeta,source=/libppv_lite86-af198cb5433f3d0c.rmeta \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rmeta,source=/librand_core-434e8a9dd58e4456.rmeta \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rmeta,source=/libgetrandom-84473f2ddfbb434a.rmeta \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rmeta,source=/libring-63b94b1c8b4a1192.rmeta \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rmeta,source=/libspin-126f99f44d356e93.rmeta \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rmeta,source=/libuntrusted-2cf0189e0a6f5785.rmeta \
##   --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta,source=/librustls-264210de0fb2469c.rmeta \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rmeta,source=/libwebpki-ebc0ad471b520844.rmeta \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rmeta,source=/libsct-95ad8239e8e57c79.rmeta \
##   --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rmeta,source=/librustls_native_certs-c785b10cd1fa3185.rmeta \
##   --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rmeta,source=/libopenssl_probe-0ee236ae7bf0c632.rmeta \
##   --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rmeta,source=/librustls_pemfile-a38c83241847def9.rmeta \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rmeta,source=/libbase64-de6de5507c11303f.rmeta \
##   --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta,source=/libthiserror-a653fbb7540bf139.rmeta \
##   --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta,source=/libtokio-0724e68cddf1b06e.rmeta \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rmeta,source=/libmio-57de3125ece5b1fd.rmeta \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rmeta,source=/libnum_cpus-516d6049f106f6a2.rmeta \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rmeta,source=/libsocket2-4f06700ac893bf17.rmeta \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta,source=/libtokio_rustls-cef0e5e95c930be3.rmeta \
##   --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##   --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rmeta,source=/liburl-7914ef07c5f53ddf.rmeta \
##   --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rmeta,source=/libform_urlencoded-4251738685e38e22.rmeta \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rmeta,source=/libpercent_encoding-cba19d70c6cf7027.rmeta \
##   --mount=from=out-35823e6e41e36b61,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rmeta,source=/libhickory_resolver-35823e6e41e36b61.rmeta \
##   --mount=from=out-f6bd03560b1f6bf6,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rmeta,source=/liblru_cache-f6bd03560b1f6bf6.rmeta \
##   --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rmeta,source=/liblinked_hash_map-4904f0514f71f438.rmeta \
##   --mount=from=out-160b5b4e14748278,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rmeta,source=/libparking_lot-160b5b4e14748278.rmeta \
##   --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rmeta,source=/liblock_api-6e751866151e591e.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rmeta,source=/libparking_lot_core-b8f9aa34d6c6f88b.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##   --mount=from=out-826770d260f6e8ae,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rmeta,source=/libresolv_conf-826770d260f6e8ae.rmeta \
##   --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rmeta,source=/libhostname-ca82cf5ad1bc156a.rmeta \
##   --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rmeta,source=/libmatch_cfg-d800b5c94563c48b.rmeta \
##   --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rmeta,source=/libquick_error-bd3d4e33b0f59f1b.rmeta \
##   --mount=from=out-0cd8587a72e0b77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rmeta,source=/libprefix_trie-0cd8587a72e0b77d.rmeta \
##   --mount=from=out-db1f90f170a87e28,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rmeta,source=/libnum_traits-db1f90f170a87e28.rmeta \
##   --mount=from=out-d16b058b0446e900,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rmeta,source=/librusqlite-d16b058b0446e900.rmeta \
##   --mount=from=out-15b199cebb28d6c1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rmeta,source=/libfallible_iterator-15b199cebb28d6c1.rmeta \
##   --mount=from=out-1ff04656bece776a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rmeta,source=/libfallible_streaming_iterator-1ff04656bece776a.rmeta \
##   --mount=from=out-eb10f7fd3a8f7cc4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rmeta,source=/libhashlink-eb10f7fd3a8f7cc4.rmeta \
##   --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rmeta,source=/libhashbrown-ae4e234b5a727d1b.rmeta \
##   --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rmeta,source=/libahash-e3d10071ef13803b.rmeta \
##   --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rmeta,source=/libzerocopy-62e07187ba843221.rmeta \
##   --mount=from=out-e92ab161973aaada,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rmeta,source=/liblibsqlite3_sys-e92ab161973aaada.rmeta \
##   --mount=from=out-6f9611253b5d8f71,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta,source=/libtime-6f9611253b5d8f71.rmeta \
##   --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rmeta,source=/libderanged-d1b20afe65258a7f.rmeta \
##   --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rmeta,source=/libpowerfmt-3b9b90aa3c5625e4.rmeta \
##   --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rmeta,source=/libitoa-95ec35c9faa8fa43.rmeta \
##   --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rmeta,source=/libnum_conv-4d9acac3d8710637.rmeta \
##   --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rmeta,source=/libtime_core-1f0711c34dce700e.rmeta \
##   --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
##   --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rmeta,source=/libnum_conv-95c789b069138b83.rmeta \
##   --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rmeta,source=/libtime_core-bb694424a192024c.rmeta \
##   --mount=from=out-0c86cba0aa0a3340,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rmeta,source=/libtokio_util-0c86cba0aa0a3340.rmeta \
##   --mount=from=out-dbece67d843dd79b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rmeta,source=/libfutures_sink-dbece67d843dd79b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hickory_server" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
##         CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS server with DNSSEC support.\n Eventually this could be a replacement for BIND9. The DNSSEC support allows\n for live signing of all records, in it does not currently support\n records signed offline. The server supports dynamic DNS with SIG0 authenticated\n requests. Hickory DNS is based on the Tokio and Futures libraries, which means\n it should be easily integrated into other software that also use those\n libraries.\n" \
##         CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hickory-server" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.25.0-alpha.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="25" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE="alpha.1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hickory_server' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="hickory-resolver"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="resolver"' '--cfg' 'feature="rusqlite"' '--cfg' 'feature="rustls"' '--cfg' 'feature="sqlite"' '--cfg' 'feature="tokio-rustls"' '--cfg' 'feature="toml"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "h2", "h3", "h3-quinn", "hickory-recursor", "hickory-resolver", "http", "native-certs", "openssl", "recursor", "resolver", "rusqlite", "rustls", "sqlite", "testing", "tls", "tls-openssl", "tokio-openssl", "tokio-rustls", "toml", "webpki-roots"))' '-C' 'metadata=6ce56088718b73f6' '-C' 'extra-filename=-a9ec7d4c2a006148' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'async_trait=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so' '--extern' 'basic_toml=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rmeta' '--extern' 'bytes=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rmeta' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'enum_as_inner=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rmeta' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rmeta' '--extern' 'hickory_resolver=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rmeta' '--extern' 'ipnet=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rmeta' '--extern' 'prefix_trie=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rmeta' '--extern' 'rusqlite=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rmeta' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rmeta' '--extern' 'serde=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rmeta' '--extern' 'thiserror=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rmeta' '--extern' 'time=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rmeta' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rmeta' '--extern' 'tokio_rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rmeta' '--extern' 'tokio_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-server-0.25.0-alpha.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a9ec7d4c2a006148"
## script = """
## FROM scratch AS out-a9ec7d4c2a006148
## COPY --from=dep-l-hickory-server-0.25.0-alpha.1-a9ec7d4c2a006148 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a9ec7d4c2a006148* /"""

FROM scratch AS cratesio-regex-syntax-0.6.29
ADD --chmod=0664 --checksum=sha256:f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1 \
  https://static.crates.io/crates/regex-syntax/regex-syntax-0.6.29.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-syntax-0.6.29-278fc833d6e378c8
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-regex-syntax-0.6.29,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_syntax" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="A regular expression parser." \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-syntax" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.6.29" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="29" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_syntax' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=db0edd1b5373a5be' '-C' 'extra-filename=-278fc833d6e378c8' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-278fc833d6e378c8
COPY --from=dep-l-regex-syntax-0.6.29-278fc833d6e378c8 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-278fc833d6e378c8* /

## this = "278fc833d6e378c8"
## writes = [
##     "deps/regex_syntax-278fc833d6e378c8.d",
##     "deps/libregex_syntax-278fc833d6e378c8.rmeta",
##     "deps/libregex_syntax-278fc833d6e378c8.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/regex_syntax-278fc833d6e378c8.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"method `symmetric_difference` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/hir/interval.rs","byte_start":13290,"byte_end":13298,"line_start":335,"line_end":335,"column_start":11,"column_end":19,"is_primary":false,"text":[{"text":"pub trait Interval:","highlight_start":11,"highlight_end":19}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/hir/interval.rs","byte_start":16251,"byte_end":16271,"line_start":423,"line_end":423,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn symmetric_difference(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `symmetric_difference` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/hir/interval.rs:423:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Interval:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn symmetric_difference(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/ast/parse.rs","byte_start":14419,"byte_end":14428,"line_start":379,"line_end":379,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        self.pattern.borrow()","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Borrow`, so calling `borrow` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(noop_method_call)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/ast/parse.rs","byte_start":14419,"byte_end":14428,"line_start":379,"line_end":379,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        self.pattern.borrow()","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/ast/parse.rs:379:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.pattern.borrow()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Borrow`, so calling `borrow` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(noop_method_call)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-syntax-0.6.29"
## script = '''
## FROM scratch AS cratesio-regex-syntax-0.6.29
## ADD --chmod=0664 --checksum=sha256:f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1 \
##   https://static.crates.io/crates/regex-syntax/regex-syntax-0.6.29.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-syntax-0.6.29-278fc833d6e378c8"
## script = '''
## FROM rust-base AS dep-l-regex-syntax-0.6.29-278fc833d6e378c8
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-regex-syntax-0.6.29,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_syntax" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="A regular expression parser." \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-syntax" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.6.29" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="29" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_syntax' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=db0edd1b5373a5be' '-C' 'extra-filename=-278fc833d6e378c8' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.6.29/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-278fc833d6e378c8"
## script = """
## FROM scratch AS out-278fc833d6e378c8
## COPY --from=dep-l-regex-syntax-0.6.29-278fc833d6e378c8 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-278fc833d6e378c8* /"""

FROM scratch AS cratesio-regex-automata-0.1.10
ADD --chmod=0664 --checksum=sha256:6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132 \
  https://static.crates.io/crates/regex-automata/regex-automata-0.1.10.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-automata-0.1.10-36c17437fa6ac77d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-regex-automata-0.1.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10 \
  --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta,source=/libregex_syntax-278fc833d6e378c8.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_automata" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/regex-automata" \
        CARGO_PKG_LICENSE="Unlicense/MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-automata" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/regex-automata" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.10" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="10" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_automata' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="regex-syntax"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "fst", "regex-syntax", "std", "transducer"))' '-C' 'metadata=78f65d53ab5ba115' '-C' 'extra-filename=-36c17437fa6ac77d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_syntax=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-36c17437fa6ac77d
COPY --from=dep-l-regex-automata-0.1.10-36c17437fa6ac77d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-36c17437fa6ac77d* /

## this = "36c17437fa6ac77d"
## deps = ["278fc833d6e378c8"]
## short_externs = ["regex_syntax-278fc833d6e378c8"]
## writes = [
##     "deps/regex_automata-36c17437fa6ac77d.d",
##     "deps/libregex_automata-36c17437fa6ac77d.rmeta",
##     "deps/libregex_automata-36c17437fa6ac77d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/regex_automata-36c17437fa6ac77d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-automata-0.1.10"
## script = '''
## FROM scratch AS cratesio-regex-automata-0.1.10
## ADD --chmod=0664 --checksum=sha256:6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132 \
##   https://static.crates.io/crates/regex-automata/regex-automata-0.1.10.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-automata-0.1.10-36c17437fa6ac77d"
## script = '''
## FROM rust-base AS dep-l-regex-automata-0.1.10-36c17437fa6ac77d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-regex-automata-0.1.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10 \
##   --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta,source=/libregex_syntax-278fc833d6e378c8.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_automata" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/regex-automata" \
##         CARGO_PKG_LICENSE="Unlicense/MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-automata" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/regex-automata" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.10" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="10" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_automata' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="regex-syntax"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "fst", "regex-syntax", "std", "transducer"))' '-C' 'metadata=78f65d53ab5ba115' '-C' 'extra-filename=-36c17437fa6ac77d' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_syntax=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.1.10/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-36c17437fa6ac77d"
## script = """
## FROM scratch AS out-36c17437fa6ac77d
## COPY --from=dep-l-regex-automata-0.1.10-36c17437fa6ac77d /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-36c17437fa6ac77d* /"""

FROM scratch AS cratesio-matchers-0.1.0
ADD --chmod=0664 --checksum=sha256:8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558 \
  https://static.crates.io/crates/matchers/matchers-0.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-matchers-0.1.0-f3b453967c4ace5b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-matchers-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0 \
  --mount=from=out-36c17437fa6ac77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta,source=/libregex_automata-36c17437fa6ac77d.rmeta \
  --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta,source=/libregex_syntax-278fc833d6e378c8.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="matchers" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>" \
        CARGO_PKG_DESCRIPTION="Regex matching on character and byte streams.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/hawkw/matchers" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="matchers" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hawkw/matchers" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'matchers' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=d09f0e6aedb5395a' '-C' 'extra-filename=-f3b453967c4ace5b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_automata=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f3b453967c4ace5b
COPY --from=dep-l-matchers-0.1.0-f3b453967c4ace5b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-f3b453967c4ace5b* /

## this = "f3b453967c4ace5b"
## deps = [
##     "36c17437fa6ac77d",
##     "278fc833d6e378c8",
## ]
## short_externs = [
##     "regex_automata-36c17437fa6ac77d",
##     "regex_syntax-278fc833d6e378c8",
## ]
## writes = [
##     "deps/matchers-f3b453967c4ace5b.d",
##     "deps/libmatchers-f3b453967c4ace5b.rmeta",
##     "deps/libmatchers-f3b453967c4ace5b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/matchers-f3b453967c4ace5b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-matchers-0.1.0"
## script = '''
## FROM scratch AS cratesio-matchers-0.1.0
## ADD --chmod=0664 --checksum=sha256:8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558 \
##   https://static.crates.io/crates/matchers/matchers-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-matchers-0.1.0-f3b453967c4ace5b"
## script = '''
## FROM rust-base AS dep-l-matchers-0.1.0-f3b453967c4ace5b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-matchers-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0 \
##   --mount=from=out-36c17437fa6ac77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta,source=/libregex_automata-36c17437fa6ac77d.rmeta \
##   --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta,source=/libregex_syntax-278fc833d6e378c8.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="matchers" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>" \
##         CARGO_PKG_DESCRIPTION="Regex matching on character and byte streams.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/hawkw/matchers" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="matchers" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hawkw/matchers" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'matchers' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=d09f0e6aedb5395a' '-C' 'extra-filename=-f3b453967c4ace5b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_automata=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/matchers-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f3b453967c4ace5b"
## script = """
## FROM scratch AS out-f3b453967c4ace5b
## COPY --from=dep-l-matchers-0.1.0-f3b453967c4ace5b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-f3b453967c4ace5b* /"""

FROM scratch AS cratesio-overload-0.1.1
ADD --chmod=0664 --checksum=sha256:b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39 \
  https://static.crates.io/crates/overload/overload-0.1.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-overload-0.1.1-94fa3b5a5c6dc522
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-overload-0.1.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="overload" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Daniel Salvadori <danaugrs@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Provides a macro to simplify operator overloading." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="overload" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/danaugrs/overload" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'overload' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=4c018e9f6ab20139' '-C' 'extra-filename=-94fa3b5a5c6dc522' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-94fa3b5a5c6dc522
COPY --from=dep-l-overload-0.1.1-94fa3b5a5c6dc522 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-94fa3b5a5c6dc522* /

## this = "94fa3b5a5c6dc522"
## writes = [
##     "deps/overload-94fa3b5a5c6dc522.d",
##     "deps/liboverload-94fa3b5a5c6dc522.rmeta",
##     "deps/liboverload-94fa3b5a5c6dc522.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/overload-94fa3b5a5c6dc522.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-overload-0.1.1"
## script = '''
## FROM scratch AS cratesio-overload-0.1.1
## ADD --chmod=0664 --checksum=sha256:b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39 \
##   https://static.crates.io/crates/overload/overload-0.1.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-overload-0.1.1-94fa3b5a5c6dc522"
## script = '''
## FROM rust-base AS dep-l-overload-0.1.1-94fa3b5a5c6dc522
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-overload-0.1.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="overload" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Daniel Salvadori <danaugrs@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Provides a macro to simplify operator overloading." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="overload" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/danaugrs/overload" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'overload' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=4c018e9f6ab20139' '-C' 'extra-filename=-94fa3b5a5c6dc522' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/overload-0.1.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-94fa3b5a5c6dc522"
## script = """
## FROM scratch AS out-94fa3b5a5c6dc522
## COPY --from=dep-l-overload-0.1.1-94fa3b5a5c6dc522 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-94fa3b5a5c6dc522* /"""

FROM scratch AS cratesio-nu-ansi-term-0.46.0
ADD --chmod=0664 --checksum=sha256:77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84 \
  https://static.crates.io/crates/nu-ansi-term/nu-ansi-term-0.46.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-nu-ansi-term-0.46.0-c42192675aa050dd
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-nu-ansi-term-0.46.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0 \
  --mount=from=out-94fa3b5a5c6dc522,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta,source=/liboverload-94fa3b5a5c6dc522.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="nu_ansi_term" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="ogham@bsago.me:Ryan Scheel (Havvy) <ryan.havvy@gmail.com>:Josh Triplett <josh@joshtriplett.org>:The Nushell Project Developers" \
        CARGO_PKG_DESCRIPTION="Library for ANSI terminal colors and styles (bold, underline)" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="nu-ansi-term" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/nushell/nu-ansi-term" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.46.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="46" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'nu_ansi_term' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("derive_serde_style", "serde"))' '-C' 'metadata=97ff9102a3ba1599' '-C' 'extra-filename=-c42192675aa050dd' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'overload=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c42192675aa050dd
COPY --from=dep-l-nu-ansi-term-0.46.0-c42192675aa050dd /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c42192675aa050dd* /

## this = "c42192675aa050dd"
## deps = ["94fa3b5a5c6dc522"]
## short_externs = ["overload-94fa3b5a5c6dc522"]
## writes = [
##     "deps/nu_ansi_term-c42192675aa050dd.d",
##     "deps/libnu_ansi_term-c42192675aa050dd.rmeta",
##     "deps/libnu_ansi_term-c42192675aa050dd.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/nu_ansi_term-c42192675aa050dd.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused import: `windows::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/src/lib.rs","byte_start":9901,"byte_end":9911,"line_start":261,"line_end":261,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"pub use windows::*;","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/src/lib.rs","byte_start":9893,"byte_end":9913,"line_start":261,"line_end":262,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub use windows::*;","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `windows::*`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/src/lib.rs:261:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use windows::*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-nu-ansi-term-0.46.0"
## script = '''
## FROM scratch AS cratesio-nu-ansi-term-0.46.0
## ADD --chmod=0664 --checksum=sha256:77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84 \
##   https://static.crates.io/crates/nu-ansi-term/nu-ansi-term-0.46.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-nu-ansi-term-0.46.0-c42192675aa050dd"
## script = '''
## FROM rust-base AS dep-l-nu-ansi-term-0.46.0-c42192675aa050dd
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-nu-ansi-term-0.46.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0 \
##   --mount=from=out-94fa3b5a5c6dc522,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta,source=/liboverload-94fa3b5a5c6dc522.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="nu_ansi_term" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="ogham@bsago.me:Ryan Scheel (Havvy) <ryan.havvy@gmail.com>:Josh Triplett <josh@joshtriplett.org>:The Nushell Project Developers" \
##         CARGO_PKG_DESCRIPTION="Library for ANSI terminal colors and styles (bold, underline)" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="nu-ansi-term" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/nushell/nu-ansi-term" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.46.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="46" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'nu_ansi_term' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("derive_serde_style", "serde"))' '-C' 'metadata=97ff9102a3ba1599' '-C' 'extra-filename=-c42192675aa050dd' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'overload=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nu-ansi-term-0.46.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c42192675aa050dd"
## script = """
## FROM scratch AS out-c42192675aa050dd
## COPY --from=dep-l-nu-ansi-term-0.46.0-c42192675aa050dd /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c42192675aa050dd* /"""

FROM scratch AS cratesio-regex-syntax-0.8.3
ADD --chmod=0664 --checksum=sha256:adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56 \
  https://static.crates.io/crates/regex-syntax/regex-syntax-0.8.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-syntax-0.8.3-21f3c7dc3999ce6b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-regex-syntax-0.8.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_syntax" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A regular expression parser." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-syntax" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-syntax" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="0.8.3" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_syntax' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-perl"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=0227f190ba12c931' '-C' 'extra-filename=-21f3c7dc3999ce6b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-21f3c7dc3999ce6b
COPY --from=dep-l-regex-syntax-0.8.3-21f3c7dc3999ce6b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-21f3c7dc3999ce6b* /

## this = "21f3c7dc3999ce6b"
## writes = [
##     "deps/regex_syntax-21f3c7dc3999ce6b.d",
##     "deps/libregex_syntax-21f3c7dc3999ce6b.rmeta",
##     "deps/libregex_syntax-21f3c7dc3999ce6b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/regex_syntax-21f3c7dc3999ce6b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-syntax-0.8.3"
## script = '''
## FROM scratch AS cratesio-regex-syntax-0.8.3
## ADD --chmod=0664 --checksum=sha256:adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56 \
##   https://static.crates.io/crates/regex-syntax/regex-syntax-0.8.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-syntax-0.8.3-21f3c7dc3999ce6b"
## script = '''
## FROM rust-base AS dep-l-regex-syntax-0.8.3-21f3c7dc3999ce6b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-regex-syntax-0.8.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_syntax" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A regular expression parser." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-syntax" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-syntax" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="0.8.3" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_syntax' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-perl"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=0227f190ba12c931' '-C' 'extra-filename=-21f3c7dc3999ce6b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-21f3c7dc3999ce6b"
## script = """
## FROM scratch AS out-21f3c7dc3999ce6b
## COPY --from=dep-l-regex-syntax-0.8.3-21f3c7dc3999ce6b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-21f3c7dc3999ce6b* /"""

FROM scratch AS cratesio-regex-automata-0.4.6
ADD --chmod=0664 --checksum=sha256:86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea \
  https://static.crates.io/crates/regex-automata/regex-automata-0.4.6.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-automata-0.4.6-3b7214cd7fa87374
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-regex-automata-0.4.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6 \
  --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta,source=/libregex_syntax-21f3c7dc3999ce6b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_automata" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-automata" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-automata" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="0.4.6" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="6" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_automata' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="meta"' '--cfg' 'feature="nfa-pikevm"' '--cfg' 'feature="nfa-thompson"' '--cfg' 'feature="std"' '--cfg' 'feature="syntax"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-word-boundary"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' '-C' 'metadata=850c0fcfc28f57b9' '-C' 'extra-filename=-3b7214cd7fa87374' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_syntax=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-3b7214cd7fa87374
COPY --from=dep-l-regex-automata-0.4.6-3b7214cd7fa87374 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3b7214cd7fa87374* /

## this = "3b7214cd7fa87374"
## deps = ["21f3c7dc3999ce6b"]
## short_externs = ["regex_syntax-21f3c7dc3999ce6b"]
## writes = [
##     "deps/regex_automata-3b7214cd7fa87374.d",
##     "deps/libregex_automata-3b7214cd7fa87374.rmeta",
##     "deps/libregex_automata-3b7214cd7fa87374.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/regex_automata-3b7214cd7fa87374.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-automata-0.4.6"
## script = '''
## FROM scratch AS cratesio-regex-automata-0.4.6
## ADD --chmod=0664 --checksum=sha256:86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea \
##   https://static.crates.io/crates/regex-automata/regex-automata-0.4.6.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-automata-0.4.6-3b7214cd7fa87374"
## script = '''
## FROM rust-base AS dep-l-regex-automata-0.4.6-3b7214cd7fa87374
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-regex-automata-0.4.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6 \
##   --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta,source=/libregex_syntax-21f3c7dc3999ce6b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_automata" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-automata" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-automata" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="0.4.6" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="6" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_automata' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="meta"' '--cfg' 'feature="nfa-pikevm"' '--cfg' 'feature="nfa-thompson"' '--cfg' 'feature="std"' '--cfg' 'feature="syntax"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-word-boundary"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' '-C' 'metadata=850c0fcfc28f57b9' '-C' 'extra-filename=-3b7214cd7fa87374' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_syntax=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.6/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-3b7214cd7fa87374"
## script = """
## FROM scratch AS out-3b7214cd7fa87374
## COPY --from=dep-l-regex-automata-0.4.6-3b7214cd7fa87374 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-3b7214cd7fa87374* /"""

FROM scratch AS cratesio-regex-1.10.4
ADD --chmod=0664 --checksum=sha256:c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c \
  https://static.crates.io/crates/regex/regex-1.10.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-1.10.4-f4ad8066a62c002f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-regex-1.10.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4 \
  --mount=from=out-3b7214cd7fa87374,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta,source=/libregex_automata-3b7214cd7fa87374.rmeta \
  --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta,source=/libregex_syntax-21f3c7dc3999ce6b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="1.10.4" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="10" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-perl"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' '-C' 'metadata=b5a9f6179cfbfe64' '-C' 'extra-filename=-f4ad8066a62c002f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_automata=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta' '--extern' 'regex_syntax=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f4ad8066a62c002f
COPY --from=dep-l-regex-1.10.4-f4ad8066a62c002f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-f4ad8066a62c002f* /

## this = "f4ad8066a62c002f"
## deps = [
##     "3b7214cd7fa87374",
##     "21f3c7dc3999ce6b",
## ]
## short_externs = [
##     "regex_automata-3b7214cd7fa87374",
##     "regex_syntax-21f3c7dc3999ce6b",
## ]
## writes = [
##     "deps/regex-f4ad8066a62c002f.d",
##     "deps/libregex-f4ad8066a62c002f.rmeta",
##     "deps/libregex-f4ad8066a62c002f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/regex-f4ad8066a62c002f.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-1.10.4"
## script = '''
## FROM scratch AS cratesio-regex-1.10.4
## ADD --chmod=0664 --checksum=sha256:c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c \
##   https://static.crates.io/crates/regex/regex-1.10.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-1.10.4-f4ad8066a62c002f"
## script = '''
## FROM rust-base AS dep-l-regex-1.10.4-f4ad8066a62c002f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-regex-1.10.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4 \
##   --mount=from=out-3b7214cd7fa87374,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta,source=/libregex_automata-3b7214cd7fa87374.rmeta \
##   --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta,source=/libregex_syntax-21f3c7dc3999ce6b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="1.10.4" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="10" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-perl"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' '-C' 'metadata=b5a9f6179cfbfe64' '-C' 'extra-filename=-f4ad8066a62c002f' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'regex_automata=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta' '--extern' 'regex_syntax=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f4ad8066a62c002f"
## script = """
## FROM scratch AS out-f4ad8066a62c002f
## COPY --from=dep-l-regex-1.10.4-f4ad8066a62c002f /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-f4ad8066a62c002f* /"""

FROM scratch AS cratesio-lazy_static-1.4.0
ADD --chmod=0664 --checksum=sha256:e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646 \
  https://static.crates.io/crates/lazy_static/lazy_static-1.4.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-lazy_static-1.4.0-a79af56de238e2b5
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-lazy_static-1.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="lazy_static" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Marvin Löbel <loebel.marvin@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A macro for declaring lazily evaluated statics in Rust." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="lazy_static" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang-nursery/lazy-static.rs" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.4.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'lazy_static' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("spin", "spin_no_std"))' '-C' 'metadata=41a5c3179e73440d' '-C' 'extra-filename=-a79af56de238e2b5' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a79af56de238e2b5
COPY --from=dep-l-lazy_static-1.4.0-a79af56de238e2b5 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a79af56de238e2b5* /

## this = "a79af56de238e2b5"
## writes = [
##     "deps/lazy_static-a79af56de238e2b5.d",
##     "deps/liblazy_static-a79af56de238e2b5.rmeta",
##     "deps/liblazy_static-a79af56de238e2b5.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/lazy_static-a79af56de238e2b5.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/src/inline_lazy.rs","byte_start":862,"byte_end":863,"line_start":26,"line_end":26,"column_start":43,"column_end":44,"is_primary":true,"text":[{"text":"    pub fn get<F>(&'static self, f: F) -> &T","highlight_start":43,"highlight_end":44}],"label":"this elided lifetime gets resolved as `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider specifying it explicitly","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/src/inline_lazy.rs","byte_start":863,"byte_end":863,"line_start":26,"line_end":26,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"    pub fn get<F>(&'static self, f: F) -> &T","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"'static ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/src/inline_lazy.rs:26:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get<F>(&'static self, f: F) -> &T\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'static`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying it explicitly\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn get<F>(&'static self, f: F) -> &\u001b[0m\u001b[0m\u001b[38;5;10m'static \u001b[0m\u001b[0mT\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-lazy_static-1.4.0"
## script = '''
## FROM scratch AS cratesio-lazy_static-1.4.0
## ADD --chmod=0664 --checksum=sha256:e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646 \
##   https://static.crates.io/crates/lazy_static/lazy_static-1.4.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-lazy_static-1.4.0-a79af56de238e2b5"
## script = '''
## FROM rust-base AS dep-l-lazy_static-1.4.0-a79af56de238e2b5
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-lazy_static-1.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="lazy_static" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Marvin Löbel <loebel.marvin@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A macro for declaring lazily evaluated statics in Rust." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="lazy_static" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang-nursery/lazy-static.rs" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.4.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'lazy_static' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("spin", "spin_no_std"))' '-C' 'metadata=41a5c3179e73440d' '-C' 'extra-filename=-a79af56de238e2b5' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lazy_static-1.4.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a79af56de238e2b5"
## script = """
## FROM scratch AS out-a79af56de238e2b5
## COPY --from=dep-l-lazy_static-1.4.0-a79af56de238e2b5 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-a79af56de238e2b5* /"""

FROM scratch AS cratesio-sharded-slab-0.1.7
ADD --chmod=0664 --checksum=sha256:f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6 \
  https://static.crates.io/crates/sharded-slab/sharded-slab-0.1.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-sharded-slab-0.1.7-c335002a97b2343b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-sharded-slab-0.1.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7 \
  --mount=from=out-a79af56de238e2b5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta,source=/liblazy_static-a79af56de238e2b5.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="sharded_slab" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/Cargo.toml" \
        CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>" \
        CARGO_PKG_DESCRIPTION="A lock-free concurrent slab.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/hawkw/sharded-slab" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="sharded-slab" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hawkw/sharded-slab" \
        CARGO_PKG_RUST_VERSION="1.42.0" \
        CARGO_PKG_VERSION="0.1.7" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'sharded_slab' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("loom"))' '-C' 'metadata=cb2b78a23727d65e' '-C' 'extra-filename=-c335002a97b2343b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'lazy_static=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c335002a97b2343b
COPY --from=dep-l-sharded-slab-0.1.7-c335002a97b2343b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c335002a97b2343b* /

## this = "c335002a97b2343b"
## deps = ["a79af56de238e2b5"]
## short_externs = ["lazy_static-a79af56de238e2b5"]
## writes = ["deps/sharded_slab-c335002a97b2343b.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/sharded_slab-c335002a97b2343b.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":583,"byte_end":587,"line_start":15,"line_end":15,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":583,"byte_end":587,"line_start":15,"line_end":15,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"feature = \"loom\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:15:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"loom\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":15133,"byte_end":15172,"line_start":453,"line_end":453,"column_start":9,"column_end":48,"is_primary":false,"text":[{"text":"        test_println!(\"pool: create {:?}\", tid);","highlight_start":9,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:453:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"pool: create {:?}\", tid);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":21408,"byte_end":21453,"line_start":621,"line_end":621,"column_start":9,"column_end":54,"is_primary":false,"text":[{"text":"        test_println!(\"pool: create_owned {:?}\", tid);","highlight_start":9,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:621:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"pool: create_owned {:?}\", tid);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":22706,"byte_end":22740,"line_start":655,"line_end":655,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        test_println!(\"pool: create_with\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:655:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"pool: create_with\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":23479,"byte_end":23549,"line_start":678,"line_end":678,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        test_println!(\"pool: get{:?}; current={:?}\", tid, Tid::<C>::current());","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:678:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m678\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"pool: get{:?}; current={:?}\", tid, Tid::<C>::current());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":26857,"byte_end":26927,"line_start":769,"line_end":769,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        test_println!(\"pool: get{:?}; current={:?}\", tid, Tid::<C>::current());","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:769:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m769\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"pool: get{:?}; current={:?}\", tid, Tid::<C>::current());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":30720,"byte_end":30764,"line_start":914,"line_end":914,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        test_println!(\"drop Ref: try clearing data\");","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:914:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m914\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"drop Ref: try clearing data\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":34506,"byte_end":34557,"line_start":1049,"line_end":1049,"column_start":9,"column_end":60,"is_primary":false,"text":[{"text":"        test_println!(\" -> drop RefMut: try clearing data\");","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1049:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1049\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\" -> drop RefMut: try clearing data\");\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":36325,"byte_end":36374,"line_start":1124,"line_end":1124,"column_start":9,"column_end":58,"is_primary":false,"text":[{"text":"        test_println!(\"drop OwnedRef: try clearing data\");","highlight_start":9,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1124:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"drop OwnedRef: try clearing data\");\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":36892,"byte_end":36933,"line_start":1135,"line_end":1135,"column_start":13,"column_end":54,"is_primary":false,"text":[{"text":"            test_println!(\"-> shard={:?}\", shard_idx);","highlight_start":13,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1135:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\"-> shard={:?}\", shard_idx);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":37103,"byte_end":37174,"line_start":1139,"line_end":1139,"column_start":17,"column_end":88,"is_primary":false,"text":[{"text":"                test_println!(\"-> shard={:?} does not exist! THIS IS A BUG\", shard_idx);","highlight_start":17,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1139:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> shard={:?} does not exist! THIS IS A BUG\", shard_idx);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":39830,"byte_end":39871,"line_start":1238,"line_end":1238,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        test_println!(\"-> shard={:?}\", shard_idx);","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1238:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"-> shard={:?}\", shard_idx);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":41354,"byte_end":41406,"line_start":1290,"line_end":1290,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        test_println!(\"drop OwnedRefMut: try clearing data\");","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1290:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"drop OwnedRefMut: try clearing data\");\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs","byte_start":41995,"byte_end":42050,"line_start":1303,"line_end":1303,"column_start":17,"column_end":72,"is_primary":false,"text":[{"text":"                test_println!(\"-> shard does not exist! THIS IS A BUG\");","highlight_start":17,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/pool.rs:1303:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> shard does not exist! THIS IS A BUG\");\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/sync.rs","byte_start":42,"byte_end":46,"line_start":3,"line_end":3,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(all(loom, any(test, feature = \"loom\")))]","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/sync.rs","byte_start":42,"byte_end":46,"line_start":3,"line_end":3,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(all(loom, any(test, feature = \"loom\")))]","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":"feature = \"loom\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/sync.rs:3:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(loom, any(test, feature = \"loom\")))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"loom\"`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/sync.rs","byte_start":1733,"byte_end":1737,"line_start":63,"line_end":63,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(not(all(loom, any(feature = \"loom\", test))))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/sync.rs","byte_start":1733,"byte_end":1737,"line_start":63,"line_end":63,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(not(all(loom, any(feature = \"loom\", test))))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"feature = \"loom\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/sync.rs:63:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(loom, any(feature = \"loom\", test))))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"loom\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/clear.rs","byte_start":2578,"byte_end":2582,"line_start":95,"line_end":95,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(all(loom, test))]","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/clear.rs","byte_start":2578,"byte_end":2582,"line_start":95,"line_end":95,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(all(loom, test))]","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":"feature = \"loom\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/clear.rs:95:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(loom, test))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"loom\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":599,"byte_end":632,"line_start":18,"line_end":18,"column_start":9,"column_end":42,"is_primary":false,"text":[{"text":"        test_println!(\"UniqueIter::next\");","highlight_start":9,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"UniqueIter::next\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":661,"byte_end":694,"line_start":20,"line_end":20,"column_start":13,"column_end":46,"is_primary":false,"text":[{"text":"            test_println!(\"-> try next slot\");","highlight_start":13,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:20:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\"-> try next slot\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":797,"byte_end":831,"line_start":22,"line_end":22,"column_start":17,"column_end":51,"is_primary":false,"text":[{"text":"                test_println!(\"-> found an item!\");","highlight_start":17,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:22:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> found an item!\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":895,"byte_end":928,"line_start":26,"line_end":26,"column_start":13,"column_end":46,"is_primary":false,"text":[{"text":"            test_println!(\"-> try next page\");","highlight_start":13,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:26:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\"-> try next page\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":998,"byte_end":1036,"line_start":28,"line_end":28,"column_start":17,"column_end":55,"is_primary":false,"text":[{"text":"                test_println!(\"-> found another page\");","highlight_start":17,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:28:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> found another page\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":1133,"byte_end":1167,"line_start":33,"line_end":33,"column_start":13,"column_end":47,"is_primary":false,"text":[{"text":"            test_println!(\"-> try next shard\");","highlight_start":13,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:33:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\"-> try next shard\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":1239,"byte_end":1278,"line_start":35,"line_end":35,"column_start":17,"column_end":56,"is_primary":false,"text":[{"text":"                test_println!(\"-> found another shard\");","highlight_start":17,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:35:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> found another shard\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs","byte_start":1360,"byte_end":1389,"line_start":38,"line_end":38,"column_start":17,"column_end":46,"is_primary":false,"text":[{"text":"                test_println!(\"-> all done!\");","highlight_start":17,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/iter.rs:38:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> all done!\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":2808,"byte_end":3048,"line_start":115,"line_end":122,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            test_println!(","highlight_start":13,"highlight_end":27},{"text":"                \"-> get {:?}; current_gen={:?}; lifecycle={:#x}; state={:?}; refs={:?};\",","highlight_start":1,"highlight_end":90},{"text":"                gen,","highlight_start":1,"highlight_end":21},{"text":"                current_gen,","highlight_start":1,"highlight_end":29},{"text":"                lifecycle,","highlight_start":1,"highlight_end":27},{"text":"                state,","highlight_start":1,"highlight_end":23},{"text":"                refs,","highlight_start":1,"highlight_end":22},{"text":"            );","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:115:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"-> get {:?}; current_gen={:?}; lifecycle={:#x}; state={:?}; refs={:?};\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                gen,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                current_gen,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                refs,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":3401,"byte_end":3443,"line_start":129,"line_end":129,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                test_println!(\"-> get: no longer exists!\");","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:129:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> get: no longer exists!\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":3843,"byte_end":3877,"line_start":142,"line_end":142,"column_start":21,"column_end":55,"is_primary":false,"text":[{"text":"                    test_println!(\"-> {:?}\", new_refs);","highlight_start":21,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:142:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    test_println!(\"-> {:?}\", new_refs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":4428,"byte_end":4487,"line_start":154,"line_end":154,"column_start":21,"column_end":80,"is_primary":false,"text":[{"text":"                    test_println!(\"-> get: retrying; lifecycle={:#x};\", actual);","highlight_start":21,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:154:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    test_println!(\"-> get: retrying; lifecycle={:#x};\", actual);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":5378,"byte_end":5516,"line_start":175,"line_end":179,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            test_println!(","highlight_start":13,"highlight_end":27},{"text":"                \"-> mark_release; gen={:?}; current_gen={:?};\",","highlight_start":1,"highlight_end":64},{"text":"                gen,","highlight_start":1,"highlight_end":21},{"text":"                curr_gen","highlight_start":1,"highlight_end":25},{"text":"            );","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"-> mark_release; gen={:?}; current_gen={:?};\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                gen,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                curr_gen\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":5754,"byte_end":5806,"line_start":187,"line_end":187,"column_start":13,"column_end":65,"is_primary":false,"text":[{"text":"            test_println!(\"-> mark_release; state={:?};\", state);","highlight_start":13,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:187:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\"-> mark_release; state={:?};\", state);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":5891,"byte_end":5959,"line_start":190,"line_end":190,"column_start":21,"column_end":89,"is_primary":false,"text":[{"text":"                    test_println!(\"--> mark_release; cannot release (already removed!)\");","highlight_start":21,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:190:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    test_println!(\"--> mark_release; cannot release (already removed!)\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":6067,"byte_end":6117,"line_start":194,"line_end":194,"column_start":21,"column_end":71,"is_primary":false,"text":[{"text":"                    test_println!(\"--> mark_release; already marked;\");","highlight_start":21,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:194:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    test_println!(\"--> mark_release; already marked;\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":6347,"byte_end":6510,"line_start":202,"line_end":206,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            test_println!(","highlight_start":13,"highlight_end":27},{"text":"                \"-> mark_release; old_lifecycle={:#x}; new_lifecycle={:#x};\",","highlight_start":1,"highlight_end":78},{"text":"                lifecycle,","highlight_start":1,"highlight_end":27},{"text":"                new_lifecycle","highlight_start":1,"highlight_end":30},{"text":"            );","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:202:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"-> mark_release; old_lifecycle={:#x}; new_lifecycle={:#x};\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                lifecycle,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                new_lifecycle\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":6792,"byte_end":6834,"line_start":216,"line_end":216,"column_start":21,"column_end":63,"is_primary":false,"text":[{"text":"                    test_println!(\"-> mark_release; retrying\");","highlight_start":21,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:216:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    test_println!(\"-> mark_release; retrying\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":7069,"byte_end":7127,"line_start":224,"line_end":224,"column_start":9,"column_end":67,"is_primary":false,"text":[{"text":"        test_println!(\"-> mark_release: marked; refs={:?};\", refs);","highlight_start":9,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:224:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        test_println!(\"-> mark_release: marked; refs={:?};\", refs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":7964,"byte_end":8182,"line_start":246,"line_end":251,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            test_println!(\"-> release_with; lifecycle={:#x}; expected_gen={:?}; current_gen={:?}; next_gen={:?};\",","highlight_start":13,"highlight_end":115},{"text":"                lifecycle,","highlight_start":1,"highlight_end":27},{"text":"                gen,","highlight_start":1,"highlight_end":21},{"text":"                current_gen,","highlight_start":1,"highlight_end":29},{"text":"                next_gen","highlight_start":1,"highlight_end":25},{"text":"            );","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:246:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            test_println!(\"-> release_with; lifecycle={:#x}; expected_gen={:?}; current_gen={:?}; next_gen={:?};\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                lifecycle,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                gen,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                current_gen,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                next_gen\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":8531,"byte_end":8567,"line_start":258,"line_end":258,"column_start":17,"column_end":53,"is_primary":false,"text":[{"text":"                test_println!(\"-> already removed!\");","highlight_start":17,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:258:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                test_println!(\"-> already removed!\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_print`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":81,"byte_end":91,"line_start":3,"line_end":3,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if cfg!(test) && cfg!(slab_print) {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs","byte_start":9197,"byte_end":9272,"line_start":275,"line_end":275,"column_start":21,"column_end":96,"is_primary":false,"text":[{"text":"                    test_println!(\"-> advanced gen; lifecycle={:#x}; refs={:?};\", actual, refs);","highlight_start":21,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"test_println!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! test_println {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_print`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/macros.rs:3:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(test) && cfg!(slab_print) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/page/slot.rs:275:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    test_println!(\"-> advanced gen; lifecycle={:#x}; refs={:?};\", actual, refs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_print)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_print)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-sharded-slab-0.1.7"
## script = '''
## FROM scratch AS cratesio-sharded-slab-0.1.7
## ADD --chmod=0664 --checksum=sha256:f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6 \
##   https://static.crates.io/crates/sharded-slab/sharded-slab-0.1.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-sharded-slab-0.1.7-c335002a97b2343b"
## script = '''
## FROM rust-base AS dep-l-sharded-slab-0.1.7-c335002a97b2343b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-sharded-slab-0.1.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7 \
##   --mount=from=out-a79af56de238e2b5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta,source=/liblazy_static-a79af56de238e2b5.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="sharded_slab" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>" \
##         CARGO_PKG_DESCRIPTION="A lock-free concurrent slab.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/hawkw/sharded-slab" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="sharded-slab" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hawkw/sharded-slab" \
##         CARGO_PKG_RUST_VERSION="1.42.0" \
##         CARGO_PKG_VERSION="0.1.7" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'sharded_slab' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("loom"))' '-C' 'metadata=cb2b78a23727d65e' '-C' 'extra-filename=-c335002a97b2343b' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'lazy_static=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/sharded-slab-0.1.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c335002a97b2343b"
## script = """
## FROM scratch AS out-c335002a97b2343b
## COPY --from=dep-l-sharded-slab-0.1.7-c335002a97b2343b /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c335002a97b2343b* /"""

FROM scratch AS cratesio-thread_local-1.1.8
ADD --chmod=0664 --checksum=sha256:8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c \
  https://static.crates.io/crates/thread_local/thread_local-1.1.8.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-thread_local-1.1.8-6893ca5c870c6e37
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-thread_local-1.1.8,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="thread_local" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Per-object thread-local storage" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="thread_local" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/thread_local-rs" \
        CARGO_PKG_RUST_VERSION="1.59" \
        CARGO_PKG_VERSION="1.1.8" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="8" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'thread_local' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("nightly"))' '-C' 'metadata=40f6b266d7a2c112' '-C' 'extra-filename=-6893ca5c870c6e37' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6893ca5c870c6e37
COPY --from=dep-l-thread_local-1.1.8-6893ca5c870c6e37 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6893ca5c870c6e37* /

## this = "6893ca5c870c6e37"
## deps = [
##     "da34da6838abd7f1",
##     "6ed51fafe322ecba",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "once_cell-6ed51fafe322ecba",
## ]
## writes = [
##     "deps/thread_local-6893ca5c870c6e37.d",
##     "deps/libthread_local-6893ca5c870c6e37.rmeta",
##     "deps/libthread_local-6893ca5c870c6e37.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/thread_local-6893ca5c870c6e37.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"methods `unchecked_unwrap` and `unchecked_unwrap_none` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs","byte_start":461,"byte_end":479,"line_start":11,"line_end":11,"column_start":11,"column_end":29,"is_primary":false,"text":[{"text":"pub trait UncheckedOptionExt<T> {","highlight_start":11,"highlight_end":29}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs","byte_start":567,"byte_end":583,"line_start":13,"line_end":13,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"    unsafe fn unchecked_unwrap(self) -> T;","highlight_start":15,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs","byte_start":671,"byte_end":692,"line_start":16,"line_end":16,"column_start":15,"column_end":36,"is_primary":true,"text":[{"text":"    unsafe fn unchecked_unwrap_none(self);","highlight_start":15,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `unchecked_unwrap` and `unchecked_unwrap_none` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs:13:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait UncheckedOptionExt<T> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Get the value out of this Option without checking for None.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn unchecked_unwrap(self) -> T;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn unchecked_unwrap_none(self);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"method `unchecked_unwrap_err` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs","byte_start":795,"byte_end":813,"line_start":20,"line_end":20,"column_start":11,"column_end":29,"is_primary":false,"text":[{"text":"pub trait UncheckedResultExt<T, E> {","highlight_start":11,"highlight_end":29}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs","byte_start":1016,"byte_end":1036,"line_start":25,"line_end":25,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"    unsafe fn unchecked_unwrap_err(self) -> E;","highlight_start":15,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `unchecked_unwrap_err` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/unreachable.rs:25:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait UncheckedResultExt<T, E> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn unchecked_unwrap_err(self) -> E;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-thread_local-1.1.8"
## script = '''
## FROM scratch AS cratesio-thread_local-1.1.8
## ADD --chmod=0664 --checksum=sha256:8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c \
##   https://static.crates.io/crates/thread_local/thread_local-1.1.8.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-thread_local-1.1.8-6893ca5c870c6e37"
## script = '''
## FROM rust-base AS dep-l-thread_local-1.1.8-6893ca5c870c6e37
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-thread_local-1.1.8,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="thread_local" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Per-object thread-local storage" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="thread_local" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/thread_local-rs" \
##         CARGO_PKG_RUST_VERSION="1.59" \
##         CARGO_PKG_VERSION="1.1.8" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="8" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'thread_local' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("nightly"))' '-C' 'metadata=40f6b266d7a2c112' '-C' 'extra-filename=-6893ca5c870c6e37' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'cfg_if=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/thread_local-1.1.8/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6893ca5c870c6e37"
## script = """
## FROM scratch AS out-6893ca5c870c6e37
## COPY --from=dep-l-thread_local-1.1.8-6893ca5c870c6e37 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-6893ca5c870c6e37* /"""

FROM scratch AS cratesio-tracing-log-0.2.0
ADD --chmod=0664 --checksum=sha256:ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3 \
  https://static.crates.io/crates/tracing-log/tracing-log-0.2.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tracing-log-0.2.0-fb7fae2e3366cafc
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tracing-log-0.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0 \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tracing_log" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Provides compatibility between `tracing` and the `log` crate.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tracing-log" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="0.2.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tracing_log' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="log-tracer"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ahash", "default", "interest-cache", "log-tracer", "lru", "std"))' '-C' 'metadata=941ad36bb876366f' '-C' 'extra-filename=-fb7fae2e3366cafc' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'log=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'tracing_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fb7fae2e3366cafc
COPY --from=dep-l-tracing-log-0.2.0-fb7fae2e3366cafc /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-fb7fae2e3366cafc* /

## this = "fb7fae2e3366cafc"
## deps = [
##     "b81976489825f26e",
##     "6ed51fafe322ecba",
##     "8d324580670ac264",
## ]
## short_externs = [
##     "log-b81976489825f26e",
##     "once_cell-6ed51fafe322ecba",
##     "tracing_core-8d324580670ac264",
## ]
## writes = [
##     "deps/tracing_log-fb7fae2e3366cafc.d",
##     "deps/libtracing_log-fb7fae2e3366cafc.rmeta",
##     "deps/libtracing_log-fb7fae2e3366cafc.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tracing_log-fb7fae2e3366cafc.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0/src/lib.rs","byte_start":4896,"byte_end":4913,"line_start":115,"line_end":115,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    private_in_public,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0/src/lib.rs:115:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    private_in_public,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tracing-log-0.2.0"
## script = '''
## FROM scratch AS cratesio-tracing-log-0.2.0
## ADD --chmod=0664 --checksum=sha256:ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3 \
##   https://static.crates.io/crates/tracing-log/tracing-log-0.2.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tracing-log-0.2.0-fb7fae2e3366cafc"
## script = '''
## FROM rust-base AS dep-l-tracing-log-0.2.0-fb7fae2e3366cafc
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tracing-log-0.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0 \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tracing_log" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Provides compatibility between `tracing` and the `log` crate.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tracing-log" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="0.2.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tracing_log' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="log-tracer"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ahash", "default", "interest-cache", "log-tracer", "lru", "std"))' '-C' 'metadata=941ad36bb876366f' '-C' 'extra-filename=-fb7fae2e3366cafc' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'log=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'tracing_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-log-0.2.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fb7fae2e3366cafc"
## script = """
## FROM scratch AS out-fb7fae2e3366cafc
## COPY --from=dep-l-tracing-log-0.2.0-fb7fae2e3366cafc /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-fb7fae2e3366cafc* /"""

FROM scratch AS cratesio-tracing-subscriber-0.3.18
ADD --chmod=0664 --checksum=sha256:ad0f048c97dbd9faa9b7df56362b8ebcaa52adb06b498c050d2f4e32f90a7a8b \
  https://static.crates.io/crates/tracing-subscriber/tracing-subscriber-0.3.18.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tracing-subscriber-0.3.18-c4d53788fa6665f3
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-tracing-subscriber-0.3.18,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18 \
  --mount=from=out-f3b453967c4ace5b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rmeta,source=/libmatchers-f3b453967c4ace5b.rmeta \
  --mount=from=out-36c17437fa6ac77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta,source=/libregex_automata-36c17437fa6ac77d.rmeta \
  --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta,source=/libregex_syntax-278fc833d6e378c8.rmeta \
  --mount=from=out-c42192675aa050dd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rmeta,source=/libnu_ansi_term-c42192675aa050dd.rmeta \
  --mount=from=out-94fa3b5a5c6dc522,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta,source=/liboverload-94fa3b5a5c6dc522.rmeta \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
  --mount=from=out-f4ad8066a62c002f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rmeta,source=/libregex-f4ad8066a62c002f.rmeta \
  --mount=from=out-3b7214cd7fa87374,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta,source=/libregex_automata-3b7214cd7fa87374.rmeta \
  --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta,source=/libregex_syntax-21f3c7dc3999ce6b.rmeta \
  --mount=from=out-c335002a97b2343b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsharded_slab-c335002a97b2343b.rmeta,source=/libsharded_slab-c335002a97b2343b.rmeta \
  --mount=from=out-a79af56de238e2b5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta,source=/liblazy_static-a79af56de238e2b5.rmeta \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
  --mount=from=out-6893ca5c870c6e37,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rmeta,source=/libthread_local-6893ca5c870c6e37.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
  --mount=from=out-fb7fae2e3366cafc,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rmeta,source=/libtracing_log-fb7fae2e3366cafc.rmeta \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tracing_subscriber" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/Cargo.toml" \
        CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>:David Barsky <me@davidbarsky.com>:Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Utilities for implementing and composing `tracing` subscribers.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tracing-subscriber" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
        CARGO_PKG_RUST_VERSION="1.63.0" \
        CARGO_PKG_VERSION="0.3.18" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="18" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tracing_subscriber' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="ansi"' '--cfg' 'feature="default"' '--cfg' 'feature="env-filter"' '--cfg' 'feature="fmt"' '--cfg' 'feature="matchers"' '--cfg' 'feature="nu-ansi-term"' '--cfg' 'feature="once_cell"' '--cfg' 'feature="regex"' '--cfg' 'feature="registry"' '--cfg' 'feature="sharded-slab"' '--cfg' 'feature="smallvec"' '--cfg' 'feature="std"' '--cfg' 'feature="thread_local"' '--cfg' 'feature="tracing"' '--cfg' 'feature="tracing-log"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "ansi", "chrono", "default", "env-filter", "fmt", "json", "local-time", "matchers", "nu-ansi-term", "once_cell", "parking_lot", "regex", "registry", "serde", "serde_json", "sharded-slab", "smallvec", "std", "thread_local", "time", "tracing", "tracing-log", "tracing-serde", "valuable", "valuable-serde", "valuable_crate"))' '-C' 'metadata=e7807217349bee7b' '-C' 'extra-filename=-c4d53788fa6665f3' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'matchers=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rmeta' '--extern' 'nu_ansi_term=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'regex=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rmeta' '--extern' 'sharded_slab=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsharded_slab-c335002a97b2343b.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--extern' 'thread_local=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--extern' 'tracing_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta' '--extern' 'tracing_log=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c4d53788fa6665f3
COPY --from=dep-l-tracing-subscriber-0.3.18-c4d53788fa6665f3 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c4d53788fa6665f3* /

## this = "c4d53788fa6665f3"
## deps = [
##     "f3b453967c4ace5b",
##     "36c17437fa6ac77d",
##     "278fc833d6e378c8",
##     "c42192675aa050dd",
##     "94fa3b5a5c6dc522",
##     "6ed51fafe322ecba",
##     "f4ad8066a62c002f",
##     "3b7214cd7fa87374",
##     "21f3c7dc3999ce6b",
##     "c335002a97b2343b",
##     "a79af56de238e2b5",
##     "52fbb4b19901b011",
##     "6893ca5c870c6e37",
##     "da34da6838abd7f1",
##     "320990e22bbf0744",
##     "32982cb980ef9328",
##     "4a556d35209377d8",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "8d324580670ac264",
##     "fb7fae2e3366cafc",
##     "b81976489825f26e",
## ]
## short_externs = [
##     "matchers-f3b453967c4ace5b",
##     "regex_automata-36c17437fa6ac77d",
##     "regex_syntax-278fc833d6e378c8",
##     "nu_ansi_term-c42192675aa050dd",
##     "overload-94fa3b5a5c6dc522",
##     "once_cell-6ed51fafe322ecba",
##     "regex-f4ad8066a62c002f",
##     "regex_automata-3b7214cd7fa87374",
##     "regex_syntax-21f3c7dc3999ce6b",
##     "sharded_slab-c335002a97b2343b",
##     "lazy_static-a79af56de238e2b5",
##     "smallvec-52fbb4b19901b011",
##     "thread_local-6893ca5c870c6e37",
##     "cfg_if-da34da6838abd7f1",
##     "tracing-320990e22bbf0744",
##     "pin_project_lite-32982cb980ef9328",
##     "tracing_attributes-4a556d35209377d8",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "tracing_core-8d324580670ac264",
##     "tracing_log-fb7fae2e3366cafc",
##     "log-b81976489825f26e",
## ]
## writes = [
##     "deps/tracing_subscriber-c4d53788fa6665f3.d",
##     "deps/libtracing_subscriber-c4d53788fa6665f3.rmeta",
##     "deps/libtracing_subscriber-c4d53788fa6665f3.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/tracing_subscriber-c4d53788fa6665f3.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information","code":{"code":"renamed_and_removed_lints","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/lib.rs","byte_start":8217,"byte_end":8234,"line_start":189,"line_end":189,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    private_in_public,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(renamed_and_removed_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/lib.rs:189:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    private_in_public,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(renamed_and_removed_lints)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":7788,"byte_end":7812,"line_start":213,"line_end":213,"column_start":19,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"nu_ansi_term\")]","highlight_start":19,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":7798,"byte_end":7812,"line_start":213,"line_end":213,"column_start":29,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(feature = \"nu_ansi_term\")]","highlight_start":29,"highlight_end":43}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:213:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(feature = \"nu_ansi_term\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8138,"byte_end":8162,"line_start":219,"line_end":219,"column_start":27,"column_end":51,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"nu_ansi_term\"))]","highlight_start":27,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8148,"byte_end":8162,"line_start":219,"line_end":219,"column_start":37,"column_end":51,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"nu_ansi_term\"))]","highlight_start":37,"highlight_end":51}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:219:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(not(feature = \"nu_ansi_term\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8243,"byte_end":8267,"line_start":221,"line_end":221,"column_start":23,"column_end":47,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"nu_ansi_term\")]","highlight_start":23,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8253,"byte_end":8267,"line_start":221,"line_end":221,"column_start":33,"column_end":47,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"nu_ansi_term\")]","highlight_start":33,"highlight_end":47}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:221:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(feature = \"nu_ansi_term\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8719,"byte_end":8743,"line_start":231,"line_end":231,"column_start":27,"column_end":51,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"nu_ansi_term\"))]","highlight_start":27,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8729,"byte_end":8743,"line_start":231,"line_end":231,"column_start":37,"column_end":51,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"nu_ansi_term\"))]","highlight_start":37,"highlight_end":51}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:231:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(not(feature = \"nu_ansi_term\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8826,"byte_end":8850,"line_start":233,"line_end":233,"column_start":23,"column_end":47,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"nu_ansi_term\")]","highlight_start":23,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":8836,"byte_end":8850,"line_start":233,"line_end":233,"column_start":33,"column_end":47,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"nu_ansi_term\")]","highlight_start":33,"highlight_end":47}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:233:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(feature = \"nu_ansi_term\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":9361,"byte_end":9385,"line_start":244,"line_end":244,"column_start":27,"column_end":51,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"nu_ansi_term\"))]","highlight_start":27,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":9371,"byte_end":9385,"line_start":244,"line_end":244,"column_start":37,"column_end":51,"is_primary":true,"text":[{"text":"                #[cfg(not(feature = \"nu_ansi_term\"))]","highlight_start":37,"highlight_end":51}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:244:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(not(feature = \"nu_ansi_term\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nu_ansi_term`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":9463,"byte_end":9487,"line_start":246,"line_end":246,"column_start":23,"column_end":47,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"nu_ansi_term\")]","highlight_start":23,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `nu_ansi_term` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a expected value with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs","byte_start":9473,"byte_end":9487,"line_start":246,"line_end":246,"column_start":33,"column_end":47,"is_primary":true,"text":[{"text":"                #[cfg(feature = \"nu_ansi_term\")]","highlight_start":33,"highlight_end":47}],"label":null,"suggested_replacement":"\"nu-ansi-term\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nu_ansi_term`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/filter/env/builder.rs:246:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(feature = \"nu_ansi_term\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: there is a expected value with a similar name: `\"nu-ansi-term\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `alloc`, `ansi`, `chrono`, `default`, `env-filter`, `fmt`, `json`, `local-time`, `matchers`, `nu-ansi-term`, `once_cell`, `parking_lot`, `regex`, `registry`, `serde`, `serde_json`, `sharded-slab`, `smallvec`, `std`, `thread_local`, `time`, `tracing`, `tracing-log`, `tracing-serde`, `valuable`, `valuable-serde`, and `valuable_crate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `nu_ansi_term` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/registry/mod.rs","byte_start":4240,"byte_end":4242,"line_start":118,"line_end":118,"column_start":50,"column_end":52,"is_primary":true,"text":[{"text":"    fn span(&'a self, id: &Id) -> Option<SpanRef<'_, Self>>","highlight_start":50,"highlight_end":52}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/registry/mod.rs","byte_start":2991,"byte_end":2993,"line_start":92,"line_end":92,"column_start":22,"column_end":24,"is_primary":false,"text":[{"text":"pub trait LookupSpan<'a> {","highlight_start":22,"highlight_end":24}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/registry/mod.rs:118:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait LookupSpan<'a> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn span(&'a self, id: &Id) -> Option<SpanRef<'_, Self>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_subscriber-c4d53788fa6665f3.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_subscriber-c4d53788fa6665f3.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"9 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 9 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tracing-subscriber-0.3.18"
## script = '''
## FROM scratch AS cratesio-tracing-subscriber-0.3.18
## ADD --chmod=0664 --checksum=sha256:ad0f048c97dbd9faa9b7df56362b8ebcaa52adb06b498c050d2f4e32f90a7a8b \
##   https://static.crates.io/crates/tracing-subscriber/tracing-subscriber-0.3.18.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tracing-subscriber-0.3.18-c4d53788fa6665f3"
## script = '''
## FROM rust-base AS dep-l-tracing-subscriber-0.3.18-c4d53788fa6665f3
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-tracing-subscriber-0.3.18,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18 \
##   --mount=from=out-f3b453967c4ace5b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rmeta,source=/libmatchers-f3b453967c4ace5b.rmeta \
##   --mount=from=out-36c17437fa6ac77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rmeta,source=/libregex_automata-36c17437fa6ac77d.rmeta \
##   --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rmeta,source=/libregex_syntax-278fc833d6e378c8.rmeta \
##   --mount=from=out-c42192675aa050dd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rmeta,source=/libnu_ansi_term-c42192675aa050dd.rmeta \
##   --mount=from=out-94fa3b5a5c6dc522,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rmeta,source=/liboverload-94fa3b5a5c6dc522.rmeta \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta,source=/libonce_cell-6ed51fafe322ecba.rmeta \
##   --mount=from=out-f4ad8066a62c002f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rmeta,source=/libregex-f4ad8066a62c002f.rmeta \
##   --mount=from=out-3b7214cd7fa87374,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rmeta,source=/libregex_automata-3b7214cd7fa87374.rmeta \
##   --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rmeta,source=/libregex_syntax-21f3c7dc3999ce6b.rmeta \
##   --mount=from=out-c335002a97b2343b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsharded_slab-c335002a97b2343b.rmeta,source=/libsharded_slab-c335002a97b2343b.rmeta \
##   --mount=from=out-a79af56de238e2b5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rmeta,source=/liblazy_static-a79af56de238e2b5.rmeta \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta,source=/libsmallvec-52fbb4b19901b011.rmeta \
##   --mount=from=out-6893ca5c870c6e37,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rmeta,source=/libthread_local-6893ca5c870c6e37.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta,source=/libtracing-320990e22bbf0744.rmeta \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rmeta,source=/libpin_project_lite-32982cb980ef9328.rmeta \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rmeta,source=/libproc_macro2-7d64fd1b28e07289.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rmeta,source=/libquote-693b08ca69220922.rmeta \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rmeta,source=/libsyn-956fbe8af8dd641b.rmeta \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta,source=/libtracing_core-8d324580670ac264.rmeta \
##   --mount=from=out-fb7fae2e3366cafc,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rmeta,source=/libtracing_log-fb7fae2e3366cafc.rmeta \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rmeta,source=/liblog-b81976489825f26e.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tracing_subscriber" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Eliza Weisman <eliza@buoyant.io>:David Barsky <me@davidbarsky.com>:Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Utilities for implementing and composing `tracing` subscribers.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tracing-subscriber" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tracing" \
##         CARGO_PKG_RUST_VERSION="1.63.0" \
##         CARGO_PKG_VERSION="0.3.18" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="18" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tracing_subscriber' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="ansi"' '--cfg' 'feature="default"' '--cfg' 'feature="env-filter"' '--cfg' 'feature="fmt"' '--cfg' 'feature="matchers"' '--cfg' 'feature="nu-ansi-term"' '--cfg' 'feature="once_cell"' '--cfg' 'feature="regex"' '--cfg' 'feature="registry"' '--cfg' 'feature="sharded-slab"' '--cfg' 'feature="smallvec"' '--cfg' 'feature="std"' '--cfg' 'feature="thread_local"' '--cfg' 'feature="tracing"' '--cfg' 'feature="tracing-log"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "ansi", "chrono", "default", "env-filter", "fmt", "json", "local-time", "matchers", "nu-ansi-term", "once_cell", "parking_lot", "regex", "registry", "serde", "serde_json", "sharded-slab", "smallvec", "std", "thread_local", "time", "tracing", "tracing-log", "tracing-serde", "valuable", "valuable-serde", "valuable_crate"))' '-C' 'metadata=e7807217349bee7b' '-C' 'extra-filename=-c4d53788fa6665f3' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'matchers=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rmeta' '--extern' 'nu_ansi_term=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rmeta' '--extern' 'once_cell=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rmeta' '--extern' 'regex=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rmeta' '--extern' 'sharded_slab=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsharded_slab-c335002a97b2343b.rmeta' '--extern' 'smallvec=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rmeta' '--extern' 'thread_local=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rmeta' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rmeta' '--extern' 'tracing_core=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rmeta' '--extern' 'tracing_log=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tracing-subscriber-0.3.18/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c4d53788fa6665f3"
## script = """
## FROM scratch AS out-c4d53788fa6665f3
## COPY --from=dep-l-tracing-subscriber-0.3.18-c4d53788fa6665f3 /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-c4d53788fa6665f3* /"""

FROM scratch AS cratesio-hickory-dns-0.25.0-alpha.1
ADD --chmod=0664 --checksum=sha256:c0bf9029f02fd5ea1f8c0574d745c8f92f37e5edc55fc7e08552a1c08324dc69 \
  https://static.crates.io/crates/hickory-dns/hickory-dns-0.25.0-alpha.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-b-hickory-dns-0.25.0-alpha.1-cdc081ff2016c6aa
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
RUN \
  --mount=from=cratesio-hickory-dns-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1 \
  --mount=from=out-16e2da0234453b1e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap-16e2da0234453b1e.rlib,source=/libclap-16e2da0234453b1e.rlib \
  --mount=from=out-1766526499f805fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rlib,source=/libclap_builder-1766526499f805fd.rlib \
  --mount=from=out-482be7a2d5144817,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rlib,source=/libanstyle-482be7a2d5144817.rlib \
  --mount=from=out-17d155ce44043f8d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rlib,source=/libclap_lex-17d155ce44043f8d.rlib \
  --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rlib,source=/libonce_cell-6ed51fafe322ecba.rlib \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rlib,source=/libstrsim-fd42a4ea370e31ec.rlib \
  --mount=from=out-8367bfef6900e2ab,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so,source=/libclap_derive-8367bfef6900e2ab.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
  --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
  --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
  --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rlib,source=/libfutures_util-85ef45b09b00482a.rlib \
  --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rlib,source=/libfutures_core-da7454144a4b1d2d.rlib \
  --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rlib,source=/libfutures_task-6c36b04a10bba36c.rlib \
  --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rlib,source=/libpin_project_lite-32982cb980ef9328.rlib \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rlib,source=/libpin_utils-b74f2a8eb0482878.rlib \
  --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rlib,source=/libslab-9a31c9ae14e5d0d4.rlib \
  --mount=from=out-3d2d9bf2c95b1d8e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_client-3d2d9bf2c95b1d8e.rlib,source=/libhickory_client-3d2d9bf2c95b1d8e.rlib \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rlib,source=/libcfg_if-da34da6838abd7f1.rlib \
  --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rlib,source=/libdata_encoding-e3ffa7a902242322.rlib \
  --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rlib,source=/libfutures_channel-adcb9d3de5d6fae9.rlib \
  --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rlib,source=/libhickory_proto-038139804ab046ea.rlib \
  --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
  --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
  --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rlib,source=/libbitflags-053eac235c7ed568.rlib \
  --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rlib,source=/libfutures_io-9a295684e8a14a09.rlib \
  --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rlib,source=/libidna-c78132bf36574e8f.rlib \
  --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rlib,source=/libunicode_bidi-a08113fabad3cd3f.rlib \
  --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rlib,source=/libunicode_normalization-337fcf711f0ba199.rlib \
  --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rlib,source=/libtinyvec-b009c33fe21f2d06.rlib \
  --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rlib,source=/libtinyvec_macros-7b6822ef8e67fb50.rlib \
  --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rlib,source=/libipnet-c991228b632df552.rlib \
  --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rlib,source=/libserde-26e91440ed3c2207.rlib \
  --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
  --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rlib,source=/librand-5161209caf71d483.rlib \
  --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rlib,source=/liblibc-a7905fdc410bdfce.rlib \
  --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rlib,source=/librand_chacha-8e2f025dcc32e9af.rlib \
  --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rlib,source=/libppv_lite86-af198cb5433f3d0c.rlib \
  --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rlib,source=/librand_core-434e8a9dd58e4456.rlib \
  --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rlib,source=/libgetrandom-84473f2ddfbb434a.rlib \
  --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rlib,source=/libring-63b94b1c8b4a1192.rlib \
  --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rlib,source=/libspin-126f99f44d356e93.rlib \
  --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rlib,source=/libuntrusted-2cf0189e0a6f5785.rlib \
  --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rlib,source=/librustls-264210de0fb2469c.rlib \
  --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rlib,source=/liblog-b81976489825f26e.rlib \
  --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rlib,source=/libwebpki-ebc0ad471b520844.rlib \
  --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rlib,source=/libsct-95ad8239e8e57c79.rlib \
  --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rlib,source=/librustls_native_certs-c785b10cd1fa3185.rlib \
  --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rlib,source=/libopenssl_probe-0ee236ae7bf0c632.rlib \
  --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rlib,source=/librustls_pemfile-a38c83241847def9.rlib \
  --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rlib,source=/libbase64-de6de5507c11303f.rlib \
  --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rlib,source=/libthiserror-a653fbb7540bf139.rlib \
  --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
  --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rlib,source=/libtokio-0724e68cddf1b06e.rlib \
  --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rlib,source=/libbytes-17cf73a7d3f13d95.rlib \
  --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rlib,source=/libmio-57de3125ece5b1fd.rlib \
  --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rlib,source=/libnum_cpus-516d6049f106f6a2.rlib \
  --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rlib,source=/libsocket2-4f06700ac893bf17.rlib \
  --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
  --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rlib,source=/libtokio_rustls-cef0e5e95c930be3.rlib \
  --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rlib,source=/libtracing-320990e22bbf0744.rlib \
  --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
  --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rlib,source=/libtracing_core-8d324580670ac264.rlib \
  --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rlib,source=/liburl-7914ef07c5f53ddf.rlib \
  --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rlib,source=/libform_urlencoded-4251738685e38e22.rlib \
  --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rlib,source=/libpercent_encoding-cba19d70c6cf7027.rlib \
  --mount=from=out-7d124cd7b95e1ff5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rlib,source=/libradix_trie-7d124cd7b95e1ff5.rlib \
  --mount=from=out-49249c9006ab469a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rlib,source=/libendian_type-49249c9006ab469a.rlib \
  --mount=from=out-dc00d6cdaaa2dfe5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rlib,source=/libnibble_vec-dc00d6cdaaa2dfe5.rlib \
  --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rlib,source=/libsmallvec-52fbb4b19901b011.rlib \
  --mount=from=out-a9ec7d4c2a006148,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_server-a9ec7d4c2a006148.rlib,source=/libhickory_server-a9ec7d4c2a006148.rlib \
  --mount=from=out-cef69be1d7480c78,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rlib,source=/libbasic_toml-cef69be1d7480c78.rlib \
  --mount=from=out-35823e6e41e36b61,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rlib,source=/libhickory_resolver-35823e6e41e36b61.rlib \
  --mount=from=out-f6bd03560b1f6bf6,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rlib,source=/liblru_cache-f6bd03560b1f6bf6.rlib \
  --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rlib,source=/liblinked_hash_map-4904f0514f71f438.rlib \
  --mount=from=out-160b5b4e14748278,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rlib,source=/libparking_lot-160b5b4e14748278.rlib \
  --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rlib,source=/liblock_api-6e751866151e591e.rlib \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rlib,source=/libscopeguard-b477fb82efd13fea.rlib \
  --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rlib,source=/libparking_lot_core-b8f9aa34d6c6f88b.rlib \
  --mount=from=out-826770d260f6e8ae,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rlib,source=/libresolv_conf-826770d260f6e8ae.rlib \
  --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rlib,source=/libhostname-ca82cf5ad1bc156a.rlib \
  --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rlib,source=/libmatch_cfg-d800b5c94563c48b.rlib \
  --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rlib,source=/libquick_error-bd3d4e33b0f59f1b.rlib \
  --mount=from=out-0cd8587a72e0b77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rlib,source=/libprefix_trie-0cd8587a72e0b77d.rlib \
  --mount=from=out-db1f90f170a87e28,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rlib,source=/libnum_traits-db1f90f170a87e28.rlib \
  --mount=from=out-d16b058b0446e900,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rlib,source=/librusqlite-d16b058b0446e900.rlib \
  --mount=from=out-15b199cebb28d6c1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rlib,source=/libfallible_iterator-15b199cebb28d6c1.rlib \
  --mount=from=out-1ff04656bece776a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rlib,source=/libfallible_streaming_iterator-1ff04656bece776a.rlib \
  --mount=from=out-eb10f7fd3a8f7cc4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rlib,source=/libhashlink-eb10f7fd3a8f7cc4.rlib \
  --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rlib,source=/libhashbrown-ae4e234b5a727d1b.rlib \
  --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rlib,source=/libahash-e3d10071ef13803b.rlib \
  --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rlib,source=/libzerocopy-62e07187ba843221.rlib \
  --mount=from=out-e92ab161973aaada,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rlib,source=/liblibsqlite3_sys-e92ab161973aaada.rlib \
  --mount=from=out-6f9611253b5d8f71,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rlib,source=/libtime-6f9611253b5d8f71.rlib \
  --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rlib,source=/libderanged-d1b20afe65258a7f.rlib \
  --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rlib,source=/libpowerfmt-3b9b90aa3c5625e4.rlib \
  --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rlib,source=/libitoa-95ec35c9faa8fa43.rlib \
  --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rlib,source=/libnum_conv-4d9acac3d8710637.rlib \
  --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rlib,source=/libtime_core-1f0711c34dce700e.rlib \
  --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
  --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib,source=/libnum_conv-95c789b069138b83.rlib \
  --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib,source=/libtime_core-bb694424a192024c.rlib \
  --mount=from=out-0c86cba0aa0a3340,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rlib,source=/libtokio_util-0c86cba0aa0a3340.rlib \
  --mount=from=out-dbece67d843dd79b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rlib,source=/libfutures_sink-dbece67d843dd79b.rlib \
  --mount=from=out-c4d53788fa6665f3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_subscriber-c4d53788fa6665f3.rlib,source=/libtracing_subscriber-c4d53788fa6665f3.rlib \
  --mount=from=out-f3b453967c4ace5b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rlib,source=/libmatchers-f3b453967c4ace5b.rlib \
  --mount=from=out-36c17437fa6ac77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rlib,source=/libregex_automata-36c17437fa6ac77d.rlib \
  --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rlib,source=/libregex_syntax-278fc833d6e378c8.rlib \
  --mount=from=out-c42192675aa050dd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rlib,source=/libnu_ansi_term-c42192675aa050dd.rlib \
  --mount=from=out-94fa3b5a5c6dc522,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rlib,source=/liboverload-94fa3b5a5c6dc522.rlib \
  --mount=from=out-f4ad8066a62c002f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rlib,source=/libregex-f4ad8066a62c002f.rlib \
  --mount=from=out-3b7214cd7fa87374,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rlib,source=/libregex_automata-3b7214cd7fa87374.rlib \
  --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rlib,source=/libregex_syntax-21f3c7dc3999ce6b.rlib \
  --mount=from=out-c335002a97b2343b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsharded_slab-c335002a97b2343b.rlib,source=/libsharded_slab-c335002a97b2343b.rlib \
  --mount=from=out-a79af56de238e2b5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rlib,source=/liblazy_static-a79af56de238e2b5.rlib \
  --mount=from=out-6893ca5c870c6e37,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rlib,source=/libthread_local-6893ca5c870c6e37.rlib \
  --mount=from=out-fb7fae2e3366cafc,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rlib,source=/libtracing_log-fb7fae2e3366cafc.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_BIN_NAME="hickory-dns" \
        CARGO_CRATE_NAME="hickory_dns" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
        CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS server with DNSSEC support.\n Eventually this could be a replacement for BIND9. The DNSSEC support allows\n for live signing of all records, in it does not currently support\n records signed offline. The server supports dynamic DNS with SIG0 authenticated\n requests. Hickory DNS is based on the Tokio and Futures libraries, which means\n it should be easily integrated into other software that also use those\n libraries.\n" \
        CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hickory-dns" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
        CARGO_PKG_RUST_VERSION="1.67.0" \
        CARGO_PKG_VERSION="0.25.0-alpha.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="25" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE="alpha.1" \
        CARGO_PRIMARY_PACKAGE="1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hickory_dns' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'bin' '--emit' 'dep-info,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="ascii-art"' '--cfg' 'feature="default"' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="resolver"' '--cfg' 'feature="rustls"' '--cfg' 'feature="sqlite"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ascii-art", "default", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "native-certs", "recursor", "resolver", "rustls", "sqlite", "tls", "tls-openssl", "webpki-roots"))' '-C' 'metadata=90c420e39af44497' '-C' 'extra-filename=-cdc081ff2016c6aa' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'clap=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap-16e2da0234453b1e.rlib' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rlib' '--extern' 'hickory_client=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_client-3d2d9bf2c95b1d8e.rlib' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rlib' '--extern' 'hickory_server=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_server-a9ec7d4c2a006148.rlib' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rlib' '--extern' 'time=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rlib' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rlib' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rlib' '--extern' 'tracing_subscriber=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_subscriber-c4d53788fa6665f3.rlib' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1/src/hickory-dns.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-cdc081ff2016c6aa
COPY --from=dep-b-hickory-dns-0.25.0-alpha.1-cdc081ff2016c6aa /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cdc081ff2016c6aa* /

## this = "cdc081ff2016c6aa"
## deps = [
##     "16e2da0234453b1e",
##     "1766526499f805fd",
##     "482be7a2d5144817",
##     "17d155ce44043f8d",
##     "6ed51fafe322ecba",
##     "fd42a4ea370e31ec",
##     "8367bfef6900e2ab",
##     "2f387b4601b8b6b0",
##     "7d64fd1b28e07289",
##     "4c1dc76c11b3deb8",
##     "693b08ca69220922",
##     "956fbe8af8dd641b",
##     "85ef45b09b00482a",
##     "da7454144a4b1d2d",
##     "6c36b04a10bba36c",
##     "32982cb980ef9328",
##     "b74f2a8eb0482878",
##     "9a31c9ae14e5d0d4",
##     "3d2d9bf2c95b1d8e",
##     "da34da6838abd7f1",
##     "e3ffa7a902242322",
##     "adcb9d3de5d6fae9",
##     "038139804ab046ea",
##     "fd8b71f0a4504cc7",
##     "3fb14aec5601ab5a",
##     "053eac235c7ed568",
##     "002f3af3555cdc1d",
##     "9a295684e8a14a09",
##     "c78132bf36574e8f",
##     "a08113fabad3cd3f",
##     "337fcf711f0ba199",
##     "b009c33fe21f2d06",
##     "7b6822ef8e67fb50",
##     "c991228b632df552",
##     "26e91440ed3c2207",
##     "674ffdbedbb0cc24",
##     "5161209caf71d483",
##     "a7905fdc410bdfce",
##     "8e2f025dcc32e9af",
##     "af198cb5433f3d0c",
##     "434e8a9dd58e4456",
##     "84473f2ddfbb434a",
##     "63b94b1c8b4a1192",
##     "126f99f44d356e93",
##     "2cf0189e0a6f5785",
##     "264210de0fb2469c",
##     "b81976489825f26e",
##     "ebc0ad471b520844",
##     "95ad8239e8e57c79",
##     "c785b10cd1fa3185",
##     "0ee236ae7bf0c632",
##     "a38c83241847def9",
##     "de6de5507c11303f",
##     "a653fbb7540bf139",
##     "b31d1031030a1f93",
##     "0724e68cddf1b06e",
##     "17cf73a7d3f13d95",
##     "57de3125ece5b1fd",
##     "516d6049f106f6a2",
##     "4f06700ac893bf17",
##     "c40240aa85c27d5d",
##     "cef0e5e95c930be3",
##     "320990e22bbf0744",
##     "4a556d35209377d8",
##     "8d324580670ac264",
##     "7914ef07c5f53ddf",
##     "4251738685e38e22",
##     "cba19d70c6cf7027",
##     "7d124cd7b95e1ff5",
##     "49249c9006ab469a",
##     "dc00d6cdaaa2dfe5",
##     "52fbb4b19901b011",
##     "a9ec7d4c2a006148",
##     "cef69be1d7480c78",
##     "35823e6e41e36b61",
##     "f6bd03560b1f6bf6",
##     "4904f0514f71f438",
##     "160b5b4e14748278",
##     "6e751866151e591e",
##     "b477fb82efd13fea",
##     "b8f9aa34d6c6f88b",
##     "826770d260f6e8ae",
##     "ca82cf5ad1bc156a",
##     "d800b5c94563c48b",
##     "bd3d4e33b0f59f1b",
##     "0cd8587a72e0b77d",
##     "db1f90f170a87e28",
##     "d16b058b0446e900",
##     "15b199cebb28d6c1",
##     "1ff04656bece776a",
##     "eb10f7fd3a8f7cc4",
##     "ae4e234b5a727d1b",
##     "e3d10071ef13803b",
##     "62e07187ba843221",
##     "e92ab161973aaada",
##     "6f9611253b5d8f71",
##     "d1b20afe65258a7f",
##     "3b9b90aa3c5625e4",
##     "95ec35c9faa8fa43",
##     "4d9acac3d8710637",
##     "1f0711c34dce700e",
##     "00f64a626ad29a7c",
##     "95c789b069138b83",
##     "bb694424a192024c",
##     "0c86cba0aa0a3340",
##     "dbece67d843dd79b",
##     "c4d53788fa6665f3",
##     "f3b453967c4ace5b",
##     "36c17437fa6ac77d",
##     "278fc833d6e378c8",
##     "c42192675aa050dd",
##     "94fa3b5a5c6dc522",
##     "f4ad8066a62c002f",
##     "3b7214cd7fa87374",
##     "21f3c7dc3999ce6b",
##     "c335002a97b2343b",
##     "a79af56de238e2b5",
##     "6893ca5c870c6e37",
##     "fb7fae2e3366cafc",
## ]
## short_externs = [
##     "clap-16e2da0234453b1e",
##     "clap_builder-1766526499f805fd",
##     "anstyle-482be7a2d5144817",
##     "clap_lex-17d155ce44043f8d",
##     "once_cell-6ed51fafe322ecba",
##     "strsim-fd42a4ea370e31ec",
##     "clap_derive-8367bfef6900e2ab",
##     "heck-2f387b4601b8b6b0",
##     "proc_macro2-7d64fd1b28e07289",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-693b08ca69220922",
##     "syn-956fbe8af8dd641b",
##     "futures_util-85ef45b09b00482a",
##     "futures_core-da7454144a4b1d2d",
##     "futures_task-6c36b04a10bba36c",
##     "pin_project_lite-32982cb980ef9328",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-9a31c9ae14e5d0d4",
##     "hickory_client-3d2d9bf2c95b1d8e",
##     "cfg_if-da34da6838abd7f1",
##     "data_encoding-e3ffa7a902242322",
##     "futures_channel-adcb9d3de5d6fae9",
##     "hickory_proto-038139804ab046ea",
##     "async_recursion-fd8b71f0a4504cc7",
##     "async_trait-3fb14aec5601ab5a",
##     "bitflags-053eac235c7ed568",
##     "enum_as_inner-002f3af3555cdc1d",
##     "futures_io-9a295684e8a14a09",
##     "idna-c78132bf36574e8f",
##     "unicode_bidi-a08113fabad3cd3f",
##     "unicode_normalization-337fcf711f0ba199",
##     "tinyvec-b009c33fe21f2d06",
##     "tinyvec_macros-7b6822ef8e67fb50",
##     "ipnet-c991228b632df552",
##     "serde-26e91440ed3c2207",
##     "serde_derive-674ffdbedbb0cc24",
##     "rand-5161209caf71d483",
##     "libc-a7905fdc410bdfce",
##     "rand_chacha-8e2f025dcc32e9af",
##     "ppv_lite86-af198cb5433f3d0c",
##     "rand_core-434e8a9dd58e4456",
##     "getrandom-84473f2ddfbb434a",
##     "ring-63b94b1c8b4a1192",
##     "spin-126f99f44d356e93",
##     "untrusted-2cf0189e0a6f5785",
##     "rustls-264210de0fb2469c",
##     "log-b81976489825f26e",
##     "webpki-ebc0ad471b520844",
##     "sct-95ad8239e8e57c79",
##     "rustls_native_certs-c785b10cd1fa3185",
##     "openssl_probe-0ee236ae7bf0c632",
##     "rustls_pemfile-a38c83241847def9",
##     "base64-de6de5507c11303f",
##     "thiserror-a653fbb7540bf139",
##     "thiserror_impl-b31d1031030a1f93",
##     "tokio-0724e68cddf1b06e",
##     "bytes-17cf73a7d3f13d95",
##     "mio-57de3125ece5b1fd",
##     "num_cpus-516d6049f106f6a2",
##     "socket2-4f06700ac893bf17",
##     "tokio_macros-c40240aa85c27d5d",
##     "tokio_rustls-cef0e5e95c930be3",
##     "tracing-320990e22bbf0744",
##     "tracing_attributes-4a556d35209377d8",
##     "tracing_core-8d324580670ac264",
##     "url-7914ef07c5f53ddf",
##     "form_urlencoded-4251738685e38e22",
##     "percent_encoding-cba19d70c6cf7027",
##     "radix_trie-7d124cd7b95e1ff5",
##     "endian_type-49249c9006ab469a",
##     "nibble_vec-dc00d6cdaaa2dfe5",
##     "smallvec-52fbb4b19901b011",
##     "hickory_server-a9ec7d4c2a006148",
##     "basic_toml-cef69be1d7480c78",
##     "hickory_resolver-35823e6e41e36b61",
##     "lru_cache-f6bd03560b1f6bf6",
##     "linked_hash_map-4904f0514f71f438",
##     "parking_lot-160b5b4e14748278",
##     "lock_api-6e751866151e591e",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-b8f9aa34d6c6f88b",
##     "resolv_conf-826770d260f6e8ae",
##     "hostname-ca82cf5ad1bc156a",
##     "match_cfg-d800b5c94563c48b",
##     "quick_error-bd3d4e33b0f59f1b",
##     "prefix_trie-0cd8587a72e0b77d",
##     "num_traits-db1f90f170a87e28",
##     "rusqlite-d16b058b0446e900",
##     "fallible_iterator-15b199cebb28d6c1",
##     "fallible_streaming_iterator-1ff04656bece776a",
##     "hashlink-eb10f7fd3a8f7cc4",
##     "hashbrown-ae4e234b5a727d1b",
##     "ahash-e3d10071ef13803b",
##     "zerocopy-62e07187ba843221",
##     "libsqlite3_sys-e92ab161973aaada",
##     "time-6f9611253b5d8f71",
##     "deranged-d1b20afe65258a7f",
##     "powerfmt-3b9b90aa3c5625e4",
##     "itoa-95ec35c9faa8fa43",
##     "num_conv-4d9acac3d8710637",
##     "time_core-1f0711c34dce700e",
##     "time_macros-00f64a626ad29a7c",
##     "num_conv-95c789b069138b83",
##     "time_core-bb694424a192024c",
##     "tokio_util-0c86cba0aa0a3340",
##     "futures_sink-dbece67d843dd79b",
##     "tracing_subscriber-c4d53788fa6665f3",
##     "matchers-f3b453967c4ace5b",
##     "regex_automata-36c17437fa6ac77d",
##     "regex_syntax-278fc833d6e378c8",
##     "nu_ansi_term-c42192675aa050dd",
##     "overload-94fa3b5a5c6dc522",
##     "regex-f4ad8066a62c002f",
##     "regex_automata-3b7214cd7fa87374",
##     "regex_syntax-21f3c7dc3999ce6b",
##     "sharded_slab-c335002a97b2343b",
##     "lazy_static-a79af56de238e2b5",
##     "thread_local-6893ca5c870c6e37",
##     "tracing_log-fb7fae2e3366cafc",
## ]
## writes = [
##     "deps/hickory_dns-cdc081ff2016c6aa.d",
##     "deps/hickory_dns-cdc081ff2016c6aa",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hickory_dns-cdc081ff2016c6aa.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/hickory_dns-cdc081ff2016c6aa","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-fb15d033100480ee"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out"
## 
## [[contexts]]
## name = "crate_out-d0e0a17ed08cc243"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out"
## 
## [[contexts]]
## name = "crate_out-24468494741c1625"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out"
## 
## [[contexts]]
## name = "crate_out-95e8bf745fd1ec5b"
## uri = "/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hickory-dns-0.25.0-alpha.1"
## script = '''
## FROM scratch AS cratesio-hickory-dns-0.25.0-alpha.1
## ADD --chmod=0664 --checksum=sha256:c0bf9029f02fd5ea1f8c0574d745c8f92f37e5edc55fc7e08552a1c08324dc69 \
##   https://static.crates.io/crates/hickory-dns/hickory-dns-0.25.0-alpha.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-b-hickory-dns-0.25.0-alpha.1-cdc081ff2016c6aa"
## script = '''
## FROM rust-base AS dep-b-hickory-dns-0.25.0-alpha.1-cdc081ff2016c6aa
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps
## RUN \
##   --mount=from=cratesio-hickory-dns-0.25.0-alpha.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1 \
##   --mount=from=out-16e2da0234453b1e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap-16e2da0234453b1e.rlib,source=/libclap-16e2da0234453b1e.rlib \
##   --mount=from=out-1766526499f805fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_builder-1766526499f805fd.rlib,source=/libclap_builder-1766526499f805fd.rlib \
##   --mount=from=out-482be7a2d5144817,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libanstyle-482be7a2d5144817.rlib,source=/libanstyle-482be7a2d5144817.rlib \
##   --mount=from=out-17d155ce44043f8d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_lex-17d155ce44043f8d.rlib,source=/libclap_lex-17d155ce44043f8d.rlib \
##   --mount=from=out-6ed51fafe322ecba,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libonce_cell-6ed51fafe322ecba.rlib,source=/libonce_cell-6ed51fafe322ecba.rlib \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libstrsim-fd42a4ea370e31ec.rlib,source=/libstrsim-fd42a4ea370e31ec.rlib \
##   --mount=from=out-8367bfef6900e2ab,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap_derive-8367bfef6900e2ab.so,source=/libclap_derive-8367bfef6900e2ab.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
##   --mount=from=out-7d64fd1b28e07289,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libproc_macro2-7d64fd1b28e07289.rlib,source=/libproc_macro2-7d64fd1b28e07289.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-693b08ca69220922,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquote-693b08ca69220922.rlib,source=/libquote-693b08ca69220922.rlib \
##   --mount=from=out-956fbe8af8dd641b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsyn-956fbe8af8dd641b.rlib,source=/libsyn-956fbe8af8dd641b.rlib \
##   --mount=from=out-85ef45b09b00482a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rlib,source=/libfutures_util-85ef45b09b00482a.rlib \
##   --mount=from=out-da7454144a4b1d2d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_core-da7454144a4b1d2d.rlib,source=/libfutures_core-da7454144a4b1d2d.rlib \
##   --mount=from=out-6c36b04a10bba36c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_task-6c36b04a10bba36c.rlib,source=/libfutures_task-6c36b04a10bba36c.rlib \
##   --mount=from=out-32982cb980ef9328,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_project_lite-32982cb980ef9328.rlib,source=/libpin_project_lite-32982cb980ef9328.rlib \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpin_utils-b74f2a8eb0482878.rlib,source=/libpin_utils-b74f2a8eb0482878.rlib \
##   --mount=from=out-9a31c9ae14e5d0d4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libslab-9a31c9ae14e5d0d4.rlib,source=/libslab-9a31c9ae14e5d0d4.rlib \
##   --mount=from=out-3d2d9bf2c95b1d8e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_client-3d2d9bf2c95b1d8e.rlib,source=/libhickory_client-3d2d9bf2c95b1d8e.rlib \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libcfg_if-da34da6838abd7f1.rlib,source=/libcfg_if-da34da6838abd7f1.rlib \
##   --mount=from=out-e3ffa7a902242322,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libdata_encoding-e3ffa7a902242322.rlib,source=/libdata_encoding-e3ffa7a902242322.rlib \
##   --mount=from=out-adcb9d3de5d6fae9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_channel-adcb9d3de5d6fae9.rlib,source=/libfutures_channel-adcb9d3de5d6fae9.rlib \
##   --mount=from=out-038139804ab046ea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rlib,source=/libhickory_proto-038139804ab046ea.rlib \
##   --mount=from=out-fd8b71f0a4504cc7,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_recursion-fd8b71f0a4504cc7.so,source=/libasync_recursion-fd8b71f0a4504cc7.so \
##   --mount=from=out-3fb14aec5601ab5a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libasync_trait-3fb14aec5601ab5a.so,source=/libasync_trait-3fb14aec5601ab5a.so \
##   --mount=from=out-053eac235c7ed568,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbitflags-053eac235c7ed568.rlib,source=/libbitflags-053eac235c7ed568.rlib \
##   --mount=from=out-002f3af3555cdc1d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libenum_as_inner-002f3af3555cdc1d.so,source=/libenum_as_inner-002f3af3555cdc1d.so \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_io-9a295684e8a14a09.rlib,source=/libfutures_io-9a295684e8a14a09.rlib \
##   --mount=from=out-c78132bf36574e8f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libidna-c78132bf36574e8f.rlib,source=/libidna-c78132bf36574e8f.rlib \
##   --mount=from=out-a08113fabad3cd3f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_bidi-a08113fabad3cd3f.rlib,source=/libunicode_bidi-a08113fabad3cd3f.rlib \
##   --mount=from=out-337fcf711f0ba199,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libunicode_normalization-337fcf711f0ba199.rlib,source=/libunicode_normalization-337fcf711f0ba199.rlib \
##   --mount=from=out-b009c33fe21f2d06,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec-b009c33fe21f2d06.rlib,source=/libtinyvec-b009c33fe21f2d06.rlib \
##   --mount=from=out-7b6822ef8e67fb50,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtinyvec_macros-7b6822ef8e67fb50.rlib,source=/libtinyvec_macros-7b6822ef8e67fb50.rlib \
##   --mount=from=out-c991228b632df552,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libipnet-c991228b632df552.rlib,source=/libipnet-c991228b632df552.rlib \
##   --mount=from=out-26e91440ed3c2207,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde-26e91440ed3c2207.rlib,source=/libserde-26e91440ed3c2207.rlib \
##   --mount=from=out-674ffdbedbb0cc24,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libserde_derive-674ffdbedbb0cc24.so,source=/libserde_derive-674ffdbedbb0cc24.so \
##   --mount=from=out-5161209caf71d483,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand-5161209caf71d483.rlib,source=/librand-5161209caf71d483.rlib \
##   --mount=from=out-a7905fdc410bdfce,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibc-a7905fdc410bdfce.rlib,source=/liblibc-a7905fdc410bdfce.rlib \
##   --mount=from=out-8e2f025dcc32e9af,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_chacha-8e2f025dcc32e9af.rlib,source=/librand_chacha-8e2f025dcc32e9af.rlib \
##   --mount=from=out-af198cb5433f3d0c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libppv_lite86-af198cb5433f3d0c.rlib,source=/libppv_lite86-af198cb5433f3d0c.rlib \
##   --mount=from=out-434e8a9dd58e4456,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librand_core-434e8a9dd58e4456.rlib,source=/librand_core-434e8a9dd58e4456.rlib \
##   --mount=from=out-84473f2ddfbb434a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libgetrandom-84473f2ddfbb434a.rlib,source=/libgetrandom-84473f2ddfbb434a.rlib \
##   --mount=from=out-63b94b1c8b4a1192,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libring-63b94b1c8b4a1192.rlib,source=/libring-63b94b1c8b4a1192.rlib \
##   --mount=from=out-126f99f44d356e93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libspin-126f99f44d356e93.rlib,source=/libspin-126f99f44d356e93.rlib \
##   --mount=from=out-2cf0189e0a6f5785,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libuntrusted-2cf0189e0a6f5785.rlib,source=/libuntrusted-2cf0189e0a6f5785.rlib \
##   --mount=from=out-264210de0fb2469c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rlib,source=/librustls-264210de0fb2469c.rlib \
##   --mount=from=out-b81976489825f26e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblog-b81976489825f26e.rlib,source=/liblog-b81976489825f26e.rlib \
##   --mount=from=out-ebc0ad471b520844,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libwebpki-ebc0ad471b520844.rlib,source=/libwebpki-ebc0ad471b520844.rlib \
##   --mount=from=out-95ad8239e8e57c79,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsct-95ad8239e8e57c79.rlib,source=/libsct-95ad8239e8e57c79.rlib \
##   --mount=from=out-c785b10cd1fa3185,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_native_certs-c785b10cd1fa3185.rlib,source=/librustls_native_certs-c785b10cd1fa3185.rlib \
##   --mount=from=out-0ee236ae7bf0c632,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libopenssl_probe-0ee236ae7bf0c632.rlib,source=/libopenssl_probe-0ee236ae7bf0c632.rlib \
##   --mount=from=out-a38c83241847def9,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls_pemfile-a38c83241847def9.rlib,source=/librustls_pemfile-a38c83241847def9.rlib \
##   --mount=from=out-de6de5507c11303f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbase64-de6de5507c11303f.rlib,source=/libbase64-de6de5507c11303f.rlib \
##   --mount=from=out-a653fbb7540bf139,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror-a653fbb7540bf139.rlib,source=/libthiserror-a653fbb7540bf139.rlib \
##   --mount=from=out-b31d1031030a1f93,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthiserror_impl-b31d1031030a1f93.so,source=/libthiserror_impl-b31d1031030a1f93.so \
##   --mount=from=out-0724e68cddf1b06e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rlib,source=/libtokio-0724e68cddf1b06e.rlib \
##   --mount=from=out-17cf73a7d3f13d95,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbytes-17cf73a7d3f13d95.rlib,source=/libbytes-17cf73a7d3f13d95.rlib \
##   --mount=from=out-57de3125ece5b1fd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmio-57de3125ece5b1fd.rlib,source=/libmio-57de3125ece5b1fd.rlib \
##   --mount=from=out-516d6049f106f6a2,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_cpus-516d6049f106f6a2.rlib,source=/libnum_cpus-516d6049f106f6a2.rlib \
##   --mount=from=out-4f06700ac893bf17,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsocket2-4f06700ac893bf17.rlib,source=/libsocket2-4f06700ac893bf17.rlib \
##   --mount=from=out-c40240aa85c27d5d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_macros-c40240aa85c27d5d.so,source=/libtokio_macros-c40240aa85c27d5d.so \
##   --mount=from=out-cef0e5e95c930be3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_rustls-cef0e5e95c930be3.rlib,source=/libtokio_rustls-cef0e5e95c930be3.rlib \
##   --mount=from=out-320990e22bbf0744,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rlib,source=/libtracing-320990e22bbf0744.rlib \
##   --mount=from=out-4a556d35209377d8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_attributes-4a556d35209377d8.so,source=/libtracing_attributes-4a556d35209377d8.so \
##   --mount=from=out-8d324580670ac264,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_core-8d324580670ac264.rlib,source=/libtracing_core-8d324580670ac264.rlib \
##   --mount=from=out-7914ef07c5f53ddf,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liburl-7914ef07c5f53ddf.rlib,source=/liburl-7914ef07c5f53ddf.rlib \
##   --mount=from=out-4251738685e38e22,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libform_urlencoded-4251738685e38e22.rlib,source=/libform_urlencoded-4251738685e38e22.rlib \
##   --mount=from=out-cba19d70c6cf7027,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpercent_encoding-cba19d70c6cf7027.rlib,source=/libpercent_encoding-cba19d70c6cf7027.rlib \
##   --mount=from=out-7d124cd7b95e1ff5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libradix_trie-7d124cd7b95e1ff5.rlib,source=/libradix_trie-7d124cd7b95e1ff5.rlib \
##   --mount=from=out-49249c9006ab469a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libendian_type-49249c9006ab469a.rlib,source=/libendian_type-49249c9006ab469a.rlib \
##   --mount=from=out-dc00d6cdaaa2dfe5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnibble_vec-dc00d6cdaaa2dfe5.rlib,source=/libnibble_vec-dc00d6cdaaa2dfe5.rlib \
##   --mount=from=out-52fbb4b19901b011,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsmallvec-52fbb4b19901b011.rlib,source=/libsmallvec-52fbb4b19901b011.rlib \
##   --mount=from=out-a9ec7d4c2a006148,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_server-a9ec7d4c2a006148.rlib,source=/libhickory_server-a9ec7d4c2a006148.rlib \
##   --mount=from=out-cef69be1d7480c78,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libbasic_toml-cef69be1d7480c78.rlib,source=/libbasic_toml-cef69be1d7480c78.rlib \
##   --mount=from=out-35823e6e41e36b61,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_resolver-35823e6e41e36b61.rlib,source=/libhickory_resolver-35823e6e41e36b61.rlib \
##   --mount=from=out-f6bd03560b1f6bf6,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblru_cache-f6bd03560b1f6bf6.rlib,source=/liblru_cache-f6bd03560b1f6bf6.rlib \
##   --mount=from=out-4904f0514f71f438,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblinked_hash_map-4904f0514f71f438.rlib,source=/liblinked_hash_map-4904f0514f71f438.rlib \
##   --mount=from=out-160b5b4e14748278,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot-160b5b4e14748278.rlib,source=/libparking_lot-160b5b4e14748278.rlib \
##   --mount=from=out-6e751866151e591e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblock_api-6e751866151e591e.rlib,source=/liblock_api-6e751866151e591e.rlib \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libscopeguard-b477fb82efd13fea.rlib,source=/libscopeguard-b477fb82efd13fea.rlib \
##   --mount=from=out-b8f9aa34d6c6f88b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libparking_lot_core-b8f9aa34d6c6f88b.rlib,source=/libparking_lot_core-b8f9aa34d6c6f88b.rlib \
##   --mount=from=out-826770d260f6e8ae,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libresolv_conf-826770d260f6e8ae.rlib,source=/libresolv_conf-826770d260f6e8ae.rlib \
##   --mount=from=out-ca82cf5ad1bc156a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhostname-ca82cf5ad1bc156a.rlib,source=/libhostname-ca82cf5ad1bc156a.rlib \
##   --mount=from=out-d800b5c94563c48b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatch_cfg-d800b5c94563c48b.rlib,source=/libmatch_cfg-d800b5c94563c48b.rlib \
##   --mount=from=out-bd3d4e33b0f59f1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libquick_error-bd3d4e33b0f59f1b.rlib,source=/libquick_error-bd3d4e33b0f59f1b.rlib \
##   --mount=from=out-0cd8587a72e0b77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libprefix_trie-0cd8587a72e0b77d.rlib,source=/libprefix_trie-0cd8587a72e0b77d.rlib \
##   --mount=from=out-db1f90f170a87e28,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_traits-db1f90f170a87e28.rlib,source=/libnum_traits-db1f90f170a87e28.rlib \
##   --mount=from=out-d16b058b0446e900,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librusqlite-d16b058b0446e900.rlib,source=/librusqlite-d16b058b0446e900.rlib \
##   --mount=from=out-15b199cebb28d6c1,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_iterator-15b199cebb28d6c1.rlib,source=/libfallible_iterator-15b199cebb28d6c1.rlib \
##   --mount=from=out-1ff04656bece776a,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfallible_streaming_iterator-1ff04656bece776a.rlib,source=/libfallible_streaming_iterator-1ff04656bece776a.rlib \
##   --mount=from=out-eb10f7fd3a8f7cc4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashlink-eb10f7fd3a8f7cc4.rlib,source=/libhashlink-eb10f7fd3a8f7cc4.rlib \
##   --mount=from=out-ae4e234b5a727d1b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhashbrown-ae4e234b5a727d1b.rlib,source=/libhashbrown-ae4e234b5a727d1b.rlib \
##   --mount=from=out-e3d10071ef13803b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libahash-e3d10071ef13803b.rlib,source=/libahash-e3d10071ef13803b.rlib \
##   --mount=from=out-62e07187ba843221,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libzerocopy-62e07187ba843221.rlib,source=/libzerocopy-62e07187ba843221.rlib \
##   --mount=from=out-e92ab161973aaada,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblibsqlite3_sys-e92ab161973aaada.rlib,source=/liblibsqlite3_sys-e92ab161973aaada.rlib \
##   --mount=from=out-6f9611253b5d8f71,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rlib,source=/libtime-6f9611253b5d8f71.rlib \
##   --mount=from=out-d1b20afe65258a7f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libderanged-d1b20afe65258a7f.rlib,source=/libderanged-d1b20afe65258a7f.rlib \
##   --mount=from=out-3b9b90aa3c5625e4,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libpowerfmt-3b9b90aa3c5625e4.rlib,source=/libpowerfmt-3b9b90aa3c5625e4.rlib \
##   --mount=from=out-95ec35c9faa8fa43,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libitoa-95ec35c9faa8fa43.rlib,source=/libitoa-95ec35c9faa8fa43.rlib \
##   --mount=from=out-4d9acac3d8710637,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-4d9acac3d8710637.rlib,source=/libnum_conv-4d9acac3d8710637.rlib \
##   --mount=from=out-1f0711c34dce700e,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-1f0711c34dce700e.rlib,source=/libtime_core-1f0711c34dce700e.rlib \
##   --mount=from=out-00f64a626ad29a7c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_macros-00f64a626ad29a7c.so,source=/libtime_macros-00f64a626ad29a7c.so \
##   --mount=from=out-95c789b069138b83,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnum_conv-95c789b069138b83.rlib,source=/libnum_conv-95c789b069138b83.rlib \
##   --mount=from=out-bb694424a192024c,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime_core-bb694424a192024c.rlib,source=/libtime_core-bb694424a192024c.rlib \
##   --mount=from=out-0c86cba0aa0a3340,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio_util-0c86cba0aa0a3340.rlib,source=/libtokio_util-0c86cba0aa0a3340.rlib \
##   --mount=from=out-dbece67d843dd79b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_sink-dbece67d843dd79b.rlib,source=/libfutures_sink-dbece67d843dd79b.rlib \
##   --mount=from=out-c4d53788fa6665f3,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_subscriber-c4d53788fa6665f3.rlib,source=/libtracing_subscriber-c4d53788fa6665f3.rlib \
##   --mount=from=out-f3b453967c4ace5b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libmatchers-f3b453967c4ace5b.rlib,source=/libmatchers-f3b453967c4ace5b.rlib \
##   --mount=from=out-36c17437fa6ac77d,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-36c17437fa6ac77d.rlib,source=/libregex_automata-36c17437fa6ac77d.rlib \
##   --mount=from=out-278fc833d6e378c8,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-278fc833d6e378c8.rlib,source=/libregex_syntax-278fc833d6e378c8.rlib \
##   --mount=from=out-c42192675aa050dd,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libnu_ansi_term-c42192675aa050dd.rlib,source=/libnu_ansi_term-c42192675aa050dd.rlib \
##   --mount=from=out-94fa3b5a5c6dc522,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liboverload-94fa3b5a5c6dc522.rlib,source=/liboverload-94fa3b5a5c6dc522.rlib \
##   --mount=from=out-f4ad8066a62c002f,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex-f4ad8066a62c002f.rlib,source=/libregex-f4ad8066a62c002f.rlib \
##   --mount=from=out-3b7214cd7fa87374,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_automata-3b7214cd7fa87374.rlib,source=/libregex_automata-3b7214cd7fa87374.rlib \
##   --mount=from=out-21f3c7dc3999ce6b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libregex_syntax-21f3c7dc3999ce6b.rlib,source=/libregex_syntax-21f3c7dc3999ce6b.rlib \
##   --mount=from=out-c335002a97b2343b,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libsharded_slab-c335002a97b2343b.rlib,source=/libsharded_slab-c335002a97b2343b.rlib \
##   --mount=from=out-a79af56de238e2b5,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/liblazy_static-a79af56de238e2b5.rlib,source=/liblazy_static-a79af56de238e2b5.rlib \
##   --mount=from=out-6893ca5c870c6e37,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libthread_local-6893ca5c870c6e37.rlib,source=/libthread_local-6893ca5c870c6e37.rlib \
##   --mount=from=out-fb7fae2e3366cafc,dst=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_log-fb7fae2e3366cafc.rlib,source=/libtracing_log-fb7fae2e3366cafc.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_BIN_NAME="hickory-dns" \
##         CARGO_CRATE_NAME="hickory_dns" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The contributors to Hickory DNS" \
##         CARGO_PKG_DESCRIPTION="Hickory DNS is a safe and secure DNS server with DNSSEC support.\n Eventually this could be a replacement for BIND9. The DNSSEC support allows\n for live signing of all records, in it does not currently support\n records signed offline. The server supports dynamic DNS with SIG0 authenticated\n requests. Hickory DNS is based on the Tokio and Futures libraries, which means\n it should be easily integrated into other software that also use those\n libraries.\n" \
##         CARGO_PKG_HOMEPAGE="https://hickory-dns.org/" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hickory-dns" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/hickory-dns/hickory-dns" \
##         CARGO_PKG_RUST_VERSION="1.67.0" \
##         CARGO_PKG_VERSION="0.25.0-alpha.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="25" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE="alpha.1" \
##         CARGO_PRIMARY_PACKAGE="1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hickory_dns' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'bin' '--emit' 'dep-info,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="ascii-art"' '--cfg' 'feature="default"' '--cfg' 'feature="dns-over-rustls"' '--cfg' 'feature="dns-over-tls"' '--cfg' 'feature="dnssec"' '--cfg' 'feature="dnssec-ring"' '--cfg' 'feature="native-certs"' '--cfg' 'feature="resolver"' '--cfg' 'feature="rustls"' '--cfg' 'feature="sqlite"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ascii-art", "default", "dns-over-h3", "dns-over-https", "dns-over-https-rustls", "dns-over-openssl", "dns-over-quic", "dns-over-rustls", "dns-over-tls", "dnssec", "dnssec-openssl", "dnssec-ring", "native-certs", "recursor", "resolver", "rustls", "sqlite", "tls", "tls-openssl", "webpki-roots"))' '-C' 'metadata=90c420e39af44497' '-C' 'extra-filename=-cdc081ff2016c6aa' '--out-dir' '/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps' '--extern' 'clap=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libclap-16e2da0234453b1e.rlib' '--extern' 'futures_util=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libfutures_util-85ef45b09b00482a.rlib' '--extern' 'hickory_client=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_client-3d2d9bf2c95b1d8e.rlib' '--extern' 'hickory_proto=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_proto-038139804ab046ea.rlib' '--extern' 'hickory_server=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libhickory_server-a9ec7d4c2a006148.rlib' '--extern' 'rustls=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/librustls-264210de0fb2469c.rlib' '--extern' 'time=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtime-6f9611253b5d8f71.rlib' '--extern' 'tokio=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtokio-0724e68cddf1b06e.rlib' '--extern' 'tracing=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing-320990e22bbf0744.rlib' '--extern' 'tracing_subscriber=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/libtracing_subscriber-c4d53788fa6665f3.rlib' '--cap-lints' 'warn' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out' '-L' 'native=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hickory-dns-0.25.0-alpha.1/src/hickory-dns.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-cdc081ff2016c6aa"
## script = """
## FROM scratch AS out-cdc081ff2016c6aa
## COPY --from=dep-b-hickory-dns-0.25.0-alpha.1-cdc081ff2016c6aa /tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps/*-cdc081ff2016c6aa* /"""

# Pipe this file to (not portable due to usage of local build contexts):
# DOCKER_BUILDKIT="1" \
#   docker --debug build --network=none --platform=local --pull=false --target=out-cdc081ff2016c6aa --output=type=local,dest=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/deps --build-context=crate_out-fb15d033100480ee=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/proc-macro2-fb15d033100480ee/out --build-context=crate_out-d0e0a17ed08cc243=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/ring-d0e0a17ed08cc243/out --build-context=crate_out-24468494741c1625=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/thiserror-24468494741c1625/out --build-context=crate_out-95e8bf745fd1ec5b=/tmp/clis-hickory-dns_0-25-0-alpha-1/release/build/libsqlite3-sys-95e8bf745fd1ec5b/out -
