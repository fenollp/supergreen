# syntax=docker.io/docker/dockerfile:1@sha256:9857836c9ee4268391bb5b09f9f157f3c91bb15821bb77969642813b0d00518d
# check=error=true
# Generated by https://github.com/fenollp/supergreen v0.14.0

FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base

FROM scratch AS cratesio-unicode-ident-1.0.12
ADD --chmod=0664 --checksum=sha256:3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b \
  https://static.crates.io/crates/unicode-ident/unicode-ident-1.0.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-unicode-ident-1.0.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="unicode_ident" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="(MIT OR Apache-2.0) AND Unicode-DFS-2016" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="unicode-ident" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/unicode-ident" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.12" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'unicode_ident' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=2f113e6ba7735965' '-C' 'extra-filename=-4c1dc76c11b3deb8' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4c1dc76c11b3deb8
COPY --from=dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-4c1dc76c11b3deb8* /

## this = "4c1dc76c11b3deb8"
## writes = [
##     "deps/unicode_ident-4c1dc76c11b3deb8.d",
##     "deps/libunicode_ident-4c1dc76c11b3deb8.rmeta",
##     "deps/libunicode_ident-4c1dc76c11b3deb8.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/unicode_ident-4c1dc76c11b3deb8.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-unicode-ident-1.0.12"
## script = '''
## FROM scratch AS cratesio-unicode-ident-1.0.12
## ADD --chmod=0664 --checksum=sha256:3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b \
##   https://static.crates.io/crates/unicode-ident/unicode-ident-1.0.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8"
## script = '''
## FROM rust-base AS dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-unicode-ident-1.0.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="unicode_ident" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="(MIT OR Apache-2.0) AND Unicode-DFS-2016" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="unicode-ident" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/unicode-ident" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.12" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'unicode_ident' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=2f113e6ba7735965' '-C' 'extra-filename=-4c1dc76c11b3deb8' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4c1dc76c11b3deb8"
## script = """
## FROM scratch AS out-4c1dc76c11b3deb8
## COPY --from=dep-l-unicode-ident-1.0.12-4c1dc76c11b3deb8 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-4c1dc76c11b3deb8* /"""

FROM scratch AS cratesio-proc-macro2-1.0.72
ADD --chmod=0664 --checksum=sha256:a293318316cf6478ec1ad2a21c49390a8d5b5eae9fab736467d93fbc0edc29c5 \
  https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.72.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-proc-macro2-1.0.72-7c4c35625cab66f6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-proc-macro2-1.0.72,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72 \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="proc_macro2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="proc-macro2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/proc-macro2" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.72" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="72" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/proc-macro2-12eb2c4288882a40/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'proc_macro2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' '-C' 'metadata=ca19a715e16069b2' '-C' 'extra-filename=-7c4c35625cab66f6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'unicode_ident=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' '--cfg' 'wrap_proc_macro' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7c4c35625cab66f6
COPY --from=dep-l-proc-macro2-1.0.72-7c4c35625cab66f6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7c4c35625cab66f6* /

## this = "7c4c35625cab66f6"
## deps = ["4c1dc76c11b3deb8"]
## short_externs = ["unicode_ident-4c1dc76c11b3deb8"]
## writes = ["deps/proc_macro2-7c4c35625cab66f6.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/proc_macro2-7c4c35625cab66f6.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `proc_macro_span`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":3855,"byte_end":3870,"line_start":90,"line_end":90,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]","highlight_start":17,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(proc_macro_span)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(proc_macro_span)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":3855,"byte_end":3870,"line_start":90,"line_end":90,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]","highlight_start":17,"highlight_end":32}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `proc_macro_span`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:90:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(proc_macro_span)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(proc_macro_span)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":3872,"byte_end":3886,"line_start":90,"line_end":90,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]","highlight_start":34,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:90:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":3928,"byte_end":3942,"line_start":91,"line_end":91,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"#![cfg_attr(super_unstable, feature(proc_macro_def_site))]","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:91:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(super_unstable, feature(proc_macro_def_site))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":3987,"byte_end":3994,"line_start":92,"line_end":92,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:92:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":4730,"byte_end":4754,"line_start":117,"line_end":117,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:117:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":4756,"byte_end":4771,"line_start":117,"line_end":117,"column_start":37,"column_end":52,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":37,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":4756,"byte_end":4771,"line_start":117,"line_end":117,"column_start":37,"column_end":52,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":37,"highlight_end":52}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:117:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":4777,"byte_end":4791,"line_start":117,"line_end":117,"column_start":58,"column_end":72,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":58,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:117:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5138,"byte_end":5153,"line_start":134,"line_end":134,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5138,"byte_end":5153,"line_start":134,"line_end":134,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:134:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(wrap_proc_macro)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5360,"byte_end":5375,"line_start":144,"line_end":144,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(not(wrap_proc_macro))]","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5360,"byte_end":5375,"line_start":144,"line_end":144,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(not(wrap_proc_macro))]","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:144:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(wrap_proc_macro))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5436,"byte_end":5451,"line_start":147,"line_end":147,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5436,"byte_end":5451,"line_start":147,"line_end":147,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:147:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(wrap_proc_macro)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5470,"byte_end":5484,"line_start":150,"line_end":150,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:150:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5735,"byte_end":5759,"line_start":161,"line_end":161,"column_start":7,"column_end":31,"is_primary":true,"text":[{"text":"#[cfg(procmacro2_semver_exempt)]","highlight_start":7,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:161:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(procmacro2_semver_exempt)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":5793,"byte_end":5807,"line_start":164,"line_end":164,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:164:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":7904,"byte_end":7911,"line_start":241,"line_end":241,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:241:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":8146,"byte_end":8153,"line_start":249,"line_end":249,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:249:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10365,"byte_end":10389,"line_start":327,"line_end":327,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:327:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10399,"byte_end":10414,"line_start":327,"line_end":327,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10399,"byte_end":10414,"line_start":327,"line_end":327,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:327:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10417,"byte_end":10431,"line_start":327,"line_end":327,"column_start":63,"column_end":77,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":63,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:327:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10611,"byte_end":10635,"line_start":335,"line_end":335,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:335:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10645,"byte_end":10660,"line_start":335,"line_end":335,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10645,"byte_end":10660,"line_start":335,"line_end":335,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:335:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":10663,"byte_end":10677,"line_start":335,"line_end":335,"column_start":63,"column_end":77,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":63,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:335:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":11601,"byte_end":11625,"line_start":368,"line_end":368,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:368:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m368\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":11635,"byte_end":11650,"line_start":368,"line_end":368,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":11635,"byte_end":11650,"line_start":368,"line_end":368,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:368:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m368\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs","byte_start":11653,"byte_end":11667,"line_start":368,"line_end":368,"column_start":63,"column_end":77,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":63,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs:368:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m368\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":354,"byte_end":368,"line_start":12,"line_end":12,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    #[cfg(span_locations)]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:12:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(span_locations)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":579,"byte_end":593,"line_start":21,"line_end":21,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:21:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":4627,"byte_end":4641,"line_start":180,"line_end":180,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(span_locations)]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:180:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":4869,"byte_end":4883,"line_start":187,"line_end":187,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:187:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":5092,"byte_end":5106,"line_start":193,"line_end":193,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"                #[cfg(not(span_locations))]","highlight_start":27,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:193:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(not(span_locations))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":5570,"byte_end":5584,"line_start":206,"line_end":206,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:206:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":6106,"byte_end":6120,"line_start":220,"line_end":220,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:220:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":6477,"byte_end":6491,"line_start":229,"line_end":229,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:229:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":6536,"byte_end":6550,"line_start":231,"line_end":231,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:231:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":6997,"byte_end":7011,"line_start":242,"line_end":242,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:242:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":7056,"byte_end":7070,"line_start":244,"line_end":244,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:244:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":7268,"byte_end":7282,"line_start":254,"line_end":254,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"    #[cfg(not(span_locations))]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:254:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(span_locations))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":7360,"byte_end":7374,"line_start":258,"line_end":258,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:258:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":7423,"byte_end":7437,"line_start":260,"line_end":260,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:260:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":25737,"byte_end":25751,"line_start":914,"line_end":914,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    #[cfg(span_locations)]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:914:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m914\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":25888,"byte_end":25902,"line_start":918,"line_end":918,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(span_locations)]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:918:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m918\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs","byte_start":25931,"byte_end":25945,"line_start":920,"line_end":920,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(span_locations)]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/parse.rs:920:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_is_available`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/detection.rs","byte_start":516,"byte_end":531,"line_start":26,"line_end":26,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(not(no_is_available))]","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_is_available`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/detection.rs:26:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(no_is_available))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_is_available`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/detection.rs","byte_start":2001,"byte_end":2016,"line_start":56,"line_end":56,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(no_is_available)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_is_available`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/detection.rs:56:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(no_is_available)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":6,"byte_end":20,"line_start":1,"line_end":1,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:1:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":210,"byte_end":224,"line_start":6,"line_end":6,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:6:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":230,"byte_end":237,"line_start":6,"line_end":6,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:6:31\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":286,"byte_end":300,"line_start":8,"line_end":8,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:8:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":306,"byte_end":313,"line_start":8,"line_end":8,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:8:31\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":349,"byte_end":363,"line_start":10,"line_end":10,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:10:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":3861,"byte_end":3875,"line_start":147,"line_end":147,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:147:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":4254,"byte_end":4268,"line_start":164,"line_end":164,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(span_locations))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:164:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(span_locations))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":8437,"byte_end":8451,"line_start":323,"line_end":323,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:323:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":8457,"byte_end":8464,"line_start":323,"line_end":323,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:323:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":8890,"byte_end":8904,"line_start":337,"line_end":337,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:337:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":8910,"byte_end":8917,"line_start":337,"line_end":337,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:337:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":9072,"byte_end":9086,"line_start":345,"line_end":345,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:345:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":9092,"byte_end":9099,"line_start":345,"line_end":345,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:345:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":11259,"byte_end":11273,"line_start":408,"line_end":408,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:408:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":11279,"byte_end":11286,"line_start":408,"line_end":408,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:408:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":11545,"byte_end":11559,"line_start":423,"line_end":423,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:423:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs","byte_start":11565,"byte_end":11572,"line_start":423,"line_end":423,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/fallback.rs:423:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-proc-macro2-1.0.72"
## script = '''
## FROM scratch AS cratesio-proc-macro2-1.0.72
## ADD --chmod=0664 --checksum=sha256:a293318316cf6478ec1ad2a21c49390a8d5b5eae9fab736467d93fbc0edc29c5 \
##   https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.72.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-proc-macro2-1.0.72-7c4c35625cab66f6"
## script = '''
## FROM rust-base AS dep-l-proc-macro2-1.0.72-7c4c35625cab66f6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-proc-macro2-1.0.72,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72 \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="proc_macro2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="proc-macro2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/proc-macro2" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.72" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="72" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/proc-macro2-12eb2c4288882a40/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'proc_macro2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' '-C' 'metadata=ca19a715e16069b2' '-C' 'extra-filename=-7c4c35625cab66f6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'unicode_ident=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' '--cfg' 'wrap_proc_macro' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.72/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7c4c35625cab66f6"
## script = """
## FROM scratch AS out-7c4c35625cab66f6
## COPY --from=dep-l-proc-macro2-1.0.72-7c4c35625cab66f6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7c4c35625cab66f6* /"""

FROM scratch AS cratesio-quote-1.0.33
ADD --chmod=0664 --checksum=sha256:5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae \
  https://static.crates.io/crates/quote/quote-1.0.33.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-quote-1.0.33-230bf5113558ae5c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-quote-1.0.33,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="quote" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Quasi-quoting macro quote!(...)" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="quote" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/quote" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.33" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="33" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'quote' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "proc-macro"))' '-C' 'metadata=02009dfd6c8468f9' '-C' 'extra-filename=-230bf5113558ae5c' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-230bf5113558ae5c
COPY --from=dep-l-quote-1.0.33-230bf5113558ae5c /tmp/clis-qcow2-rs_0-1-2/release/deps/*-230bf5113558ae5c* /

## this = "230bf5113558ae5c"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
## ]
## writes = [
##     "deps/quote-230bf5113558ae5c.d",
##     "deps/libquote-230bf5113558ae5c.rmeta",
##     "deps/libquote-230bf5113558ae5c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/quote-230bf5113558ae5c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-quote-1.0.33"
## script = '''
## FROM scratch AS cratesio-quote-1.0.33
## ADD --chmod=0664 --checksum=sha256:5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae \
##   https://static.crates.io/crates/quote/quote-1.0.33.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-quote-1.0.33-230bf5113558ae5c"
## script = '''
## FROM rust-base AS dep-l-quote-1.0.33-230bf5113558ae5c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-quote-1.0.33,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="quote" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Quasi-quoting macro quote!(...)" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="quote" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/quote" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.33" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="33" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'quote' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "proc-macro"))' '-C' 'metadata=02009dfd6c8468f9' '-C' 'extra-filename=-230bf5113558ae5c' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-230bf5113558ae5c"
## script = """
## FROM scratch AS out-230bf5113558ae5c
## COPY --from=dep-l-quote-1.0.33-230bf5113558ae5c /tmp/clis-qcow2-rs_0-1-2/release/deps/*-230bf5113558ae5c* /"""

FROM scratch AS cratesio-syn-2.0.43
ADD --chmod=0664 --checksum=sha256:ee659fb5f3d355364e1f3e5bc10fb82068efbf824a1e9d1c9504244a6469ad53 \
  https://static.crates.io/crates/syn/syn-2.0.43.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-syn-2.0.43-09c08d3ded2362f6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-syn-2.0.43,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="syn" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Parser for Rust source code" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="syn" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/syn" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="2.0.43" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="43" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'syn' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="clone-impls"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="full"' '--cfg' 'feature="parsing"' '--cfg' 'feature="printing"' '--cfg' 'feature="proc-macro"' '--cfg' 'feature="quote"' '--cfg' 'feature="visit-mut"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' '-C' 'metadata=cdb62555c3ee5c31' '-C' 'extra-filename=-09c08d3ded2362f6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta' '--extern' 'unicode_ident=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-09c08d3ded2362f6
COPY --from=dep-l-syn-2.0.43-09c08d3ded2362f6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-09c08d3ded2362f6* /

## this = "09c08d3ded2362f6"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
## ]
## writes = ["deps/syn-09c08d3ded2362f6.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/syn-09c08d3ded2362f6.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":9436,"byte_end":9443,"line_start":253,"line_end":253,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:253:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":11480,"byte_end":11487,"line_start":323,"line_end":323,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:323:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":12732,"byte_end":12739,"line_start":359,"line_end":359,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:359:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":14549,"byte_end":14556,"line_start":414,"line_end":414,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    doc_cfg,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:414:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    doc_cfg,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":14840,"byte_end":14847,"line_start":425,"line_end":425,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:425:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":16135,"byte_end":16142,"line_start":470,"line_end":470,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"printing\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:470:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"printing\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":28480,"byte_end":28487,"line_start":865,"line_end":865,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"proc-macro\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:865:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"proc-macro\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":29290,"byte_end":29297,"line_start":883,"line_end":883,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:883:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m883\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":29968,"byte_end":29975,"line_start":910,"line_end":910,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:910:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs","byte_start":31193,"byte_end":31200,"line_start":950,"line_end":950,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"full\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs:950:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"full\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/group.rs","byte_start":4024,"byte_end":4031,"line_start":145,"line_end":145,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/group.rs:145:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/group.rs","byte_start":6032,"byte_end":6039,"line_start":223,"line_end":223,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/group.rs:223:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/group.rs","byte_start":7481,"byte_end":7488,"line_start":278,"line_end":278,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/group.rs:278:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":17841,"byte_end":17848,"line_start":571,"line_end":571,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:571:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m571\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":18065,"byte_end":18072,"line_start":579,"line_end":579,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:579:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":19511,"byte_end":19518,"line_start":640,"line_end":640,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:640:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":19623,"byte_end":19630,"line_start":644,"line_end":644,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:644:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12410,"byte_end":12417,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":17607,"byte_end":17799,"line_start":566,"line_end":568,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation_structs! {","highlight_start":1,"highlight_end":30},{"text":"    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and destructuring assignment","highlight_start":1,"highlight_end":161},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and d\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12558,"byte_end":12565,"line_start":408,"line_end":408,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":17607,"byte_end":17799,"line_start":566,"line_end":568,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation_structs! {","highlight_start":1,"highlight_end":30},{"text":"    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and destructuring assignment","highlight_start":1,"highlight_end":161},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:408:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and d\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":8223,"byte_end":8230,"line_start":277,"line_end":277,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":21683,"byte_end":23509,"line_start":736,"line_end":789,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":7292,"byte_end":7320,"line_start":247,"line_end":247,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:277:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":8371,"byte_end":8378,"line_start":281,"line_end":281,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":21683,"byte_end":23509,"line_start":736,"line_end":789,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":7292,"byte_end":7320,"line_start":247,"line_end":247,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:281:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":9563,"byte_end":9570,"line_start":315,"line_end":315,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":21683,"byte_end":23509,"line_start":736,"line_end":789,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":7292,"byte_end":7320,"line_start":247,"line_end":247,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:315:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":9869,"byte_end":9876,"line_start":323,"line_end":323,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":21683,"byte_end":23509,"line_start":736,"line_end":789,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":7292,"byte_end":7320,"line_start":247,"line_end":247,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:323:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":14068,"byte_end":14075,"line_start":454,"line_end":454,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:454:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":14374,"byte_end":14381,"line_start":462,"line_end":462,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:462:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12410,"byte_end":12417,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13898,"byte_end":14002,"line_start":449,"line_end":451,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12558,"byte_end":12565,"line_start":408,"line_end":408,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13898,"byte_end":14002,"line_start":449,"line_end":451,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:408:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12410,"byte_end":12417,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13898,"byte_end":14002,"line_start":449,"line_end":451,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12558,"byte_end":12565,"line_start":408,"line_end":408,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13898,"byte_end":14002,"line_start":449,"line_end":451,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:408:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":12410,"byte_end":12417,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13898,"byte_end":14002,"line_start":449,"line_end":451,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":23511,"byte_end":27081,"line_start":791,"line_end":838,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":13756,"byte_end":13787,"line_start":446,"line_end":446,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs","byte_start":11105,"byte_end":11144,"line_start":369,"line_end":369,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-syn-2.0.43"
## script = '''
## FROM scratch AS cratesio-syn-2.0.43
## ADD --chmod=0664 --checksum=sha256:ee659fb5f3d355364e1f3e5bc10fb82068efbf824a1e9d1c9504244a6469ad53 \
##   https://static.crates.io/crates/syn/syn-2.0.43.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-syn-2.0.43-09c08d3ded2362f6"
## script = '''
## FROM rust-base AS dep-l-syn-2.0.43-09c08d3ded2362f6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-syn-2.0.43,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="syn" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Parser for Rust source code" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="syn" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/syn" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="2.0.43" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="43" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'syn' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="clone-impls"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="full"' '--cfg' 'feature="parsing"' '--cfg' 'feature="printing"' '--cfg' 'feature="proc-macro"' '--cfg' 'feature="quote"' '--cfg' 'feature="visit-mut"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' '-C' 'metadata=cdb62555c3ee5c31' '-C' 'extra-filename=-09c08d3ded2362f6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta' '--extern' 'unicode_ident=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.43/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-09c08d3ded2362f6"
## script = """
## FROM scratch AS out-09c08d3ded2362f6
## COPY --from=dep-l-syn-2.0.43-09c08d3ded2362f6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-09c08d3ded2362f6* /"""

FROM scratch AS cratesio-async-recursion-1.0.5
ADD --chmod=0664 --checksum=sha256:5fd55a5ba1179988837d24ab4c7cc8ed6efdeff578ede0416b4225a5fca35bd0 \
  https://static.crates.io/crates/async-recursion/async-recursion-1.0.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-async-recursion-1.0.5-c336562a05f16d22
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-async-recursion-1.0.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="async_recursion" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Robert Usher <266585+dcchut@users.noreply.github.com>" \
        CARGO_PKG_DESCRIPTION="Recursion for async functions" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="async-recursion" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dcchut/async-recursion" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.5" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'async_recursion' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=880cadbd6d89413e' '-C' 'extra-filename=-c336562a05f16d22' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c336562a05f16d22
COPY --from=dep-p-async-recursion-1.0.5-c336562a05f16d22 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-c336562a05f16d22* /

## this = "c336562a05f16d22"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/async_recursion-c336562a05f16d22.d",
##     "deps/libasync_recursion-c336562a05f16d22.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/async_recursion-c336562a05f16d22.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-async-recursion-1.0.5"
## script = '''
## FROM scratch AS cratesio-async-recursion-1.0.5
## ADD --chmod=0664 --checksum=sha256:5fd55a5ba1179988837d24ab4c7cc8ed6efdeff578ede0416b4225a5fca35bd0 \
##   https://static.crates.io/crates/async-recursion/async-recursion-1.0.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-async-recursion-1.0.5-c336562a05f16d22"
## script = '''
## FROM rust-base AS dep-p-async-recursion-1.0.5-c336562a05f16d22
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-async-recursion-1.0.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="async_recursion" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Robert Usher <266585+dcchut@users.noreply.github.com>" \
##         CARGO_PKG_DESCRIPTION="Recursion for async functions" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="async-recursion" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dcchut/async-recursion" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.5" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'async_recursion' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=880cadbd6d89413e' '-C' 'extra-filename=-c336562a05f16d22' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-recursion-1.0.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c336562a05f16d22"
## script = """
## FROM scratch AS out-c336562a05f16d22
## COPY --from=dep-p-async-recursion-1.0.5-c336562a05f16d22 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-c336562a05f16d22* /"""

FROM scratch AS cratesio-async-trait-0.1.76
ADD --chmod=0664 --checksum=sha256:531b97fb4cd3dfdce92c35dedbfdc1f0b9d8091c8ca943d6dae340ef5012d514 \
  https://static.crates.io/crates/async-trait/async-trait-0.1.76.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-async-trait-0.1.76-a5a31ac1f09098f3
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-async-trait-0.1.76,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="async_trait" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Type erasure for async trait methods" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="async-trait" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/async-trait" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.1.76" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="76" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/async-trait-d3e75f73383cb092/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'async_trait' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=01a728f04462b0c4' '-C' 'extra-filename=-a5a31ac1f09098f3' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a5a31ac1f09098f3
COPY --from=dep-p-async-trait-0.1.76-a5a31ac1f09098f3 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a5a31ac1f09098f3* /

## this = "a5a31ac1f09098f3"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/async_trait-a5a31ac1f09098f3.d",
##     "deps/libasync_trait-a5a31ac1f09098f3.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/async_trait-a5a31ac1f09098f3.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_span_mixed_site`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/expand.rs","byte_start":15790,"byte_end":15808,"line_start":439,"line_end":439,"column_start":15,"column_end":33,"is_primary":true,"text":[{"text":"    #[cfg(not(no_span_mixed_site))]","highlight_start":15,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_span_mixed_site)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_span_mixed_site)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_span_mixed_site`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/expand.rs:439:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(no_span_mixed_site))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_span_mixed_site)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_span_mixed_site)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `self_span_hack`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs","byte_start":2274,"byte_end":2288,"line_start":84,"line_end":84,"column_start":20,"column_end":34,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(self_span_hack), allow(clippy::unused_self))]","highlight_start":20,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(self_span_hack)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(self_span_hack)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `self_span_hack`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs:84:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(self_span_hack), allow(clippy::unused_self))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(self_span_hack)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(self_span_hack)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `self_span_hack`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs","byte_start":2527,"byte_end":2541,"line_start":89,"line_end":89,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(self_span_hack)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(self_span_hack)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(self_span_hack)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `self_span_hack`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs:89:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(self_span_hack)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(self_span_hack)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(self_span_hack)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs","byte_start":2212,"byte_end":2223,"line_start":81,"line_end":81,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"pub struct ReplaceSelf(pub Span);","highlight_start":12,"highlight_end":23}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs","byte_start":2224,"byte_end":2232,"line_start":81,"line_end":81,"column_start":24,"column_end":32,"is_primary":true,"text":[{"text":"pub struct ReplaceSelf(pub Span);","highlight_start":24,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing this field","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/receiver.rs:81:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ReplaceSelf(pub Span);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-async-trait-0.1.76"
## script = '''
## FROM scratch AS cratesio-async-trait-0.1.76
## ADD --chmod=0664 --checksum=sha256:531b97fb4cd3dfdce92c35dedbfdc1f0b9d8091c8ca943d6dae340ef5012d514 \
##   https://static.crates.io/crates/async-trait/async-trait-0.1.76.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-async-trait-0.1.76-a5a31ac1f09098f3"
## script = '''
## FROM rust-base AS dep-p-async-trait-0.1.76-a5a31ac1f09098f3
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-async-trait-0.1.76,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="async_trait" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Type erasure for async trait methods" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="async-trait" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/async-trait" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.1.76" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="76" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/async-trait-d3e75f73383cb092/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'async_trait' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=01a728f04462b0c4' '-C' 'extra-filename=-a5a31ac1f09098f3' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/async-trait-0.1.76/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a5a31ac1f09098f3"
## script = """
## FROM scratch AS out-a5a31ac1f09098f3
## COPY --from=dep-p-async-trait-0.1.76-a5a31ac1f09098f3 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a5a31ac1f09098f3* /"""

FROM scratch AS cratesio-serde_derive-1.0.193
ADD --chmod=0664 --checksum=sha256:43576ca501357b9b071ac53cdc7da8ef0cbd9493d8df094cd821777ea6e894d3 \
  https://static.crates.io/crates/serde_derive/serde_derive-1.0.193.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-serde_derive-1.0.193-ca901d6d165172fe
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-serde_derive-1.0.193,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde_derive" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Macros 1.1 implementation of #[derive(Serialize, Deserialize)]" \
        CARGO_PKG_HOMEPAGE="https://serde.rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde_derive" \
        CARGO_PKG_README="crates-io.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.193" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="193" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde_derive' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "deserialize_in_place"))' '-C' 'metadata=02ba64ae322c5d3f' '-C' 'extra-filename=-ca901d6d165172fe' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ca901d6d165172fe
COPY --from=dep-p-serde_derive-1.0.193-ca901d6d165172fe /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ca901d6d165172fe* /

## this = "ca901d6d165172fe"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/serde_derive-ca901d6d165172fe.d",
##     "deps/libserde_derive-ca901d6d165172fe.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/serde_derive-ca901d6d165172fe.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/lib.rs","byte_start":2055,"byte_end":2065,"line_start":63,"line_end":63,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"#![cfg_attr(all(test, exhaustive), feature(non_exhaustive_omitted_patterns_lint))]","highlight_start":23,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/lib.rs:63:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(all(test, exhaustive), feature(non_exhaustive_omitted_patterns_lint))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/attr.rs","byte_start":67993,"byte_end":68003,"line_start":1854,"line_end":1854,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/attr.rs:1854:30\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs","byte_start":5273,"byte_end":5283,"line_start":150,"line_end":150,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs:150:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs","byte_start":6705,"byte_end":6715,"line_start":187,"line_end":187,"column_start":46,"column_end":56,"is_primary":true,"text":[{"text":"                        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":46,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs:187:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs","byte_start":7639,"byte_end":7649,"line_start":212,"line_end":212,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs:212:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs","byte_start":8724,"byte_end":8734,"line_start":238,"line_end":238,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"                    #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/internals/receiver.rs:238:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/bound.rs","byte_start":6430,"byte_end":6440,"line_start":184,"line_end":184,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/bound.rs:184:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/bound.rs","byte_start":7511,"byte_end":7521,"line_start":206,"line_end":206,"column_start":43,"column_end":53,"is_primary":true,"text":[{"text":"                                all(test, exhaustive),","highlight_start":43,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/bound.rs:206:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   all(test, exhaustive),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/bound.rs","byte_start":8604,"byte_end":8614,"line_start":233,"line_end":233,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/bound.rs:233:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"9 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 9 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde_derive-1.0.193"
## script = '''
## FROM scratch AS cratesio-serde_derive-1.0.193
## ADD --chmod=0664 --checksum=sha256:43576ca501357b9b071ac53cdc7da8ef0cbd9493d8df094cd821777ea6e894d3 \
##   https://static.crates.io/crates/serde_derive/serde_derive-1.0.193.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-serde_derive-1.0.193-ca901d6d165172fe"
## script = '''
## FROM rust-base AS dep-p-serde_derive-1.0.193-ca901d6d165172fe
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-serde_derive-1.0.193,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde_derive" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Macros 1.1 implementation of #[derive(Serialize, Deserialize)]" \
##         CARGO_PKG_HOMEPAGE="https://serde.rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde_derive" \
##         CARGO_PKG_README="crates-io.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.193" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="193" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde_derive' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "deserialize_in_place"))' '-C' 'metadata=02ba64ae322c5d3f' '-C' 'extra-filename=-ca901d6d165172fe' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.193/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ca901d6d165172fe"
## script = """
## FROM scratch AS out-ca901d6d165172fe
## COPY --from=dep-p-serde_derive-1.0.193-ca901d6d165172fe /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ca901d6d165172fe* /"""

FROM scratch AS cratesio-serde-1.0.193
ADD --chmod=0664 --checksum=sha256:25dd9975e68d0cb5aa1120c288333fc98731bd1dd12f561e468ea4728c042b89 \
  https://static.crates.io/crates/serde/serde-1.0.193.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-serde-1.0.193-dc85bb26f94c68ed
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-serde-1.0.193,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193 \
  --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A generic serialization/deserialization framework" \
        CARGO_PKG_HOMEPAGE="https://serde.rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde" \
        CARGO_PKG_README="crates-io.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.193" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="193" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/serde-9af98ab12f7c086a/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="serde_derive"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' '-C' 'metadata=8a35a1245e337ca1' '-C' 'extra-filename=-dc85bb26f94c68ed' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'serde_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-dc85bb26f94c68ed
COPY --from=dep-l-serde-1.0.193-dc85bb26f94c68ed /tmp/clis-qcow2-rs_0-1-2/release/deps/*-dc85bb26f94c68ed* /

## this = "dc85bb26f94c68ed"
## deps = [
##     "ca901d6d165172fe",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "serde_derive-ca901d6d165172fe",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## writes = ["deps/serde-dc85bb26f94c68ed.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/serde-dc85bb26f94c68ed.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":5356,"byte_end":5363,"line_start":102,"line_end":102,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:102:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":13437,"byte_end":13444,"line_start":329,"line_end":329,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"derive\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:329:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"derive\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_serde_derive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":13540,"byte_end":13555,"line_start":332,"line_end":332,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"#[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]","highlight_start":15,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_serde_derive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_serde_derive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_serde_derive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:332:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_serde_derive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_serde_derive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":9960,"byte_end":9972,"line_start":229,"line_end":229,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"    #[cfg(all(not(no_core_cstr), not(feature = \"std\")))]","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:229:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(not(no_core_cstr), not(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":10109,"byte_end":10121,"line_start":234,"line_end":234,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"    #[cfg(all(not(no_core_cstr), feature = \"alloc\", not(feature = \"std\")))]","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:234:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(not(no_core_cstr), feature = \"alloc\", not(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":10840,"byte_end":10860,"line_start":257,"line_end":257,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":10840,"byte_end":10860,"line_start":257,"line_end":257,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:257:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":10866,"byte_end":10879,"line_start":257,"line_end":257,"column_start":58,"column_end":71,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]","highlight_start":58,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:257:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11083,"byte_end":11103,"line_start":262,"line_end":262,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11083,"byte_end":11103,"line_start":262,"line_end":262,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:262:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic64`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11109,"byte_end":11124,"line_start":262,"line_end":262,"column_start":58,"column_end":73,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]","highlight_start":58,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:262:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11220,"byte_end":11240,"line_start":265,"line_end":265,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic)))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11220,"byte_end":11240,"line_start":265,"line_end":265,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic)))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:265:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11321,"byte_end":11341,"line_start":267,"line_end":267,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"8\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11321,"byte_end":11341,"line_start":267,"line_end":267,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"8\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:267:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"8\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11471,"byte_end":11491,"line_start":269,"line_end":269,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"16\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11471,"byte_end":11491,"line_start":269,"line_end":269,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"16\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:269:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"16\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11612,"byte_end":11632,"line_start":271,"line_end":271,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"32\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11612,"byte_end":11632,"line_start":271,"line_end":271,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"32\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:271:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"32\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11753,"byte_end":11773,"line_start":273,"line_end":273,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"64\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11753,"byte_end":11773,"line_start":273,"line_end":273,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"64\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:273:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"64\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11894,"byte_end":11914,"line_start":275,"line_end":275,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"ptr\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs","byte_start":11894,"byte_end":11914,"line_start":275,"line_end":275,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"ptr\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs:275:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"ptr\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":2865,"byte_end":2872,"line_start":115,"line_end":115,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:115:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":14802,"byte_end":14809,"line_start":568,"line_end":568,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:568:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":15247,"byte_end":15254,"line_start":585,"line_end":585,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:585:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":17530,"byte_end":17537,"line_start":673,"line_end":673,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:673:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":17993,"byte_end":18000,"line_start":690,"line_end":690,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:690:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":26410,"byte_end":26417,"line_start":1009,"line_end":1009,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:1009:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1009\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":26831,"byte_end":26838,"line_start":1023,"line_end":1023,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:1023:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1023\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":27244,"byte_end":27251,"line_start":1037,"line_end":1037,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:1037:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1037\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":37964,"byte_end":37971,"line_start":1424,"line_end":1424,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:1424:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs","byte_start":38421,"byte_end":38428,"line_start":1439,"line_end":1439,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/value.rs:1439:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":16964,"byte_end":16971,"line_start":600,"line_end":600,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:600:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":19230,"byte_end":19242,"line_start":689,"line_end":689,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:689:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":19326,"byte_end":19338,"line_start":692,"line_end":692,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:692:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":20609,"byte_end":20621,"line_start":743,"line_end":743,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:743:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":20657,"byte_end":20664,"line_start":744,"line_end":744,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:744:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":29412,"byte_end":29419,"line_start":1041,"line_end":1041,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1041:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1041\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":48690,"byte_end":48697,"line_start":1595,"line_end":1595,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1595:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":50178,"byte_end":50185,"line_start":1649,"line_end":1649,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1649:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":51938,"byte_end":51945,"line_start":1713,"line_end":1713,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1713:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":53253,"byte_end":53260,"line_start":1768,"line_end":1768,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1768:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":55398,"byte_end":55405,"line_start":1842,"line_end":1842,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", any(unix, windows)))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1842:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1842\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"std\", any(unix, windows)))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":56600,"byte_end":56607,"line_start":1879,"line_end":1879,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1879:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1879\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":66162,"byte_end":66169,"line_start":2169,"line_end":2169,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:2169:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":93077,"byte_end":93090,"line_start":3000,"line_end":3000,"column_start":32,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic)))]","highlight_start":32,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:3000:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3000\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":93700,"byte_end":93713,"line_start":3018,"line_end":3018,"column_start":32,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic)))]","highlight_start":32,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:3018:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3018\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic64`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":93940,"byte_end":93955,"line_start":3031,"line_end":3031,"column_start":32,"column_end":47,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic64)))]","highlight_start":32,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:3031:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3031\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic64)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":8461,"byte_end":8482,"line_start":301,"line_end":301,"column_start":27,"column_end":48,"is_primary":true,"text":[{"text":"    i8, NonZeroI8 cfg(not(no_num_nonzero_signed)), deserialize_i8","highlight_start":27,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:301:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i8, NonZeroI8 cfg(not(no_num_nonzero_signed)), deserialize_i8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":8718,"byte_end":8739,"line_start":308,"line_end":308,"column_start":29,"column_end":50,"is_primary":true,"text":[{"text":"    i16, NonZeroI16 cfg(not(no_num_nonzero_signed)), deserialize_i16","highlight_start":29,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:308:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i16, NonZeroI16 cfg(not(no_num_nonzero_signed)), deserialize_i16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":8995,"byte_end":9016,"line_start":316,"line_end":316,"column_start":29,"column_end":50,"is_primary":true,"text":[{"text":"    i32, NonZeroI32 cfg(not(no_num_nonzero_signed)), deserialize_i32","highlight_start":29,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:316:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i32, NonZeroI32 cfg(not(no_num_nonzero_signed)), deserialize_i32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":9272,"byte_end":9293,"line_start":324,"line_end":324,"column_start":29,"column_end":50,"is_primary":true,"text":[{"text":"    i64, NonZeroI64 cfg(not(no_num_nonzero_signed)), deserialize_i64","highlight_start":29,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:324:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i64, NonZeroI64 cfg(not(no_num_nonzero_signed)), deserialize_i64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":9535,"byte_end":9556,"line_start":331,"line_end":331,"column_start":33,"column_end":54,"is_primary":true,"text":[{"text":"    isize, NonZeroIsize cfg(not(no_num_nonzero_signed)), deserialize_i64","highlight_start":33,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:331:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    isize, NonZeroIsize cfg(not(no_num_nonzero_signed)), deserialize_i64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":12787,"byte_end":12808,"line_start":433,"line_end":433,"column_start":31,"column_end":52,"is_primary":true,"text":[{"text":"    i128, NonZeroI128 cfg(not(no_num_nonzero_signed)), deserialize_i128","highlight_start":31,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:433:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i128, NonZeroI128 cfg(not(no_num_nonzero_signed)), deserialize_i128\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":21450,"byte_end":21462,"line_start":772,"line_end":772,"column_start":40,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":40,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:772:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m772\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":21502,"byte_end":21509,"line_start":773,"line_end":773,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:773:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":27887,"byte_end":27894,"line_start":985,"line_end":985,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:985:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m985\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":28206,"byte_end":28213,"line_start":996,"line_end":996,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:996:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":28465,"byte_end":28472,"line_start":1007,"line_end":1007,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1007:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":28701,"byte_end":28708,"line_start":1018,"line_end":1018,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1018:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1018\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":29040,"byte_end":29047,"line_start":1029,"line_end":1029,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1029:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1029\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":43784,"byte_end":43791,"line_start":1445,"line_end":1445,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1445:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"std\", feature = \"alloc\"))))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":43958,"byte_end":43965,"line_start":1453,"line_end":1453,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1453:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":49312,"byte_end":49319,"line_start":1616,"line_end":1616,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1616:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":49449,"byte_end":49456,"line_start":1622,"line_end":1622,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1622:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1622\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs","byte_start":50824,"byte_end":50831,"line_start":1670,"line_end":1670,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/de/impls.rs:1670:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde-1.0.193"
## script = '''
## FROM scratch AS cratesio-serde-1.0.193
## ADD --chmod=0664 --checksum=sha256:25dd9975e68d0cb5aa1120c288333fc98731bd1dd12f561e468ea4728c042b89 \
##   https://static.crates.io/crates/serde/serde-1.0.193.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-serde-1.0.193-dc85bb26f94c68ed"
## script = '''
## FROM rust-base AS dep-l-serde-1.0.193-dc85bb26f94c68ed
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-serde-1.0.193,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193 \
##   --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A generic serialization/deserialization framework" \
##         CARGO_PKG_HOMEPAGE="https://serde.rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde" \
##         CARGO_PKG_README="crates-io.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.193" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="193" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/serde-9af98ab12f7c086a/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="serde_derive"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' '-C' 'metadata=8a35a1245e337ca1' '-C' 'extra-filename=-dc85bb26f94c68ed' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'serde_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.193/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-dc85bb26f94c68ed"
## script = """
## FROM scratch AS out-dc85bb26f94c68ed
## COPY --from=dep-l-serde-1.0.193-dc85bb26f94c68ed /tmp/clis-qcow2-rs_0-1-2/release/deps/*-dc85bb26f94c68ed* /"""

FROM scratch AS cratesio-bincode-1.3.3
ADD --chmod=0664 --checksum=sha256:b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad \
  https://static.crates.io/crates/bincode/bincode-1.3.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bincode-1.3.3-29ccad64725feb59
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-bincode-1.3.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3 \
  --mount=from=out-dc85bb26f94c68ed,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta,source=/libserde-dc85bb26f94c68ed.rmeta \
  --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bincode" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/Cargo.toml" \
        CARGO_PKG_AUTHORS="Ty Overby <ty@pre-alpha.com>:Francesco Mazzoli <f@mazzo.li>:David Tolnay <dtolnay@gmail.com>:Zoey Riordan <zoey@dos.cafe>" \
        CARGO_PKG_DESCRIPTION="A binary serialization / deserialization strategy that uses Serde for transforming structs into bytes and vice versa!" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bincode" \
        CARGO_PKG_README="./readme.md" \
        CARGO_PKG_REPOSITORY="https://github.com/servo/bincode" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.3.3" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bincode' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("i128"))' '-C' 'metadata=769d0a8004507d63' '-C' 'extra-filename=-29ccad64725feb59' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'serde=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-29ccad64725feb59
COPY --from=dep-l-bincode-1.3.3-29ccad64725feb59 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-29ccad64725feb59* /

## this = "29ccad64725feb59"
## deps = [
##     "dc85bb26f94c68ed",
##     "ca901d6d165172fe",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "serde-dc85bb26f94c68ed",
##     "serde_derive-ca901d6d165172fe",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## writes = [
##     "deps/bincode-29ccad64725feb59.d",
##     "deps/libbincode-29ccad64725feb59.rmeta",
##     "deps/libbincode-29ccad64725feb59.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/bincode-29ccad64725feb59.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"multiple associated functions are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":3167,"byte_end":3176,"line_start":130,"line_end":130,"column_start":11,"column_end":20,"is_primary":false,"text":[{"text":"pub trait ByteOrder: Clone + Copy {","highlight_start":11,"highlight_end":20}],"label":"associated functions in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":3468,"byte_end":3476,"line_start":144,"line_end":144,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn read_i16(buf: &[u8]) -> i16 {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":3566,"byte_end":3574,"line_start":149,"line_end":149,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn read_i32(buf: &[u8]) -> i32 {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":3664,"byte_end":3672,"line_start":154,"line_end":154,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn read_i64(buf: &[u8]) -> i64 {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":4030,"byte_end":4039,"line_start":169,"line_end":169,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn write_i16(buf: &mut [u8], n: i16) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":4138,"byte_end":4147,"line_start":174,"line_end":174,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn write_i32(buf: &mut [u8], n: i32) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":4246,"byte_end":4255,"line_start":179,"line_end":179,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn write_i64(buf: &mut [u8], n: i64) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":4812,"byte_end":4821,"line_start":200,"line_end":200,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"        fn read_i128(buf: &[u8]) -> i128 {","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":4930,"byte_end":4940,"line_start":205,"line_end":205,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"        fn write_i128(buf: &mut [u8], n: i128) {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: multiple associated functions are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs:144:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait ByteOrder: Clone + Copy {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated functions in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i16(buf: &[u8]) -> i16 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i32(buf: &[u8]) -> i32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i64(buf: &[u8]) -> i64 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i16(buf: &mut [u8], n: i16) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i32(buf: &mut [u8], n: i32) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i64(buf: &mut [u8], n: i64) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn read_i128(buf: &[u8]) -> i128 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write_i128(buf: &mut [u8], n: i128) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `read_i8`, `read_i16`, `read_i32`, `read_i64`, and `read_i128` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":5048,"byte_end":5060,"line_start":211,"line_end":211,"column_start":11,"column_end":23,"is_primary":false,"text":[{"text":"pub trait ReadBytesExt: io::Read {","highlight_start":11,"highlight_end":23}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":5256,"byte_end":5263,"line_start":220,"line_end":220,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn read_i8(&mut self) -> Result<i8> {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":5609,"byte_end":5617,"line_start":234,"line_end":234,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn read_i16<T: ByteOrder>(&mut self) -> Result<i16> {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":5983,"byte_end":5991,"line_start":248,"line_end":248,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn read_i32<T: ByteOrder>(&mut self) -> Result<i32> {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":6357,"byte_end":6365,"line_start":262,"line_end":262,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn read_i64<T: ByteOrder>(&mut self) -> Result<i64> {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":7169,"byte_end":7178,"line_start":291,"line_end":291,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"        fn read_i128<T: ByteOrder>(&mut self) -> Result<i128> {","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `read_i8`, `read_i16`, `read_i32`, `read_i64`, and `read_i128` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs:220:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait ReadBytesExt: io::Read {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i8(&mut self) -> Result<i8> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i16<T: ByteOrder>(&mut self) -> Result<i16> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i32<T: ByteOrder>(&mut self) -> Result<i32> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read_i64<T: ByteOrder>(&mut self) -> Result<i64> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn read_i128<T: ByteOrder>(&mut self) -> Result<i128> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `write_i8`, `write_i16`, `write_i32`, `write_i64`, and `write_i128` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":7426,"byte_end":7439,"line_start":301,"line_end":301,"column_start":11,"column_end":24,"is_primary":false,"text":[{"text":"pub trait WriteBytesExt: io::Write {","highlight_start":11,"highlight_end":24}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":7581,"byte_end":7589,"line_start":308,"line_end":308,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn write_i8(&mut self, n: i8) -> Result<()> {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":7880,"byte_end":7889,"line_start":320,"line_end":320,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn write_i16<T: ByteOrder>(&mut self, n: i16) -> Result<()> {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":8256,"byte_end":8265,"line_start":334,"line_end":334,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn write_i32<T: ByteOrder>(&mut self, n: i32) -> Result<()> {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":8632,"byte_end":8641,"line_start":348,"line_end":348,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn write_i64<T: ByteOrder>(&mut self, n: i64) -> Result<()> {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs","byte_start":9448,"byte_end":9458,"line_start":377,"line_end":377,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"        fn write_i128<T: ByteOrder>(&mut self, n: i128) -> Result<()> {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `write_i8`, `write_i16`, `write_i32`, `write_i64`, and `write_i128` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/byteorder.rs:308:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait WriteBytesExt: io::Write {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i8(&mut self, n: i8) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i16<T: ByteOrder>(&mut self, n: i16) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i32<T: ByteOrder>(&mut self, n: i32) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_i64<T: ByteOrder>(&mut self, n: i64) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write_i128<T: ByteOrder>(&mut self, n: i128) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"non-local `impl` definition, `impl` blocks should be written at the same level as their item","code":{"code":"non_local_definitions","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/de/mod.rs","byte_start":8346,"byte_end":8358,"line_start":272,"line_end":272,"column_start":72,"column_end":84,"is_primary":false,"text":[{"text":"        impl<'de, 'a, R: 'a, O> serde::de::EnumAccess<'de> for &'a mut Deserializer<R, O>","highlight_start":72,"highlight_end":84}],"label":"`Deserializer` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/de/mod.rs","byte_start":8307,"byte_end":8328,"line_start":272,"line_end":272,"column_start":33,"column_end":54,"is_primary":false,"text":[{"text":"        impl<'de, 'a, R: 'a, O> serde::de::EnumAccess<'de> for &'a mut Deserializer<R, O>","highlight_start":33,"highlight_end":54}],"label":"`EnumAccess` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/de/mod.rs","byte_start":8057,"byte_end":8266,"line_start":263,"line_end":270,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn deserialize_enum<V>(","highlight_start":5,"highlight_end":28},{"text":"        self,","highlight_start":1,"highlight_end":14},{"text":"        _enum: &'static str,","highlight_start":1,"highlight_end":29},{"text":"        _variants: &'static [&'static str],","highlight_start":1,"highlight_end":44},{"text":"        visitor: V,","highlight_start":1,"highlight_end":20},{"text":"    ) -> Result<V::Value>","highlight_start":1,"highlight_end":26},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        V: serde::de::Visitor<'de>,","highlight_start":1,"highlight_end":36}],"label":"move the `impl` block outside of this method `deserialize_enum`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/de/mod.rs","byte_start":8283,"byte_end":8364,"line_start":272,"line_end":272,"column_start":9,"column_end":90,"is_primary":true,"text":[{"text":"        impl<'de, 'a, R: 'a, O> serde::de::EnumAccess<'de> for &'a mut Deserializer<R, O>","highlight_start":9,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(non_local_definitions)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: non-local `impl` definition, `impl` blocks should be written at the same level as their item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/de/mod.rs:272:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn deserialize_enum<V>(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _enum: &'static str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _variants: &'static [&'static str],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        V: serde::de::Visitor<'de>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove the `impl` block outside of this method `deserialize_enum`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        impl<'de, 'a, R: 'a, O> serde::de::EnumAccess<'de> for &'a mut Deserializer<R, O>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Deserializer` is not local\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`EnumAccess` is not local\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_local_definitions)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bincode-1.3.3"
## script = '''
## FROM scratch AS cratesio-bincode-1.3.3
## ADD --chmod=0664 --checksum=sha256:b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad \
##   https://static.crates.io/crates/bincode/bincode-1.3.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bincode-1.3.3-29ccad64725feb59"
## script = '''
## FROM rust-base AS dep-l-bincode-1.3.3-29ccad64725feb59
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-bincode-1.3.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3 \
##   --mount=from=out-dc85bb26f94c68ed,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta,source=/libserde-dc85bb26f94c68ed.rmeta \
##   --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bincode" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Ty Overby <ty@pre-alpha.com>:Francesco Mazzoli <f@mazzo.li>:David Tolnay <dtolnay@gmail.com>:Zoey Riordan <zoey@dos.cafe>" \
##         CARGO_PKG_DESCRIPTION="A binary serialization / deserialization strategy that uses Serde for transforming structs into bytes and vice versa!" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bincode" \
##         CARGO_PKG_README="./readme.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/bincode" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.3.3" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bincode' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("i128"))' '-C' 'metadata=769d0a8004507d63' '-C' 'extra-filename=-29ccad64725feb59' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'serde=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bincode-1.3.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-29ccad64725feb59"
## script = """
## FROM scratch AS out-29ccad64725feb59
## COPY --from=dep-l-bincode-1.3.3-29ccad64725feb59 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-29ccad64725feb59* /"""

FROM scratch AS cratesio-byteorder-1.5.0
ADD --chmod=0664 --checksum=sha256:1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b \
  https://static.crates.io/crates/byteorder/byteorder-1.5.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-byteorder-1.5.0-a63c22cfa59c094d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-byteorder-1.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="byteorder" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Library for reading/writing numbers in big-endian and little-endian." \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/byteorder" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="byteorder" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/byteorder" \
        CARGO_PKG_RUST_VERSION="1.60" \
        CARGO_PKG_VERSION="1.5.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'byteorder' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "i128", "std"))' '-C' 'metadata=887b4a232103aafe' '-C' 'extra-filename=-a63c22cfa59c094d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a63c22cfa59c094d
COPY --from=dep-l-byteorder-1.5.0-a63c22cfa59c094d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a63c22cfa59c094d* /

## this = "a63c22cfa59c094d"
## writes = [
##     "deps/byteorder-a63c22cfa59c094d.d",
##     "deps/libbyteorder-a63c22cfa59c094d.rmeta",
##     "deps/libbyteorder-a63c22cfa59c094d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/byteorder-a63c22cfa59c094d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-byteorder-1.5.0"
## script = '''
## FROM scratch AS cratesio-byteorder-1.5.0
## ADD --chmod=0664 --checksum=sha256:1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b \
##   https://static.crates.io/crates/byteorder/byteorder-1.5.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-byteorder-1.5.0-a63c22cfa59c094d"
## script = '''
## FROM rust-base AS dep-l-byteorder-1.5.0-a63c22cfa59c094d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-byteorder-1.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="byteorder" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Library for reading/writing numbers in big-endian and little-endian." \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/byteorder" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="byteorder" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/byteorder" \
##         CARGO_PKG_RUST_VERSION="1.60" \
##         CARGO_PKG_VERSION="1.5.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'byteorder' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "i128", "std"))' '-C' 'metadata=887b4a232103aafe' '-C' 'extra-filename=-a63c22cfa59c094d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/byteorder-1.5.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a63c22cfa59c094d"
## script = """
## FROM scratch AS out-a63c22cfa59c094d
## COPY --from=dep-l-byteorder-1.5.0-a63c22cfa59c094d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a63c22cfa59c094d* /"""

FROM scratch AS cratesio-anstyle-1.0.4
ADD --chmod=0664 --checksum=sha256:7079075b41f533b8c61d2a4d073c4676e1f8b249ff94a393b0595db304e0dd87 \
  https://static.crates.io/crates/anstyle/anstyle-1.0.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-anstyle-1.0.4-d0740faea4ed398d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-anstyle-1.0.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="anstyle" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="ANSI text styling" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="anstyle" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="1.0.4" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'anstyle' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std"))' '-C' 'metadata=8131aca6fd6a64dc' '-C' 'extra-filename=-d0740faea4ed398d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d0740faea4ed398d
COPY --from=dep-l-anstyle-1.0.4-d0740faea4ed398d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d0740faea4ed398d* /

## this = "d0740faea4ed398d"
## writes = [
##     "deps/anstyle-d0740faea4ed398d.d",
##     "deps/libanstyle-d0740faea4ed398d.rmeta",
##     "deps/libanstyle-d0740faea4ed398d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/anstyle-d0740faea4ed398d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-anstyle-1.0.4"
## script = '''
## FROM scratch AS cratesio-anstyle-1.0.4
## ADD --chmod=0664 --checksum=sha256:7079075b41f533b8c61d2a4d073c4676e1f8b249ff94a393b0595db304e0dd87 \
##   https://static.crates.io/crates/anstyle/anstyle-1.0.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-anstyle-1.0.4-d0740faea4ed398d"
## script = '''
## FROM rust-base AS dep-l-anstyle-1.0.4-d0740faea4ed398d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-anstyle-1.0.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="anstyle" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="ANSI text styling" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="anstyle" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="1.0.4" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'anstyle' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std"))' '-C' 'metadata=8131aca6fd6a64dc' '-C' 'extra-filename=-d0740faea4ed398d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-1.0.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d0740faea4ed398d"
## script = """
## FROM scratch AS out-d0740faea4ed398d
## COPY --from=dep-l-anstyle-1.0.4-d0740faea4ed398d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d0740faea4ed398d* /"""

FROM scratch AS cratesio-utf8parse-0.2.1
ADD --chmod=0664 --checksum=sha256:711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a \
  https://static.crates.io/crates/utf8parse/utf8parse-0.2.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-utf8parse-0.2.1-522ff71b25340e24
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-utf8parse-0.2.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="utf8parse" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Joe Wilm <joe@jwilm.com>:Christian Duerr <contact@christianduerr.com>" \
        CARGO_PKG_DESCRIPTION="Table-driven UTF-8 parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="utf8parse" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/alacritty/vte" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'utf8parse' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly"))' '-C' 'metadata=ab4254b2d95b364f' '-C' 'extra-filename=-522ff71b25340e24' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-522ff71b25340e24
COPY --from=dep-l-utf8parse-0.2.1-522ff71b25340e24 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-522ff71b25340e24* /

## this = "522ff71b25340e24"
## writes = [
##     "deps/utf8parse-522ff71b25340e24.d",
##     "deps/libutf8parse-522ff71b25340e24.rmeta",
##     "deps/libutf8parse-522ff71b25340e24.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/utf8parse-522ff71b25340e24.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-utf8parse-0.2.1"
## script = '''
## FROM scratch AS cratesio-utf8parse-0.2.1
## ADD --chmod=0664 --checksum=sha256:711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a \
##   https://static.crates.io/crates/utf8parse/utf8parse-0.2.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-utf8parse-0.2.1-522ff71b25340e24"
## script = '''
## FROM rust-base AS dep-l-utf8parse-0.2.1-522ff71b25340e24
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-utf8parse-0.2.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="utf8parse" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Joe Wilm <joe@jwilm.com>:Christian Duerr <contact@christianduerr.com>" \
##         CARGO_PKG_DESCRIPTION="Table-driven UTF-8 parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="utf8parse" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/alacritty/vte" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'utf8parse' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly"))' '-C' 'metadata=ab4254b2d95b364f' '-C' 'extra-filename=-522ff71b25340e24' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/utf8parse-0.2.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-522ff71b25340e24"
## script = """
## FROM scratch AS out-522ff71b25340e24
## COPY --from=dep-l-utf8parse-0.2.1-522ff71b25340e24 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-522ff71b25340e24* /"""

FROM scratch AS cratesio-anstyle-parse-0.2.3
ADD --chmod=0664 --checksum=sha256:c75ac65da39e5fe5ab759307499ddad880d724eed2f6ce5b5e8a26f4f387928c \
  https://static.crates.io/crates/anstyle-parse/anstyle-parse-0.2.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-anstyle-parse-0.2.3-a4729bcf670c741e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-anstyle-parse-0.2.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3 \
  --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="anstyle_parse" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Parse ANSI Style Escapes" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="anstyle-parse" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="0.2.3" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'anstyle_parse' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="utf8"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("core", "default", "utf8"))' '-C' 'metadata=99be258c47988f40' '-C' 'extra-filename=-a4729bcf670c741e' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'utf8parse=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a4729bcf670c741e
COPY --from=dep-l-anstyle-parse-0.2.3-a4729bcf670c741e /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a4729bcf670c741e* /

## this = "a4729bcf670c741e"
## deps = ["522ff71b25340e24"]
## short_externs = ["utf8parse-522ff71b25340e24"]
## writes = [
##     "deps/anstyle_parse-a4729bcf670c741e.d",
##     "deps/libanstyle_parse-a4729bcf670c741e.rmeta",
##     "deps/libanstyle_parse-a4729bcf670c741e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/anstyle_parse-a4729bcf670c741e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-anstyle-parse-0.2.3"
## script = '''
## FROM scratch AS cratesio-anstyle-parse-0.2.3
## ADD --chmod=0664 --checksum=sha256:c75ac65da39e5fe5ab759307499ddad880d724eed2f6ce5b5e8a26f4f387928c \
##   https://static.crates.io/crates/anstyle-parse/anstyle-parse-0.2.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-anstyle-parse-0.2.3-a4729bcf670c741e"
## script = '''
## FROM rust-base AS dep-l-anstyle-parse-0.2.3-a4729bcf670c741e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-anstyle-parse-0.2.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3 \
##   --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="anstyle_parse" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Parse ANSI Style Escapes" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="anstyle-parse" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="0.2.3" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'anstyle_parse' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="utf8"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("core", "default", "utf8"))' '-C' 'metadata=99be258c47988f40' '-C' 'extra-filename=-a4729bcf670c741e' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'utf8parse=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-parse-0.2.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a4729bcf670c741e"
## script = """
## FROM scratch AS out-a4729bcf670c741e
## COPY --from=dep-l-anstyle-parse-0.2.3-a4729bcf670c741e /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a4729bcf670c741e* /"""

FROM scratch AS cratesio-anstyle-query-1.0.2
ADD --chmod=0664 --checksum=sha256:e28923312444cdd728e4738b3f9c9cac739500909bb3d3c94b43551b16517648 \
  https://static.crates.io/crates/anstyle-query/anstyle-query-1.0.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-anstyle-query-1.0.2-fcc94b35d76d0926
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-anstyle-query-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="anstyle_query" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Look up colored console capabilities" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="anstyle-query" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="1.0.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'anstyle_query' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=b0bc2c35661a2aa8' '-C' 'extra-filename=-fcc94b35d76d0926' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fcc94b35d76d0926
COPY --from=dep-l-anstyle-query-1.0.2-fcc94b35d76d0926 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fcc94b35d76d0926* /

## this = "fcc94b35d76d0926"
## writes = [
##     "deps/anstyle_query-fcc94b35d76d0926.d",
##     "deps/libanstyle_query-fcc94b35d76d0926.rmeta",
##     "deps/libanstyle_query-fcc94b35d76d0926.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/anstyle_query-fcc94b35d76d0926.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-anstyle-query-1.0.2"
## script = '''
## FROM scratch AS cratesio-anstyle-query-1.0.2
## ADD --chmod=0664 --checksum=sha256:e28923312444cdd728e4738b3f9c9cac739500909bb3d3c94b43551b16517648 \
##   https://static.crates.io/crates/anstyle-query/anstyle-query-1.0.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-anstyle-query-1.0.2-fcc94b35d76d0926"
## script = '''
## FROM rust-base AS dep-l-anstyle-query-1.0.2-fcc94b35d76d0926
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-anstyle-query-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="anstyle_query" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Look up colored console capabilities" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="anstyle-query" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="1.0.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'anstyle_query' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=b0bc2c35661a2aa8' '-C' 'extra-filename=-fcc94b35d76d0926' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstyle-query-1.0.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fcc94b35d76d0926"
## script = """
## FROM scratch AS out-fcc94b35d76d0926
## COPY --from=dep-l-anstyle-query-1.0.2-fcc94b35d76d0926 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fcc94b35d76d0926* /"""

FROM scratch AS cratesio-colorchoice-1.0.0
ADD --chmod=0664 --checksum=sha256:acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7 \
  https://static.crates.io/crates/colorchoice/colorchoice-1.0.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-colorchoice-1.0.0-8e999bad75f58407
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-colorchoice-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="colorchoice" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Global override of color control" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="colorchoice" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle" \
        CARGO_PKG_RUST_VERSION="1.64.0" \
        CARGO_PKG_VERSION="1.0.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'colorchoice' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=31a36da9d08f4971' '-C' 'extra-filename=-8e999bad75f58407' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8e999bad75f58407
COPY --from=dep-l-colorchoice-1.0.0-8e999bad75f58407 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-8e999bad75f58407* /

## this = "8e999bad75f58407"
## writes = [
##     "deps/colorchoice-8e999bad75f58407.d",
##     "deps/libcolorchoice-8e999bad75f58407.rmeta",
##     "deps/libcolorchoice-8e999bad75f58407.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/colorchoice-8e999bad75f58407.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-colorchoice-1.0.0"
## script = '''
## FROM scratch AS cratesio-colorchoice-1.0.0
## ADD --chmod=0664 --checksum=sha256:acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7 \
##   https://static.crates.io/crates/colorchoice/colorchoice-1.0.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-colorchoice-1.0.0-8e999bad75f58407"
## script = '''
## FROM rust-base AS dep-l-colorchoice-1.0.0-8e999bad75f58407
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-colorchoice-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="colorchoice" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Global override of color control" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="colorchoice" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle" \
##         CARGO_PKG_RUST_VERSION="1.64.0" \
##         CARGO_PKG_VERSION="1.0.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'colorchoice' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=31a36da9d08f4971' '-C' 'extra-filename=-8e999bad75f58407' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/colorchoice-1.0.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8e999bad75f58407"
## script = """
## FROM scratch AS out-8e999bad75f58407
## COPY --from=dep-l-colorchoice-1.0.0-8e999bad75f58407 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-8e999bad75f58407* /"""

FROM scratch AS cratesio-anstream-0.6.5
ADD --chmod=0664 --checksum=sha256:d664a92ecae85fd0a7392615844904654d1d5f5514837f471ddef4a057aba1b6 \
  https://static.crates.io/crates/anstream/anstream-0.6.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-anstream-0.6.5-fbacf1af5926bdd4
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-anstream-0.6.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5 \
  --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
  --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
  --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
  --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
  --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="anstream" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A simple cross platform library for writing colored text to a terminal." \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="anstream" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="0.6.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'anstream' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="auto"' '--cfg' 'feature="default"' '--cfg' 'feature="wincon"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("auto", "default", "test", "wincon"))' '-C' 'metadata=039d9aa183dc60cb' '-C' 'extra-filename=-fbacf1af5926bdd4' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'anstyle=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta' '--extern' 'anstyle_parse=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta' '--extern' 'anstyle_query=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta' '--extern' 'colorchoice=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta' '--extern' 'utf8parse=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fbacf1af5926bdd4
COPY --from=dep-l-anstream-0.6.5-fbacf1af5926bdd4 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fbacf1af5926bdd4* /

## this = "fbacf1af5926bdd4"
## deps = [
##     "d0740faea4ed398d",
##     "a4729bcf670c741e",
##     "522ff71b25340e24",
##     "fcc94b35d76d0926",
##     "8e999bad75f58407",
## ]
## short_externs = [
##     "anstyle-d0740faea4ed398d",
##     "anstyle_parse-a4729bcf670c741e",
##     "utf8parse-522ff71b25340e24",
##     "anstyle_query-fcc94b35d76d0926",
##     "colorchoice-8e999bad75f58407",
## ]
## writes = [
##     "deps/anstream-fbacf1af5926bdd4.d",
##     "deps/libanstream-fbacf1af5926bdd4.rmeta",
##     "deps/libanstream-fbacf1af5926bdd4.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/anstream-fbacf1af5926bdd4.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-anstream-0.6.5"
## script = '''
## FROM scratch AS cratesio-anstream-0.6.5
## ADD --chmod=0664 --checksum=sha256:d664a92ecae85fd0a7392615844904654d1d5f5514837f471ddef4a057aba1b6 \
##   https://static.crates.io/crates/anstream/anstream-0.6.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-anstream-0.6.5-fbacf1af5926bdd4"
## script = '''
## FROM rust-base AS dep-l-anstream-0.6.5-fbacf1af5926bdd4
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-anstream-0.6.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5 \
##   --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
##   --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
##   --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
##   --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
##   --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="anstream" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A simple cross platform library for writing colored text to a terminal." \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-cli/anstyle" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="anstream" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-cli/anstyle.git" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="0.6.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'anstream' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="auto"' '--cfg' 'feature="default"' '--cfg' 'feature="wincon"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("auto", "default", "test", "wincon"))' '-C' 'metadata=039d9aa183dc60cb' '-C' 'extra-filename=-fbacf1af5926bdd4' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'anstyle=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta' '--extern' 'anstyle_parse=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta' '--extern' 'anstyle_query=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta' '--extern' 'colorchoice=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta' '--extern' 'utf8parse=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anstream-0.6.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fbacf1af5926bdd4"
## script = """
## FROM scratch AS out-fbacf1af5926bdd4
## COPY --from=dep-l-anstream-0.6.5-fbacf1af5926bdd4 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fbacf1af5926bdd4* /"""

FROM scratch AS cratesio-clap_lex-0.6.0
ADD --chmod=0664 --checksum=sha256:702fc72eb24e5a1e48ce58027a675bc24edd52096d5397d4aea7c6dd9eca0bd1 \
  https://static.crates.io/crates/clap_lex/clap_lex-0.6.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap_lex-0.6.0-a859f5c15f1b3302
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-clap_lex-0.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_lex" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Minimal, flexible command line parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap_lex" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_lex" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="0.6.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_lex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=da90e6b531863016' '-C' 'extra-filename=-a859f5c15f1b3302' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a859f5c15f1b3302
COPY --from=dep-l-clap_lex-0.6.0-a859f5c15f1b3302 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a859f5c15f1b3302* /

## this = "a859f5c15f1b3302"
## writes = [
##     "deps/clap_lex-a859f5c15f1b3302.d",
##     "deps/libclap_lex-a859f5c15f1b3302.rmeta",
##     "deps/libclap_lex-a859f5c15f1b3302.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/clap_lex-a859f5c15f1b3302.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap_lex-0.6.0"
## script = '''
## FROM scratch AS cratesio-clap_lex-0.6.0
## ADD --chmod=0664 --checksum=sha256:702fc72eb24e5a1e48ce58027a675bc24edd52096d5397d4aea7c6dd9eca0bd1 \
##   https://static.crates.io/crates/clap_lex/clap_lex-0.6.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap_lex-0.6.0-a859f5c15f1b3302"
## script = '''
## FROM rust-base AS dep-l-clap_lex-0.6.0-a859f5c15f1b3302
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-clap_lex-0.6.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_lex" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Minimal, flexible command line parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap_lex" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_lex" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="0.6.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_lex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=da90e6b531863016' '-C' 'extra-filename=-a859f5c15f1b3302' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_lex-0.6.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a859f5c15f1b3302"
## script = """
## FROM scratch AS out-a859f5c15f1b3302
## COPY --from=dep-l-clap_lex-0.6.0-a859f5c15f1b3302 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a859f5c15f1b3302* /"""

FROM scratch AS cratesio-strsim-0.10.0
ADD --chmod=0664 --checksum=sha256:73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623 \
  https://static.crates.io/crates/strsim/strsim-0.10.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-strsim-0.10.0-fd42a4ea370e31ec
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-strsim-0.10.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="strsim" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Danny Guo <danny@dannyguo.com>" \
        CARGO_PKG_DESCRIPTION="Implementations of string similarity metrics. Includes Hamming, Levenshtein,\nOSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/dguo/strsim-rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="strsim" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dguo/strsim-rs" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.10.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="10" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'strsim' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=893a2fde8ffd8f95' '-C' 'extra-filename=-fd42a4ea370e31ec' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fd42a4ea370e31ec
COPY --from=dep-l-strsim-0.10.0-fd42a4ea370e31ec /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fd42a4ea370e31ec* /

## this = "fd42a4ea370e31ec"
## writes = [
##     "deps/strsim-fd42a4ea370e31ec.d",
##     "deps/libstrsim-fd42a4ea370e31ec.rmeta",
##     "deps/libstrsim-fd42a4ea370e31ec.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/strsim-fd42a4ea370e31ec.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-strsim-0.10.0"
## script = '''
## FROM scratch AS cratesio-strsim-0.10.0
## ADD --chmod=0664 --checksum=sha256:73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623 \
##   https://static.crates.io/crates/strsim/strsim-0.10.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-strsim-0.10.0-fd42a4ea370e31ec"
## script = '''
## FROM rust-base AS dep-l-strsim-0.10.0-fd42a4ea370e31ec
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-strsim-0.10.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="strsim" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Danny Guo <danny@dannyguo.com>" \
##         CARGO_PKG_DESCRIPTION="Implementations of string similarity metrics. Includes Hamming, Levenshtein,\nOSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/dguo/strsim-rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="strsim" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dguo/strsim-rs" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.10.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="10" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'strsim' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=893a2fde8ffd8f95' '-C' 'extra-filename=-fd42a4ea370e31ec' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/strsim-0.10.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fd42a4ea370e31ec"
## script = """
## FROM scratch AS out-fd42a4ea370e31ec
## COPY --from=dep-l-strsim-0.10.0-fd42a4ea370e31ec /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fd42a4ea370e31ec* /"""

FROM scratch AS cratesio-clap_builder-4.4.12
ADD --chmod=0664 --checksum=sha256:fb7fb5e4e979aec3be7791562fcba452f94ad85e954da024396433e0e25a79e9 \
  https://static.crates.io/crates/clap_builder/clap_builder-4.4.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap_builder-4.4.12-36625380256100cd
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-clap_builder-4.4.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12 \
  --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta,source=/libanstream-fbacf1af5926bdd4.rmeta \
  --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
  --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
  --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
  --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
  --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
  --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta,source=/libclap_lex-a859f5c15f1b3302.rmeta \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_builder" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap_builder" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="4.4.12" \
        CARGO_PKG_VERSION_MAJOR="4" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_builder' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="color"' '--cfg' 'feature="error-context"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--cfg' 'feature="usage"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=4c856bc466b2cdc8' '-C' 'extra-filename=-36625380256100cd' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'anstream=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta' '--extern' 'anstyle=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta' '--extern' 'clap_lex=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta' '--extern' 'strsim=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-36625380256100cd
COPY --from=dep-l-clap_builder-4.4.12-36625380256100cd /tmp/clis-qcow2-rs_0-1-2/release/deps/*-36625380256100cd* /

## this = "36625380256100cd"
## deps = [
##     "fbacf1af5926bdd4",
##     "d0740faea4ed398d",
##     "a4729bcf670c741e",
##     "522ff71b25340e24",
##     "fcc94b35d76d0926",
##     "8e999bad75f58407",
##     "a859f5c15f1b3302",
##     "fd42a4ea370e31ec",
## ]
## short_externs = [
##     "anstream-fbacf1af5926bdd4",
##     "anstyle-d0740faea4ed398d",
##     "anstyle_parse-a4729bcf670c741e",
##     "utf8parse-522ff71b25340e24",
##     "anstyle_query-fcc94b35d76d0926",
##     "colorchoice-8e999bad75f58407",
##     "clap_lex-a859f5c15f1b3302",
##     "strsim-fd42a4ea370e31ec",
## ]
## writes = [
##     "deps/clap_builder-36625380256100cd.d",
##     "deps/libclap_builder-36625380256100cd.rmeta",
##     "deps/libclap_builder-36625380256100cd.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/clap_builder-36625380256100cd.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `perf`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/os_str.rs","byte_start":1655,"byte_end":1671,"line_start":67,"line_end":67,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(feature = \"perf\")]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `cargo`, `color`, `debug`, `default`, `deprecated`, `env`, `error-context`, `help`, `std`, `string`, `suggestions`, `unicode`, `unstable-doc`, `unstable-styles`, `unstable-v5`, `usage`, and `wrap_help`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `perf` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `perf`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/os_str.rs:67:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"perf\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `cargo`, `color`, `debug`, `default`, `deprecated`, `env`, `error-context`, `help`, `std`, `string`, `suggestions`, `unicode`, `unstable-doc`, `unstable-styles`, `unstable-v5`, `usage`, and `wrap_help`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `perf` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `AppTag` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/command.rs","byte_start":171631,"byte_end":171637,"line_start":4888,"line_end":4888,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"pub(crate) trait AppTag: crate::builder::ext::Extension {}","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AppTag` is never used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/command.rs:4888:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4888\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait AppTag: crate::builder::ext::Extension {}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"method `into_any` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/ext.rs","byte_start":1629,"byte_end":1638,"line_start":51,"line_end":51,"column_start":18,"column_end":27,"is_primary":false,"text":[{"text":"pub(crate) trait Extension: std::fmt::Debug + Send + Sync + 'static {","highlight_start":18,"highlight_end":27}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/ext.rs","byte_start":1908,"byte_end":1916,"line_start":56,"line_end":56,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn into_any(self: Box<Self>) -> Box<dyn std::any::Any>;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `into_any` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/ext.rs:56:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Extension: std::fmt::Debug + Send + Sync + 'static {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_any(self: Box<Self>) -> Box<dyn std::any::Any>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"methods `parse` and `parse_` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/value_parser.rs","byte_start":17766,"byte_end":17780,"line_start":591,"line_end":591,"column_start":7,"column_end":21,"is_primary":false,"text":[{"text":"trait AnyValueParser: Send + Sync + 'static {","highlight_start":7,"highlight_end":21}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/value_parser.rs","byte_start":18235,"byte_end":18240,"line_start":609,"line_end":609,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn parse(","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/value_parser.rs","byte_start":18405,"byte_end":18411,"line_start":616,"line_end":616,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn parse_(","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `parse` and `parse_` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/builder/value_parser.rs:609:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait AnyValueParser: Send + Sync + 'static {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse_(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap_builder-4.4.12"
## script = '''
## FROM scratch AS cratesio-clap_builder-4.4.12
## ADD --chmod=0664 --checksum=sha256:fb7fb5e4e979aec3be7791562fcba452f94ad85e954da024396433e0e25a79e9 \
##   https://static.crates.io/crates/clap_builder/clap_builder-4.4.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap_builder-4.4.12-36625380256100cd"
## script = '''
## FROM rust-base AS dep-l-clap_builder-4.4.12-36625380256100cd
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-clap_builder-4.4.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12 \
##   --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta,source=/libanstream-fbacf1af5926bdd4.rmeta \
##   --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
##   --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
##   --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
##   --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
##   --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
##   --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta,source=/libclap_lex-a859f5c15f1b3302.rmeta \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_builder" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap_builder" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="4.4.12" \
##         CARGO_PKG_VERSION_MAJOR="4" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_builder' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="color"' '--cfg' 'feature="error-context"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--cfg' 'feature="usage"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=4c856bc466b2cdc8' '-C' 'extra-filename=-36625380256100cd' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'anstream=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta' '--extern' 'anstyle=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta' '--extern' 'clap_lex=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta' '--extern' 'strsim=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_builder-4.4.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-36625380256100cd"
## script = """
## FROM scratch AS out-36625380256100cd
## COPY --from=dep-l-clap_builder-4.4.12-36625380256100cd /tmp/clis-qcow2-rs_0-1-2/release/deps/*-36625380256100cd* /"""

FROM scratch AS cratesio-heck-0.4.1
ADD --chmod=0664 --checksum=sha256:95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8 \
  https://static.crates.io/crates/heck/heck-0.4.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-heck-0.4.1-2f387b4601b8b6b0
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-heck-0.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="heck" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Without Boats <woboats@gmail.com>" \
        CARGO_PKG_DESCRIPTION="heck is a case conversion library." \
        CARGO_PKG_HOMEPAGE="https://github.com/withoutboats/heck" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="heck" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/withoutboats/heck" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.4.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'heck' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unicode", "unicode-segmentation"))' '-C' 'metadata=a7eceebcc0d13c4d' '-C' 'extra-filename=-2f387b4601b8b6b0' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-2f387b4601b8b6b0
COPY --from=dep-l-heck-0.4.1-2f387b4601b8b6b0 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-2f387b4601b8b6b0* /

## this = "2f387b4601b8b6b0"
## writes = [
##     "deps/heck-2f387b4601b8b6b0.d",
##     "deps/libheck-2f387b4601b8b6b0.rmeta",
##     "deps/libheck-2f387b4601b8b6b0.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/heck-2f387b4601b8b6b0.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-heck-0.4.1"
## script = '''
## FROM scratch AS cratesio-heck-0.4.1
## ADD --chmod=0664 --checksum=sha256:95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8 \
##   https://static.crates.io/crates/heck/heck-0.4.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-heck-0.4.1-2f387b4601b8b6b0"
## script = '''
## FROM rust-base AS dep-l-heck-0.4.1-2f387b4601b8b6b0
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-heck-0.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="heck" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Without Boats <woboats@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="heck is a case conversion library." \
##         CARGO_PKG_HOMEPAGE="https://github.com/withoutboats/heck" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="heck" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/withoutboats/heck" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.4.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'heck' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unicode", "unicode-segmentation"))' '-C' 'metadata=a7eceebcc0d13c4d' '-C' 'extra-filename=-2f387b4601b8b6b0' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/heck-0.4.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-2f387b4601b8b6b0"
## script = """
## FROM scratch AS out-2f387b4601b8b6b0
## COPY --from=dep-l-heck-0.4.1-2f387b4601b8b6b0 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-2f387b4601b8b6b0* /"""

FROM scratch AS cratesio-clap_derive-4.4.7
ADD --chmod=0664 --checksum=sha256:cf9804afaaf59a91e75b022a30fb7229a7901f60c755489cc61c9b423b836442 \
  https://static.crates.io/crates/clap_derive/clap_derive-4.4.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-clap_derive-4.4.7-23f1d80895cbfd94
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-clap_derive-4.4.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7 \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_derive" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Parse command line argument by defining a struct, derive crate." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap_derive" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_derive" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="4.4.7" \
        CARGO_PKG_VERSION_MAJOR="4" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_derive' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("debug", "default", "deprecated", "raw-deprecated", "unstable-v5"))' '-C' 'metadata=ed53d101efe5ac6d' '-C' 'extra-filename=-23f1d80895cbfd94' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'heck=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-23f1d80895cbfd94
COPY --from=dep-p-clap_derive-4.4.7-23f1d80895cbfd94 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-23f1d80895cbfd94* /

## this = "23f1d80895cbfd94"
## deps = [
##     "2f387b4601b8b6b0",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "heck-2f387b4601b8b6b0",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/clap_derive-23f1d80895cbfd94.d",
##     "deps/libclap_derive-23f1d80895cbfd94.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/clap_derive-23f1d80895cbfd94.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap_derive-4.4.7"
## script = '''
## FROM scratch AS cratesio-clap_derive-4.4.7
## ADD --chmod=0664 --checksum=sha256:cf9804afaaf59a91e75b022a30fb7229a7901f60c755489cc61c9b423b836442 \
##   https://static.crates.io/crates/clap_derive/clap_derive-4.4.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-clap_derive-4.4.7-23f1d80895cbfd94"
## script = '''
## FROM rust-base AS dep-p-clap_derive-4.4.7-23f1d80895cbfd94
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-clap_derive-4.4.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7 \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_derive" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Parse command line argument by defining a struct, derive crate." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap_derive" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap/tree/master/clap_derive" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="4.4.7" \
##         CARGO_PKG_VERSION_MAJOR="4" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_derive' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("debug", "default", "deprecated", "raw-deprecated", "unstable-v5"))' '-C' 'metadata=ed53d101efe5ac6d' '-C' 'extra-filename=-23f1d80895cbfd94' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'heck=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap_derive-4.4.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-23f1d80895cbfd94"
## script = """
## FROM scratch AS out-23f1d80895cbfd94
## COPY --from=dep-p-clap_derive-4.4.7-23f1d80895cbfd94 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-23f1d80895cbfd94* /"""

FROM scratch AS cratesio-clap-4.4.12
ADD --chmod=0664 --checksum=sha256:dcfab8ba68f3668e89f6ff60f5b205cea56aa7b769451a59f34b8682f51c056d \
  https://static.crates.io/crates/clap/clap-4.4.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap-4.4.12-fe4290a3fc65d263
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-clap-4.4.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12 \
  --mount=from=out-36625380256100cd,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta,source=/libclap_builder-36625380256100cd.rmeta \
  --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta,source=/libanstream-fbacf1af5926bdd4.rmeta \
  --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
  --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
  --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
  --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
  --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
  --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta,source=/libclap_lex-a859f5c15f1b3302.rmeta \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
  --mount=from=out-23f1d80895cbfd94,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so,source=/libclap_derive-23f1d80895cbfd94.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
        CARGO_PKG_RUST_VERSION="1.70.0" \
        CARGO_PKG_VERSION="4.4.12" \
        CARGO_PKG_VERSION_MAJOR="4" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="color"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="error-context"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--cfg' 'feature="usage"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "derive", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=b25d2866ae3dab38' '-C' 'extra-filename=-fe4290a3fc65d263' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'clap_builder=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta' '--extern' 'clap_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fe4290a3fc65d263
COPY --from=dep-l-clap-4.4.12-fe4290a3fc65d263 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fe4290a3fc65d263* /

## this = "fe4290a3fc65d263"
## deps = [
##     "36625380256100cd",
##     "fbacf1af5926bdd4",
##     "d0740faea4ed398d",
##     "a4729bcf670c741e",
##     "522ff71b25340e24",
##     "fcc94b35d76d0926",
##     "8e999bad75f58407",
##     "a859f5c15f1b3302",
##     "fd42a4ea370e31ec",
##     "23f1d80895cbfd94",
##     "2f387b4601b8b6b0",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "clap_builder-36625380256100cd",
##     "anstream-fbacf1af5926bdd4",
##     "anstyle-d0740faea4ed398d",
##     "anstyle_parse-a4729bcf670c741e",
##     "utf8parse-522ff71b25340e24",
##     "anstyle_query-fcc94b35d76d0926",
##     "colorchoice-8e999bad75f58407",
##     "clap_lex-a859f5c15f1b3302",
##     "strsim-fd42a4ea370e31ec",
##     "clap_derive-23f1d80895cbfd94",
##     "heck-2f387b4601b8b6b0",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## writes = [
##     "deps/clap-fe4290a3fc65d263.d",
##     "deps/libclap-fe4290a3fc65d263.rmeta",
##     "deps/libclap-fe4290a3fc65d263.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/clap-fe4290a3fc65d263.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap-4.4.12"
## script = '''
## FROM scratch AS cratesio-clap-4.4.12
## ADD --chmod=0664 --checksum=sha256:dcfab8ba68f3668e89f6ff60f5b205cea56aa7b769451a59f34b8682f51c056d \
##   https://static.crates.io/crates/clap/clap-4.4.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap-4.4.12-fe4290a3fc65d263"
## script = '''
## FROM rust-base AS dep-l-clap-4.4.12-fe4290a3fc65d263
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-clap-4.4.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12 \
##   --mount=from=out-36625380256100cd,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta,source=/libclap_builder-36625380256100cd.rmeta \
##   --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta,source=/libanstream-fbacf1af5926bdd4.rmeta \
##   --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
##   --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
##   --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
##   --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
##   --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
##   --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta,source=/libclap_lex-a859f5c15f1b3302.rmeta \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
##   --mount=from=out-23f1d80895cbfd94,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so,source=/libclap_derive-23f1d80895cbfd94.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A simple to use, efficient, and full-featured Command Line Argument Parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/clap-rs/clap" \
##         CARGO_PKG_RUST_VERSION="1.70.0" \
##         CARGO_PKG_VERSION="4.4.12" \
##         CARGO_PKG_VERSION_MAJOR="4" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="color"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="error-context"' '--cfg' 'feature="help"' '--cfg' 'feature="std"' '--cfg' 'feature="suggestions"' '--cfg' 'feature="usage"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("cargo", "color", "debug", "default", "deprecated", "derive", "env", "error-context", "help", "std", "string", "suggestions", "unicode", "unstable-doc", "unstable-styles", "unstable-v5", "usage", "wrap_help"))' '-C' 'metadata=b25d2866ae3dab38' '-C' 'extra-filename=-fe4290a3fc65d263' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'clap_builder=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta' '--extern' 'clap_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-4.4.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fe4290a3fc65d263"
## script = """
## FROM scratch AS out-fe4290a3fc65d263
## COPY --from=dep-l-clap-4.4.12-fe4290a3fc65d263 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-fe4290a3fc65d263* /"""

FROM scratch AS cratesio-num-traits-0.2.17
ADD --chmod=0664 --checksum=sha256:39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c \
  https://static.crates.io/crates/num-traits/num-traits-0.2.17.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-num-traits-0.2.17-8fa1a5b116170862
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-num-traits-0.2.17,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17 \
  --mount=from=crate_out-13057c050b88f322,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="num_traits" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Numeric traits for generic mathematics" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-num/num-traits" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="num-traits" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-num/num-traits" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="0.2.17" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="17" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'num_traits' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "i128", "libm", "std"))' '-C' 'metadata=ac4e6d1b1a7fefbe' '-C' 'extra-filename=-8fa1a5b116170862' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' '--cfg' 'has_to_int_unchecked' '--cfg' 'has_reverse_bits' '--cfg' 'has_leading_trailing_ones' '--cfg' 'has_div_euclid' '--cfg' 'has_copysign' '--cfg' 'has_is_subnormal' '--cfg' 'has_int_to_from_bytes' '--cfg' 'has_float_to_from_bytes' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8fa1a5b116170862
COPY --from=dep-l-num-traits-0.2.17-8fa1a5b116170862 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-8fa1a5b116170862* /

## this = "8fa1a5b116170862"
## writes = ["deps/num_traits-8fa1a5b116170862.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/num_traits-8fa1a5b116170862.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_to_int_unchecked`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/cast.rs","byte_start":9337,"byte_end":9357,"line_start":280,"line_end":280,"column_start":7,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(has_to_int_unchecked)]","highlight_start":7,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_to_int_unchecked)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_to_int_unchecked)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_to_int_unchecked`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/cast.rs:280:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(has_to_int_unchecked)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_to_int_unchecked)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_to_int_unchecked)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_to_int_unchecked`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/cast.rs","byte_start":9689,"byte_end":9709,"line_start":289,"line_end":289,"column_start":11,"column_end":31,"is_primary":true,"text":[{"text":"#[cfg(not(has_to_int_unchecked))]","highlight_start":11,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_to_int_unchecked)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_to_int_unchecked)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_to_int_unchecked`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/cast.rs:289:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m289\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(has_to_int_unchecked))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_to_int_unchecked)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_to_int_unchecked)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_is_subnormal`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":20713,"byte_end":20729,"line_start":802,"line_end":802,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"    #[cfg(has_is_subnormal)]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_is_subnormal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs:802:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m802\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_is_subnormal)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_is_subnormal`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":22540,"byte_end":22556,"line_start":867,"line_end":867,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"    #[cfg(has_is_subnormal)]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_is_subnormal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs:867:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m867\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_is_subnormal)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_copysign`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":51685,"byte_end":51697,"line_start":1948,"line_end":1948,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg(has_copysign)]","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":54434,"byte_end":54473,"line_start":2046,"line_end":2046,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":48706,"byte_end":48733,"line_start":1873,"line_end":1873,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_copysign)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_copysign)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_copysign`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs:1948:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_copysign)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_copysign)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_copysign)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `float_impl_std` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_is_subnormal`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":51814,"byte_end":51830,"line_start":1953,"line_end":1953,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_is_subnormal)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":54434,"byte_end":54473,"line_start":2046,"line_end":2046,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":48706,"byte_end":48733,"line_start":1873,"line_end":1873,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_is_subnormal`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs:1953:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1953\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_is_subnormal)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `float_impl_std` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_copysign`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":51685,"byte_end":51697,"line_start":1948,"line_end":1948,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg(has_copysign)]","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":54499,"byte_end":54538,"line_start":2048,"line_end":2048,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":48706,"byte_end":48733,"line_start":1873,"line_end":1873,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_copysign)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_copysign)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_copysign`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs:1948:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_copysign)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_copysign)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_copysign)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `float_impl_std` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_is_subnormal`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":51814,"byte_end":51830,"line_start":1953,"line_end":1953,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_is_subnormal)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":54499,"byte_end":54538,"line_start":2048,"line_end":2048,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs","byte_start":48706,"byte_end":48733,"line_start":1873,"line_end":1873,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_is_subnormal`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/float.rs:1953:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1953\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_is_subnormal)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_is_subnormal)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_is_subnormal)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `float_impl_std` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13490,"byte_end":13516,"line_start":499,"line_end":499,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"prim_int_impl!(u8, i8, u8);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m499\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u8, i8, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13490,"byte_end":13516,"line_start":499,"line_end":499,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"prim_int_impl!(u8, i8, u8);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m499\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u8, i8, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13490,"byte_end":13516,"line_start":499,"line_end":499,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"prim_int_impl!(u8, i8, u8);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m499\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u8, i8, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13518,"byte_end":13547,"line_start":500,"line_end":500,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u16, i16, u16);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m500\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u16, i16, u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13518,"byte_end":13547,"line_start":500,"line_end":500,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u16, i16, u16);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m500\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u16, i16, u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13518,"byte_end":13547,"line_start":500,"line_end":500,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u16, i16, u16);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m500\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u16, i16, u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13549,"byte_end":13578,"line_start":501,"line_end":501,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u32, i32, u32);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u32, i32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13549,"byte_end":13578,"line_start":501,"line_end":501,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u32, i32, u32);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u32, i32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13549,"byte_end":13578,"line_start":501,"line_end":501,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u32, i32, u32);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u32, i32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13580,"byte_end":13609,"line_start":502,"line_end":502,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u64, i64, u64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u64, i64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13580,"byte_end":13609,"line_start":502,"line_end":502,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u64, i64, u64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u64, i64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13580,"byte_end":13609,"line_start":502,"line_end":502,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(u64, i64, u64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u64, i64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13611,"byte_end":13643,"line_start":503,"line_end":503,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"prim_int_impl!(u128, i128, u128);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u128, i128, u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13611,"byte_end":13643,"line_start":503,"line_end":503,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"prim_int_impl!(u128, i128, u128);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u128, i128, u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13611,"byte_end":13643,"line_start":503,"line_end":503,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"prim_int_impl!(u128, i128, u128);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(u128, i128, u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13645,"byte_end":13680,"line_start":504,"line_end":504,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"prim_int_impl!(usize, isize, usize);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(usize, isize, usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13645,"byte_end":13680,"line_start":504,"line_end":504,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"prim_int_impl!(usize, isize, usize);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(usize, isize, usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13645,"byte_end":13680,"line_start":504,"line_end":504,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"prim_int_impl!(usize, isize, usize);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(usize, isize, usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13682,"byte_end":13708,"line_start":505,"line_end":505,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"prim_int_impl!(i8, i8, u8);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i8, i8, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13682,"byte_end":13708,"line_start":505,"line_end":505,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"prim_int_impl!(i8, i8, u8);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i8, i8, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13682,"byte_end":13708,"line_start":505,"line_end":505,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"prim_int_impl!(i8, i8, u8);","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i8, i8, u8);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13710,"byte_end":13739,"line_start":506,"line_end":506,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i16, i16, u16);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i16, i16, u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13710,"byte_end":13739,"line_start":506,"line_end":506,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i16, i16, u16);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i16, i16, u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13710,"byte_end":13739,"line_start":506,"line_end":506,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i16, i16, u16);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i16, i16, u16);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13741,"byte_end":13770,"line_start":507,"line_end":507,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i32, i32, u32);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i32, i32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13741,"byte_end":13770,"line_start":507,"line_end":507,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i32, i32, u32);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i32, i32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13741,"byte_end":13770,"line_start":507,"line_end":507,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i32, i32, u32);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i32, i32, u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13772,"byte_end":13801,"line_start":508,"line_end":508,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i64, i64, u64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i64, i64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13772,"byte_end":13801,"line_start":508,"line_end":508,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i64, i64, u64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i64, i64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13772,"byte_end":13801,"line_start":508,"line_end":508,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"prim_int_impl!(i64, i64, u64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i64, i64, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13803,"byte_end":13835,"line_start":509,"line_end":509,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"prim_int_impl!(i128, i128, u128);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i128, i128, u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13803,"byte_end":13835,"line_start":509,"line_end":509,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"prim_int_impl!(i128, i128, u128);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i128, i128, u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_reverse_bits`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":12728,"byte_end":12744,"line_start":464,"line_end":464,"column_start":19,"column_end":35,"is_primary":true,"text":[{"text":"            #[cfg(has_reverse_bits)]","highlight_start":19,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13803,"byte_end":13835,"line_start":509,"line_end":509,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"prim_int_impl!(i128, i128, u128);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_reverse_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:464:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_reverse_bits)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(i128, i128, u128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_reverse_bits)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_reverse_bits)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11242,"byte_end":11267,"line_start":407,"line_end":407,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13837,"byte_end":13872,"line_start":510,"line_end":510,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"prim_int_impl!(isize, isize, usize);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(isize, isize, usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_leading_trailing_ones`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":11532,"byte_end":11557,"line_start":418,"line_end":418,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(has_leading_trailing_ones)]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":13837,"byte_end":13872,"line_start":510,"line_end":510,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"prim_int_impl!(isize, isize, usize);","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"prim_int_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs","byte_start":10898,"byte_end":10924,"line_start":394,"line_end":394,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! prim_int_impl {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_leading_trailing_ones`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/int.rs:418:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(has_leading_trailing_ones)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mprim_int_impl!(isize, isize, usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_leading_trailing_ones)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_leading_trailing_ones)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `prim_int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[contexts]]
## name = "crate_out-13057c050b88f322"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-num-traits-0.2.17"
## script = '''
## FROM scratch AS cratesio-num-traits-0.2.17
## ADD --chmod=0664 --checksum=sha256:39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c \
##   https://static.crates.io/crates/num-traits/num-traits-0.2.17.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-num-traits-0.2.17-8fa1a5b116170862"
## script = '''
## FROM rust-base AS dep-l-num-traits-0.2.17-8fa1a5b116170862
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-num-traits-0.2.17,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17 \
##   --mount=from=crate_out-13057c050b88f322,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="num_traits" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Numeric traits for generic mathematics" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-num/num-traits" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="num-traits" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-num/num-traits" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="0.2.17" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="17" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'num_traits' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "i128", "libm", "std"))' '-C' 'metadata=ac4e6d1b1a7fefbe' '-C' 'extra-filename=-8fa1a5b116170862' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' '--cfg' 'has_to_int_unchecked' '--cfg' 'has_reverse_bits' '--cfg' 'has_leading_trailing_ones' '--cfg' 'has_div_euclid' '--cfg' 'has_copysign' '--cfg' 'has_is_subnormal' '--cfg' 'has_int_to_from_bytes' '--cfg' 'has_float_to_from_bytes' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num-traits-0.2.17/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8fa1a5b116170862"
## script = """
## FROM scratch AS out-8fa1a5b116170862
## COPY --from=dep-l-num-traits-0.2.17-8fa1a5b116170862 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-8fa1a5b116170862* /"""

FROM scratch AS cratesio-clap-num-1.0.2
ADD --chmod=0664 --checksum=sha256:488557e97528174edaa2ee268b23a809e0c598213a4bbcb4f34575a46fda147e \
  https://static.crates.io/crates/clap-num/clap-num-1.0.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-clap-num-1.0.2-bd9f44d75c9ea6f8
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-clap-num-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2 \
  --mount=from=out-8fa1a5b116170862,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rmeta,source=/libnum_traits-8fa1a5b116170862.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="clap_num" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Martens <alex@thinglab.org>" \
        CARGO_PKG_DESCRIPTION="Number parsers for clap" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="clap-num" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/newAM/clap-num/" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'clap_num' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=8cd5d1029a4c9240' '-C' 'extra-filename=-bd9f44d75c9ea6f8' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'num_traits=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-bd9f44d75c9ea6f8
COPY --from=dep-l-clap-num-1.0.2-bd9f44d75c9ea6f8 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-bd9f44d75c9ea6f8* /

## this = "bd9f44d75c9ea6f8"
## deps = ["8fa1a5b116170862"]
## short_externs = ["num_traits-8fa1a5b116170862"]
## writes = [
##     "deps/clap_num-bd9f44d75c9ea6f8.d",
##     "deps/libclap_num-bd9f44d75c9ea6f8.rmeta",
##     "deps/libclap_num-bd9f44d75c9ea6f8.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/clap_num-bd9f44d75c9ea6f8.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-13057c050b88f322"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-clap-num-1.0.2"
## script = '''
## FROM scratch AS cratesio-clap-num-1.0.2
## ADD --chmod=0664 --checksum=sha256:488557e97528174edaa2ee268b23a809e0c598213a4bbcb4f34575a46fda147e \
##   https://static.crates.io/crates/clap-num/clap-num-1.0.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-clap-num-1.0.2-bd9f44d75c9ea6f8"
## script = '''
## FROM rust-base AS dep-l-clap-num-1.0.2-bd9f44d75c9ea6f8
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-clap-num-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2 \
##   --mount=from=out-8fa1a5b116170862,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rmeta,source=/libnum_traits-8fa1a5b116170862.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="clap_num" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Martens <alex@thinglab.org>" \
##         CARGO_PKG_DESCRIPTION="Number parsers for clap" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="clap-num" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/newAM/clap-num/" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'clap_num' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=8cd5d1029a4c9240' '-C' 'extra-filename=-bd9f44d75c9ea6f8' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'num_traits=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/clap-num-1.0.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-bd9f44d75c9ea6f8"
## script = """
## FROM scratch AS out-bd9f44d75c9ea6f8
## COPY --from=dep-l-clap-num-1.0.2-bd9f44d75c9ea6f8 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-bd9f44d75c9ea6f8* /"""

FROM scratch AS cratesio-libc-0.2.151
ADD --chmod=0664 --checksum=sha256:302d7ab3130588088d277783b1e2d2e10c9e9e4a16dd9050e6ec93fb3e7048f4 \
  https://static.crates.io/crates/libc/libc-0.2.151.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-libc-0.2.151-0addc1beddeea30f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-libc-0.2.151,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="libc" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Raw FFI bindings to platform libraries like libc.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/libc" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="libc" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/libc" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.151" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="151" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/libc-7af3464b36b18ad6/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'libc' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="extra_traits"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' '-C' 'metadata=e30cf57fe65dfc1d' '-C' 'extra-filename=-0addc1beddeea30f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' '--cfg' 'freebsd11' '--cfg' 'libc_priv_mod_use' '--cfg' 'libc_union' '--cfg' 'libc_const_size_of' '--cfg' 'libc_align' '--cfg' 'libc_int128' '--cfg' 'libc_core_cvoid' '--cfg' 'libc_packedN' '--cfg' 'libc_cfg_target_vendor' '--cfg' 'libc_non_exhaustive' '--cfg' 'libc_long_array' '--cfg' 'libc_ptr_addr_of' '--cfg' 'libc_underscore_const_names' '--cfg' 'libc_const_extern_fn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0addc1beddeea30f
COPY --from=dep-l-libc-0.2.151-0addc1beddeea30f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-0addc1beddeea30f* /

## this = "0addc1beddeea30f"
## writes = [
##     "deps/libc-0addc1beddeea30f.d",
##     "deps/liblibc-0addc1beddeea30f.rmeta",
##     "deps/liblibc-0addc1beddeea30f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libc-0addc1beddeea30f.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_deny_warnings`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":460,"byte_end":478,"line_start":16,"line_end":16,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"#![cfg_attr(libc_deny_warnings, deny(warnings))]","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_deny_warnings)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_deny_warnings)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_deny_warnings`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:16:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(libc_deny_warnings, deny(warnings))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_deny_warnings)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_deny_warnings)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_thread_local`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":647,"byte_end":664,"line_start":19,"line_end":19,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"#![cfg_attr(libc_thread_local, feature(thread_local))]","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_thread_local)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_thread_local)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_thread_local`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:19:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(libc_thread_local, feature(thread_local))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_thread_local)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_thread_local)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_const_extern_fn_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":969,"byte_end":998,"line_start":25,"line_end":25,"column_start":13,"column_end":42,"is_primary":true,"text":[{"text":"#![cfg_attr(libc_const_extern_fn_unstable, feature(const_extern_fn))]","highlight_start":13,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_const_extern_fn_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:25:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(libc_const_extern_fn_unstable, feature(const_extern_fn))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_priv_mod_use`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":1369,"byte_end":1386,"line_start":43,"line_end":43,"column_start":14,"column_end":31,"is_primary":true,"text":[{"text":"    if #[cfg(libc_priv_mod_use)] {","highlight_start":14,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_priv_mod_use)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_priv_mod_use)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_priv_mod_use`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:43:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_priv_mod_use)] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_priv_mod_use)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_priv_mod_use)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_core_cvoid`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":1405,"byte_end":1420,"line_start":44,"line_end":44,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"        #[cfg(libc_core_cvoid)]","highlight_start":15,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_core_cvoid`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:44:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(libc_core_cvoid)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `switch`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":2966,"byte_end":2975,"line_start":102,"line_end":102,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"    } else if #[cfg(target_os = \"switch\")] {","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `switch`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:102:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(target_os = \"switch\")] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `wasi`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs","byte_start":4248,"byte_end":4267,"line_start":150,"line_end":150,"column_start":25,"column_end":44,"is_primary":true,"text":[{"text":"    } else if #[cfg(any(target_env = \"wasi\", target_os = \"wasi\"))] {","highlight_start":25,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `wasi`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs:150:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(any(target_env = \"wasi\", target_os = \"wasi\"))] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":10652,"byte_end":10668,"line_start":337,"line_end":337,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(not(libc_ptr_addr_of))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:337:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(libc_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":10754,"byte_end":10770,"line_start":344,"line_end":344,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(libc_ptr_addr_of)]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:344:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(libc_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_const_extern_fn`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":6504,"byte_end":6524,"line_start":185,"line_end":185,"column_start":14,"column_end":34,"is_primary":true,"text":[{"text":"    if #[cfg(libc_const_extern_fn)] {","highlight_start":14,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_const_extern_fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:185:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_const_extern_fn)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_int128`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/fixed_width_ints.rs","byte_start":831,"byte_end":842,"line_start":23,"line_end":23,"column_start":18,"column_end":29,"is_primary":true,"text":[{"text":"    if #[cfg(all(libc_int128, target_arch = \"aarch64\", not(target_os = \"windows\")))] {","highlight_start":18,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_int128)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_int128)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_int128`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/fixed_width_ints.rs:23:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(all(libc_int128, target_arch = \"aarch64\", not(target_os = \"windows\")))] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_int128)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_int128)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `illumos`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":12622,"byte_end":12632,"line_start":387,"line_end":387,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"    } else if #[cfg(target_env = \"illumos\")] {","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `illumos`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:387:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(target_env = \"illumos\")] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `aix`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":13120,"byte_end":13130,"line_start":398,"line_end":398,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"    } else if #[cfg(target_env = \"aix\")] {","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `aix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:398:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(target_env = \"aix\")] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_core_cvoid`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":60421,"byte_end":60436,"line_start":1589,"line_end":1589,"column_start":14,"column_end":29,"is_primary":true,"text":[{"text":"    if #[cfg(libc_core_cvoid)] {","highlight_start":14,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_core_cvoid`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1589:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1589\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_core_cvoid)] {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_align`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":61030,"byte_end":61040,"line_start":1609,"line_end":1609,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    if #[cfg(libc_align)] {","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_align`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1609:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_align)] {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":21902,"byte_end":21924,"line_start":592,"line_end":592,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:592:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":22306,"byte_end":22328,"line_start":601,"line_end":601,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:601:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":23022,"byte_end":23044,"line_start":619,"line_end":619,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:619:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":23431,"byte_end":23453,"line_start":630,"line_end":630,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:630:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":23886,"byte_end":23908,"line_start":645,"line_end":645,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:645:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":24932,"byte_end":24954,"line_start":679,"line_end":679,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:679:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":26207,"byte_end":26216,"line_start":717,"line_end":717,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:717:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":26218,"byte_end":26227,"line_start":717,"line_end":717,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:717:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":26642,"byte_end":26651,"line_start":730,"line_end":730,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:730:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":26653,"byte_end":26662,"line_start":730,"line_end":730,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:730:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":28215,"byte_end":28224,"line_start":776,"line_end":776,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:776:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":28226,"byte_end":28235,"line_start":776,"line_end":776,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:776:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":29368,"byte_end":29377,"line_start":814,"line_end":814,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:814:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m814\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":29379,"byte_end":29388,"line_start":814,"line_end":814,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:814:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m814\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":36849,"byte_end":36858,"line_start":1007,"line_end":1007,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1007:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":36860,"byte_end":36869,"line_start":1007,"line_end":1007,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1007:51\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":44183,"byte_end":44205,"line_start":1183,"line_end":1183,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1183:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":44622,"byte_end":44644,"line_start":1196,"line_end":1196,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1196:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":47606,"byte_end":47615,"line_start":1266,"line_end":1266,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1266:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":47617,"byte_end":47626,"line_start":1266,"line_end":1266,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1266:51\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":54512,"byte_end":54518,"line_start":1435,"line_end":1435,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(missing_abi)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":54512,"byte_end":54518,"line_start":1435,"line_end":1435,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1435:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(missing_abi)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":55592,"byte_end":55601,"line_start":1456,"line_end":1456,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":48,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1456:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":55603,"byte_end":55612,"line_start":1456,"line_end":1456,"column_start":59,"column_end":68,"is_primary":true,"text":[{"text":"                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":59,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1456:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":57156,"byte_end":57162,"line_start":1495,"line_end":1495,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":57156,"byte_end":57162,"line_start":1495,"line_end":1495,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1495:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":58763,"byte_end":58769,"line_start":1536,"line_end":1536,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs","byte_start":58763,"byte_end":58769,"line_start":1536,"line_end":1536,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/mod.rs:1536:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":6858,"byte_end":6864,"line_start":194,"line_end":194,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/mod.rs","byte_start":54792,"byte_end":56298,"line_start":1540,"line_end":1587,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":64},{"text":"        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":76},{"text":"            (*mhdr).msg_control as *mut cmsghdr","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_DATA(cmsg: *const cmsghdr) -> *mut ::c_uchar {","highlight_start":1,"highlight_end":63},{"text":"        cmsg.offset(1) as *mut ::c_uchar","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_SPACE(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":62},{"text":"        (CMSG_ALIGN(length as usize) + CMSG_ALIGN(::mem::size_of::<cmsghdr>()))","highlight_start":1,"highlight_end":80},{"text":"            as ::c_uint","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_LEN(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":60},{"text":"        CMSG_ALIGN(::mem::size_of::<cmsghdr>()) as ::c_uint + length","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_CLR(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] &= !(1 << (fd % size));","highlight_start":1,"highlight_end":59},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ISSET(fd: ::c_int, set: *const fd_set) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_SET(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] |= 1 << (fd % size);","highlight_start":1,"highlight_end":56},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ZERO(set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":45},{"text":"        for slot in (*set).fds_bits.iter_mut() {","highlight_start":1,"highlight_end":49},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":6537,"byte_end":6551,"line_start":186,"line_end":186,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":6858,"byte_end":6864,"line_start":194,"line_end":194,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/mod.rs","byte_start":54792,"byte_end":56298,"line_start":1540,"line_end":1587,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":64},{"text":"        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":76},{"text":"            (*mhdr).msg_control as *mut cmsghdr","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_DATA(cmsg: *const cmsghdr) -> *mut ::c_uchar {","highlight_start":1,"highlight_end":63},{"text":"        cmsg.offset(1) as *mut ::c_uchar","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_SPACE(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":62},{"text":"        (CMSG_ALIGN(length as usize) + CMSG_ALIGN(::mem::size_of::<cmsghdr>()))","highlight_start":1,"highlight_end":80},{"text":"            as ::c_uint","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_LEN(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":60},{"text":"        CMSG_ALIGN(::mem::size_of::<cmsghdr>()) as ::c_uint + length","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_CLR(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] &= !(1 << (fd % size));","highlight_start":1,"highlight_end":59},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ISSET(fd: ::c_int, set: *const fd_set) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_SET(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] |= 1 << (fd % size);","highlight_start":1,"highlight_end":56},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ZERO(set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":45},{"text":"        for slot in (*set).fds_bits.iter_mut() {","highlight_start":1,"highlight_end":49},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":6537,"byte_end":6551,"line_start":186,"line_end":186,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:194:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* unsafe extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/mod.rs:1540:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mf! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (*mhdr).msg_control as *mut cmsghdr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":7320,"byte_end":7326,"line_start":209,"line_end":209,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/mod.rs","byte_start":56300,"byte_end":58092,"line_start":1589,"line_end":1665,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub fn SIGRTMAX() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmax() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SIGRTMIN() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmin() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSTOPPED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":57},{"text":"        (status & 0xff) == 0x7f","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WSTOPSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFCONTINUED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":59},{"text":"        status == 0xffff","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSIGNALED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":58},{"text":"        ((status & 0x7f) + 1) as i8 >= 2","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WTERMSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        status & 0x7f","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFEXITED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x7f) == 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WEXITSTATUS(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":61},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WCOREDUMP(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x80) != 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_EXITCODE(ret: ::c_int, sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":71},{"text":"        (ret << 8) | sig","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_STOPCODE(sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":57},{"text":"        (sig << 8) | 0x7f","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn QCMD(cmd: ::c_int, type_: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":67},{"text":"        (cmd << 8) | (type_ & 0x00ff)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_COPIED(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_COPY","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_CLASS(o: u8) -> u8 {","highlight_start":1,"highlight_end":46},{"text":"        o & IPOPT_CLASS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_NUMBER(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_NUMBER_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPTOS_ECN(x: u8) -> u8 {","highlight_start":1,"highlight_end":44},{"text":"        x & ::IPTOS_ECN_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(ellipsis_inclusive_range_patterns)]","highlight_start":1,"highlight_end":48},{"text":"    pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {","highlight_start":1,"highlight_end":67},{"text":"        ((a << 16) + (b << 8)) + match c {","highlight_start":1,"highlight_end":43},{"text":"            0 ... 255 => c,","highlight_start":1,"highlight_end":28},{"text":"            _ => 255,","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":7001,"byte_end":7020,"line_start":201,"line_end":201,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":7320,"byte_end":7326,"line_start":209,"line_end":209,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/mod.rs","byte_start":56300,"byte_end":58092,"line_start":1589,"line_end":1665,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub fn SIGRTMAX() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmax() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SIGRTMIN() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmin() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSTOPPED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":57},{"text":"        (status & 0xff) == 0x7f","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WSTOPSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFCONTINUED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":59},{"text":"        status == 0xffff","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSIGNALED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":58},{"text":"        ((status & 0x7f) + 1) as i8 >= 2","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WTERMSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        status & 0x7f","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFEXITED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x7f) == 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WEXITSTATUS(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":61},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WCOREDUMP(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x80) != 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_EXITCODE(ret: ::c_int, sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":71},{"text":"        (ret << 8) | sig","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_STOPCODE(sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":57},{"text":"        (sig << 8) | 0x7f","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn QCMD(cmd: ::c_int, type_: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":67},{"text":"        (cmd << 8) | (type_ & 0x00ff)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_COPIED(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_COPY","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_CLASS(o: u8) -> u8 {","highlight_start":1,"highlight_end":46},{"text":"        o & IPOPT_CLASS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_NUMBER(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_NUMBER_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPTOS_ECN(x: u8) -> u8 {","highlight_start":1,"highlight_end":44},{"text":"        x & ::IPTOS_ECN_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(ellipsis_inclusive_range_patterns)]","highlight_start":1,"highlight_end":48},{"text":"    pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {","highlight_start":1,"highlight_end":67},{"text":"        ((a << 16) + (b << 8)) + match c {","highlight_start":1,"highlight_end":43},{"text":"            0 ... 255 => c,","highlight_start":1,"highlight_end":28},{"text":"            _ => 255,","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":7001,"byte_end":7020,"line_start":201,"line_end":201,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:209:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/mod.rs:1589:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1589\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafe_f! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn SIGRTMAX() -> ::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { __libc_current_sigrtmax() }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1665\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `safe_f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":3243,"byte_end":3253,"line_start":94,"line_end":94,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"            if #[cfg(libc_union)] {","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":3062,"byte_end":3123,"line_start":90,"line_end":90,"column_start":9,"column_end":70,"is_primary":false,"text":[{"text":"        s_no_extra_traits!(it: $(#[$attr])* pub $t $i { $($field)* });","highlight_start":9,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs","byte_start":18287,"byte_end":22600,"line_start":719,"line_end":853,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"s_no_extra_traits! {","highlight_start":1,"highlight_end":21},{"text":"    pub struct sockaddr_nl {","highlight_start":1,"highlight_end":29},{"text":"        pub nl_family: ::sa_family_t,","highlight_start":1,"highlight_end":38},{"text":"        nl_pad: ::c_ushort,","highlight_start":1,"highlight_end":28},{"text":"        pub nl_pid: u32,","highlight_start":1,"highlight_end":25},{"text":"        pub nl_groups: u32","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct dirent {","highlight_start":1,"highlight_end":24},{"text":"        pub d_ino: ::ino_t,","highlight_start":1,"highlight_end":28},{"text":"        pub d_off: ::off_t,","highlight_start":1,"highlight_end":28},{"text":"        pub d_reclen: ::c_ushort,","highlight_start":1,"highlight_end":34},{"text":"        pub d_type: ::c_uchar,","highlight_start":1,"highlight_end":31},{"text":"        pub d_name: [::c_char; 256],","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct sockaddr_alg {","highlight_start":1,"highlight_end":30},{"text":"        pub salg_family: ::sa_family_t,","highlight_start":1,"highlight_end":40},{"text":"        pub salg_type: [::c_uchar; 14],","highlight_start":1,"highlight_end":40},{"text":"        pub salg_feat: u32,","highlight_start":1,"highlight_end":28},{"text":"        pub salg_mask: u32,","highlight_start":1,"highlight_end":28},{"text":"        pub salg_name: [::c_uchar; 64],","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct uinput_setup {","highlight_start":1,"highlight_end":30},{"text":"        pub id: input_id,","highlight_start":1,"highlight_end":26},{"text":"        pub name: [::c_char; UINPUT_MAX_NAME_SIZE],","highlight_start":1,"highlight_end":52},{"text":"        pub ff_effects_max: ::__u32,","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct uinput_user_dev {","highlight_start":1,"highlight_end":33},{"text":"        pub name: [::c_char; UINPUT_MAX_NAME_SIZE],","highlight_start":1,"highlight_end":52},{"text":"        pub id: input_id,","highlight_start":1,"highlight_end":26},{"text":"        pub ff_effects_max: ::__u32,","highlight_start":1,"highlight_end":37},{"text":"        pub absmax: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":40},{"text":"        pub absmin: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":40},{"text":"        pub absfuzz: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":41},{"text":"        pub absflat: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// WARNING: The `PartialEq`, `Eq` and `Hash` implementations of this","highlight_start":1,"highlight_end":74},{"text":"    /// type are unsound and will be removed in the future.","highlight_start":1,"highlight_end":60},{"text":"    #[deprecated(","highlight_start":1,"highlight_end":18},{"text":"        note = \"this struct has unsafe trait implementations that will be \\","highlight_start":1,"highlight_end":76},{"text":"                removed in the future\",","highlight_start":1,"highlight_end":40},{"text":"        since = \"0.2.80\"","highlight_start":1,"highlight_end":25},{"text":"    )]","highlight_start":1,"highlight_end":7},{"text":"    pub struct af_alg_iv {","highlight_start":1,"highlight_end":27},{"text":"        pub ivlen: u32,","highlight_start":1,"highlight_end":24},{"text":"        pub iv: [::c_uchar; 0],","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // x32 compatibility","highlight_start":1,"highlight_end":25},{"text":"    // See https://sourceware.org/bugzilla/show_bug.cgi?id=21279","highlight_start":1,"highlight_end":65},{"text":"    pub struct mq_attr {","highlight_start":1,"highlight_end":25},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_flags: i64,","highlight_start":1,"highlight_end":27},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_maxmsg: i64,","highlight_start":1,"highlight_end":28},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_msgsize: i64,","highlight_start":1,"highlight_end":29},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_curmsgs: i64,","highlight_start":1,"highlight_end":29},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pad: [i64; 4],","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_flags: ::c_long,","highlight_start":1,"highlight_end":32},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_maxmsg: ::c_long,","highlight_start":1,"highlight_end":33},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_msgsize: ::c_long,","highlight_start":1,"highlight_end":34},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_curmsgs: ::c_long,","highlight_start":1,"highlight_end":34},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pad: [::c_long; 4],","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(libc_union)]","highlight_start":1,"highlight_end":23},{"text":"    pub union __c_anonymous_ifr_ifru {","highlight_start":1,"highlight_end":39},{"text":"        pub ifru_addr: ::sockaddr,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_dstaddr: ::sockaddr,","highlight_start":1,"highlight_end":38},{"text":"        pub ifru_broadaddr: ::sockaddr,","highlight_start":1,"highlight_end":40},{"text":"        pub ifru_netmask: ::sockaddr,","highlight_start":1,"highlight_end":38},{"text":"        pub ifru_hwaddr: ::sockaddr,","highlight_start":1,"highlight_end":37},{"text":"        pub ifru_flags: ::c_short,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_ifindex: ::c_int,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_metric: ::c_int,","highlight_start":1,"highlight_end":34},{"text":"        pub ifru_mtu: ::c_int,","highlight_start":1,"highlight_end":31},{"text":"        pub ifru_map: __c_anonymous_ifru_map,","highlight_start":1,"highlight_end":46},{"text":"        pub ifru_slave: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":48},{"text":"        pub ifru_newname: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":50},{"text":"        pub ifru_data: *mut ::c_char,","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct ifreq {","highlight_start":1,"highlight_end":23},{"text":"        /// interface name, e.g. \"en0\"","highlight_start":1,"highlight_end":39},{"text":"        pub ifr_name: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(libc_union)]","highlight_start":1,"highlight_end":27},{"text":"        pub ifr_ifru: __c_anonymous_ifr_ifru,","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(not(libc_union))]","highlight_start":1,"highlight_end":32},{"text":"        pub ifr_ifru: ::sockaddr,","highlight_start":1,"highlight_end":34},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(libc_union)]","highlight_start":1,"highlight_end":23},{"text":"    pub union __c_anonymous_ifc_ifcu {","highlight_start":1,"highlight_end":39},{"text":"        pub ifcu_buf: *mut ::c_char,","highlight_start":1,"highlight_end":37},{"text":"        pub ifcu_req: *mut ::ifreq,","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*  Structure used in SIOCGIFCONF request.  Used to retrieve interface","highlight_start":1,"highlight_end":75},{"text":"    configuration for machine (useful for programs which must know all","highlight_start":1,"highlight_end":71},{"text":"    networks accessible).  */","highlight_start":1,"highlight_end":30},{"text":"    pub struct ifconf {","highlight_start":1,"highlight_end":24},{"text":"        pub ifc_len: ::c_int,       /* Size of buffer.  */","highlight_start":1,"highlight_end":59},{"text":"        #[cfg(libc_union)]","highlight_start":1,"highlight_end":27},{"text":"        pub ifc_ifcu: __c_anonymous_ifc_ifcu,","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(not(libc_union))]","highlight_start":1,"highlight_end":32},{"text":"        pub ifc_ifcu: *mut ::ifreq,","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct hwtstamp_config {","highlight_start":1,"highlight_end":33},{"text":"        pub flags: ::c_int,","highlight_start":1,"highlight_end":28},{"text":"        pub tx_type: ::c_int,","highlight_start":1,"highlight_end":30},{"text":"        pub rx_filter: ::c_int,","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct dirent64 {","highlight_start":1,"highlight_end":26},{"text":"        pub d_ino: ::ino64_t,","highlight_start":1,"highlight_end":30},{"text":"        pub d_off: ::off64_t,","highlight_start":1,"highlight_end":30},{"text":"        pub d_reclen: ::c_ushort,","highlight_start":1,"highlight_end":34},{"text":"        pub d_type: ::c_uchar,","highlight_start":1,"highlight_end":31},{"text":"        pub d_name: [::c_char; 256],","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:94:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            if #[cfg(libc_union)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs:719:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0ms_no_extra_traits! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct sockaddr_nl {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub nl_family: ::sa_family_t,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nl_pad: ::c_ushort,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m853\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `s_no_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs","byte_start":20908,"byte_end":20918,"line_start":797,"line_end":797,"column_start":11,"column_end":21,"is_primary":true,"text":[{"text":"    #[cfg(libc_union)]","highlight_start":11,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs:797:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m797\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(libc_union)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":3243,"byte_end":3253,"line_start":94,"line_end":94,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"            if #[cfg(libc_union)] {","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":3062,"byte_end":3123,"line_start":90,"line_end":90,"column_start":9,"column_end":70,"is_primary":false,"text":[{"text":"        s_no_extra_traits!(it: $(#[$attr])* pub $t $i { $($field)* });","highlight_start":9,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs","byte_start":18287,"byte_end":22600,"line_start":719,"line_end":853,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"s_no_extra_traits! {","highlight_start":1,"highlight_end":21},{"text":"    pub struct sockaddr_nl {","highlight_start":1,"highlight_end":29},{"text":"        pub nl_family: ::sa_family_t,","highlight_start":1,"highlight_end":38},{"text":"        nl_pad: ::c_ushort,","highlight_start":1,"highlight_end":28},{"text":"        pub nl_pid: u32,","highlight_start":1,"highlight_end":25},{"text":"        pub nl_groups: u32","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct dirent {","highlight_start":1,"highlight_end":24},{"text":"        pub d_ino: ::ino_t,","highlight_start":1,"highlight_end":28},{"text":"        pub d_off: ::off_t,","highlight_start":1,"highlight_end":28},{"text":"        pub d_reclen: ::c_ushort,","highlight_start":1,"highlight_end":34},{"text":"        pub d_type: ::c_uchar,","highlight_start":1,"highlight_end":31},{"text":"        pub d_name: [::c_char; 256],","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct sockaddr_alg {","highlight_start":1,"highlight_end":30},{"text":"        pub salg_family: ::sa_family_t,","highlight_start":1,"highlight_end":40},{"text":"        pub salg_type: [::c_uchar; 14],","highlight_start":1,"highlight_end":40},{"text":"        pub salg_feat: u32,","highlight_start":1,"highlight_end":28},{"text":"        pub salg_mask: u32,","highlight_start":1,"highlight_end":28},{"text":"        pub salg_name: [::c_uchar; 64],","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct uinput_setup {","highlight_start":1,"highlight_end":30},{"text":"        pub id: input_id,","highlight_start":1,"highlight_end":26},{"text":"        pub name: [::c_char; UINPUT_MAX_NAME_SIZE],","highlight_start":1,"highlight_end":52},{"text":"        pub ff_effects_max: ::__u32,","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct uinput_user_dev {","highlight_start":1,"highlight_end":33},{"text":"        pub name: [::c_char; UINPUT_MAX_NAME_SIZE],","highlight_start":1,"highlight_end":52},{"text":"        pub id: input_id,","highlight_start":1,"highlight_end":26},{"text":"        pub ff_effects_max: ::__u32,","highlight_start":1,"highlight_end":37},{"text":"        pub absmax: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":40},{"text":"        pub absmin: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":40},{"text":"        pub absfuzz: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":41},{"text":"        pub absflat: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// WARNING: The `PartialEq`, `Eq` and `Hash` implementations of this","highlight_start":1,"highlight_end":74},{"text":"    /// type are unsound and will be removed in the future.","highlight_start":1,"highlight_end":60},{"text":"    #[deprecated(","highlight_start":1,"highlight_end":18},{"text":"        note = \"this struct has unsafe trait implementations that will be \\","highlight_start":1,"highlight_end":76},{"text":"                removed in the future\",","highlight_start":1,"highlight_end":40},{"text":"        since = \"0.2.80\"","highlight_start":1,"highlight_end":25},{"text":"    )]","highlight_start":1,"highlight_end":7},{"text":"    pub struct af_alg_iv {","highlight_start":1,"highlight_end":27},{"text":"        pub ivlen: u32,","highlight_start":1,"highlight_end":24},{"text":"        pub iv: [::c_uchar; 0],","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // x32 compatibility","highlight_start":1,"highlight_end":25},{"text":"    // See https://sourceware.org/bugzilla/show_bug.cgi?id=21279","highlight_start":1,"highlight_end":65},{"text":"    pub struct mq_attr {","highlight_start":1,"highlight_end":25},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_flags: i64,","highlight_start":1,"highlight_end":27},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_maxmsg: i64,","highlight_start":1,"highlight_end":28},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_msgsize: i64,","highlight_start":1,"highlight_end":29},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_curmsgs: i64,","highlight_start":1,"highlight_end":29},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pad: [i64; 4],","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_flags: ::c_long,","highlight_start":1,"highlight_end":32},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_maxmsg: ::c_long,","highlight_start":1,"highlight_end":33},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_msgsize: ::c_long,","highlight_start":1,"highlight_end":34},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_curmsgs: ::c_long,","highlight_start":1,"highlight_end":34},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pad: [::c_long; 4],","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(libc_union)]","highlight_start":1,"highlight_end":23},{"text":"    pub union __c_anonymous_ifr_ifru {","highlight_start":1,"highlight_end":39},{"text":"        pub ifru_addr: ::sockaddr,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_dstaddr: ::sockaddr,","highlight_start":1,"highlight_end":38},{"text":"        pub ifru_broadaddr: ::sockaddr,","highlight_start":1,"highlight_end":40},{"text":"        pub ifru_netmask: ::sockaddr,","highlight_start":1,"highlight_end":38},{"text":"        pub ifru_hwaddr: ::sockaddr,","highlight_start":1,"highlight_end":37},{"text":"        pub ifru_flags: ::c_short,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_ifindex: ::c_int,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_metric: ::c_int,","highlight_start":1,"highlight_end":34},{"text":"        pub ifru_mtu: ::c_int,","highlight_start":1,"highlight_end":31},{"text":"        pub ifru_map: __c_anonymous_ifru_map,","highlight_start":1,"highlight_end":46},{"text":"        pub ifru_slave: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":48},{"text":"        pub ifru_newname: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":50},{"text":"        pub ifru_data: *mut ::c_char,","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct ifreq {","highlight_start":1,"highlight_end":23},{"text":"        /// interface name, e.g. \"en0\"","highlight_start":1,"highlight_end":39},{"text":"        pub ifr_name: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(libc_union)]","highlight_start":1,"highlight_end":27},{"text":"        pub ifr_ifru: __c_anonymous_ifr_ifru,","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(not(libc_union))]","highlight_start":1,"highlight_end":32},{"text":"        pub ifr_ifru: ::sockaddr,","highlight_start":1,"highlight_end":34},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(libc_union)]","highlight_start":1,"highlight_end":23},{"text":"    pub union __c_anonymous_ifc_ifcu {","highlight_start":1,"highlight_end":39},{"text":"        pub ifcu_buf: *mut ::c_char,","highlight_start":1,"highlight_end":37},{"text":"        pub ifcu_req: *mut ::ifreq,","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*  Structure used in SIOCGIFCONF request.  Used to retrieve interface","highlight_start":1,"highlight_end":75},{"text":"    configuration for machine (useful for programs which must know all","highlight_start":1,"highlight_end":71},{"text":"    networks accessible).  */","highlight_start":1,"highlight_end":30},{"text":"    pub struct ifconf {","highlight_start":1,"highlight_end":24},{"text":"        pub ifc_len: ::c_int,       /* Size of buffer.  */","highlight_start":1,"highlight_end":59},{"text":"        #[cfg(libc_union)]","highlight_start":1,"highlight_end":27},{"text":"        pub ifc_ifcu: __c_anonymous_ifc_ifcu,","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(not(libc_union))]","highlight_start":1,"highlight_end":32},{"text":"        pub ifc_ifcu: *mut ::ifreq,","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct hwtstamp_config {","highlight_start":1,"highlight_end":33},{"text":"        pub flags: ::c_int,","highlight_start":1,"highlight_end":28},{"text":"        pub tx_type: ::c_int,","highlight_start":1,"highlight_end":30},{"text":"        pub rx_filter: ::c_int,","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct dirent64 {","highlight_start":1,"highlight_end":26},{"text":"        pub d_ino: ::ino64_t,","highlight_start":1,"highlight_end":30},{"text":"        pub d_off: ::off64_t,","highlight_start":1,"highlight_end":30},{"text":"        pub d_reclen: ::c_ushort,","highlight_start":1,"highlight_end":34},{"text":"        pub d_type: ::c_uchar,","highlight_start":1,"highlight_end":31},{"text":"        pub d_name: [::c_char; 256],","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs:94:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            if #[cfg(libc_union)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs:719:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0ms_no_extra_traits! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct sockaddr_nl {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub nl_family: ::sa_family_t,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nl_pad: ::c_ushort,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m853\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `s_no_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs","byte_start":21736,"byte_end":21746,"line_start":823,"line_end":823,"column_start":11,"column_end":21,"is_primary":true,"text":[{"text":"    #[cfg(libc_union)]","highlight_start":11,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs:823:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m823\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(libc_union)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs","byte_start":22816,"byte_end":22826,"line_start":865,"line_end":865,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    if #[cfg(libc_union)] {","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs:865:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_union)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":3243,"byte_end":3253,"line_start":94,"line_end":94,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"            if #[cfg(libc_union)] {","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":3062,"byte_end":3123,"line_start":90,"line_end":90,"column_start":9,"column_end":70,"is_primary":false,"text":[{"text":"        s_no_extra_traits!(it: $(#[$attr])* pub $t $i { $($field)* });","highlight_start":9,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/unix/linux_like/linux/mod.rs","byte_start":22839,"byte_end":23399,"line_start":866,"line_end":880,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        s_no_extra_traits! {","highlight_start":9,"highlight_end":29},{"text":"            // linux/can.h","highlight_start":1,"highlight_end":27},{"text":"            #[allow(missing_debug_implementations)]","highlight_start":1,"highlight_end":52},{"text":"            pub union __c_anonymous_sockaddr_can_can_addr {","highlight_start":1,"highlight_end":60},{"text":"                pub tp: __c_anonymous_sockaddr_can_tp,","highlight_start":1,"highlight_end":55},{"text":"                pub j1939: __c_anonymous_sockaddr_can_j1939,","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(missing_debug_implementations)]","highlight_start":1,"highlight_end":52},{"text":"            pub struct sockaddr_can {","highlight_start":1,"highlight_end":38},{"text":"                pub can_family: ::sa_family_t,","highlight_start":1,"highlight_end":47},{"text":"                pub can_ifindex: ::c_int,","highlight_start":1,"highlight_end":42},{"text":"                pub can_addr: __c_anonymous_sockaddr_can_can_addr,","highlight_start":1,"highlight_end":67},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":3',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"72 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 72 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-libc-0.2.151"
## script = '''
## FROM scratch AS cratesio-libc-0.2.151
## ADD --chmod=0664 --checksum=sha256:302d7ab3130588088d277783b1e2d2e10c9e9e4a16dd9050e6ec93fb3e7048f4 \
##   https://static.crates.io/crates/libc/libc-0.2.151.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-libc-0.2.151-0addc1beddeea30f"
## script = '''
## FROM rust-base AS dep-l-libc-0.2.151-0addc1beddeea30f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-libc-0.2.151,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="libc" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Raw FFI bindings to platform libraries like libc.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/libc" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="libc" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/libc" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.151" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="151" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/libc-7af3464b36b18ad6/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'libc' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="extra_traits"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' '-C' 'metadata=e30cf57fe65dfc1d' '-C' 'extra-filename=-0addc1beddeea30f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' '--cfg' 'freebsd11' '--cfg' 'libc_priv_mod_use' '--cfg' 'libc_union' '--cfg' 'libc_const_size_of' '--cfg' 'libc_align' '--cfg' 'libc_int128' '--cfg' 'libc_core_cvoid' '--cfg' 'libc_packedN' '--cfg' 'libc_cfg_target_vendor' '--cfg' 'libc_non_exhaustive' '--cfg' 'libc_long_array' '--cfg' 'libc_ptr_addr_of' '--cfg' 'libc_underscore_const_names' '--cfg' 'libc_const_extern_fn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.151/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0addc1beddeea30f"
## script = """
## FROM scratch AS out-0addc1beddeea30f
## COPY --from=dep-l-libc-0.2.151-0addc1beddeea30f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-0addc1beddeea30f* /"""

FROM scratch AS cratesio-atty-0.2.14
ADD --chmod=0664 --checksum=sha256:d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8 \
  https://static.crates.io/crates/atty/atty-0.2.14.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-atty-0.2.14-db60e10e02e74b95
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-atty-0.2.14,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14 \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="atty" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14/Cargo.toml" \
        CARGO_PKG_AUTHORS="softprops <d.tangren@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A simple interface for querying atty" \
        CARGO_PKG_HOMEPAGE="https://github.com/softprops/atty" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="atty" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/softprops/atty" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.14" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="14" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'atty' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=3d17f82e97fd4897' '-C' 'extra-filename=-db60e10e02e74b95' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-db60e10e02e74b95
COPY --from=dep-l-atty-0.2.14-db60e10e02e74b95 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-db60e10e02e74b95* /

## this = "db60e10e02e74b95"
## deps = ["0addc1beddeea30f"]
## short_externs = ["libc-0addc1beddeea30f"]
## writes = [
##     "deps/atty-db60e10e02e74b95.d",
##     "deps/libatty-db60e10e02e74b95.rmeta",
##     "deps/libatty-db60e10e02e74b95.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/atty-db60e10e02e74b95.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-atty-0.2.14"
## script = '''
## FROM scratch AS cratesio-atty-0.2.14
## ADD --chmod=0664 --checksum=sha256:d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8 \
##   https://static.crates.io/crates/atty/atty-0.2.14.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-atty-0.2.14-db60e10e02e74b95"
## script = '''
## FROM rust-base AS dep-l-atty-0.2.14-db60e10e02e74b95
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-atty-0.2.14,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14 \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="atty" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14/Cargo.toml" \
##         CARGO_PKG_AUTHORS="softprops <d.tangren@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A simple interface for querying atty" \
##         CARGO_PKG_HOMEPAGE="https://github.com/softprops/atty" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="atty" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/softprops/atty" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.14" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="14" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'atty' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=3d17f82e97fd4897' '-C' 'extra-filename=-db60e10e02e74b95' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/atty-0.2.14/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-db60e10e02e74b95"
## script = """
## FROM scratch AS out-db60e10e02e74b95
## COPY --from=dep-l-atty-0.2.14-db60e10e02e74b95 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-db60e10e02e74b95* /"""

FROM scratch AS cratesio-humantime-2.1.0
ADD --chmod=0664 --checksum=sha256:9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4 \
  https://static.crates.io/crates/humantime/humantime-2.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-humantime-2.1.0-d4a86c79f6da3dd6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-humantime-2.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="humantime" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Paul Colomiets <paul@colomiets.name>" \
        CARGO_PKG_DESCRIPTION="    A parser and formatter for std::time::{Duration, SystemTime}\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/tailhook/humantime" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="humantime" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tailhook/humantime" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="2.1.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'humantime' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=034d2b81d96eda5e' '-C' 'extra-filename=-d4a86c79f6da3dd6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d4a86c79f6da3dd6
COPY --from=dep-l-humantime-2.1.0-d4a86c79f6da3dd6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d4a86c79f6da3dd6* /

## this = "d4a86c79f6da3dd6"
## writes = [
##     "deps/humantime-d4a86c79f6da3dd6.d",
##     "deps/libhumantime-d4a86c79f6da3dd6.rmeta",
##     "deps/libhumantime-d4a86c79f6da3dd6.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/humantime-d4a86c79f6da3dd6.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `cloudabi`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/src/date.rs","byte_start":121,"byte_end":141,"line_start":6,"line_end":6,"column_start":7,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(target_os=\"cloudabi\")]","highlight_start":7,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `cloudabi`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/src/date.rs:6:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(target_os=\"cloudabi\")]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `cloudabi`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/src/date.rs","byte_start":353,"byte_end":373,"line_start":14,"line_end":14,"column_start":9,"column_end":29,"is_primary":true,"text":[{"text":"    not(target_os=\"cloudabi\"),","highlight_start":9,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `cloudabi`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/src/date.rs:14:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(target_os=\"cloudabi\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-humantime-2.1.0"
## script = '''
## FROM scratch AS cratesio-humantime-2.1.0
## ADD --chmod=0664 --checksum=sha256:9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4 \
##   https://static.crates.io/crates/humantime/humantime-2.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-humantime-2.1.0-d4a86c79f6da3dd6"
## script = '''
## FROM rust-base AS dep-l-humantime-2.1.0-d4a86c79f6da3dd6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-humantime-2.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="humantime" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Paul Colomiets <paul@colomiets.name>" \
##         CARGO_PKG_DESCRIPTION="    A parser and formatter for std::time::{Duration, SystemTime}\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/tailhook/humantime" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="humantime" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tailhook/humantime" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="2.1.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'humantime' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=034d2b81d96eda5e' '-C' 'extra-filename=-d4a86c79f6da3dd6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/humantime-2.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d4a86c79f6da3dd6"
## script = """
## FROM scratch AS out-d4a86c79f6da3dd6
## COPY --from=dep-l-humantime-2.1.0-d4a86c79f6da3dd6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d4a86c79f6da3dd6* /"""

FROM scratch AS cratesio-log-0.4.20
ADD --chmod=0664 --checksum=sha256:b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f \
  https://static.crates.io/crates/log/log-0.4.20.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-log-0.4.20-ea8327ab44844df1
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-log-0.4.20,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="log" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="A lightweight logging facade for Rust\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="log" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/log" \
        CARGO_PKG_RUST_VERSION="1.60.0" \
        CARGO_PKG_VERSION="0.4.20" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="20" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'log' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="release_max_level_off"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("kv_unstable", "kv_unstable_serde", "kv_unstable_std", "kv_unstable_sval", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "serde", "std", "sval", "sval_ref", "value-bag"))' '-C' 'metadata=5e6d83147aaf471b' '-C' 'extra-filename=-ea8327ab44844df1' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ea8327ab44844df1
COPY --from=dep-l-log-0.4.20-ea8327ab44844df1 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ea8327ab44844df1* /

## this = "ea8327ab44844df1"
## writes = [
##     "deps/log-ea8327ab44844df1.d",
##     "deps/liblog-ea8327ab44844df1.rmeta",
##     "deps/liblog-ea8327ab44844df1.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/log-ea8327ab44844df1.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustbuild`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/src/lib.rs","byte_start":12693,"byte_end":12702,"line_start":331,"line_end":331,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(rustbuild, feature(staged_api, rustc_private))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustbuild`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/src/lib.rs:331:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustbuild, feature(staged_api, rustc_private))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustbuild`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/src/lib.rs","byte_start":12753,"byte_end":12762,"line_start":332,"line_end":332,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustbuild`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/src/lib.rs:332:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-log-0.4.20"
## script = '''
## FROM scratch AS cratesio-log-0.4.20
## ADD --chmod=0664 --checksum=sha256:b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f \
##   https://static.crates.io/crates/log/log-0.4.20.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-log-0.4.20-ea8327ab44844df1"
## script = '''
## FROM rust-base AS dep-l-log-0.4.20-ea8327ab44844df1
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-log-0.4.20,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="log" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="A lightweight logging facade for Rust\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="log" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/log" \
##         CARGO_PKG_RUST_VERSION="1.60.0" \
##         CARGO_PKG_VERSION="0.4.20" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="20" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'log' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="release_max_level_off"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("kv_unstable", "kv_unstable_serde", "kv_unstable_std", "kv_unstable_sval", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "serde", "std", "sval", "sval_ref", "value-bag"))' '-C' 'metadata=5e6d83147aaf471b' '-C' 'extra-filename=-ea8327ab44844df1' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/log-0.4.20/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ea8327ab44844df1"
## script = """
## FROM scratch AS out-ea8327ab44844df1
## COPY --from=dep-l-log-0.4.20-ea8327ab44844df1 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ea8327ab44844df1* /"""

FROM scratch AS cratesio-memchr-2.7.1
ADD --chmod=0664 --checksum=sha256:523dc4f511e55ab87b694dc30d0f820d60906ef06413f93d4d7a1385599cc149 \
  https://static.crates.io/crates/memchr/memchr-2.7.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-memchr-2.7.1-08328c8b7673a58d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-memchr-2.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="memchr" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>:bluss" \
        CARGO_PKG_DESCRIPTION="Provides extremely fast (uses SIMD on x86_64, aarch64 and wasm32) routines for\n1, 2 or 3 byte search and single substring search.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/memchr" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="memchr" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/memchr" \
        CARGO_PKG_RUST_VERSION="1.61" \
        CARGO_PKG_VERSION="2.7.1" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'memchr' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "libc", "logging", "rustc-dep-of-std", "std", "use_std"))' '-C' 'metadata=2b54d29a445e3ea7' '-C' 'extra-filename=-08328c8b7673a58d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-08328c8b7673a58d
COPY --from=dep-l-memchr-2.7.1-08328c8b7673a58d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-08328c8b7673a58d* /

## this = "08328c8b7673a58d"
## writes = [
##     "deps/memchr-08328c8b7673a58d.d",
##     "deps/libmemchr-08328c8b7673a58d.rmeta",
##     "deps/libmemchr-08328c8b7673a58d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/memchr-08328c8b7673a58d.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"trait `Byte` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1/src/ext.rs","byte_start":1343,"byte_end":1347,"line_start":42,"line_end":42,"column_start":18,"column_end":22,"is_primary":true,"text":[{"text":"pub(crate) trait Byte {","highlight_start":18,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `Byte` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1/src/ext.rs:42:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Byte {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-memchr-2.7.1"
## script = '''
## FROM scratch AS cratesio-memchr-2.7.1
## ADD --chmod=0664 --checksum=sha256:523dc4f511e55ab87b694dc30d0f820d60906ef06413f93d4d7a1385599cc149 \
##   https://static.crates.io/crates/memchr/memchr-2.7.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-memchr-2.7.1-08328c8b7673a58d"
## script = '''
## FROM rust-base AS dep-l-memchr-2.7.1-08328c8b7673a58d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-memchr-2.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="memchr" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>:bluss" \
##         CARGO_PKG_DESCRIPTION="Provides extremely fast (uses SIMD on x86_64, aarch64 and wasm32) routines for\n1, 2 or 3 byte search and single substring search.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/memchr" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="memchr" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/memchr" \
##         CARGO_PKG_RUST_VERSION="1.61" \
##         CARGO_PKG_VERSION="2.7.1" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'memchr' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "libc", "logging", "rustc-dep-of-std", "std", "use_std"))' '-C' 'metadata=2b54d29a445e3ea7' '-C' 'extra-filename=-08328c8b7673a58d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.7.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-08328c8b7673a58d"
## script = """
## FROM scratch AS out-08328c8b7673a58d
## COPY --from=dep-l-memchr-2.7.1-08328c8b7673a58d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-08328c8b7673a58d* /"""

FROM scratch AS cratesio-aho-corasick-1.1.2
ADD --chmod=0664 --checksum=sha256:b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0 \
  https://static.crates.io/crates/aho-corasick/aho-corasick-1.1.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-aho-corasick-1.1.2-2b15874b445115c1
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-aho-corasick-1.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2 \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="aho_corasick" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fast multiple substring searching." \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/aho-corasick" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="aho-corasick" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/aho-corasick" \
        CARGO_PKG_RUST_VERSION="1.60.0" \
        CARGO_PKG_VERSION="1.1.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'aho_corasick' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "perf-literal", "std"))' '-C' 'metadata=250b9cf8aa6d11d8' '-C' 'extra-filename=-2b15874b445115c1' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-2b15874b445115c1
COPY --from=dep-l-aho-corasick-1.1.2-2b15874b445115c1 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-2b15874b445115c1* /

## this = "2b15874b445115c1"
## deps = ["08328c8b7673a58d"]
## short_externs = ["memchr-08328c8b7673a58d"]
## writes = [
##     "deps/aho_corasick-2b15874b445115c1.d",
##     "deps/libaho_corasick-2b15874b445115c1.rmeta",
##     "deps/libaho_corasick-2b15874b445115c1.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/aho_corasick-2b15874b445115c1.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"method `or` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/packed/vector.rs","byte_start":1353,"byte_end":1359,"line_start":28,"line_end":28,"column_start":18,"column_end":24,"is_primary":false,"text":[{"text":"pub(crate) trait Vector:","highlight_start":18,"highlight_end":24}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/packed/vector.rs","byte_start":3475,"byte_end":3477,"line_start":92,"line_end":92,"column_start":15,"column_end":17,"is_primary":true,"text":[{"text":"    unsafe fn or(self, vector2: Self) -> Self;","highlight_start":15,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `or` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/packed/vector.rs:92:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Vector:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn or(self, vector2: Self) -> Self;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `U8` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":958,"byte_end":960,"line_start":21,"line_end":21,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"pub(crate) trait U8 {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `U8` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:21:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U8 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"method `low_u8` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1100,"byte_end":1103,"line_start":31,"line_end":31,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait U16 {","highlight_start":18,"highlight_end":21}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1145,"byte_end":1151,"line_start":33,"line_end":33,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn low_u8(self) -> u8;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `low_u8` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:33:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U16 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u8(self) -> u8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `low_u8` and `high_u16` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1416,"byte_end":1419,"line_start":51,"line_end":51,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait U32 {","highlight_start":18,"highlight_end":21}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1461,"byte_end":1467,"line_start":53,"line_end":53,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn low_u8(self) -> u8;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1517,"byte_end":1525,"line_start":55,"line_end":55,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn high_u16(self) -> u16;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `low_u8` and `high_u16` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:53:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u8(self) -> u8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u16(self) -> u16;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn high_u16(self) -> u16;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `low_u8`, `low_u16`, `low_u32`, and `high_u32` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2014,"byte_end":2017,"line_start":84,"line_end":84,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait U64 {","highlight_start":18,"highlight_end":21}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2059,"byte_end":2065,"line_start":86,"line_end":86,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn low_u8(self) -> u8;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2086,"byte_end":2093,"line_start":87,"line_end":87,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn low_u16(self) -> u16;","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2115,"byte_end":2122,"line_start":88,"line_end":88,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn low_u32(self) -> u32;","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2144,"byte_end":2152,"line_start":89,"line_end":89,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn high_u32(self) -> u32;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `low_u8`, `low_u16`, `low_u32`, and `high_u32` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:86:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u8(self) -> u8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u16(self) -> u16;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u32(self) -> u32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn high_u32(self) -> u32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `as_usize` and `to_bits` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2684,"byte_end":2686,"line_start":121,"line_end":121,"column_start":18,"column_end":20,"is_primary":false,"text":[{"text":"pub(crate) trait I8 {","highlight_start":18,"highlight_end":20}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2696,"byte_end":2704,"line_start":122,"line_end":122,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn as_usize(self) -> usize;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2728,"byte_end":2735,"line_start":123,"line_end":123,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn to_bits(self) -> u8;","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `as_usize` and `to_bits` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:122:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait I8 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_bits(self) -> u8;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"associated items `as_usize` and `from_bits` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3170,"byte_end":3173,"line_start":148,"line_end":148,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait I32 {","highlight_start":18,"highlight_end":21}],"label":"associated items in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3183,"byte_end":3191,"line_start":149,"line_end":149,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn as_usize(self) -> usize;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3244,"byte_end":3253,"line_start":151,"line_end":151,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn from_bits(n: u32) -> i32;","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `as_usize` and `from_bits` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:149:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait I32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_bits(self) -> u32;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_bits(n: u32) -> i32;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"associated items `as_usize` and `from_bits` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3668,"byte_end":3671,"line_start":175,"line_end":175,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait I64 {","highlight_start":18,"highlight_end":21}],"label":"associated items in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3681,"byte_end":3689,"line_start":176,"line_end":176,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn as_usize(self) -> usize;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3742,"byte_end":3751,"line_start":178,"line_end":178,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn from_bits(n: u64) -> i64;","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `as_usize` and `from_bits` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:176:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait I64 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_bits(self) -> u64;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_bits(n: u64) -> i64;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"method `as_u16` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":4166,"byte_end":4171,"line_start":202,"line_end":202,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"pub(crate) trait Usize {","highlight_start":18,"highlight_end":23}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":4207,"byte_end":4213,"line_start":204,"line_end":204,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn as_u16(self) -> u16;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `as_u16` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:204:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Usize {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_u8(self) -> u8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_u16(self) -> u16;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `Pointer` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":5930,"byte_end":5937,"line_start":266,"line_end":266,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"pub(crate) trait Pointer {","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `Pointer` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:266:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Pointer {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `PointerMut` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":6087,"byte_end":6097,"line_start":276,"line_end":276,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"pub(crate) trait PointerMut {","highlight_start":18,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `PointerMut` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:276:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait PointerMut {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"11 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 11 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-aho-corasick-1.1.2"
## script = '''
## FROM scratch AS cratesio-aho-corasick-1.1.2
## ADD --chmod=0664 --checksum=sha256:b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0 \
##   https://static.crates.io/crates/aho-corasick/aho-corasick-1.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-aho-corasick-1.1.2-2b15874b445115c1"
## script = '''
## FROM rust-base AS dep-l-aho-corasick-1.1.2-2b15874b445115c1
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-aho-corasick-1.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2 \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="aho_corasick" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fast multiple substring searching." \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/aho-corasick" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="aho-corasick" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/aho-corasick" \
##         CARGO_PKG_RUST_VERSION="1.60.0" \
##         CARGO_PKG_VERSION="1.1.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'aho_corasick' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "perf-literal", "std"))' '-C' 'metadata=250b9cf8aa6d11d8' '-C' 'extra-filename=-2b15874b445115c1' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-2b15874b445115c1"
## script = """
## FROM scratch AS out-2b15874b445115c1
## COPY --from=dep-l-aho-corasick-1.1.2-2b15874b445115c1 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-2b15874b445115c1* /"""

FROM scratch AS cratesio-regex-syntax-0.8.2
ADD --chmod=0664 --checksum=sha256:c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f \
  https://static.crates.io/crates/regex-syntax/regex-syntax-0.8.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-syntax-0.8.2-7a4e8cf437ea8df6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-regex-syntax-0.8.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_syntax" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A regular expression parser." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-syntax" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-syntax" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="0.8.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_syntax' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=652aa470cbae6e6f' '-C' 'extra-filename=-7a4e8cf437ea8df6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7a4e8cf437ea8df6
COPY --from=dep-l-regex-syntax-0.8.2-7a4e8cf437ea8df6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7a4e8cf437ea8df6* /

## this = "7a4e8cf437ea8df6"
## writes = [
##     "deps/regex_syntax-7a4e8cf437ea8df6.d",
##     "deps/libregex_syntax-7a4e8cf437ea8df6.rmeta",
##     "deps/libregex_syntax-7a4e8cf437ea8df6.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/regex_syntax-7a4e8cf437ea8df6.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"method `symmetric_difference` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/hir/interval.rs","byte_start":16494,"byte_end":16502,"line_start":396,"line_end":396,"column_start":11,"column_end":19,"is_primary":false,"text":[{"text":"pub trait Interval:","highlight_start":11,"highlight_end":19}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/hir/interval.rs","byte_start":19455,"byte_end":19475,"line_start":484,"line_end":484,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn symmetric_difference(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `symmetric_difference` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/hir/interval.rs:484:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m396\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Interval:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn symmetric_difference(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-syntax-0.8.2"
## script = '''
## FROM scratch AS cratesio-regex-syntax-0.8.2
## ADD --chmod=0664 --checksum=sha256:c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f \
##   https://static.crates.io/crates/regex-syntax/regex-syntax-0.8.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-syntax-0.8.2-7a4e8cf437ea8df6"
## script = '''
## FROM rust-base AS dep-l-regex-syntax-0.8.2-7a4e8cf437ea8df6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-regex-syntax-0.8.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_syntax" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A regular expression parser." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-syntax" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-syntax" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="0.8.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_syntax' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=652aa470cbae6e6f' '-C' 'extra-filename=-7a4e8cf437ea8df6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7a4e8cf437ea8df6"
## script = """
## FROM scratch AS out-7a4e8cf437ea8df6
## COPY --from=dep-l-regex-syntax-0.8.2-7a4e8cf437ea8df6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7a4e8cf437ea8df6* /"""

FROM scratch AS cratesio-regex-automata-0.4.3
ADD --chmod=0664 --checksum=sha256:5f804c7828047e88b2d32e2d7fe5a105da8ee3264f01902f796c8e067dc2483f \
  https://static.crates.io/crates/regex-automata/regex-automata-0.4.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-automata-0.4.3-ba444f6efb5958a6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-regex-automata-0.4.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3 \
  --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_automata" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-automata" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-automata" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="0.4.3" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_automata' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="dfa-onepass"' '--cfg' 'feature="hybrid"' '--cfg' 'feature="meta"' '--cfg' 'feature="nfa-backtrack"' '--cfg' 'feature="nfa-pikevm"' '--cfg' 'feature="nfa-thompson"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-literal-multisubstring"' '--cfg' 'feature="perf-literal-substring"' '--cfg' 'feature="std"' '--cfg' 'feature="syntax"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' '-C' 'metadata=f3330cfd153a31f9' '-C' 'extra-filename=-ba444f6efb5958a6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'aho_corasick=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--extern' 'regex_syntax=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ba444f6efb5958a6
COPY --from=dep-l-regex-automata-0.4.3-ba444f6efb5958a6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ba444f6efb5958a6* /

## this = "ba444f6efb5958a6"
## deps = [
##     "2b15874b445115c1",
##     "08328c8b7673a58d",
##     "7a4e8cf437ea8df6",
## ]
## short_externs = [
##     "aho_corasick-2b15874b445115c1",
##     "memchr-08328c8b7673a58d",
##     "regex_syntax-7a4e8cf437ea8df6",
## ]
## writes = [
##     "deps/regex_automata-ba444f6efb5958a6.d",
##     "deps/libregex_automata-ba444f6efb5958a6.rmeta",
##     "deps/libregex_automata-ba444f6efb5958a6.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/regex_automata-ba444f6efb5958a6.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/dfa/onepass.rs","byte_start":22283,"byte_end":22298,"line_start":524,"line_end":524,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder {","highlight_start":45,"highlight_end":60}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/dfa/onepass.rs","byte_start":22157,"byte_end":22159,"line_start":522,"line_end":522,"column_start":6,"column_end":8,"is_primary":false,"text":[{"text":"impl<'a> InternalBuilder<'a> {","highlight_start":6,"highlight_end":8}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/dfa/onepass.rs:524:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<'a> InternalBuilder<'a> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Create a new builder with an initial empty DFA.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-automata-0.4.3"
## script = '''
## FROM scratch AS cratesio-regex-automata-0.4.3
## ADD --chmod=0664 --checksum=sha256:5f804c7828047e88b2d32e2d7fe5a105da8ee3264f01902f796c8e067dc2483f \
##   https://static.crates.io/crates/regex-automata/regex-automata-0.4.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-automata-0.4.3-ba444f6efb5958a6"
## script = '''
## FROM rust-base AS dep-l-regex-automata-0.4.3-ba444f6efb5958a6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-regex-automata-0.4.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3 \
##   --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_automata" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-automata" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-automata" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="0.4.3" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_automata' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="dfa-onepass"' '--cfg' 'feature="hybrid"' '--cfg' 'feature="meta"' '--cfg' 'feature="nfa-backtrack"' '--cfg' 'feature="nfa-pikevm"' '--cfg' 'feature="nfa-thompson"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-literal-multisubstring"' '--cfg' 'feature="perf-literal-substring"' '--cfg' 'feature="std"' '--cfg' 'feature="syntax"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' '-C' 'metadata=f3330cfd153a31f9' '-C' 'extra-filename=-ba444f6efb5958a6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'aho_corasick=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--extern' 'regex_syntax=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ba444f6efb5958a6"
## script = """
## FROM scratch AS out-ba444f6efb5958a6
## COPY --from=dep-l-regex-automata-0.4.3-ba444f6efb5958a6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ba444f6efb5958a6* /"""

FROM scratch AS cratesio-regex-1.10.2
ADD --chmod=0664 --checksum=sha256:380b951a9c5e80ddfd6136919eef32310721aa4aacd4889a8d39124b026ab343 \
  https://static.crates.io/crates/regex/regex-1.10.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-1.10.2-72624534882400be
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-regex-1.10.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2 \
  --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta,source=/libregex_automata-ba444f6efb5958a6.rmeta \
  --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="1.10.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="10" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="perf"' '--cfg' 'feature="perf-backtrack"' '--cfg' 'feature="perf-cache"' '--cfg' 'feature="perf-dfa"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-onepass"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' '-C' 'metadata=79917640a848018e' '-C' 'extra-filename=-72624534882400be' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'aho_corasick=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--extern' 'regex_automata=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta' '--extern' 'regex_syntax=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-72624534882400be
COPY --from=dep-l-regex-1.10.2-72624534882400be /tmp/clis-qcow2-rs_0-1-2/release/deps/*-72624534882400be* /

## this = "72624534882400be"
## deps = [
##     "2b15874b445115c1",
##     "08328c8b7673a58d",
##     "ba444f6efb5958a6",
##     "7a4e8cf437ea8df6",
## ]
## short_externs = [
##     "aho_corasick-2b15874b445115c1",
##     "memchr-08328c8b7673a58d",
##     "regex_automata-ba444f6efb5958a6",
##     "regex_syntax-7a4e8cf437ea8df6",
## ]
## writes = [
##     "deps/regex-72624534882400be.d",
##     "deps/libregex-72624534882400be.rmeta",
##     "deps/libregex-72624534882400be.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/regex-72624534882400be.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-1.10.2"
## script = '''
## FROM scratch AS cratesio-regex-1.10.2
## ADD --chmod=0664 --checksum=sha256:380b951a9c5e80ddfd6136919eef32310721aa4aacd4889a8d39124b026ab343 \
##   https://static.crates.io/crates/regex/regex-1.10.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-1.10.2-72624534882400be"
## script = '''
## FROM rust-base AS dep-l-regex-1.10.2-72624534882400be
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-regex-1.10.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2 \
##   --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta,source=/libregex_automata-ba444f6efb5958a6.rmeta \
##   --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="1.10.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="10" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="perf"' '--cfg' 'feature="perf-backtrack"' '--cfg' 'feature="perf-cache"' '--cfg' 'feature="perf-dfa"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-onepass"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' '-C' 'metadata=79917640a848018e' '-C' 'extra-filename=-72624534882400be' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'aho_corasick=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--extern' 'regex_automata=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta' '--extern' 'regex_syntax=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-72624534882400be"
## script = """
## FROM scratch AS out-72624534882400be
## COPY --from=dep-l-regex-1.10.2-72624534882400be /tmp/clis-qcow2-rs_0-1-2/release/deps/*-72624534882400be* /"""

FROM scratch AS cratesio-termcolor-1.4.0
ADD --chmod=0664 --checksum=sha256:ff1bc3d3f05aff0403e8ac0d92ced918ec05b666a43f83297ccef5bea8a3d449 \
  https://static.crates.io/crates/termcolor/termcolor-1.4.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-termcolor-1.4.0-eb1e3a5a15a3aa8c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-termcolor-1.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="termcolor" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A simple cross platform library for writing colored text to a terminal.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/termcolor" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="termcolor" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/termcolor" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.4.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'termcolor' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c10c8be42c11208e' '-C' 'extra-filename=-eb1e3a5a15a3aa8c' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-eb1e3a5a15a3aa8c
COPY --from=dep-l-termcolor-1.4.0-eb1e3a5a15a3aa8c /tmp/clis-qcow2-rs_0-1-2/release/deps/*-eb1e3a5a15a3aa8c* /

## this = "eb1e3a5a15a3aa8c"
## writes = [
##     "deps/termcolor-eb1e3a5a15a3aa8c.d",
##     "deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta",
##     "deps/libtermcolor-eb1e3a5a15a3aa8c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/termcolor-eb1e3a5a15a3aa8c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-termcolor-1.4.0"
## script = '''
## FROM scratch AS cratesio-termcolor-1.4.0
## ADD --chmod=0664 --checksum=sha256:ff1bc3d3f05aff0403e8ac0d92ced918ec05b666a43f83297ccef5bea8a3d449 \
##   https://static.crates.io/crates/termcolor/termcolor-1.4.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-termcolor-1.4.0-eb1e3a5a15a3aa8c"
## script = '''
## FROM rust-base AS dep-l-termcolor-1.4.0-eb1e3a5a15a3aa8c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-termcolor-1.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="termcolor" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A simple cross platform library for writing colored text to a terminal.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/termcolor" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="termcolor" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/termcolor" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.4.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'termcolor' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c10c8be42c11208e' '-C' 'extra-filename=-eb1e3a5a15a3aa8c' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.4.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-eb1e3a5a15a3aa8c"
## script = """
## FROM scratch AS out-eb1e3a5a15a3aa8c
## COPY --from=dep-l-termcolor-1.4.0-eb1e3a5a15a3aa8c /tmp/clis-qcow2-rs_0-1-2/release/deps/*-eb1e3a5a15a3aa8c* /"""

FROM scratch AS cratesio-env_logger-0.9.3
ADD --chmod=0664 --checksum=sha256:a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7 \
  https://static.crates.io/crates/env_logger/env_logger-0.9.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-env_logger-0.9.3-14f62bda870ceea0
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-env_logger-0.9.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3 \
  --mount=from=out-db60e10e02e74b95,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta,source=/libatty-db60e10e02e74b95.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-d4a86c79f6da3dd6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta,source=/libhumantime-d4a86c79f6da3dd6.rmeta \
  --mount=from=out-ea8327ab44844df1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta,source=/liblog-ea8327ab44844df1.rmeta \
  --mount=from=out-72624534882400be,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta,source=/libregex-72624534882400be.rmeta \
  --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta,source=/libregex_automata-ba444f6efb5958a6.rmeta \
  --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
  --mount=from=out-eb1e3a5a15a3aa8c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta,source=/libtermcolor-eb1e3a5a15a3aa8c.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="env_logger" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A logging implementation for `log` which is configured via an environment\nvariable.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="env_logger" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/env-logger-rs/env_logger/" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.9.3" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'env_logger' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="atty"' '--cfg' 'feature="default"' '--cfg' 'feature="humantime"' '--cfg' 'feature="regex"' '--cfg' 'feature="termcolor"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("atty", "default", "humantime", "regex", "termcolor"))' '-C' 'metadata=e9a50e1d5788bfa6' '-C' 'extra-filename=-14f62bda870ceea0' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'atty=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta' '--extern' 'humantime=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta' '--extern' 'log=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta' '--extern' 'regex=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta' '--extern' 'termcolor=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-14f62bda870ceea0
COPY --from=dep-l-env_logger-0.9.3-14f62bda870ceea0 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-14f62bda870ceea0* /

## this = "14f62bda870ceea0"
## deps = [
##     "db60e10e02e74b95",
##     "0addc1beddeea30f",
##     "d4a86c79f6da3dd6",
##     "ea8327ab44844df1",
##     "72624534882400be",
##     "2b15874b445115c1",
##     "08328c8b7673a58d",
##     "ba444f6efb5958a6",
##     "7a4e8cf437ea8df6",
##     "eb1e3a5a15a3aa8c",
## ]
## short_externs = [
##     "atty-db60e10e02e74b95",
##     "libc-0addc1beddeea30f",
##     "humantime-d4a86c79f6da3dd6",
##     "log-ea8327ab44844df1",
##     "regex-72624534882400be",
##     "aho_corasick-2b15874b445115c1",
##     "memchr-08328c8b7673a58d",
##     "regex_automata-ba444f6efb5958a6",
##     "regex_syntax-7a4e8cf437ea8df6",
##     "termcolor-eb1e3a5a15a3aa8c",
## ]
## writes = [
##     "deps/env_logger-14f62bda870ceea0.d",
##     "deps/libenv_logger-14f62bda870ceea0.rmeta",
##     "deps/libenv_logger-14f62bda870ceea0.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/env_logger-14f62bda870ceea0.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustbuild`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/src/lib.rs","byte_start":10628,"byte_end":10637,"line_start":283,"line_end":283,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(rustbuild, feature(staged_api, rustc_private))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustbuild`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/src/lib.rs:283:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustbuild, feature(staged_api, rustc_private))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustbuild`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/src/lib.rs","byte_start":10688,"byte_end":10697,"line_start":284,"line_end":284,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustbuild`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/src/lib.rs:284:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustbuild, unstable(feature = \"rustc_private\", issue = \"27812\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustbuild)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustbuild)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-env_logger-0.9.3"
## script = '''
## FROM scratch AS cratesio-env_logger-0.9.3
## ADD --chmod=0664 --checksum=sha256:a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7 \
##   https://static.crates.io/crates/env_logger/env_logger-0.9.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-env_logger-0.9.3-14f62bda870ceea0"
## script = '''
## FROM rust-base AS dep-l-env_logger-0.9.3-14f62bda870ceea0
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-env_logger-0.9.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3 \
##   --mount=from=out-db60e10e02e74b95,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta,source=/libatty-db60e10e02e74b95.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-d4a86c79f6da3dd6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta,source=/libhumantime-d4a86c79f6da3dd6.rmeta \
##   --mount=from=out-ea8327ab44844df1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta,source=/liblog-ea8327ab44844df1.rmeta \
##   --mount=from=out-72624534882400be,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta,source=/libregex-72624534882400be.rmeta \
##   --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta,source=/libregex_automata-ba444f6efb5958a6.rmeta \
##   --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
##   --mount=from=out-eb1e3a5a15a3aa8c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta,source=/libtermcolor-eb1e3a5a15a3aa8c.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="env_logger" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A logging implementation for `log` which is configured via an environment\nvariable.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="env_logger" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/env-logger-rs/env_logger/" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.9.3" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'env_logger' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="atty"' '--cfg' 'feature="default"' '--cfg' 'feature="humantime"' '--cfg' 'feature="regex"' '--cfg' 'feature="termcolor"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("atty", "default", "humantime", "regex", "termcolor"))' '-C' 'metadata=e9a50e1d5788bfa6' '-C' 'extra-filename=-14f62bda870ceea0' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'atty=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta' '--extern' 'humantime=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta' '--extern' 'log=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta' '--extern' 'regex=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta' '--extern' 'termcolor=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/env_logger-0.9.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-14f62bda870ceea0"
## script = """
## FROM scratch AS out-14f62bda870ceea0
## COPY --from=dep-l-env_logger-0.9.3-14f62bda870ceea0 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-14f62bda870ceea0* /"""

FROM scratch AS cratesio-futures-core-0.3.30
ADD --chmod=0664 --checksum=sha256:dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d \
  https://static.crates.io/crates/futures-core/futures-core-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-core-0.3.30-1d93d74bf27fab54
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-core-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The core traits and types in for the `futures` library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-core" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "portable-atomic", "std", "unstable"))' '-C' 'metadata=0177874ce85c688c' '-C' 'extra-filename=-1d93d74bf27fab54' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-1d93d74bf27fab54
COPY --from=dep-l-futures-core-0.3.30-1d93d74bf27fab54 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-1d93d74bf27fab54* /

## this = "1d93d74bf27fab54"
## writes = [
##     "deps/futures_core-1d93d74bf27fab54.d",
##     "deps/libfutures_core-1d93d74bf27fab54.rmeta",
##     "deps/libfutures_core-1d93d74bf27fab54.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_core-1d93d74bf27fab54.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"trait `AssertSync` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/task/__internal/atomic_waker.rs","byte_start":8157,"byte_end":8167,"line_start":209,"line_end":209,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"        trait AssertSync: Sync {}","highlight_start":15,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertSync` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/task/__internal/atomic_waker.rs:209:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        trait AssertSync: Sync {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-core-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-core-0.3.30
## ADD --chmod=0664 --checksum=sha256:dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d \
##   https://static.crates.io/crates/futures-core/futures-core-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-core-0.3.30-1d93d74bf27fab54"
## script = '''
## FROM rust-base AS dep-l-futures-core-0.3.30-1d93d74bf27fab54
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-core-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The core traits and types in for the `futures` library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-core" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "portable-atomic", "std", "unstable"))' '-C' 'metadata=0177874ce85c688c' '-C' 'extra-filename=-1d93d74bf27fab54' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-core-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-1d93d74bf27fab54"
## script = """
## FROM scratch AS out-1d93d74bf27fab54
## COPY --from=dep-l-futures-core-0.3.30-1d93d74bf27fab54 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-1d93d74bf27fab54* /"""

FROM scratch AS cratesio-futures-sink-0.3.30
ADD --chmod=0664 --checksum=sha256:9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5 \
  https://static.crates.io/crates/futures-sink/futures-sink-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-sink-0.3.30-6ec89d477b5d3e53
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-sink-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_sink" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The asynchronous `Sink` trait for the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-sink" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_sink' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=3ee5f93a270a9395' '-C' 'extra-filename=-6ec89d477b5d3e53' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6ec89d477b5d3e53
COPY --from=dep-l-futures-sink-0.3.30-6ec89d477b5d3e53 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-6ec89d477b5d3e53* /

## this = "6ec89d477b5d3e53"
## writes = [
##     "deps/futures_sink-6ec89d477b5d3e53.d",
##     "deps/libfutures_sink-6ec89d477b5d3e53.rmeta",
##     "deps/libfutures_sink-6ec89d477b5d3e53.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_sink-6ec89d477b5d3e53.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-sink-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-sink-0.3.30
## ADD --chmod=0664 --checksum=sha256:9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5 \
##   https://static.crates.io/crates/futures-sink/futures-sink-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-sink-0.3.30-6ec89d477b5d3e53"
## script = '''
## FROM rust-base AS dep-l-futures-sink-0.3.30-6ec89d477b5d3e53
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-sink-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_sink" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The asynchronous `Sink` trait for the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-sink" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_sink' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "std"))' '-C' 'metadata=3ee5f93a270a9395' '-C' 'extra-filename=-6ec89d477b5d3e53' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-sink-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6ec89d477b5d3e53"
## script = """
## FROM scratch AS out-6ec89d477b5d3e53
## COPY --from=dep-l-futures-sink-0.3.30-6ec89d477b5d3e53 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-6ec89d477b5d3e53* /"""

FROM scratch AS cratesio-futures-channel-0.3.30
ADD --chmod=0664 --checksum=sha256:eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78 \
  https://static.crates.io/crates/futures-channel/futures-channel-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-channel-0.3.30-ad9d7b2de9358699
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-channel-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30 \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_channel" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Channels for asynchronous communication using futures-rs.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-channel" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_channel' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="futures-sink"' '--cfg' 'feature="sink"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "futures-sink", "sink", "std", "unstable"))' '-C' 'metadata=fb944fea7d23d302' '-C' 'extra-filename=-ad9d7b2de9358699' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_sink=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ad9d7b2de9358699
COPY --from=dep-l-futures-channel-0.3.30-ad9d7b2de9358699 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ad9d7b2de9358699* /

## this = "ad9d7b2de9358699"
## deps = [
##     "1d93d74bf27fab54",
##     "6ec89d477b5d3e53",
## ]
## short_externs = [
##     "futures_core-1d93d74bf27fab54",
##     "futures_sink-6ec89d477b5d3e53",
## ]
## writes = [
##     "deps/futures_channel-ad9d7b2de9358699.d",
##     "deps/libfutures_channel-ad9d7b2de9358699.rmeta",
##     "deps/libfutures_channel-ad9d7b2de9358699.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_channel-ad9d7b2de9358699.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"trait `AssertKinds` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/mpsc/mod.rs","byte_start":5478,"byte_end":5489,"line_start":130,"line_end":130,"column_start":7,"column_end":18,"is_primary":true,"text":[{"text":"trait AssertKinds: Send + Sync + Clone {}","highlight_start":7,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `AssertKinds` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/mpsc/mod.rs:130:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait AssertKinds: Send + Sync + Clone {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-channel-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-channel-0.3.30
## ADD --chmod=0664 --checksum=sha256:eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78 \
##   https://static.crates.io/crates/futures-channel/futures-channel-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-channel-0.3.30-ad9d7b2de9358699"
## script = '''
## FROM rust-base AS dep-l-futures-channel-0.3.30-ad9d7b2de9358699
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-channel-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30 \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_channel" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Channels for asynchronous communication using futures-rs.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-channel" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_channel' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="futures-sink"' '--cfg' 'feature="sink"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "futures-sink", "sink", "std", "unstable"))' '-C' 'metadata=fb944fea7d23d302' '-C' 'extra-filename=-ad9d7b2de9358699' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_sink=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-channel-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ad9d7b2de9358699"
## script = """
## FROM scratch AS out-ad9d7b2de9358699
## COPY --from=dep-l-futures-channel-0.3.30-ad9d7b2de9358699 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ad9d7b2de9358699* /"""

FROM scratch AS cratesio-futures-task-0.3.30
ADD --chmod=0664 --checksum=sha256:38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004 \
  https://static.crates.io/crates/futures-task/futures-task-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-task-0.3.30-f04cff00a4d400c7
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-task-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_task" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Tools for working with tasks.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-task" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_task' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "std", "unstable"))' '-C' 'metadata=77366403dfae0d70' '-C' 'extra-filename=-f04cff00a4d400c7' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f04cff00a4d400c7
COPY --from=dep-l-futures-task-0.3.30-f04cff00a4d400c7 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-f04cff00a4d400c7* /

## this = "f04cff00a4d400c7"
## writes = [
##     "deps/futures_task-f04cff00a4d400c7.d",
##     "deps/libfutures_task-f04cff00a4d400c7.rmeta",
##     "deps/libfutures_task-f04cff00a4d400c7.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_task-f04cff00a4d400c7.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-task-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-task-0.3.30
## ADD --chmod=0664 --checksum=sha256:38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004 \
##   https://static.crates.io/crates/futures-task/futures-task-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-task-0.3.30-f04cff00a4d400c7"
## script = '''
## FROM rust-base AS dep-l-futures-task-0.3.30-f04cff00a4d400c7
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-task-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_task" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Tools for working with tasks.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-task" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_task' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "cfg-target-has-atomic", "default", "std", "unstable"))' '-C' 'metadata=77366403dfae0d70' '-C' 'extra-filename=-f04cff00a4d400c7' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-task-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f04cff00a4d400c7"
## script = """
## FROM scratch AS out-f04cff00a4d400c7
## COPY --from=dep-l-futures-task-0.3.30-f04cff00a4d400c7 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-f04cff00a4d400c7* /"""

FROM scratch AS cratesio-futures-io-0.3.30
ADD --chmod=0664 --checksum=sha256:a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1 \
  https://static.crates.io/crates/futures-io/futures-io-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-io-0.3.30-9a295684e8a14a09
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-io-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_io" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and `AsyncBufRead` traits for the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-io" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_io' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std", "unstable"))' '-C' 'metadata=309599a65ba7b85d' '-C' 'extra-filename=-9a295684e8a14a09' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-9a295684e8a14a09
COPY --from=dep-l-futures-io-0.3.30-9a295684e8a14a09 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-9a295684e8a14a09* /

## this = "9a295684e8a14a09"
## writes = [
##     "deps/futures_io-9a295684e8a14a09.d",
##     "deps/libfutures_io-9a295684e8a14a09.rmeta",
##     "deps/libfutures_io-9a295684e8a14a09.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_io-9a295684e8a14a09.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-io-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-io-0.3.30
## ADD --chmod=0664 --checksum=sha256:a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1 \
##   https://static.crates.io/crates/futures-io/futures-io-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-io-0.3.30-9a295684e8a14a09"
## script = '''
## FROM rust-base AS dep-l-futures-io-0.3.30-9a295684e8a14a09
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-io-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_io" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and `AsyncBufRead` traits for the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-io" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_io' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "std", "unstable"))' '-C' 'metadata=309599a65ba7b85d' '-C' 'extra-filename=-9a295684e8a14a09' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-io-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-9a295684e8a14a09"
## script = """
## FROM scratch AS out-9a295684e8a14a09
## COPY --from=dep-l-futures-io-0.3.30-9a295684e8a14a09 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-9a295684e8a14a09* /"""

FROM scratch AS cratesio-futures-macro-0.3.30
ADD --chmod=0664 --checksum=sha256:87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac \
  https://static.crates.io/crates/futures-macro/futures-macro-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-futures-macro-0.3.30-d6b5133ea5763a96
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-macro-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_macro" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="The futures-rs procedural macro implementations.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-macro" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_macro' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=f8cb3a81e9a3cee6' '-C' 'extra-filename=-d6b5133ea5763a96' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d6b5133ea5763a96
COPY --from=dep-p-futures-macro-0.3.30-d6b5133ea5763a96 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d6b5133ea5763a96* /

## this = "d6b5133ea5763a96"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/futures_macro-d6b5133ea5763a96.d",
##     "deps/libfutures_macro-d6b5133ea5763a96.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_macro-d6b5133ea5763a96.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-macro-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-macro-0.3.30
## ADD --chmod=0664 --checksum=sha256:87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac \
##   https://static.crates.io/crates/futures-macro/futures-macro-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-futures-macro-0.3.30-d6b5133ea5763a96"
## script = '''
## FROM rust-base AS dep-p-futures-macro-0.3.30-d6b5133ea5763a96
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-macro-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_macro" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="The futures-rs procedural macro implementations.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-macro" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_macro' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=f8cb3a81e9a3cee6' '-C' 'extra-filename=-d6b5133ea5763a96' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-macro-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d6b5133ea5763a96"
## script = """
## FROM scratch AS out-d6b5133ea5763a96
## COPY --from=dep-p-futures-macro-0.3.30-d6b5133ea5763a96 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d6b5133ea5763a96* /"""

FROM scratch AS cratesio-pin-project-lite-0.2.13
ADD --chmod=0664 --checksum=sha256:8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58 \
  https://static.crates.io/crates/pin-project-lite/pin-project-lite-0.2.13.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-pin-project-lite-0.2.13-a73e0fc4c66dd601
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-pin-project-lite-0.2.13,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="pin_project_lite" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A lightweight version of pin-project written with declarative macros.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="pin-project-lite" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/taiki-e/pin-project-lite" \
        CARGO_PKG_RUST_VERSION="1.37" \
        CARGO_PKG_VERSION="0.2.13" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="13" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'pin_project_lite' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=750ce7209cbeb90a' '-C' 'extra-filename=-a73e0fc4c66dd601' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a73e0fc4c66dd601
COPY --from=dep-l-pin-project-lite-0.2.13-a73e0fc4c66dd601 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a73e0fc4c66dd601* /

## this = "a73e0fc4c66dd601"
## writes = [
##     "deps/pin_project_lite-a73e0fc4c66dd601.d",
##     "deps/libpin_project_lite-a73e0fc4c66dd601.rmeta",
##     "deps/libpin_project_lite-a73e0fc4c66dd601.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/pin_project_lite-a73e0fc4c66dd601.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-pin-project-lite-0.2.13"
## script = '''
## FROM scratch AS cratesio-pin-project-lite-0.2.13
## ADD --chmod=0664 --checksum=sha256:8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58 \
##   https://static.crates.io/crates/pin-project-lite/pin-project-lite-0.2.13.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-pin-project-lite-0.2.13-a73e0fc4c66dd601"
## script = '''
## FROM rust-base AS dep-l-pin-project-lite-0.2.13-a73e0fc4c66dd601
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-pin-project-lite-0.2.13,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="pin_project_lite" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A lightweight version of pin-project written with declarative macros.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="pin-project-lite" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/taiki-e/pin-project-lite" \
##         CARGO_PKG_RUST_VERSION="1.37" \
##         CARGO_PKG_VERSION="0.2.13" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="13" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'pin_project_lite' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=750ce7209cbeb90a' '-C' 'extra-filename=-a73e0fc4c66dd601' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-project-lite-0.2.13/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a73e0fc4c66dd601"
## script = """
## FROM scratch AS out-a73e0fc4c66dd601
## COPY --from=dep-l-pin-project-lite-0.2.13-a73e0fc4c66dd601 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a73e0fc4c66dd601* /"""

FROM scratch AS cratesio-pin-utils-0.1.0
ADD --chmod=0664 --checksum=sha256:8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184 \
  https://static.crates.io/crates/pin-utils/pin-utils-0.1.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-pin-utils-0.1.0-b74f2a8eb0482878
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-pin-utils-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="pin_utils" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Josef Brandl <mail@josefbrandl.de>" \
        CARGO_PKG_DESCRIPTION="Utilities for pinning\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="pin-utils" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang-nursery/pin-utils" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'pin_utils' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c09f673a2d3f007a' '-C' 'extra-filename=-b74f2a8eb0482878' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b74f2a8eb0482878
COPY --from=dep-l-pin-utils-0.1.0-b74f2a8eb0482878 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b74f2a8eb0482878* /

## this = "b74f2a8eb0482878"
## writes = [
##     "deps/pin_utils-b74f2a8eb0482878.d",
##     "deps/libpin_utils-b74f2a8eb0482878.rmeta",
##     "deps/libpin_utils-b74f2a8eb0482878.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/pin_utils-b74f2a8eb0482878.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-pin-utils-0.1.0"
## script = '''
## FROM scratch AS cratesio-pin-utils-0.1.0
## ADD --chmod=0664 --checksum=sha256:8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184 \
##   https://static.crates.io/crates/pin-utils/pin-utils-0.1.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-pin-utils-0.1.0-b74f2a8eb0482878"
## script = '''
## FROM rust-base AS dep-l-pin-utils-0.1.0-b74f2a8eb0482878
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-pin-utils-0.1.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="pin_utils" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Josef Brandl <mail@josefbrandl.de>" \
##         CARGO_PKG_DESCRIPTION="Utilities for pinning\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="pin-utils" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang-nursery/pin-utils" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'pin_utils' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c09f673a2d3f007a' '-C' 'extra-filename=-b74f2a8eb0482878' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/pin-utils-0.1.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b74f2a8eb0482878"
## script = """
## FROM scratch AS out-b74f2a8eb0482878
## COPY --from=dep-l-pin-utils-0.1.0-b74f2a8eb0482878 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b74f2a8eb0482878* /"""

FROM scratch AS cratesio-slab-0.4.9
ADD --chmod=0664 --checksum=sha256:8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67 \
  https://static.crates.io/crates/slab/slab-0.4.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-slab-0.4.9-be8a800e18ea87ab
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-slab-0.4.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9 \
  --mount=from=crate_out-2620910b4a10dae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="slab" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>" \
        CARGO_PKG_DESCRIPTION="Pre-allocated storage for a uniform data type" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="slab" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/slab" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="0.4.9" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'slab' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=5c0bcf8dff007640' '-C' 'extra-filename=-be8a800e18ea87ab' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-be8a800e18ea87ab
COPY --from=dep-l-slab-0.4.9-be8a800e18ea87ab /tmp/clis-qcow2-rs_0-1-2/release/deps/*-be8a800e18ea87ab* /

## this = "be8a800e18ea87ab"
## writes = [
##     "deps/slab-be8a800e18ea87ab.d",
##     "deps/libslab-be8a800e18ea87ab.rmeta",
##     "deps/libslab-be8a800e18ea87ab.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/slab-be8a800e18ea87ab.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_const_vec_new`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":6820,"byte_end":6841,"line_start":250,"line_end":250,"column_start":15,"column_end":36,"is_primary":true,"text":[{"text":"    #[cfg(not(slab_no_const_vec_new))]","highlight_start":15,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_const_vec_new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:250:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(slab_no_const_vec_new))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_const_vec_new`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":7242,"byte_end":7263,"line_start":264,"line_end":264,"column_start":11,"column_end":32,"is_primary":true,"text":[{"text":"    #[cfg(slab_no_const_vec_new)]","highlight_start":11,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_const_vec_new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:264:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(slab_no_const_vec_new)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_const_vec_new)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_const_vec_new)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":28618,"byte_end":28638,"line_start":929,"line_end":929,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:929:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":33825,"byte_end":33845,"line_start":1098,"line_end":1098,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:1098:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1098\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":36659,"byte_end":36679,"line_start":1206,"line_end":1206,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:1206:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `slab_no_track_caller`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs","byte_start":36939,"byte_end":36959,"line_start":1216,"line_end":1216,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"    #[cfg_attr(not(slab_no_track_caller), track_caller)]","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `slab_no_track_caller`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs:1216:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(not(slab_no_track_caller), track_caller)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(slab_no_track_caller)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(slab_no_track_caller)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-slab-0.4.9"
## script = '''
## FROM scratch AS cratesio-slab-0.4.9
## ADD --chmod=0664 --checksum=sha256:8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67 \
##   https://static.crates.io/crates/slab/slab-0.4.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-slab-0.4.9-be8a800e18ea87ab"
## script = '''
## FROM rust-base AS dep-l-slab-0.4.9-be8a800e18ea87ab
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-slab-0.4.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9 \
##   --mount=from=crate_out-2620910b4a10dae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="slab" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>" \
##         CARGO_PKG_DESCRIPTION="Pre-allocated storage for a uniform data type" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="slab" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/slab" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="0.4.9" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'slab' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=5c0bcf8dff007640' '-C' 'extra-filename=-be8a800e18ea87ab' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/slab-0.4.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-be8a800e18ea87ab"
## script = """
## FROM scratch AS out-be8a800e18ea87ab
## COPY --from=dep-l-slab-0.4.9-be8a800e18ea87ab /tmp/clis-qcow2-rs_0-1-2/release/deps/*-be8a800e18ea87ab* /"""

FROM scratch AS cratesio-futures-util-0.3.30
ADD --chmod=0664 --checksum=sha256:3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48 \
  https://static.crates.io/crates/futures-util/futures-util-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-util-0.3.30-b2a8e6e2e33ce088
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-util-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30 \
  --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
  --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_util" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Common utilities and extension traits for the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-util" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_util' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="async-await"' '--cfg' 'feature="async-await-macro"' '--cfg' 'feature="channel"' '--cfg' 'feature="futures-channel"' '--cfg' 'feature="futures-io"' '--cfg' 'feature="futures-macro"' '--cfg' 'feature="futures-sink"' '--cfg' 'feature="io"' '--cfg' 'feature="memchr"' '--cfg' 'feature="sink"' '--cfg' 'feature="slab"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "async-await", "async-await-macro", "bilock", "cfg-target-has-atomic", "channel", "compat", "default", "futures-channel", "futures-io", "futures-macro", "futures-sink", "futures_01", "io", "io-compat", "memchr", "portable-atomic", "sink", "slab", "std", "tokio-io", "unstable", "write-all-vectored"))' '-C' 'metadata=cfaf9ca64765ebb4' '-C' 'extra-filename=-b2a8e6e2e33ce088' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_channel=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_io=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta' '--extern' 'futures_macro=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so' '--extern' 'futures_sink=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--extern' 'pin_project_lite=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta' '--extern' 'pin_utils=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta' '--extern' 'slab=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b2a8e6e2e33ce088
COPY --from=dep-l-futures-util-0.3.30-b2a8e6e2e33ce088 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b2a8e6e2e33ce088* /

## this = "b2a8e6e2e33ce088"
## deps = [
##     "ad9d7b2de9358699",
##     "1d93d74bf27fab54",
##     "6ec89d477b5d3e53",
##     "9a295684e8a14a09",
##     "d6b5133ea5763a96",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
##     "f04cff00a4d400c7",
##     "08328c8b7673a58d",
##     "a73e0fc4c66dd601",
##     "b74f2a8eb0482878",
##     "be8a800e18ea87ab",
## ]
## short_externs = [
##     "futures_channel-ad9d7b2de9358699",
##     "futures_core-1d93d74bf27fab54",
##     "futures_sink-6ec89d477b5d3e53",
##     "futures_io-9a295684e8a14a09",
##     "futures_macro-d6b5133ea5763a96",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
##     "futures_task-f04cff00a4d400c7",
##     "memchr-08328c8b7673a58d",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-be8a800e18ea87ab",
## ]
## writes = [
##     "deps/futures_util-b2a8e6e2e33ce088.d",
##     "deps/libfutures_util-b2a8e6e2e33ce088.rmeta",
##     "deps/libfutures_util-b2a8e6e2e33ce088.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_util-b2a8e6e2e33ce088.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-util-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-util-0.3.30
## ADD --chmod=0664 --checksum=sha256:3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48 \
##   https://static.crates.io/crates/futures-util/futures-util-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-util-0.3.30-b2a8e6e2e33ce088"
## script = '''
## FROM rust-base AS dep-l-futures-util-0.3.30-b2a8e6e2e33ce088
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-util-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30 \
##   --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##   --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_util" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Common utilities and extension traits for the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-util" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_util' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="async-await"' '--cfg' 'feature="async-await-macro"' '--cfg' 'feature="channel"' '--cfg' 'feature="futures-channel"' '--cfg' 'feature="futures-io"' '--cfg' 'feature="futures-macro"' '--cfg' 'feature="futures-sink"' '--cfg' 'feature="io"' '--cfg' 'feature="memchr"' '--cfg' 'feature="sink"' '--cfg' 'feature="slab"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "async-await", "async-await-macro", "bilock", "cfg-target-has-atomic", "channel", "compat", "default", "futures-channel", "futures-io", "futures-macro", "futures-sink", "futures_01", "io", "io-compat", "memchr", "portable-atomic", "sink", "slab", "std", "tokio-io", "unstable", "write-all-vectored"))' '-C' 'metadata=cfaf9ca64765ebb4' '-C' 'extra-filename=-b2a8e6e2e33ce088' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_channel=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_io=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta' '--extern' 'futures_macro=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so' '--extern' 'futures_sink=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'memchr=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta' '--extern' 'pin_project_lite=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta' '--extern' 'pin_utils=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta' '--extern' 'slab=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-util-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b2a8e6e2e33ce088"
## script = """
## FROM scratch AS out-b2a8e6e2e33ce088
## COPY --from=dep-l-futures-util-0.3.30-b2a8e6e2e33ce088 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b2a8e6e2e33ce088* /"""

FROM scratch AS cratesio-futures-executor-0.3.30
ADD --chmod=0664 --checksum=sha256:a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d \
  https://static.crates.io/crates/futures-executor/futures-executor-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-executor-0.3.30-0c9e132561e25190
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-executor-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30 \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
  --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
  --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta,source=/libfutures_util-b2a8e6e2e33ce088.rmeta \
  --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_executor" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Executors for asynchronous tasks based on the futures-rs library.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-executor" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_executor' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "num_cpus", "std", "thread-pool"))' '-C' 'metadata=c5fb5b7c61731e14' '-C' 'extra-filename=-0c9e132561e25190' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'futures_util=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0c9e132561e25190
COPY --from=dep-l-futures-executor-0.3.30-0c9e132561e25190 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-0c9e132561e25190* /

## this = "0c9e132561e25190"
## deps = [
##     "1d93d74bf27fab54",
##     "f04cff00a4d400c7",
##     "b2a8e6e2e33ce088",
##     "ad9d7b2de9358699",
##     "6ec89d477b5d3e53",
##     "9a295684e8a14a09",
##     "d6b5133ea5763a96",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
##     "08328c8b7673a58d",
##     "a73e0fc4c66dd601",
##     "b74f2a8eb0482878",
##     "be8a800e18ea87ab",
## ]
## short_externs = [
##     "futures_core-1d93d74bf27fab54",
##     "futures_task-f04cff00a4d400c7",
##     "futures_util-b2a8e6e2e33ce088",
##     "futures_channel-ad9d7b2de9358699",
##     "futures_sink-6ec89d477b5d3e53",
##     "futures_io-9a295684e8a14a09",
##     "futures_macro-d6b5133ea5763a96",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
##     "memchr-08328c8b7673a58d",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-be8a800e18ea87ab",
## ]
## writes = [
##     "deps/futures_executor-0c9e132561e25190.d",
##     "deps/libfutures_executor-0c9e132561e25190.rmeta",
##     "deps/libfutures_executor-0c9e132561e25190.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_executor-0c9e132561e25190.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-executor-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-executor-0.3.30
## ADD --chmod=0664 --checksum=sha256:a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d \
##   https://static.crates.io/crates/futures-executor/futures-executor-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-executor-0.3.30-0c9e132561e25190"
## script = '''
## FROM rust-base AS dep-l-futures-executor-0.3.30-0c9e132561e25190
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-executor-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30 \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
##   --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
##   --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta,source=/libfutures_util-b2a8e6e2e33ce088.rmeta \
##   --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_executor" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Executors for asynchronous tasks based on the futures-rs library.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-executor" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_executor' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "num_cpus", "std", "thread-pool"))' '-C' 'metadata=c5fb5b7c61731e14' '-C' 'extra-filename=-0c9e132561e25190' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'futures_util=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-executor-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0c9e132561e25190"
## script = """
## FROM scratch AS out-0c9e132561e25190
## COPY --from=dep-l-futures-executor-0.3.30-0c9e132561e25190 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-0c9e132561e25190* /"""

FROM scratch AS cratesio-futures-0.3.30
ADD --chmod=0664 --checksum=sha256:645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0 \
  https://static.crates.io/crates/futures/futures-0.3.30.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-0.3.30-d32fbdba785e08a6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30 \
  --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
  --mount=from=out-0c9e132561e25190,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta,source=/libfutures_executor-0c9e132561e25190.rmeta \
  --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
  --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta,source=/libfutures_util-b2a8e6e2e33ce088.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="An implementation of futures and streams featuring zero allocations,\ncomposability, and iterator-like interfaces.\n" \
        CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.3.30" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="30" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="async-await"' '--cfg' 'feature="default"' '--cfg' 'feature="executor"' '--cfg' 'feature="futures-executor"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "async-await", "bilock", "cfg-target-has-atomic", "compat", "default", "executor", "futures-executor", "io-compat", "std", "thread-pool", "unstable", "write-all-vectored"))' '-C' 'metadata=fa8e908cc77798db' '-C' 'extra-filename=-d32fbdba785e08a6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_channel=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_executor=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta' '--extern' 'futures_io=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta' '--extern' 'futures_sink=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'futures_util=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d32fbdba785e08a6
COPY --from=dep-l-futures-0.3.30-d32fbdba785e08a6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d32fbdba785e08a6* /

## this = "d32fbdba785e08a6"
## deps = [
##     "ad9d7b2de9358699",
##     "1d93d74bf27fab54",
##     "6ec89d477b5d3e53",
##     "0c9e132561e25190",
##     "f04cff00a4d400c7",
##     "b2a8e6e2e33ce088",
##     "9a295684e8a14a09",
##     "d6b5133ea5763a96",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
##     "08328c8b7673a58d",
##     "a73e0fc4c66dd601",
##     "b74f2a8eb0482878",
##     "be8a800e18ea87ab",
## ]
## short_externs = [
##     "futures_channel-ad9d7b2de9358699",
##     "futures_core-1d93d74bf27fab54",
##     "futures_sink-6ec89d477b5d3e53",
##     "futures_executor-0c9e132561e25190",
##     "futures_task-f04cff00a4d400c7",
##     "futures_util-b2a8e6e2e33ce088",
##     "futures_io-9a295684e8a14a09",
##     "futures_macro-d6b5133ea5763a96",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
##     "memchr-08328c8b7673a58d",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-be8a800e18ea87ab",
## ]
## writes = [
##     "deps/futures-d32fbdba785e08a6.d",
##     "deps/libfutures-d32fbdba785e08a6.rmeta",
##     "deps/libfutures-d32fbdba785e08a6.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures-d32fbdba785e08a6.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-0.3.30"
## script = '''
## FROM scratch AS cratesio-futures-0.3.30
## ADD --chmod=0664 --checksum=sha256:645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0 \
##   https://static.crates.io/crates/futures/futures-0.3.30.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-0.3.30-d32fbdba785e08a6"
## script = '''
## FROM rust-base AS dep-l-futures-0.3.30-d32fbdba785e08a6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-0.3.30,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30 \
##   --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
##   --mount=from=out-0c9e132561e25190,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta,source=/libfutures_executor-0c9e132561e25190.rmeta \
##   --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
##   --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta,source=/libfutures_util-b2a8e6e2e33ce088.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="An implementation of futures and streams featuring zero allocations,\ncomposability, and iterator-like interfaces.\n" \
##         CARGO_PKG_HOMEPAGE="https://rust-lang.github.io/futures-rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/futures-rs" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.3.30" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="30" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="alloc"' '--cfg' 'feature="async-await"' '--cfg' 'feature="default"' '--cfg' 'feature="executor"' '--cfg' 'feature="futures-executor"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "async-await", "bilock", "cfg-target-has-atomic", "compat", "default", "executor", "futures-executor", "io-compat", "std", "thread-pool", "unstable", "write-all-vectored"))' '-C' 'metadata=fa8e908cc77798db' '-C' 'extra-filename=-d32fbdba785e08a6' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_channel=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta' '--extern' 'futures_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta' '--extern' 'futures_executor=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta' '--extern' 'futures_io=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta' '--extern' 'futures_sink=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'futures_util=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-0.3.30/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d32fbdba785e08a6"
## script = """
## FROM scratch AS out-d32fbdba785e08a6
## COPY --from=dep-l-futures-0.3.30-d32fbdba785e08a6 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d32fbdba785e08a6* /"""

FROM scratch AS cratesio-bytes-1.5.0
ADD --chmod=0664 --checksum=sha256:a2bd12c1caf447e69cd4528f47f94d203fd2582878ecb9e9465484c4148a8223 \
  https://static.crates.io/crates/bytes/bytes-1.5.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bytes-1.5.0-d7b35eb956c1be36
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-bytes-1.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bytes" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Sean McArthur <sean@seanmonstar.com>" \
        CARGO_PKG_DESCRIPTION="Types and traits for working with bytes" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bytes" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/bytes" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.5.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bytes' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=0f733f5f653efaa6' '-C' 'extra-filename=-d7b35eb956c1be36' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d7b35eb956c1be36
COPY --from=dep-l-bytes-1.5.0-d7b35eb956c1be36 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d7b35eb956c1be36* /

## this = "d7b35eb956c1be36"
## writes = [
##     "deps/bytes-d7b35eb956c1be36.d",
##     "deps/libbytes-d7b35eb956c1be36.rmeta",
##     "deps/libbytes-d7b35eb956c1be36.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/bytes-d7b35eb956c1be36.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs","byte_start":35097,"byte_end":35101,"line_start":1274,"line_end":1274,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs:1274:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs","byte_start":4843,"byte_end":4847,"line_start":133,"line_end":133,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg(not(all(loom, test)))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs:133:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs","byte_start":5084,"byte_end":5088,"line_start":141,"line_end":141,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(all(loom, test))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs:141:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(loom, test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs","byte_start":5581,"byte_end":5585,"line_start":161,"line_end":161,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg(not(all(loom, test)))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs:161:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs","byte_start":5854,"byte_end":5858,"line_start":171,"line_end":171,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(all(loom, test))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes.rs:171:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(loom, test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes_mut.rs","byte_start":52044,"byte_end":52048,"line_start":1781,"line_end":1781,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/bytes_mut.rs:1781:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1781\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/loom.rs","byte_start":20,"byte_end":24,"line_start":1,"line_end":1,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(all(test, loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/loom.rs:1:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(test, loom)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/loom.rs","byte_start":585,"byte_end":589,"line_start":23,"line_end":23,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/loom.rs:23:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bytes-1.5.0"
## script = '''
## FROM scratch AS cratesio-bytes-1.5.0
## ADD --chmod=0664 --checksum=sha256:a2bd12c1caf447e69cd4528f47f94d203fd2582878ecb9e9465484c4148a8223 \
##   https://static.crates.io/crates/bytes/bytes-1.5.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bytes-1.5.0-d7b35eb956c1be36"
## script = '''
## FROM rust-base AS dep-l-bytes-1.5.0-d7b35eb956c1be36
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-bytes-1.5.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bytes" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Sean McArthur <sean@seanmonstar.com>" \
##         CARGO_PKG_DESCRIPTION="Types and traits for working with bytes" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bytes" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/bytes" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.5.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bytes' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "serde", "std"))' '-C' 'metadata=0f733f5f653efaa6' '-C' 'extra-filename=-d7b35eb956c1be36' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bytes-1.5.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d7b35eb956c1be36"
## script = """
## FROM scratch AS out-d7b35eb956c1be36
## COPY --from=dep-l-bytes-1.5.0-d7b35eb956c1be36 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-d7b35eb956c1be36* /"""

FROM scratch AS cratesio-mio-0.8.10
ADD --chmod=0664 --checksum=sha256:8f3d0b296e374a4e6f3c7b0a1f5a51d748a0d34c85e7dc48fc3fa9a87657fe09 \
  https://static.crates.io/crates/mio/mio-0.8.10.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-mio-0.8.10-8b22b018b5891a0c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-mio-0.8.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10 \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="mio" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/Cargo.toml" \
        CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>:Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Lightweight non-blocking I/O." \
        CARGO_PKG_HOMEPAGE="https://github.com/tokio-rs/mio" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="mio" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/mio" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.8.10" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="10" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'mio' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="net"' '--cfg' 'feature="os-ext"' '--cfg' 'feature="os-poll"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "log", "net", "os-ext", "os-poll"))' '-C' 'metadata=72027af0e88482f4' '-C' 'extra-filename=-8b22b018b5891a0c' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8b22b018b5891a0c
COPY --from=dep-l-mio-0.8.10-8b22b018b5891a0c /tmp/clis-qcow2-rs_0-1-2/release/deps/*-8b22b018b5891a0c* /

## this = "8b22b018b5891a0c"
## deps = ["0addc1beddeea30f"]
## short_externs = ["libc-0addc1beddeea30f"]
## writes = [
##     "deps/mio-8b22b018b5891a0c.d",
##     "deps/libmio-8b22b018b5891a0c.rmeta",
##     "deps/libmio-8b22b018b5891a0c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/mio-8b22b018b5891a0c.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs","byte_start":29,"byte_end":60,"line_start":3,"line_end":3,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs:3:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs","byte_start":17992,"byte_end":18023,"line_start":432,"line_end":432,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs:432:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs","byte_start":28900,"byte_end":28931,"line_start":723,"line_end":723,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs:723:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs","byte_start":29156,"byte_end":29187,"line_start":735,"line_end":735,"column_start":13,"column_end":44,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_poll_poll),","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/poll.rs:735:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs","byte_start":3281,"byte_end":3313,"line_start":102,"line_end":102,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"        mio_unsupported_force_waker_pipe,","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs:102:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs","byte_start":944,"byte_end":975,"line_start":38,"line_end":38,"column_start":23,"column_end":54,"is_primary":true,"text":[{"text":"        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\")))]","highlight_start":23,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs:38:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs","byte_start":2808,"byte_end":2839,"line_start":91,"line_end":91,"column_start":23,"column_end":54,"is_primary":true,"text":[{"text":"        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\",target_os = \"vita\")))]","highlight_start":23,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs:91:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(any(mio_unsupported_force_poll_poll, target_os = \"solaris\",target_os = \"vita\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs","byte_start":2970,"byte_end":3001,"line_start":94,"line_end":94,"column_start":19,"column_end":50,"is_primary":true,"text":[{"text":"        #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]","highlight_start":19,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/mod.rs:94:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":19,"byte_end":50,"line_start":2,"line_end":2,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:2:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":223,"byte_end":254,"line_start":13,"line_end":13,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":474,"byte_end":505,"line_start":24,"line_end":24,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":587,"byte_end":618,"line_start":31,"line_end":31,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":913,"byte_end":944,"line_start":43,"line_end":43,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:43:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":1238,"byte_end":1269,"line_start":58,"line_end":58,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:58:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs","byte_start":767,"byte_end":798,"line_start":38,"line_end":38,"column_start":15,"column_end":46,"is_primary":true,"text":[{"text":"    #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]","highlight_start":15,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/selector/mod.rs:38:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(mio_unsupported_force_poll_poll, target_os = \"solaris\", target_os = \"vita\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":19,"byte_end":50,"line_start":2,"line_end":2,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:2:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":78,"byte_end":110,"line_start":4,"line_end":4,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_waker_pipe),","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:4:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":1445,"byte_end":1476,"line_start":55,"line_end":55,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_poll_poll),","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:55:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_poll_poll),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":1504,"byte_end":1536,"line_start":57,"line_end":57,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_waker_pipe),","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:57:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":1847,"byte_end":1879,"line_start":71,"line_end":71,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:71:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":4377,"byte_end":4408,"line_start":143,"line_end":143,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:143:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":4418,"byte_end":4450,"line_start":144,"line_end":144,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:144:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":4596,"byte_end":4628,"line_start":150,"line_end":150,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:150:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":5734,"byte_end":5766,"line_start":191,"line_end":191,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"    not(mio_unsupported_force_waker_pipe),","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:191:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":5979,"byte_end":6011,"line_start":203,"line_end":203,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    mio_unsupported_force_waker_pipe,","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:203:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":8560,"byte_end":8591,"line_start":288,"line_end":288,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"        mio_unsupported_force_poll_poll,","highlight_start":9,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:288:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":8618,"byte_end":8650,"line_start":290,"line_end":290,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"            mio_unsupported_force_waker_pipe,","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:290:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":8987,"byte_end":9018,"line_start":305,"line_end":305,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:305:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":9595,"byte_end":9626,"line_start":335,"line_end":335,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    mio_unsupported_force_poll_poll,","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:335:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mio_unsupported_force_poll_poll,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":412,"byte_end":444,"line_start":17,"line_end":17,"column_start":13,"column_end":45,"is_primary":true,"text":[{"text":"        not(mio_unsupported_force_waker_pipe),","highlight_start":13,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:17:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        not(mio_unsupported_force_waker_pipe),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":592,"byte_end":624,"line_start":22,"line_end":22,"column_start":9,"column_end":41,"is_primary":true,"text":[{"text":"        mio_unsupported_force_waker_pipe,","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_waker_pipe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:22:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mio_unsupported_force_waker_pipe,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_waker_pipe)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_waker_pipe)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs","byte_start":3568,"byte_end":3599,"line_start":117,"line_end":117,"column_start":15,"column_end":46,"is_primary":true,"text":[{"text":"        #[cfg(mio_unsupported_force_poll_poll)]","highlight_start":15,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/sys/unix/waker.rs:117:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(mio_unsupported_force_poll_poll)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"32 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 32 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-mio-0.8.10"
## script = '''
## FROM scratch AS cratesio-mio-0.8.10
## ADD --chmod=0664 --checksum=sha256:8f3d0b296e374a4e6f3c7b0a1f5a51d748a0d34c85e7dc48fc3fa9a87657fe09 \
##   https://static.crates.io/crates/mio/mio-0.8.10.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-mio-0.8.10-8b22b018b5891a0c"
## script = '''
## FROM rust-base AS dep-l-mio-0.8.10-8b22b018b5891a0c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-mio-0.8.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10 \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="mio" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Carl Lerche <me@carllerche.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>:Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Lightweight non-blocking I/O." \
##         CARGO_PKG_HOMEPAGE="https://github.com/tokio-rs/mio" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="mio" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/mio" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.8.10" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="10" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'mio' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="net"' '--cfg' 'feature="os-ext"' '--cfg' 'feature="os-poll"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "log", "net", "os-ext", "os-poll"))' '-C' 'metadata=72027af0e88482f4' '-C' 'extra-filename=-8b22b018b5891a0c' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/mio-0.8.10/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8b22b018b5891a0c"
## script = """
## FROM scratch AS out-8b22b018b5891a0c
## COPY --from=dep-l-mio-0.8.10-8b22b018b5891a0c /tmp/clis-qcow2-rs_0-1-2/release/deps/*-8b22b018b5891a0c* /"""

FROM scratch AS cratesio-num_cpus-1.16.0
ADD --chmod=0664 --checksum=sha256:4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43 \
  https://static.crates.io/crates/num_cpus/num_cpus-1.16.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-num_cpus-1.16.0-abda958216542c23
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-num_cpus-1.16.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0 \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="num_cpus" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Sean McArthur <sean@seanmonstar.com>" \
        CARGO_PKG_DESCRIPTION="Get the number of CPUs on a machine." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="num_cpus" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/seanmonstar/num_cpus" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.16.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="16" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'num_cpus' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=01024d80e7d95b1d' '-C' 'extra-filename=-abda958216542c23' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-abda958216542c23
COPY --from=dep-l-num_cpus-1.16.0-abda958216542c23 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-abda958216542c23* /

## this = "abda958216542c23"
## deps = ["0addc1beddeea30f"]
## short_externs = ["libc-0addc1beddeea30f"]
## writes = [
##     "deps/num_cpus-abda958216542c23.d",
##     "deps/libnum_cpus-abda958216542c23.rmeta",
##     "deps/libnum_cpus-abda958216542c23.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/num_cpus-abda958216542c23.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nacl`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs","byte_start":9940,"byte_end":9958,"line_start":355,"line_end":355,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    target_os = \"nacl\",","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nacl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs:355:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_os = \"nacl\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `nacl`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs","byte_start":12204,"byte_end":12222,"line_start":437,"line_end":437,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    target_os = \"nacl\",","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `nacl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs:437:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_os = \"nacl\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-num_cpus-1.16.0"
## script = '''
## FROM scratch AS cratesio-num_cpus-1.16.0
## ADD --chmod=0664 --checksum=sha256:4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43 \
##   https://static.crates.io/crates/num_cpus/num_cpus-1.16.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-num_cpus-1.16.0-abda958216542c23"
## script = '''
## FROM rust-base AS dep-l-num_cpus-1.16.0-abda958216542c23
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-num_cpus-1.16.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0 \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="num_cpus" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Sean McArthur <sean@seanmonstar.com>" \
##         CARGO_PKG_DESCRIPTION="Get the number of CPUs on a machine." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="num_cpus" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/seanmonstar/num_cpus" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.16.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="16" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'num_cpus' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=01024d80e7d95b1d' '-C' 'extra-filename=-abda958216542c23' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/num_cpus-1.16.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-abda958216542c23"
## script = """
## FROM scratch AS out-abda958216542c23
## COPY --from=dep-l-num_cpus-1.16.0-abda958216542c23 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-abda958216542c23* /"""

FROM scratch AS cratesio-scopeguard-1.2.0
ADD --chmod=0664 --checksum=sha256:94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49 \
  https://static.crates.io/crates/scopeguard/scopeguard-1.2.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-scopeguard-1.2.0-b477fb82efd13fea
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-scopeguard-1.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="scopeguard" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="bluss" \
        CARGO_PKG_DESCRIPTION="A RAII scope guard that will run a given closure when it goes out of scope,\neven if the code between panics (assuming unwinding panic).\n\nDefines the macros `defer!`, `defer_on_unwind!`, `defer_on_success!` as\nshorthands for guards with one of the implemented strategies.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="scopeguard" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bluss/scopeguard" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.2.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'scopeguard' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "use_std"))' '-C' 'metadata=7130270c04ca018b' '-C' 'extra-filename=-b477fb82efd13fea' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b477fb82efd13fea
COPY --from=dep-l-scopeguard-1.2.0-b477fb82efd13fea /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b477fb82efd13fea* /

## this = "b477fb82efd13fea"
## writes = [
##     "deps/scopeguard-b477fb82efd13fea.d",
##     "deps/libscopeguard-b477fb82efd13fea.rmeta",
##     "deps/libscopeguard-b477fb82efd13fea.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/scopeguard-b477fb82efd13fea.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-scopeguard-1.2.0"
## script = '''
## FROM scratch AS cratesio-scopeguard-1.2.0
## ADD --chmod=0664 --checksum=sha256:94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49 \
##   https://static.crates.io/crates/scopeguard/scopeguard-1.2.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-scopeguard-1.2.0-b477fb82efd13fea"
## script = '''
## FROM rust-base AS dep-l-scopeguard-1.2.0-b477fb82efd13fea
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-scopeguard-1.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="scopeguard" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="bluss" \
##         CARGO_PKG_DESCRIPTION="A RAII scope guard that will run a given closure when it goes out of scope,\neven if the code between panics (assuming unwinding panic).\n\nDefines the macros `defer!`, `defer_on_unwind!`, `defer_on_success!` as\nshorthands for guards with one of the implemented strategies.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="scopeguard" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bluss/scopeguard" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.2.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'scopeguard' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "use_std"))' '-C' 'metadata=7130270c04ca018b' '-C' 'extra-filename=-b477fb82efd13fea' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scopeguard-1.2.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b477fb82efd13fea"
## script = """
## FROM scratch AS out-b477fb82efd13fea
## COPY --from=dep-l-scopeguard-1.2.0-b477fb82efd13fea /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b477fb82efd13fea* /"""

FROM scratch AS cratesio-lock_api-0.4.11
ADD --chmod=0664 --checksum=sha256:3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45 \
  https://static.crates.io/crates/lock_api/lock_api-0.4.11.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-lock_api-0.4.11-1a71aa69f2330c14
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-lock_api-0.4.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11 \
  --mount=from=crate_out-6fd90c9ce0b1f28e,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="lock_api" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Wrappers to create fully-featured Mutex and RwLock types. Compatible with no_std." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="lock_api" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
        CARGO_PKG_RUST_VERSION="1.49.0" \
        CARGO_PKG_VERSION="0.4.11" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="11" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'lock_api' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="atomic_usize"' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "atomic_usize", "default", "nightly", "owning_ref", "serde"))' '-C' 'metadata=b38e6cd7861e1d34' '-C' 'extra-filename=-1a71aa69f2330c14' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'scopeguard=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta' '--cap-lints' 'warn' '--cfg' 'has_const_fn_trait_bound' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-1a71aa69f2330c14
COPY --from=dep-l-lock_api-0.4.11-1a71aa69f2330c14 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-1a71aa69f2330c14* /

## this = "1a71aa69f2330c14"
## deps = ["b477fb82efd13fea"]
## short_externs = ["scopeguard-b477fb82efd13fea"]
## writes = [
##     "deps/lock_api-1a71aa69f2330c14.d",
##     "deps/liblock_api-1a71aa69f2330c14.rmeta",
##     "deps/liblock_api-1a71aa69f2330c14.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/lock_api-1a71aa69f2330c14.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/mutex.rs","byte_start":5541,"byte_end":5565,"line_start":152,"line_end":152,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"    #[cfg(has_const_fn_trait_bound)]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/mutex.rs:152:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_const_fn_trait_bound)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/mutex.rs","byte_start":5805,"byte_end":5829,"line_start":162,"line_end":162,"column_start":15,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(not(has_const_fn_trait_bound))]","highlight_start":15,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/mutex.rs:162:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(has_const_fn_trait_bound))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/remutex.rs","byte_start":7835,"byte_end":7859,"line_start":235,"line_end":235,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"    #[cfg(has_const_fn_trait_bound)]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/remutex.rs:235:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_const_fn_trait_bound)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/remutex.rs","byte_start":8314,"byte_end":8338,"line_start":250,"line_end":250,"column_start":15,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(not(has_const_fn_trait_bound))]","highlight_start":15,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/remutex.rs:250:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(has_const_fn_trait_bound))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/rwlock.rs","byte_start":13536,"byte_end":13560,"line_start":369,"line_end":369,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"    #[cfg(has_const_fn_trait_bound)]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/rwlock.rs:369:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(has_const_fn_trait_bound)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `has_const_fn_trait_bound`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/rwlock.rs","byte_start":13806,"byte_end":13830,"line_start":379,"line_end":379,"column_start":15,"column_end":39,"is_primary":true,"text":[{"text":"    #[cfg(not(has_const_fn_trait_bound))]","highlight_start":15,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `has_const_fn_trait_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/rwlock.rs:379:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(has_const_fn_trait_bound))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(has_const_fn_trait_bound)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/lib.rs","byte_start":3968,"byte_end":3979,"line_start":103,"line_end":103,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"pub struct GuardNoSend(*mut ());","highlight_start":12,"highlight_end":23}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/lib.rs","byte_start":3980,"byte_end":3987,"line_start":103,"line_end":103,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"pub struct GuardNoSend(*mut ());","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing this field","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/lib.rs:103:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GuardNoSend(*mut ());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-lock_api-0.4.11"
## script = '''
## FROM scratch AS cratesio-lock_api-0.4.11
## ADD --chmod=0664 --checksum=sha256:3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45 \
##   https://static.crates.io/crates/lock_api/lock_api-0.4.11.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-lock_api-0.4.11-1a71aa69f2330c14"
## script = '''
## FROM rust-base AS dep-l-lock_api-0.4.11-1a71aa69f2330c14
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-lock_api-0.4.11,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11 \
##   --mount=from=crate_out-6fd90c9ce0b1f28e,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="lock_api" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Wrappers to create fully-featured Mutex and RwLock types. Compatible with no_std." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="lock_api" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
##         CARGO_PKG_RUST_VERSION="1.49.0" \
##         CARGO_PKG_VERSION="0.4.11" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="11" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'lock_api' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="atomic_usize"' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "atomic_usize", "default", "nightly", "owning_ref", "serde"))' '-C' 'metadata=b38e6cd7861e1d34' '-C' 'extra-filename=-1a71aa69f2330c14' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'scopeguard=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta' '--cap-lints' 'warn' '--cfg' 'has_const_fn_trait_bound' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lock_api-0.4.11/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-1a71aa69f2330c14"
## script = """
## FROM scratch AS out-1a71aa69f2330c14
## COPY --from=dep-l-lock_api-0.4.11-1a71aa69f2330c14 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-1a71aa69f2330c14* /"""

FROM scratch AS cratesio-cfg-if-1.0.0
ADD --chmod=0664 --checksum=sha256:baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd \
  https://static.crates.io/crates/cfg-if/cfg-if-1.0.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-cfg-if-1.0.0-da34da6838abd7f1
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-cfg-if-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="cfg_if" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="A macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/cfg-if" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="cfg-if" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/cfg-if" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'cfg_if' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std"))' '-C' 'metadata=f774a8b1a0b6ae97' '-C' 'extra-filename=-da34da6838abd7f1' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-da34da6838abd7f1
COPY --from=dep-l-cfg-if-1.0.0-da34da6838abd7f1 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-da34da6838abd7f1* /

## this = "da34da6838abd7f1"
## writes = [
##     "deps/cfg_if-da34da6838abd7f1.d",
##     "deps/libcfg_if-da34da6838abd7f1.rmeta",
##     "deps/libcfg_if-da34da6838abd7f1.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/cfg_if-da34da6838abd7f1.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-cfg-if-1.0.0"
## script = '''
## FROM scratch AS cratesio-cfg-if-1.0.0
## ADD --chmod=0664 --checksum=sha256:baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd \
##   https://static.crates.io/crates/cfg-if/cfg-if-1.0.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-cfg-if-1.0.0-da34da6838abd7f1"
## script = '''
## FROM rust-base AS dep-l-cfg-if-1.0.0-da34da6838abd7f1
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-cfg-if-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="cfg_if" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="A macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/cfg-if" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="cfg-if" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/cfg-if" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'cfg_if' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std"))' '-C' 'metadata=f774a8b1a0b6ae97' '-C' 'extra-filename=-da34da6838abd7f1' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cfg-if-1.0.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-da34da6838abd7f1"
## script = """
## FROM scratch AS out-da34da6838abd7f1
## COPY --from=dep-l-cfg-if-1.0.0-da34da6838abd7f1 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-da34da6838abd7f1* /"""

FROM scratch AS cratesio-smallvec-1.11.2
ADD --chmod=0664 --checksum=sha256:4dccd0940a2dcdf68d092b8cbab7dc0ad8fa938bf95787e1b916b0e3d0e8e970 \
  https://static.crates.io/crates/smallvec/smallvec-1.11.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-smallvec-1.11.2-db7ba43bb64f435f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-smallvec-1.11.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="smallvec" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Servo Project Developers" \
        CARGO_PKG_DESCRIPTION="'Small vector' optimization: store up to a small number of items on the stack" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="smallvec" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/servo/rust-smallvec" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.11.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="11" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'smallvec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "const_generics", "const_new", "debugger_visualizer", "drain_filter", "drain_keep_rest", "may_dangle", "serde", "specialization", "union", "write"))' '-C' 'metadata=de18fffac81fffa6' '-C' 'extra-filename=-db7ba43bb64f435f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-db7ba43bb64f435f
COPY --from=dep-l-smallvec-1.11.2-db7ba43bb64f435f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-db7ba43bb64f435f* /

## this = "db7ba43bb64f435f"
## writes = [
##     "deps/smallvec-db7ba43bb64f435f.d",
##     "deps/libsmallvec-db7ba43bb64f435f.rmeta",
##     "deps/libsmallvec-db7ba43bb64f435f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/smallvec-db7ba43bb64f435f.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-smallvec-1.11.2"
## script = '''
## FROM scratch AS cratesio-smallvec-1.11.2
## ADD --chmod=0664 --checksum=sha256:4dccd0940a2dcdf68d092b8cbab7dc0ad8fa938bf95787e1b916b0e3d0e8e970 \
##   https://static.crates.io/crates/smallvec/smallvec-1.11.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-smallvec-1.11.2-db7ba43bb64f435f"
## script = '''
## FROM rust-base AS dep-l-smallvec-1.11.2-db7ba43bb64f435f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-smallvec-1.11.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="smallvec" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Servo Project Developers" \
##         CARGO_PKG_DESCRIPTION="'Small vector' optimization: store up to a small number of items on the stack" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="smallvec" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/servo/rust-smallvec" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.11.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="11" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'smallvec' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "const_generics", "const_new", "debugger_visualizer", "drain_filter", "drain_keep_rest", "may_dangle", "serde", "specialization", "union", "write"))' '-C' 'metadata=de18fffac81fffa6' '-C' 'extra-filename=-db7ba43bb64f435f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/smallvec-1.11.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-db7ba43bb64f435f"
## script = """
## FROM scratch AS out-db7ba43bb64f435f
## COPY --from=dep-l-smallvec-1.11.2-db7ba43bb64f435f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-db7ba43bb64f435f* /"""

FROM scratch AS cratesio-parking_lot_core-0.9.9
ADD --chmod=0664 --checksum=sha256:4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e \
  https://static.crates.io/crates/parking_lot_core/parking_lot_core-0.9.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-parking_lot_core-0.9.9-f8744ca11f01d51a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-parking_lot_core-0.9.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9 \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="parking_lot_core" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="An advanced API for creating custom synchronization primitives." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="parking_lot_core" \
        CARGO_PKG_README= \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
        CARGO_PKG_RUST_VERSION="1.49.0" \
        CARGO_PKG_VERSION="0.9.9" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/parking_lot_core-a17aea72ce7a93df/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'parking_lot_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "deadlock_detection", "nightly", "petgraph", "thread-id"))' '-C' 'metadata=45f6af357029670a' '-C' 'extra-filename=-f8744ca11f01d51a' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'cfg_if=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'smallvec=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f8744ca11f01d51a
COPY --from=dep-l-parking_lot_core-0.9.9-f8744ca11f01d51a /tmp/clis-qcow2-rs_0-1-2/release/deps/*-f8744ca11f01d51a* /

## this = "f8744ca11f01d51a"
## deps = [
##     "da34da6838abd7f1",
##     "0addc1beddeea30f",
##     "db7ba43bb64f435f",
## ]
## short_externs = [
##     "cfg_if-da34da6838abd7f1",
##     "libc-0addc1beddeea30f",
##     "smallvec-db7ba43bb64f435f",
## ]
## writes = [
##     "deps/parking_lot_core-f8744ca11f01d51a.d",
##     "deps/libparking_lot_core-f8744ca11f01d51a.rmeta",
##     "deps/libparking_lot_core-f8744ca11f01d51a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/parking_lot_core-f8744ca11f01d51a.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused import: `UnparkHandle`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/thread_parker/mod.rs","byte_start":3074,"byte_end":3086,"line_start":85,"line_end":85,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"pub use self::imp::{thread_yield, ThreadParker, UnparkHandle};","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/thread_parker/mod.rs","byte_start":3072,"byte_end":3086,"line_start":85,"line_end":85,"column_start":47,"column_end":61,"is_primary":true,"text":[{"text":"pub use self::imp::{thread_yield, ThreadParker, UnparkHandle};","highlight_start":47,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `UnparkHandle`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/thread_parker/mod.rs:85:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use self::imp::{thread_yield, ThreadParker, UnparkHandle};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tsan_enabled`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/word_lock.rs","byte_start":10584,"byte_end":10596,"line_start":293,"line_end":293,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    if cfg!(tsan_enabled) {","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tsan_enabled)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tsan_enabled)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tsan_enabled`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/word_lock.rs:293:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if cfg!(tsan_enabled) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tsan_enabled)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tsan_enabled)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-parking_lot_core-0.9.9"
## script = '''
## FROM scratch AS cratesio-parking_lot_core-0.9.9
## ADD --chmod=0664 --checksum=sha256:4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e \
##   https://static.crates.io/crates/parking_lot_core/parking_lot_core-0.9.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-parking_lot_core-0.9.9-f8744ca11f01d51a"
## script = '''
## FROM rust-base AS dep-l-parking_lot_core-0.9.9-f8744ca11f01d51a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-parking_lot_core-0.9.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9 \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="parking_lot_core" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="An advanced API for creating custom synchronization primitives." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="parking_lot_core" \
##         CARGO_PKG_README= \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
##         CARGO_PKG_RUST_VERSION="1.49.0" \
##         CARGO_PKG_VERSION="0.9.9" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/parking_lot_core-a17aea72ce7a93df/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'parking_lot_core' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "deadlock_detection", "nightly", "petgraph", "thread-id"))' '-C' 'metadata=45f6af357029670a' '-C' 'extra-filename=-f8744ca11f01d51a' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'cfg_if=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'smallvec=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot_core-0.9.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f8744ca11f01d51a"
## script = """
## FROM scratch AS out-f8744ca11f01d51a
## COPY --from=dep-l-parking_lot_core-0.9.9-f8744ca11f01d51a /tmp/clis-qcow2-rs_0-1-2/release/deps/*-f8744ca11f01d51a* /"""

FROM scratch AS cratesio-parking_lot-0.12.1
ADD --chmod=0664 --checksum=sha256:3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f \
  https://static.crates.io/crates/parking_lot/parking_lot-0.12.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-parking_lot-0.12.1-4ac6edc772146637
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-parking_lot-0.12.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1 \
  --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="parking_lot" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="More compact and efficient implementations of the standard synchronization primitives." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="parking_lot" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.12.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="12" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'parking_lot' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "deadlock_detection", "default", "hardware-lock-elision", "nightly", "owning_ref", "send_guard", "serde"))' '-C' 'metadata=56894506c1d3a016' '-C' 'extra-filename=-4ac6edc772146637' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'lock_api=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta' '--extern' 'parking_lot_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4ac6edc772146637
COPY --from=dep-l-parking_lot-0.12.1-4ac6edc772146637 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-4ac6edc772146637* /

## this = "4ac6edc772146637"
## deps = [
##     "1a71aa69f2330c14",
##     "b477fb82efd13fea",
##     "f8744ca11f01d51a",
##     "da34da6838abd7f1",
##     "0addc1beddeea30f",
##     "db7ba43bb64f435f",
## ]
## short_externs = [
##     "lock_api-1a71aa69f2330c14",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-f8744ca11f01d51a",
##     "cfg_if-da34da6838abd7f1",
##     "libc-0addc1beddeea30f",
##     "smallvec-db7ba43bb64f435f",
## ]
## writes = [
##     "deps/parking_lot-4ac6edc772146637.d",
##     "deps/libparking_lot-4ac6edc772146637.rmeta",
##     "deps/libparking_lot-4ac6edc772146637.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/parking_lot-4ac6edc772146637.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-parking_lot-0.12.1"
## script = '''
## FROM scratch AS cratesio-parking_lot-0.12.1
## ADD --chmod=0664 --checksum=sha256:3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f \
##   https://static.crates.io/crates/parking_lot/parking_lot-0.12.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-parking_lot-0.12.1-4ac6edc772146637"
## script = '''
## FROM rust-base AS dep-l-parking_lot-0.12.1-4ac6edc772146637
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-parking_lot-0.12.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1 \
##   --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="parking_lot" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="More compact and efficient implementations of the standard synchronization primitives." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="parking_lot" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Amanieu/parking_lot" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.12.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="12" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'parking_lot' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arc_lock", "deadlock_detection", "default", "hardware-lock-elision", "nightly", "owning_ref", "send_guard", "serde"))' '-C' 'metadata=56894506c1d3a016' '-C' 'extra-filename=-4ac6edc772146637' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'lock_api=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta' '--extern' 'parking_lot_core=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/parking_lot-0.12.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4ac6edc772146637"
## script = """
## FROM scratch AS out-4ac6edc772146637
## COPY --from=dep-l-parking_lot-0.12.1-4ac6edc772146637 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-4ac6edc772146637* /"""

FROM scratch AS cratesio-signal-hook-registry-1.4.1
ADD --chmod=0664 --checksum=sha256:d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1 \
  https://static.crates.io/crates/signal-hook-registry/signal-hook-registry-1.4.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-signal-hook-registry-1.4.1-5395542b51c1f12e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-signal-hook-registry-1.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1 \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="signal_hook_registry" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Michal 'vorner' Vaner <vorner@vorner.cz>:Masaki Hara <ackie.h.gmai@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Backend crate for signal-hook" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0/MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="signal-hook-registry" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/vorner/signal-hook" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.4.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'signal_hook_registry' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=173abf6929e2a9cc' '-C' 'extra-filename=-5395542b51c1f12e' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-5395542b51c1f12e
COPY --from=dep-l-signal-hook-registry-1.4.1-5395542b51c1f12e /tmp/clis-qcow2-rs_0-1-2/release/deps/*-5395542b51c1f12e* /

## this = "5395542b51c1f12e"
## deps = ["0addc1beddeea30f"]
## short_externs = ["libc-0addc1beddeea30f"]
## writes = [
##     "deps/signal_hook_registry-5395542b51c1f12e.d",
##     "deps/libsignal_hook_registry-5395542b51c1f12e.rmeta",
##     "deps/libsignal_hook_registry-5395542b51c1f12e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/signal_hook_registry-5395542b51c1f12e.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"creating a shared reference to mutable static is discouraged","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1/src/lib.rs","byte_start":11226,"byte_end":11246,"line_start":287,"line_end":287,"column_start":18,"column_end":38,"is_primary":true,"text":[{"text":"        unsafe { GLOBAL_DATA.as_ref().unwrap() }","highlight_start":18,"highlight_end":38}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(static_mut_refs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: creating a shared reference to mutable static is discouraged\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1/src/lib.rs:287:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { GLOBAL_DATA.as_ref().unwrap() }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mshared reference to mutable static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(static_mut_refs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-signal-hook-registry-1.4.1"
## script = '''
## FROM scratch AS cratesio-signal-hook-registry-1.4.1
## ADD --chmod=0664 --checksum=sha256:d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1 \
##   https://static.crates.io/crates/signal-hook-registry/signal-hook-registry-1.4.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-signal-hook-registry-1.4.1-5395542b51c1f12e"
## script = '''
## FROM rust-base AS dep-l-signal-hook-registry-1.4.1-5395542b51c1f12e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-signal-hook-registry-1.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1 \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="signal_hook_registry" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Michal 'vorner' Vaner <vorner@vorner.cz>:Masaki Hara <ackie.h.gmai@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Backend crate for signal-hook" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0/MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="signal-hook-registry" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/vorner/signal-hook" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.4.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'signal_hook_registry' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=173abf6929e2a9cc' '-C' 'extra-filename=-5395542b51c1f12e' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/signal-hook-registry-1.4.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-5395542b51c1f12e"
## script = """
## FROM scratch AS out-5395542b51c1f12e
## COPY --from=dep-l-signal-hook-registry-1.4.1-5395542b51c1f12e /tmp/clis-qcow2-rs_0-1-2/release/deps/*-5395542b51c1f12e* /"""

FROM scratch AS cratesio-socket2-0.5.5
ADD --chmod=0664 --checksum=sha256:7b5fac59a5cb5dd637972e5fca70daf0523c9067fcdc4842f053dae04a18f8e9 \
  https://static.crates.io/crates/socket2/socket2-0.5.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-socket2-0.5.5-6ec2d9d16459980f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-socket2-0.5.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5 \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="socket2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Utilities for handling networking sockets with a maximal amount of configuration\npossible intended.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/socket2" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="socket2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/socket2" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.5.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'socket2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="all"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all"))' '-C' 'metadata=9224c07d1a70c0af' '-C' 'extra-filename=-6ec2d9d16459980f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6ec2d9d16459980f
COPY --from=dep-l-socket2-0.5.5-6ec2d9d16459980f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-6ec2d9d16459980f* /

## this = "6ec2d9d16459980f"
## deps = ["0addc1beddeea30f"]
## short_externs = ["libc-0addc1beddeea30f"]
## writes = [
##     "deps/socket2-6ec2d9d16459980f.d",
##     "deps/libsocket2-6ec2d9d16459980f.rmeta",
##     "deps/libsocket2-6ec2d9d16459980f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/socket2-6ec2d9d16459980f.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-socket2-0.5.5"
## script = '''
## FROM scratch AS cratesio-socket2-0.5.5
## ADD --chmod=0664 --checksum=sha256:7b5fac59a5cb5dd637972e5fca70daf0523c9067fcdc4842f053dae04a18f8e9 \
##   https://static.crates.io/crates/socket2/socket2-0.5.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-socket2-0.5.5-6ec2d9d16459980f"
## script = '''
## FROM rust-base AS dep-l-socket2-0.5.5-6ec2d9d16459980f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-socket2-0.5.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5 \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="socket2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Utilities for handling networking sockets with a maximal amount of configuration\npossible intended.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/socket2" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="socket2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/socket2" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.5.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'socket2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="all"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all"))' '-C' 'metadata=9224c07d1a70c0af' '-C' 'extra-filename=-6ec2d9d16459980f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.5.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6ec2d9d16459980f"
## script = """
## FROM scratch AS out-6ec2d9d16459980f
## COPY --from=dep-l-socket2-0.5.5-6ec2d9d16459980f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-6ec2d9d16459980f* /"""

FROM scratch AS cratesio-tokio-macros-2.2.0
ADD --chmod=0664 --checksum=sha256:5b8a1e28f2deaa14e508979454cb3a223b10b938b45af148bc0986de36f1923b \
  https://static.crates.io/crates/tokio-macros/tokio-macros-2.2.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-tokio-macros-2.2.0-01d4aecec31808fc
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-tokio-macros-2.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0 \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio_macros" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="Tokio's proc macros.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio-macros" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="2.2.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio_macros' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=980849acf9666685' '-C' 'extra-filename=-01d4aecec31808fc' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-01d4aecec31808fc
COPY --from=dep-p-tokio-macros-2.2.0-01d4aecec31808fc /tmp/clis-qcow2-rs_0-1-2/release/deps/*-01d4aecec31808fc* /

## this = "01d4aecec31808fc"
## deps = [
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/tokio_macros-01d4aecec31808fc.d",
##     "deps/libtokio_macros-01d4aecec31808fc.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/tokio_macros-01d4aecec31808fc.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-macros-2.2.0"
## script = '''
## FROM scratch AS cratesio-tokio-macros-2.2.0
## ADD --chmod=0664 --checksum=sha256:5b8a1e28f2deaa14e508979454cb3a223b10b938b45af148bc0986de36f1923b \
##   https://static.crates.io/crates/tokio-macros/tokio-macros-2.2.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-tokio-macros-2.2.0-01d4aecec31808fc"
## script = '''
## FROM rust-base AS dep-p-tokio-macros-2.2.0-01d4aecec31808fc
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-tokio-macros-2.2.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0 \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio_macros" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="Tokio's proc macros.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio-macros" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="2.2.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio_macros' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=980849acf9666685' '-C' 'extra-filename=-01d4aecec31808fc' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib' '--extern' 'quote=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib' '--extern' 'syn=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-macros-2.2.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-01d4aecec31808fc"
## script = """
## FROM scratch AS out-01d4aecec31808fc
## COPY --from=dep-p-tokio-macros-2.2.0-01d4aecec31808fc /tmp/clis-qcow2-rs_0-1-2/release/deps/*-01d4aecec31808fc* /"""

FROM scratch AS cratesio-tokio-1.35.1
ADD --chmod=0664 --checksum=sha256:c89b4efa943be685f629b149f53829423f8f5531ea21249408e8e2f8671ec104 \
  https://static.crates.io/crates/tokio/tokio-1.35.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tokio-1.35.1-7dfa875e60cea25d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-tokio-1.35.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1 \
  --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
  --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
  --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
  --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
  --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
  --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="1.35.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="35" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bytes"' '--cfg' 'feature="default"' '--cfg' 'feature="fs"' '--cfg' 'feature="full"' '--cfg' 'feature="io-std"' '--cfg' 'feature="io-util"' '--cfg' 'feature="libc"' '--cfg' 'feature="macros"' '--cfg' 'feature="mio"' '--cfg' 'feature="net"' '--cfg' 'feature="num_cpus"' '--cfg' 'feature="parking_lot"' '--cfg' 'feature="process"' '--cfg' 'feature="rt"' '--cfg' 'feature="rt-multi-thread"' '--cfg' 'feature="signal"' '--cfg' 'feature="signal-hook-registry"' '--cfg' 'feature="socket2"' '--cfg' 'feature="sync"' '--cfg' 'feature="time"' '--cfg' 'feature="tokio-macros"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bytes", "default", "fs", "full", "io-std", "io-util", "libc", "macros", "mio", "net", "num_cpus", "parking_lot", "process", "rt", "rt-multi-thread", "signal", "signal-hook-registry", "socket2", "sync", "test-util", "time", "tokio-macros", "tracing", "windows-sys"))' '-C' 'metadata=3e373df53b4a720e' '-C' 'extra-filename=-7dfa875e60cea25d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'bytes=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'mio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta' '--extern' 'num_cpus=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta' '--extern' 'parking_lot=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta' '--extern' 'pin_project_lite=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta' '--extern' 'signal_hook_registry=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta' '--extern' 'socket2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta' '--extern' 'tokio_macros=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7dfa875e60cea25d
COPY --from=dep-l-tokio-1.35.1-7dfa875e60cea25d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7dfa875e60cea25d* /

## this = "7dfa875e60cea25d"
## deps = [
##     "d7b35eb956c1be36",
##     "0addc1beddeea30f",
##     "8b22b018b5891a0c",
##     "abda958216542c23",
##     "4ac6edc772146637",
##     "1a71aa69f2330c14",
##     "b477fb82efd13fea",
##     "f8744ca11f01d51a",
##     "da34da6838abd7f1",
##     "db7ba43bb64f435f",
##     "a73e0fc4c66dd601",
##     "5395542b51c1f12e",
##     "6ec2d9d16459980f",
##     "01d4aecec31808fc",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "bytes-d7b35eb956c1be36",
##     "libc-0addc1beddeea30f",
##     "mio-8b22b018b5891a0c",
##     "num_cpus-abda958216542c23",
##     "parking_lot-4ac6edc772146637",
##     "lock_api-1a71aa69f2330c14",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-f8744ca11f01d51a",
##     "cfg_if-da34da6838abd7f1",
##     "smallvec-db7ba43bb64f435f",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "signal_hook_registry-5395542b51c1f12e",
##     "socket2-6ec2d9d16459980f",
##     "tokio_macros-01d4aecec31808fc",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## writes = ["deps/tokio-7dfa875e60cea25d.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/tokio-7dfa875e60cea25d.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":535,"byte_end":539,"line_start":21,"line_end":21,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"#![cfg_attr(loom, allow(dead_code, unreachable_pub))]","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:21:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(loom, allow(dead_code, unreachable_pub))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `128`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":18267,"byte_end":18295,"line_start":453,"line_end":453,"column_start":5,"column_end":33,"is_primary":true,"text":[{"text":"    target_pointer_width = \"128\"","highlight_start":5,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_pointer_width` are: `16`, `32`, and `64`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `128`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:453:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_pointer_width = \"128\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_pointer_width` are: `16`, `32`, and `64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":18414,"byte_end":18428,"line_start":460,"line_end":460,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    not(tokio_unstable),","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:460:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(tokio_unstable),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":18747,"byte_end":18761,"line_start":473,"line_end":473,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"#[cfg(all(not(tokio_unstable), tokio_taskdump))]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:473:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(tokio_unstable), tokio_taskdump))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":18764,"byte_end":18778,"line_start":473,"line_end":473,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"#[cfg(all(not(tokio_unstable), tokio_taskdump))]","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:473:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(tokio_unstable), tokio_taskdump))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_taskdump`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":18879,"byte_end":18893,"line_start":477,"line_end":477,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    tokio_taskdump,","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_taskdump`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:477:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tokio_taskdump,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_taskdump)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_taskdump)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/net/mod.rs","byte_start":11,"byte_end":15,"line_start":1,"line_end":1,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#![cfg(not(loom))]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/net/mod.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg(not(loom))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":24191,"byte_end":24198,"line_start":694,"line_end":694,"column_start":7,"column_end":14,"is_primary":true,"text":[{"text":"#[cfg(fuzzing)]","highlight_start":7,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:694:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(fuzzing)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/fs/mod.rs","byte_start":11,"byte_end":15,"line_start":1,"line_end":1,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#![cfg(not(loom))]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/fs/mod.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg(not(loom))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6279,"byte_end":6283,"line_start":278,"line_end":278,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":19470,"byte_end":19507,"line_start":507,"line_end":509,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_process! {","highlight_start":1,"highlight_end":15},{"text":"    pub mod process;","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_process!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6090,"byte_end":6114,"line_start":273,"line_end":273,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_process {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:278:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:507:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_process! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod process;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6886,"byte_end":6890,"line_start":307,"line_end":307,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":19721,"byte_end":19756,"line_start":526,"line_end":528,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_signal! {","highlight_start":1,"highlight_end":14},{"text":"    pub mod signal;","highlight_start":1,"highlight_end":20},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_signal!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6700,"byte_end":6723,"line_start":302,"line_end":302,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! cfg_signal {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:307:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:526:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_signal! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod signal;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_signal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":7146,"byte_end":7150,"line_start":318,"line_end":318,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs","byte_start":19758,"byte_end":19899,"line_start":530,"line_end":535,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_signal_internal! {","highlight_start":1,"highlight_end":23},{"text":"    #[cfg(not(feature = \"signal\"))]","highlight_start":1,"highlight_end":36},{"text":"    #[allow(dead_code)]","highlight_start":1,"highlight_end":24},{"text":"    #[allow(unreachable_pub)]","highlight_start":1,"highlight_end":30},{"text":"    pub(crate) mod signal;","highlight_start":1,"highlight_end":27},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_signal_internal!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6976,"byte_end":7008,"line_start":314,"line_end":314,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! cfg_signal_internal {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:318:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs:530:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_signal_internal! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(feature = \"signal\"))]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(unreachable_pub)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m534\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) mod signal;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m535\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_signal_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/sync/mod.rs","byte_start":12,"byte_end":16,"line_start":1,"line_end":1,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"#![cfg_attr(loom, allow(dead_code, unreachable_pub, unused_imports))]","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/sync/mod.rs:1:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(loom, allow(dead_code, unreachable_pub, unused_imports))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10178,"byte_end":10192,"line_start":461,"line_end":461,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, feature = \"tracing\"))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/mod.rs","byte_start":213,"byte_end":259,"line_start":21,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_trace! {","highlight_start":1,"highlight_end":13},{"text":"    #[macro_use]","highlight_start":1,"highlight_end":17},{"text":"    mod trace;","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10094,"byte_end":10116,"line_start":458,"line_end":458,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! cfg_trace {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:461:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, feature = \"tracing\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/mod.rs:21:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[macro_use]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod trace;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/thread_local.rs","byte_start":10,"byte_end":14,"line_start":1,"line_end":1,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(all(loom, test))]","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/thread_local.rs:1:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(loom, test))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/thread_local.rs","byte_start":345,"byte_end":349,"line_start":13,"line_end":13,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(not(all(loom, test)))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/thread_local.rs:13:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6279,"byte_end":6283,"line_start":278,"line_end":278,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/future/mod.rs","byte_start":210,"byte_end":284,"line_start":11,"line_end":14,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_process! {","highlight_start":1,"highlight_end":15},{"text":"    mod try_join;","highlight_start":1,"highlight_end":18},{"text":"    pub(crate) use try_join::try_join3;","highlight_start":1,"highlight_end":40},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_process!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6090,"byte_end":6114,"line_start":273,"line_end":273,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_process {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:278:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/future/mod.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_process! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod try_join;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) use try_join::try_join3;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10178,"byte_end":10192,"line_start":461,"line_end":461,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, feature = \"tracing\"))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/future/mod.rs","byte_start":358,"byte_end":472,"line_start":21,"line_end":25,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_trace! {","highlight_start":1,"highlight_end":13},{"text":"    mod trace;","highlight_start":1,"highlight_end":15},{"text":"    #[allow(unused_imports)]","highlight_start":1,"highlight_end":29},{"text":"    pub(crate) use trace::InstrumentedFuture as Future;","highlight_start":1,"highlight_end":56},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10094,"byte_end":10116,"line_start":458,"line_end":458,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! cfg_trace {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:461:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, feature = \"tracing\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/future/mod.rs:21:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod trace;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(unused_imports)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) use trace::InstrumentedFuture as Future;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10629,"byte_end":10643,"line_start":481,"line_end":481,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"            #[cfg(any(not(tokio_unstable), not(feature = \"tracing\")))]","highlight_start":27,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/future/mod.rs","byte_start":474,"byte_end":556,"line_start":27,"line_end":31,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_not_trace! {","highlight_start":1,"highlight_end":17},{"text":"    cfg_rt! {","highlight_start":1,"highlight_end":14},{"text":"        pub(crate) use std::future::Future;","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_not_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10537,"byte_end":10563,"line_start":478,"line_end":478,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! cfg_not_trace {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:481:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m481\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(not(tokio_unstable), not(feature = \"tracing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/future/mod.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_not_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_rt! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use std::future::Future;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_not_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/mod.rs","byte_start":8672,"byte_end":8676,"line_start":229,"line_end":229,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    #[cfg(not(loom))]","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/mod.rs:229:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/poll_evented.rs","byte_start":7360,"byte_end":7391,"line_start":171,"line_end":171,"column_start":62,"column_end":93,"is_primary":true,"text":[{"text":"                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < len) {","highlight_start":62,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/poll_evented.rs:171:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < len) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/poll_evented.rs","byte_start":8867,"byte_end":8898,"line_start":204,"line_end":204,"column_start":62,"column_end":93,"is_primary":true,"text":[{"text":"                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < buf.len()) {","highlight_start":62,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `mio_unsupported_force_poll_poll`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/poll_evented.rs:204:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if n > 0 && (!cfg!(windows) && !cfg!(mio_unsupported_force_poll_poll) && n < buf.len()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(mio_unsupported_force_poll_poll)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(mio_unsupported_force_poll_poll)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6279,"byte_end":6283,"line_start":278,"line_end":278,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/util/mod.rs","byte_start":1057,"byte_end":1126,"line_start":56,"line_end":58,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_process! {","highlight_start":5,"highlight_end":19},{"text":"        pub(crate) use read_to_end::read_to_end;","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_process!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6090,"byte_end":6114,"line_start":273,"line_end":273,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_process {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:278:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/io/util/mod.rs:56:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_process! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use read_to_end::read_to_end;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10423,"byte_end":10437,"line_start":471,"line_end":471,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(tokio_unstable)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/net/tcp/listener.rs","byte_start":13479,"byte_end":13938,"line_start":417,"line_end":435,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_unstable! {","highlight_start":1,"highlight_end":16},{"text":"    #[cfg(target_os = \"wasi\")]","highlight_start":1,"highlight_end":31},{"text":"    mod sys {","highlight_start":1,"highlight_end":14},{"text":"        use super::TcpListener;","highlight_start":1,"highlight_end":32},{"text":"        use std::os::wasi::prelude::*;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl AsRawFd for TcpListener {","highlight_start":1,"highlight_end":39},{"text":"            fn as_raw_fd(&self) -> RawFd {","highlight_start":1,"highlight_end":43},{"text":"                self.io.as_raw_fd()","highlight_start":1,"highlight_end":36},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl AsFd for TcpListener {","highlight_start":1,"highlight_end":36},{"text":"            fn as_fd(&self) -> BorrowedFd<'_> {","highlight_start":1,"highlight_end":48},{"text":"                unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }","highlight_start":1,"highlight_end":68},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_unstable!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10340,"byte_end":10365,"line_start":468,"line_end":468,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! cfg_unstable {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:471:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(tokio_unstable)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/net/tcp/listener.rs:417:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_unstable! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(target_os = \"wasi\")]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod sys {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use super::TcpListener;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/net/tcp/stream.rs","byte_start":49684,"byte_end":49698,"line_start":1408,"line_end":1408,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(tokio_unstable, target_os = \"wasi\"))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/net/tcp/stream.rs:1408:11\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(tokio_unstable, target_os = \"wasi\"))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs","byte_start":148,"byte_end":152,"line_start":6,"line_end":6,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(all(test, loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(test, loom)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/std/mod.rs","byte_start":39,"byte_end":43,"line_start":1,"line_end":1,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"#![cfg_attr(any(not(feature = \"full\"), loom), allow(unused_imports, dead_code))]","highlight_start":40,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/std/mod.rs:1:40\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(any(not(feature = \"full\"), loom), allow(unused_imports, dead_code))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs","byte_start":186,"byte_end":190,"line_start":8,"line_end":8,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(all(test, loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs:8:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(all(test, loom)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs","byte_start":241,"byte_end":245,"line_start":11,"line_end":11,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs:11:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs","byte_start":277,"byte_end":281,"line_start":13,"line_end":13,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(all(test, loom))]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/mod.rs:13:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, loom))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/std/parking_lot.rs","byte_start":1602,"byte_end":1606,"line_start":55,"line_end":55,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg(not(all(loom, test)))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/loom/std/parking_lot.rs:55:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/mod.rs","byte_start":51273,"byte_end":51277,"line_start":1544,"line_end":1544,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(test, not(loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/mod.rs:1544:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, not(loom)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":12199,"byte_end":12203,"line_start":553,"line_end":553,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(all(loom, test))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/mod.rs","byte_start":2049,"byte_end":2332,"line_start":64,"line_end":72,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_not_has_const_mutex_new! {","highlight_start":1,"highlight_end":31},{"text":"    fn get_orphan_queue() -> &'static OrphanQueueImpl<StdChild> {","highlight_start":1,"highlight_end":66},{"text":"        use crate::util::once_cell::OnceCell;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static ORPHAN_QUEUE: OnceCell<OrphanQueueImpl<StdChild>> = OnceCell::new();","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        ORPHAN_QUEUE.get(OrphanQueueImpl::new)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_not_has_const_mutex_new!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":12097,"byte_end":12137,"line_start":550,"line_end":550,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"macro_rules! cfg_not_has_const_mutex_new {","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:553:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(loom, test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/mod.rs:64:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_not_has_const_mutex_new! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_orphan_queue() -> &'static OrphanQueueImpl<StdChild> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use crate::util::once_cell::OnceCell;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_not_has_const_mutex_new` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":12044,"byte_end":12048,"line_start":544,"line_end":544,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg(not(all(loom, test)))]","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/mod.rs","byte_start":2334,"byte_end":2538,"line_start":74,"line_end":80,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_has_const_mutex_new! {","highlight_start":1,"highlight_end":27},{"text":"    fn get_orphan_queue() -> &'static OrphanQueueImpl<StdChild> {","highlight_start":1,"highlight_end":66},{"text":"        static ORPHAN_QUEUE: OrphanQueueImpl<StdChild> = OrphanQueueImpl::new();","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        &ORPHAN_QUEUE","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_has_const_mutex_new!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":11942,"byte_end":11978,"line_start":541,"line_end":541,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"macro_rules! cfg_has_const_mutex_new {","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:544:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/mod.rs:74:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_has_const_mutex_new! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_orphan_queue() -> &'static OrphanQueueImpl<StdChild> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        static ORPHAN_QUEUE: OrphanQueueImpl<StdChild> = OrphanQueueImpl::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_has_const_mutex_new` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/orphan.rs","byte_start":4090,"byte_end":4094,"line_start":131,"line_end":131,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(test, not(loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/orphan.rs:131:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, not(loom)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":12199,"byte_end":12203,"line_start":553,"line_end":553,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(all(loom, test))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/orphan.rs","byte_start":1239,"byte_end":1447,"line_start":46,"line_end":53,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_not_has_const_mutex_new! {","highlight_start":5,"highlight_end":35},{"text":"        pub(crate) fn new() -> Self {","highlight_start":1,"highlight_end":38},{"text":"            Self {","highlight_start":1,"highlight_end":19},{"text":"                sigchild: Mutex::new(None),","highlight_start":1,"highlight_end":44},{"text":"                queue: Mutex::new(Vec::new()),","highlight_start":1,"highlight_end":47},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_not_has_const_mutex_new!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":12097,"byte_end":12137,"line_start":550,"line_end":550,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"macro_rules! cfg_not_has_const_mutex_new {","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:553:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(loom, test))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/orphan.rs:46:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_not_has_const_mutex_new! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) fn new() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                sigchild: Mutex::new(None),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_not_has_const_mutex_new` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":12044,"byte_end":12048,"line_start":544,"line_end":544,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg(not(all(loom, test)))]","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/orphan.rs","byte_start":1453,"byte_end":1675,"line_start":55,"line_end":62,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_has_const_mutex_new! {","highlight_start":5,"highlight_end":31},{"text":"        pub(crate) const fn new() -> Self {","highlight_start":1,"highlight_end":44},{"text":"            Self {","highlight_start":1,"highlight_end":19},{"text":"                sigchild: Mutex::const_new(None),","highlight_start":1,"highlight_end":50},{"text":"                queue: Mutex::const_new(Vec::new()),","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_has_const_mutex_new!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":11942,"byte_end":11978,"line_start":541,"line_end":541,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"macro_rules! cfg_has_const_mutex_new {","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:544:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(all(loom, test)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/orphan.rs:55:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_has_const_mutex_new! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) const fn new() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                sigchild: Mutex::const_new(None),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_has_const_mutex_new` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/reap.rs","byte_start":3956,"byte_end":3960,"line_start":132,"line_end":132,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(test, not(loom)))]","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/unix/reap.rs:132:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, not(loom)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/mod.rs","byte_start":25266,"byte_end":25280,"line_start":767,"line_end":767,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    #[cfg(tokio_unstable)]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/process/mod.rs:767:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m767\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(tokio_unstable)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/driver.rs","byte_start":267,"byte_end":281,"line_start":6,"line_end":6,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/driver.rs:6:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6468,"byte_end":6472,"line_start":288,"line_end":288,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"        #[cfg(not(loom))]","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs","byte_start":14684,"byte_end":14724,"line_start":336,"line_end":338,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_process_driver! {","highlight_start":1,"highlight_end":22},{"text":"    mod process;","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_process_driver!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6369,"byte_end":6400,"line_start":285,"line_end":285,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! cfg_process_driver {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:288:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs:336:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_process_driver! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod process;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6279,"byte_end":6283,"line_start":278,"line_end":278,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6484,"byte_end":6510,"line_start":289,"line_end":289,"column_start":9,"column_end":35,"is_primary":false,"text":[{"text":"        cfg_process! { $($item)* }","highlight_start":9,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs","byte_start":14684,"byte_end":14724,"line_start":336,"line_end":338,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_process_driver! {","highlight_start":1,"highlight_end":22},{"text":"    mod process;","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_process_driver!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6369,"byte_end":6400,"line_start":285,"line_end":285,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! cfg_process_driver {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_process!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6090,"byte_end":6114,"line_start":273,"line_end":273,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! cfg_process {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:278:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs:336:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_process_driver! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod process;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_process` which comes from the expansion of the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `loom`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":7146,"byte_end":7150,"line_start":318,"line_end":318,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            #[cfg(not(loom))]","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":7291,"byte_end":7325,"line_start":327,"line_end":327,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        cfg_signal_internal! { $($item)* }","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs","byte_start":14766,"byte_end":14826,"line_start":344,"line_end":346,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"cfg_signal_internal_and_unix! {","highlight_start":1,"highlight_end":32},{"text":"    pub(crate) mod signal;","highlight_start":1,"highlight_end":27},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_signal_internal_and_unix!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":7192,"byte_end":7233,"line_start":324,"line_end":324,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! cfg_signal_internal_and_unix {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"cfg_signal_internal!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":6976,"byte_end":7008,"line_start":314,"line_end":314,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! cfg_signal_internal {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `loom`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:318:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(not(loom))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs:344:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcfg_signal_internal_and_unix! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) mod signal;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_signal_internal` which comes from the expansion of the macro `cfg_signal_internal_and_unix` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/task/mod.rs","byte_start":7585,"byte_end":7599,"line_start":169,"line_end":169,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"#![cfg_attr(not(tokio_unstable), allow(dead_code))]","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/task/mod.rs:169:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(tokio_unstable), allow(dead_code))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/config.rs","byte_start":29,"byte_end":43,"line_start":2,"line_end":2,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/config.rs:2:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    any(not(all(tokio_unstable, feature = \"full\")), target_family = \"wasm\"),\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tokio_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10178,"byte_end":10192,"line_start":461,"line_end":461,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"            #[cfg(all(tokio_unstable, feature = \"tracing\"))]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs","byte_start":15032,"byte_end":15094,"line_start":358,"line_end":360,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    cfg_trace! {","highlight_start":5,"highlight_end":17},{"text":"        pub(crate) use blocking::Mandatory;","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"cfg_trace!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs","byte_start":10094,"byte_end":10116,"line_start":458,"line_end":458,"column_start":1,"column_end":23,"is_primary":false,"text":[{"text":"macro_rules! cfg_trace {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tokio_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/macros/cfg.rs:461:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(tokio_unstable, feature = \"tracing\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/runtime/mod.rs:358:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m358\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cfg_trace! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub(crate) use blocking::Mandatory;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tokio_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tokio_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-1.35.1"
## script = '''
## FROM scratch AS cratesio-tokio-1.35.1
## ADD --chmod=0664 --checksum=sha256:c89b4efa943be685f629b149f53829423f8f5531ea21249408e8e2f8671ec104 \
##   https://static.crates.io/crates/tokio/tokio-1.35.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tokio-1.35.1-7dfa875e60cea25d"
## script = '''
## FROM rust-base AS dep-l-tokio-1.35.1-7dfa875e60cea25d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-tokio-1.35.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1 \
##   --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
##   --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
##   --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
##   --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
##   --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
##   --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="1.35.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="35" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="bytes"' '--cfg' 'feature="default"' '--cfg' 'feature="fs"' '--cfg' 'feature="full"' '--cfg' 'feature="io-std"' '--cfg' 'feature="io-util"' '--cfg' 'feature="libc"' '--cfg' 'feature="macros"' '--cfg' 'feature="mio"' '--cfg' 'feature="net"' '--cfg' 'feature="num_cpus"' '--cfg' 'feature="parking_lot"' '--cfg' 'feature="process"' '--cfg' 'feature="rt"' '--cfg' 'feature="rt-multi-thread"' '--cfg' 'feature="signal"' '--cfg' 'feature="signal-hook-registry"' '--cfg' 'feature="socket2"' '--cfg' 'feature="sync"' '--cfg' 'feature="time"' '--cfg' 'feature="tokio-macros"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bytes", "default", "fs", "full", "io-std", "io-util", "libc", "macros", "mio", "net", "num_cpus", "parking_lot", "process", "rt", "rt-multi-thread", "signal", "signal-hook-registry", "socket2", "sync", "test-util", "time", "tokio-macros", "tracing", "windows-sys"))' '-C' 'metadata=3e373df53b4a720e' '-C' 'extra-filename=-7dfa875e60cea25d' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'bytes=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'mio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta' '--extern' 'num_cpus=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta' '--extern' 'parking_lot=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta' '--extern' 'pin_project_lite=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta' '--extern' 'signal_hook_registry=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta' '--extern' 'socket2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta' '--extern' 'tokio_macros=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-1.35.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7dfa875e60cea25d"
## script = """
## FROM scratch AS out-7dfa875e60cea25d
## COPY --from=dep-l-tokio-1.35.1-7dfa875e60cea25d /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7dfa875e60cea25d* /"""

FROM scratch AS cratesio-futures-locks-0.7.1
ADD --chmod=0664 --checksum=sha256:45ec6fe3675af967e67c5536c0b9d44e34e6c52f86bedc4ea49c5317b8e94d06 \
  https://static.crates.io/crates/futures-locks/futures-locks-0.7.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-futures-locks-0.7.1-a4b0a3c89e6f82ec
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-futures-locks-0.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1 \
  --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
  --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
  --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta,source=/libtokio-7dfa875e60cea25d.rmeta \
  --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
  --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
  --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
  --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
  --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
  --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="futures_locks" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alan Somers <asomers@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Futures-aware lock primitives\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="futures-locks" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/asomers/futures-locks" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.7.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'futures_locks' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="tokio"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "tokio"))' '-C' 'metadata=1855f0498a54d504' '-C' 'extra-filename=-a4b0a3c89e6f82ec' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_channel=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a4b0a3c89e6f82ec
COPY --from=dep-l-futures-locks-0.7.1-a4b0a3c89e6f82ec /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a4b0a3c89e6f82ec* /

## this = "a4b0a3c89e6f82ec"
## deps = [
##     "ad9d7b2de9358699",
##     "1d93d74bf27fab54",
##     "6ec89d477b5d3e53",
##     "f04cff00a4d400c7",
##     "7dfa875e60cea25d",
##     "d7b35eb956c1be36",
##     "0addc1beddeea30f",
##     "8b22b018b5891a0c",
##     "abda958216542c23",
##     "4ac6edc772146637",
##     "1a71aa69f2330c14",
##     "b477fb82efd13fea",
##     "f8744ca11f01d51a",
##     "da34da6838abd7f1",
##     "db7ba43bb64f435f",
##     "a73e0fc4c66dd601",
##     "5395542b51c1f12e",
##     "6ec2d9d16459980f",
##     "01d4aecec31808fc",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "futures_channel-ad9d7b2de9358699",
##     "futures_core-1d93d74bf27fab54",
##     "futures_sink-6ec89d477b5d3e53",
##     "futures_task-f04cff00a4d400c7",
##     "tokio-7dfa875e60cea25d",
##     "bytes-d7b35eb956c1be36",
##     "libc-0addc1beddeea30f",
##     "mio-8b22b018b5891a0c",
##     "num_cpus-abda958216542c23",
##     "parking_lot-4ac6edc772146637",
##     "lock_api-1a71aa69f2330c14",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-f8744ca11f01d51a",
##     "cfg_if-da34da6838abd7f1",
##     "smallvec-db7ba43bb64f435f",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "signal_hook_registry-5395542b51c1f12e",
##     "socket2-6ec2d9d16459980f",
##     "tokio_macros-01d4aecec31808fc",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## writes = [
##     "deps/futures_locks-a4b0a3c89e6f82ec.d",
##     "deps/libfutures_locks-a4b0a3c89e6f82ec.rmeta",
##     "deps/libfutures_locks-a4b0a3c89e6f82ec.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/futures_locks-a4b0a3c89e6f82ec.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustdoc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/mutex.rs","byte_start":11980,"byte_end":11987,"line_start":369,"line_end":369,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustdoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/mutex.rs:369:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustdoc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/mutex.rs","byte_start":13273,"byte_end":13280,"line_start":409,"line_end":409,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustdoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/mutex.rs:409:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustdoc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs","byte_start":17143,"byte_end":17150,"line_start":504,"line_end":504,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustdoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs:504:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustdoc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs","byte_start":18408,"byte_end":18415,"line_start":544,"line_end":544,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustdoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs:544:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustdoc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs","byte_start":20222,"byte_end":20229,"line_start":594,"line_end":594,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustdoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs:594:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustdoc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs","byte_start":21573,"byte_end":21580,"line_start":635,"line_end":635,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustdoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/rwlock.rs:635:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustdoc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustdoc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-futures-locks-0.7.1"
## script = '''
## FROM scratch AS cratesio-futures-locks-0.7.1
## ADD --chmod=0664 --checksum=sha256:45ec6fe3675af967e67c5536c0b9d44e34e6c52f86bedc4ea49c5317b8e94d06 \
##   https://static.crates.io/crates/futures-locks/futures-locks-0.7.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-futures-locks-0.7.1-a4b0a3c89e6f82ec"
## script = '''
## FROM rust-base AS dep-l-futures-locks-0.7.1-a4b0a3c89e6f82ec
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-futures-locks-0.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1 \
##   --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
##   --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
##   --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta,source=/libtokio-7dfa875e60cea25d.rmeta \
##   --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
##   --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
##   --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
##   --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
##   --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
##   --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="futures_locks" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alan Somers <asomers@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Futures-aware lock primitives\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="futures-locks" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/asomers/futures-locks" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.7.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'futures_locks' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="tokio"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "tokio"))' '-C' 'metadata=1855f0498a54d504' '-C' 'extra-filename=-a4b0a3c89e6f82ec' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'futures_channel=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta' '--extern' 'futures_task=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/futures-locks-0.7.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a4b0a3c89e6f82ec"
## script = """
## FROM scratch AS out-a4b0a3c89e6f82ec
## COPY --from=dep-l-futures-locks-0.7.1-a4b0a3c89e6f82ec /tmp/clis-qcow2-rs_0-1-2/release/deps/*-a4b0a3c89e6f82ec* /"""

FROM scratch AS cratesio-adler-1.0.2
ADD --chmod=0664 --checksum=sha256:f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe \
  https://static.crates.io/crates/adler/adler-1.0.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-adler-1.0.2-ee21f8d21d0adcf2
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-adler-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="adler" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jonas Schievink <jonasschievink@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A simple clean-room implementation of the Adler-32 checksum" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="0BSD OR MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="adler" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/jonas-schievink/adler.git" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'adler' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "default", "rustc-dep-of-std", "std"))' '-C' 'metadata=0cf82449475954bc' '-C' 'extra-filename=-ee21f8d21d0adcf2' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ee21f8d21d0adcf2
COPY --from=dep-l-adler-1.0.2-ee21f8d21d0adcf2 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ee21f8d21d0adcf2* /

## this = "ee21f8d21d0adcf2"
## writes = [
##     "deps/adler-ee21f8d21d0adcf2.d",
##     "deps/libadler-ee21f8d21d0adcf2.rmeta",
##     "deps/libadler-ee21f8d21d0adcf2.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/adler-ee21f8d21d0adcf2.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-adler-1.0.2"
## script = '''
## FROM scratch AS cratesio-adler-1.0.2
## ADD --chmod=0664 --checksum=sha256:f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe \
##   https://static.crates.io/crates/adler/adler-1.0.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-adler-1.0.2-ee21f8d21d0adcf2"
## script = '''
## FROM rust-base AS dep-l-adler-1.0.2-ee21f8d21d0adcf2
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-adler-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="adler" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jonas Schievink <jonasschievink@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A simple clean-room implementation of the Adler-32 checksum" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="0BSD OR MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="adler" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/jonas-schievink/adler.git" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'adler' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "default", "rustc-dep-of-std", "std"))' '-C' 'metadata=0cf82449475954bc' '-C' 'extra-filename=-ee21f8d21d0adcf2' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/adler-1.0.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ee21f8d21d0adcf2"
## script = """
## FROM scratch AS out-ee21f8d21d0adcf2
## COPY --from=dep-l-adler-1.0.2-ee21f8d21d0adcf2 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-ee21f8d21d0adcf2* /"""

FROM scratch AS cratesio-miniz_oxide-0.6.2
ADD --chmod=0664 --checksum=sha256:b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa \
  https://static.crates.io/crates/miniz_oxide/miniz_oxide-0.6.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-miniz_oxide-0.6.2-df26b227e0244749
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-miniz_oxide-0.6.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2 \
  --mount=from=out-ee21f8d21d0adcf2,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta,source=/libadler-ee21f8d21d0adcf2.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="miniz_oxide" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Frommi <daniil.liferenko@gmail.com>:oyvindln <oyvindln@users.noreply.github.com>" \
        CARGO_PKG_DESCRIPTION="DEFLATE compression and decompression library rewritten in Rust based on miniz" \
        CARGO_PKG_HOMEPAGE="https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide" \
        CARGO_PKG_LICENSE="MIT OR Zlib OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="miniz_oxide" \
        CARGO_PKG_README="Readme.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.6.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'miniz_oxide' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="with-alloc"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "rustc-dep-of-std", "simd", "simd-adler32", "std", "with-alloc"))' '-C' 'metadata=fc5dc8ae589bbd69' '-C' 'extra-filename=-df26b227e0244749' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'adler=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-df26b227e0244749
COPY --from=dep-l-miniz_oxide-0.6.2-df26b227e0244749 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-df26b227e0244749* /

## this = "df26b227e0244749"
## deps = ["ee21f8d21d0adcf2"]
## short_externs = ["adler-ee21f8d21d0adcf2"]
## writes = [
##     "deps/miniz_oxide-df26b227e0244749.d",
##     "deps/libminiz_oxide-df26b227e0244749.rmeta",
##     "deps/libminiz_oxide-df26b227e0244749.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/miniz_oxide-df26b227e0244749.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":17659,"byte_end":17679,"line_start":432,"line_end":432,"column_start":13,"column_end":33,"is_primary":false,"text":[{"text":"            huff: Box::default(),","highlight_start":13,"highlight_end":33}],"label":"rustdoc does not generate documentation for expression fields","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":17546,"byte_end":17646,"line_start":430,"line_end":431,"column_start":13,"column_end":40,"is_primary":true,"text":[{"text":"            /// Put HuffmanOxide on the heap with default trick to avoid","highlight_start":13,"highlight_end":73},{"text":"            /// excessive stack copies.","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_doc_comments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused doc comment\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/deflate/core.rs:430:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m430\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// Put HuffmanOxide on the heap with default trick to avoid\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// excessive stack copies.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            huff: Box::default(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrustdoc does not generate documentation for expression fields\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_doc_comments)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":21112,"byte_end":21132,"line_start":527,"line_end":527,"column_start":13,"column_end":33,"is_primary":false,"text":[{"text":"            huff: Box::default(),","highlight_start":13,"highlight_end":33}],"label":"rustdoc does not generate documentation for expression fields","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":20999,"byte_end":21099,"line_start":525,"line_end":526,"column_start":13,"column_end":40,"is_primary":true,"text":[{"text":"            /// Put HuffmanOxide on the heap with default trick to avoid","highlight_start":13,"highlight_end":73},{"text":"            /// excessive stack copies.","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused doc comment\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/deflate/core.rs:525:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m525\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// Put HuffmanOxide on the heap with default trick to avoid\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// excessive stack copies.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            huff: Box::default(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrustdoc does not generate documentation for expression fields\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":65579,"byte_end":65586,"line_start":1685,"line_end":1685,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"        if !cfg!(fuzzing) {","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/inflate/core.rs:1685:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !cfg!(fuzzing) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-miniz_oxide-0.6.2"
## script = '''
## FROM scratch AS cratesio-miniz_oxide-0.6.2
## ADD --chmod=0664 --checksum=sha256:b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa \
##   https://static.crates.io/crates/miniz_oxide/miniz_oxide-0.6.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-miniz_oxide-0.6.2-df26b227e0244749"
## script = '''
## FROM rust-base AS dep-l-miniz_oxide-0.6.2-df26b227e0244749
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-miniz_oxide-0.6.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2 \
##   --mount=from=out-ee21f8d21d0adcf2,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta,source=/libadler-ee21f8d21d0adcf2.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="miniz_oxide" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Frommi <daniil.liferenko@gmail.com>:oyvindln <oyvindln@users.noreply.github.com>" \
##         CARGO_PKG_DESCRIPTION="DEFLATE compression and decompression library rewritten in Rust based on miniz" \
##         CARGO_PKG_HOMEPAGE="https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide" \
##         CARGO_PKG_LICENSE="MIT OR Zlib OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="miniz_oxide" \
##         CARGO_PKG_README="Readme.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.6.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'miniz_oxide' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="with-alloc"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "rustc-dep-of-std", "simd", "simd-adler32", "std", "with-alloc"))' '-C' 'metadata=fc5dc8ae589bbd69' '-C' 'extra-filename=-df26b227e0244749' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'adler=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/miniz_oxide-0.6.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-df26b227e0244749"
## script = """
## FROM scratch AS out-df26b227e0244749
## COPY --from=dep-l-miniz_oxide-0.6.2-df26b227e0244749 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-df26b227e0244749* /"""

FROM scratch AS cratesio-bitflags-1.3.2
ADD --chmod=0664 --checksum=sha256:bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a \
  https://static.crates.io/crates/bitflags/bitflags-1.3.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bitflags-1.3.2-70ce9f1f2fa253bc
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-bitflags-1.3.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bitflags" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="A macro to generate structures which behave like bitflags.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/bitflags/bitflags" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bitflags" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bitflags/bitflags" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.3.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bitflags' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "default", "example_generated", "rustc-dep-of-std"))' '-C' 'metadata=fd7cf2c4e10e9bde' '-C' 'extra-filename=-70ce9f1f2fa253bc' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-70ce9f1f2fa253bc
COPY --from=dep-l-bitflags-1.3.2-70ce9f1f2fa253bc /tmp/clis-qcow2-rs_0-1-2/release/deps/*-70ce9f1f2fa253bc* /

## this = "70ce9f1f2fa253bc"
## writes = [
##     "deps/bitflags-70ce9f1f2fa253bc.d",
##     "deps/libbitflags-70ce9f1f2fa253bc.rmeta",
##     "deps/libbitflags-70ce9f1f2fa253bc.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/bitflags-70ce9f1f2fa253bc.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bitflags-1.3.2"
## script = '''
## FROM scratch AS cratesio-bitflags-1.3.2
## ADD --chmod=0664 --checksum=sha256:bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a \
##   https://static.crates.io/crates/bitflags/bitflags-1.3.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bitflags-1.3.2-70ce9f1f2fa253bc"
## script = '''
## FROM rust-base AS dep-l-bitflags-1.3.2-70ce9f1f2fa253bc
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-bitflags-1.3.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bitflags" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="A macro to generate structures which behave like bitflags.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/bitflags/bitflags" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bitflags" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bitflags/bitflags" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.3.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bitflags' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "default", "example_generated", "rustc-dep-of-std"))' '-C' 'metadata=fd7cf2c4e10e9bde' '-C' 'extra-filename=-70ce9f1f2fa253bc' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-1.3.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-70ce9f1f2fa253bc"
## script = """
## FROM scratch AS out-70ce9f1f2fa253bc
## COPY --from=dep-l-bitflags-1.3.2-70ce9f1f2fa253bc /tmp/clis-qcow2-rs_0-1-2/release/deps/*-70ce9f1f2fa253bc* /"""

FROM scratch AS cratesio-memoffset-0.7.1
ADD --chmod=0664 --checksum=sha256:5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4 \
  https://static.crates.io/crates/memoffset/memoffset-0.7.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-memoffset-0.7.1-457bc8526d8fdae9
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-memoffset-0.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1 \
  --mount=from=crate_out-070c9ebb8be425b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="memoffset" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Gilad Naaman <gilad.naaman@gmail.com>" \
        CARGO_PKG_DESCRIPTION="offset_of functionality for Rust structs." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="memoffset" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Gilnaa/memoffset" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.7.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'memoffset' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unstable_const"))' '-C' 'metadata=914e35361026efc3' '-C' 'extra-filename=-457bc8526d8fdae9' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' '--cfg' 'tuple_ty' '--cfg' 'allow_clippy' '--cfg' 'maybe_uninit' '--cfg' 'doctests' '--cfg' 'raw_ref_macros' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-457bc8526d8fdae9
COPY --from=dep-l-memoffset-0.7.1-457bc8526d8fdae9 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-457bc8526d8fdae9* /

## this = "457bc8526d8fdae9"
## writes = [
##     "deps/memoffset-457bc8526d8fdae9.d",
##     "deps/libmemoffset-457bc8526d8fdae9.rmeta",
##     "deps/libmemoffset-457bc8526d8fdae9.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/memoffset-457bc8526d8fdae9.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doctests`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs","byte_start":2334,"byte_end":2342,"line_start":65,"line_end":65,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(doctests)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doctests)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doctests)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs","byte_start":2334,"byte_end":2342,"line_start":65,"line_end":65,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(doctests)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":"doctest","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doctests`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs:65:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(doctests)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `doctest`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doctests)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doctests)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doctests`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs","byte_start":2393,"byte_end":2401,"line_start":68,"line_end":68,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(doctests)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doctests)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doctests)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs","byte_start":2393,"byte_end":2401,"line_start":68,"line_end":68,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(doctests)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":"doctest","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doctests`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs:68:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(doctests)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `doctest`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doctests)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doctests)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `raw_ref_macros`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":1194,"byte_end":1208,"line_start":22,"line_end":22,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(raw_ref_macros)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(raw_ref_macros)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(raw_ref_macros)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `raw_ref_macros`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:22:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(raw_ref_macros)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(raw_ref_macros)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(raw_ref_macros)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `raw_ref_macros`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":1365,"byte_end":1379,"line_start":30,"line_end":30,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(raw_ref_macros))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(raw_ref_macros)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(raw_ref_macros)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `raw_ref_macros`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:30:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(raw_ref_macros))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(raw_ref_macros)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(raw_ref_macros)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `allow_clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":2017,"byte_end":2029,"line_start":57,"line_end":57,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(allow_clippy)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `allow_clippy`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:57:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(allow_clippy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `allow_clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":2411,"byte_end":2423,"line_start":69,"line_end":69,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(not(allow_clippy))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `allow_clippy`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:69:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(allow_clippy))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `allow_clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":2989,"byte_end":3001,"line_start":90,"line_end":90,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(allow_clippy)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `allow_clippy`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:90:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(allow_clippy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `allow_clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":3260,"byte_end":3272,"line_start":100,"line_end":100,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(not(allow_clippy))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `allow_clippy`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:100:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(allow_clippy))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `allow_clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":3864,"byte_end":3876,"line_start":125,"line_end":125,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(allow_clippy)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `allow_clippy`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:125:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(allow_clippy)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `allow_clippy`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":4414,"byte_end":4426,"line_start":141,"line_end":141,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(not(allow_clippy))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `allow_clippy`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:141:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(allow_clippy))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(allow_clippy)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(allow_clippy)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tuple_ty`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs","byte_start":5911,"byte_end":5919,"line_start":183,"line_end":183,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(tuple_ty)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tuple_ty)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tuple_ty)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tuple_ty`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/raw_field.rs:183:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(tuple_ty)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tuple_ty)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tuple_ty)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `maybe_uninit`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/offset_of.rs","byte_start":1237,"byte_end":1249,"line_start":23,"line_end":23,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(maybe_uninit)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(maybe_uninit)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(maybe_uninit)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `maybe_uninit`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/offset_of.rs:23:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(maybe_uninit)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(maybe_uninit)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(maybe_uninit)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `maybe_uninit`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/offset_of.rs","byte_start":1804,"byte_end":1816,"line_start":37,"line_end":37,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(not(maybe_uninit))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(maybe_uninit)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(maybe_uninit)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `maybe_uninit`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/offset_of.rs:37:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(maybe_uninit))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(maybe_uninit)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(maybe_uninit)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `tuple_ty`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/offset_of.rs","byte_start":4593,"byte_end":4601,"line_start":121,"line_end":121,"column_start":7,"column_end":15,"is_primary":true,"text":[{"text":"#[cfg(tuple_ty)]","highlight_start":7,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tuple_ty)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tuple_ty)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `tuple_ty`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/offset_of.rs:121:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(tuple_ty)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(tuple_ty)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(tuple_ty)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"14 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 14 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-070c9ebb8be425b0"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-memoffset-0.7.1"
## script = '''
## FROM scratch AS cratesio-memoffset-0.7.1
## ADD --chmod=0664 --checksum=sha256:5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4 \
##   https://static.crates.io/crates/memoffset/memoffset-0.7.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-memoffset-0.7.1-457bc8526d8fdae9"
## script = '''
## FROM rust-base AS dep-l-memoffset-0.7.1-457bc8526d8fdae9
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-memoffset-0.7.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1 \
##   --mount=from=crate_out-070c9ebb8be425b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="memoffset" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Gilad Naaman <gilad.naaman@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="offset_of functionality for Rust structs." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="memoffset" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Gilnaa/memoffset" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.7.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'memoffset' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "unstable_const"))' '-C' 'metadata=914e35361026efc3' '-C' 'extra-filename=-457bc8526d8fdae9' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' '--cfg' 'tuple_ty' '--cfg' 'allow_clippy' '--cfg' 'maybe_uninit' '--cfg' 'doctests' '--cfg' 'raw_ref_macros' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memoffset-0.7.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-457bc8526d8fdae9"
## script = """
## FROM scratch AS out-457bc8526d8fdae9
## COPY --from=dep-l-memoffset-0.7.1-457bc8526d8fdae9 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-457bc8526d8fdae9* /"""

FROM scratch AS cratesio-nix-0.26.4
ADD --chmod=0664 --checksum=sha256:598beaf3cc6fdd9a5dfb1630c2800c7acd31df7aaf0f565796fba2b53ca1af1b \
  https://static.crates.io/crates/nix/nix-0.26.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-nix-0.26.4-7f0bfa3f5c36603f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-nix-0.26.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4 \
  --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-457bc8526d8fdae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta,source=/libmemoffset-457bc8526d8fdae9.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="nix" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/Cargo.toml" \
        CARGO_PKG_AUTHORS="The nix-rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Rust friendly bindings to *nix APIs" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="nix" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/nix-rust/nix" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="0.26.4" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="26" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'nix' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="acct"' '--cfg' 'feature="aio"' '--cfg' 'feature="default"' '--cfg' 'feature="dir"' '--cfg' 'feature="env"' '--cfg' 'feature="event"' '--cfg' 'feature="feature"' '--cfg' 'feature="fs"' '--cfg' 'feature="hostname"' '--cfg' 'feature="inotify"' '--cfg' 'feature="ioctl"' '--cfg' 'feature="kmod"' '--cfg' 'feature="memoffset"' '--cfg' 'feature="mman"' '--cfg' 'feature="mount"' '--cfg' 'feature="mqueue"' '--cfg' 'feature="net"' '--cfg' 'feature="personality"' '--cfg' 'feature="pin-utils"' '--cfg' 'feature="poll"' '--cfg' 'feature="process"' '--cfg' 'feature="pthread"' '--cfg' 'feature="ptrace"' '--cfg' 'feature="quota"' '--cfg' 'feature="reboot"' '--cfg' 'feature="resource"' '--cfg' 'feature="sched"' '--cfg' 'feature="signal"' '--cfg' 'feature="socket"' '--cfg' 'feature="term"' '--cfg' 'feature="time"' '--cfg' 'feature="ucontext"' '--cfg' 'feature="uio"' '--cfg' 'feature="user"' '--cfg' 'feature="zerocopy"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("acct", "aio", "default", "dir", "env", "event", "feature", "fs", "hostname", "inotify", "ioctl", "kmod", "memoffset", "mman", "mount", "mqueue", "net", "personality", "pin-utils", "poll", "process", "pthread", "ptrace", "quota", "reboot", "resource", "sched", "signal", "socket", "term", "time", "ucontext", "uio", "user", "zerocopy"))' '-C' 'metadata=f3a6a5a11d2fc901' '-C' 'extra-filename=-7f0bfa3f5c36603f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'bitflags=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta' '--extern' 'cfg_if=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'memoffset=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta' '--extern' 'pin_utils=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7f0bfa3f5c36603f
COPY --from=dep-l-nix-0.26.4-7f0bfa3f5c36603f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7f0bfa3f5c36603f* /

## this = "7f0bfa3f5c36603f"
## deps = [
##     "70ce9f1f2fa253bc",
##     "da34da6838abd7f1",
##     "0addc1beddeea30f",
##     "457bc8526d8fdae9",
##     "b74f2a8eb0482878",
## ]
## short_externs = [
##     "bitflags-70ce9f1f2fa253bc",
##     "cfg_if-da34da6838abd7f1",
##     "libc-0addc1beddeea30f",
##     "memoffset-457bc8526d8fdae9",
##     "pin_utils-b74f2a8eb0482878",
## ]
## writes = [
##     "deps/nix-7f0bfa3f5c36603f.d",
##     "deps/libnix-7f0bfa3f5c36603f.rmeta",
##     "deps/libnix-7f0bfa3f5c36603f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/nix-7f0bfa3f5c36603f.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs","byte_start":25155,"byte_end":25161,"line_start":738,"line_end":738,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"#[cfg_attr(fbsd14, doc = \" ```\")]","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs:738:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(fbsd14, doc = \" ```\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs","byte_start":25193,"byte_end":25199,"line_start":739,"line_end":739,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs:739:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs","byte_start":26679,"byte_end":26685,"line_start":784,"line_end":784,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"#[cfg_attr(fbsd14, doc = \" ```\")]","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs:784:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(fbsd14, doc = \" ```\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs","byte_start":26717,"byte_end":26723,"line_start":785,"line_end":785,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/fcntl.rs:785:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs","byte_start":20690,"byte_end":20696,"line_start":627,"line_end":627,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"#[cfg_attr(fbsd14, doc = \" ```\")]","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs:627:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(fbsd14, doc = \" ```\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs","byte_start":20728,"byte_end":20734,"line_start":628,"line_end":628,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs:628:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m628\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs","byte_start":27740,"byte_end":27746,"line_start":862,"line_end":862,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"#[cfg_attr(fbsd14, doc = \" ```\")]","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs:862:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m862\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(fbsd14, doc = \" ```\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fbsd14`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs","byte_start":27778,"byte_end":27784,"line_start":863,"line_end":863,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fbsd14`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/aio.rs:863:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(not(fbsd14), doc = \" ```no_run\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fbsd14)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fbsd14)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":21682,"byte_end":21688,"line_start":652,"line_end":652,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    Handler(extern fn(libc::c_int)),","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(missing_abi)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":21682,"byte_end":21688,"line_start":652,"line_end":652,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    Handler(extern fn(libc::c_int)),","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:652:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m652\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Handler(extern fn(libc::c_int)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(missing_abi)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":21973,"byte_end":21979,"line_start":657,"line_end":657,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"    SigAction(extern fn(libc::c_int, *mut libc::siginfo_t, *mut libc::c_void))","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":21973,"byte_end":21979,"line_start":657,"line_end":657,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"    SigAction(extern fn(libc::c_int, *mut libc::siginfo_t, *mut libc::c_void))","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:657:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m657\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SigAction(extern fn(libc::c_int, *mut libc::siginfo_t, *mut libc::c_void))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":22875,"byte_end":22881,"line_start":677,"line_end":677,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"                SigHandler::Handler(f) => f as *const extern fn(libc::c_int) as usize,","highlight_start":55,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":22875,"byte_end":22881,"line_start":677,"line_end":677,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"                SigHandler::Handler(f) => f as *const extern fn(libc::c_int) as usize,","highlight_start":55,"highlight_end":61}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:677:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m677\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                SigHandler::Handler(f) => f as *const extern fn(libc::c_int) as usize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":23013,"byte_end":23019,"line_start":679,"line_end":679,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"                SigHandler::SigAction(f) => f as *const extern fn(libc::c_int, *mut libc::siginfo_t, *mut libc::c_void) as usize,","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":23013,"byte_end":23019,"line_start":679,"line_end":679,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"                SigHandler::SigAction(f) => f as *const extern fn(libc::c_int, *mut libc::siginfo_t, *mut libc::c_void) as usize,","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:679:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                SigHandler::SigAction(f) => f as *const extern fn(libc::c_int, *mut libc::siginfo_t, *mut libc::c_void) as usize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":24854,"byte_end":24860,"line_start":725,"line_end":725,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                         as *const extern fn(_, _, _))","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":24854,"byte_end":24860,"line_start":725,"line_end":725,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                         as *const extern fn(_, _, _))","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:725:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m725\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                         as *const extern fn(_, _, _))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":24911,"byte_end":24917,"line_start":727,"line_end":727,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"                as extern fn(_, _, _)),","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":24911,"byte_end":24917,"line_start":727,"line_end":727,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"                as extern fn(_, _, _)),","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:727:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                as extern fn(_, _, _)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":25464,"byte_end":25470,"line_start":737,"line_end":737,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                         as *const extern fn(libc::c_int))","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":25464,"byte_end":25470,"line_start":737,"line_end":737,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                         as *const extern fn(libc::c_int))","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:737:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                         as *const extern fn(libc::c_int))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":25525,"byte_end":25531,"line_start":739,"line_end":739,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"                as extern fn(libc::c_int)),","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":25525,"byte_end":25531,"line_start":739,"line_end":739,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"                as extern fn(libc::c_int)),","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:739:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                as extern fn(libc::c_int)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":29707,"byte_end":29713,"line_start":841,"line_end":841,"column_start":32,"column_end":38,"is_primary":true,"text":[{"text":"                     as *const extern fn(libc::c_int))","highlight_start":32,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":29707,"byte_end":29713,"line_start":841,"line_end":841,"column_start":32,"column_end":38,"is_primary":true,"text":[{"text":"                     as *const extern fn(libc::c_int))","highlight_start":32,"highlight_end":38}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:841:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m841\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                     as *const extern fn(libc::c_int))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":29750,"byte_end":29756,"line_start":842,"line_end":842,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"                as extern fn(libc::c_int)),","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs","byte_start":29750,"byte_end":29756,"line_start":842,"line_end":842,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"                as extern fn(libc::c_int)),","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/signal.rs:842:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m842\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                as extern fn(libc::c_int)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/socket/sockopt.rs","byte_start":38089,"byte_end":38100,"line_start":1332,"line_end":1332,"column_start":34,"column_end":45,"is_primary":true,"text":[{"text":"    fn new(val: &'a OsString) -> SetOsString {","highlight_start":34,"highlight_end":45}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/socket/sockopt.rs","byte_start":38012,"byte_end":38014,"line_start":1331,"line_end":1331,"column_start":6,"column_end":8,"is_primary":false,"text":[{"text":"impl<'a> Set<'a, OsString> for SetOsString<'a> {","highlight_start":6,"highlight_end":8}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/socket/sockopt.rs:1332:34\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<'a> Set<'a, OsString> for SetOsString<'a> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(val: &'a OsString) -> SetOsString {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/statfs.rs","byte_start":1095,"byte_end":1101,"line_start":39,"line_end":39,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"        const LIBC_FSTATFS: unsafe extern fn","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/statfs.rs","byte_start":1095,"byte_end":1101,"line_start":39,"line_end":39,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"        const LIBC_FSTATFS: unsafe extern fn","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/statfs.rs:39:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const LIBC_FSTATFS: unsafe extern fn\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/statfs.rs","byte_start":1241,"byte_end":1247,"line_start":42,"line_end":42,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"        const LIBC_STATFS: unsafe extern fn","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/statfs.rs","byte_start":1241,"byte_end":1247,"line_start":42,"line_end":42,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"        const LIBC_STATFS: unsafe extern fn","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/sys/statfs.rs:42:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const LIBC_STATFS: unsafe extern fn\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"21 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 21 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-070c9ebb8be425b0"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-nix-0.26.4"
## script = '''
## FROM scratch AS cratesio-nix-0.26.4
## ADD --chmod=0664 --checksum=sha256:598beaf3cc6fdd9a5dfb1630c2800c7acd31df7aaf0f565796fba2b53ca1af1b \
##   https://static.crates.io/crates/nix/nix-0.26.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-nix-0.26.4-7f0bfa3f5c36603f"
## script = '''
## FROM rust-base AS dep-l-nix-0.26.4-7f0bfa3f5c36603f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-nix-0.26.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4 \
##   --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-457bc8526d8fdae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta,source=/libmemoffset-457bc8526d8fdae9.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="nix" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The nix-rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Rust friendly bindings to *nix APIs" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="nix" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/nix-rust/nix" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="0.26.4" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="26" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'nix' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="acct"' '--cfg' 'feature="aio"' '--cfg' 'feature="default"' '--cfg' 'feature="dir"' '--cfg' 'feature="env"' '--cfg' 'feature="event"' '--cfg' 'feature="feature"' '--cfg' 'feature="fs"' '--cfg' 'feature="hostname"' '--cfg' 'feature="inotify"' '--cfg' 'feature="ioctl"' '--cfg' 'feature="kmod"' '--cfg' 'feature="memoffset"' '--cfg' 'feature="mman"' '--cfg' 'feature="mount"' '--cfg' 'feature="mqueue"' '--cfg' 'feature="net"' '--cfg' 'feature="personality"' '--cfg' 'feature="pin-utils"' '--cfg' 'feature="poll"' '--cfg' 'feature="process"' '--cfg' 'feature="pthread"' '--cfg' 'feature="ptrace"' '--cfg' 'feature="quota"' '--cfg' 'feature="reboot"' '--cfg' 'feature="resource"' '--cfg' 'feature="sched"' '--cfg' 'feature="signal"' '--cfg' 'feature="socket"' '--cfg' 'feature="term"' '--cfg' 'feature="time"' '--cfg' 'feature="ucontext"' '--cfg' 'feature="uio"' '--cfg' 'feature="user"' '--cfg' 'feature="zerocopy"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("acct", "aio", "default", "dir", "env", "event", "feature", "fs", "hostname", "inotify", "ioctl", "kmod", "memoffset", "mman", "mount", "mqueue", "net", "personality", "pin-utils", "poll", "process", "pthread", "ptrace", "quota", "reboot", "resource", "sched", "signal", "socket", "term", "time", "ucontext", "uio", "user", "zerocopy"))' '-C' 'metadata=f3a6a5a11d2fc901' '-C' 'extra-filename=-7f0bfa3f5c36603f' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'bitflags=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta' '--extern' 'cfg_if=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'memoffset=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta' '--extern' 'pin_utils=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/nix-0.26.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7f0bfa3f5c36603f"
## script = """
## FROM scratch AS out-7f0bfa3f5c36603f
## COPY --from=dep-l-nix-0.26.4-7f0bfa3f5c36603f /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7f0bfa3f5c36603f* /"""

FROM scratch AS cratesio-rustversion-1.0.14
ADD --chmod=0664 --checksum=sha256:7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4 \
  https://static.crates.io/crates/rustversion/rustversion-1.0.14.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-rustversion-1.0.14-7101e17005bf0139
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-rustversion-1.0.14,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14 \
  --mount=from=crate_out-c162134b3663fe67,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rustversion" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Conditional compilation according to rustc compiler version" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustversion" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/rustversion" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.14" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="14" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rustversion' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=6de6f96f7d125b7e' '-C' 'extra-filename=-7101e17005bf0139' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7101e17005bf0139
COPY --from=dep-p-rustversion-1.0.14-7101e17005bf0139 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7101e17005bf0139* /

## this = "7101e17005bf0139"
## is_proc_macro = true
## writes = [
##     "deps/rustversion-7101e17005bf0139.d",
##     "deps/librustversion-7101e17005bf0139.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/rustversion-7101e17005bf0139.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `cfg_macro_not_allowed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14/src/lib.rs","byte_start":7206,"byte_end":7227,"line_start":235,"line_end":235,"column_start":11,"column_end":32,"is_primary":true,"text":[{"text":"#[cfg(not(cfg_macro_not_allowed))]","highlight_start":11,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(cfg_macro_not_allowed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(cfg_macro_not_allowed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `cfg_macro_not_allowed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14/src/lib.rs:235:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(cfg_macro_not_allowed))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(cfg_macro_not_allowed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(cfg_macro_not_allowed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-c162134b3663fe67"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustversion-1.0.14"
## script = '''
## FROM scratch AS cratesio-rustversion-1.0.14
## ADD --chmod=0664 --checksum=sha256:7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4 \
##   https://static.crates.io/crates/rustversion/rustversion-1.0.14.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-rustversion-1.0.14-7101e17005bf0139"
## script = '''
## FROM rust-base AS dep-p-rustversion-1.0.14-7101e17005bf0139
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-rustversion-1.0.14,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14 \
##   --mount=from=crate_out-c162134b3663fe67,dst=/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rustversion" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Conditional compilation according to rustc compiler version" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustversion" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/rustversion" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.14" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="14" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rustversion' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=6de6f96f7d125b7e' '-C' 'extra-filename=-7101e17005bf0139' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustversion-1.0.14/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7101e17005bf0139"
## script = """
## FROM scratch AS out-7101e17005bf0139
## COPY --from=dep-p-rustversion-1.0.14-7101e17005bf0139 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7101e17005bf0139* /"""

FROM scratch AS cratesio-io-uring-0.5.13
ADD --chmod=0664 --checksum=sha256:dd1e1a01cfb924fd8c5c43b6827965db394f5a3a16c599ce03452266e1cf984c \
  https://static.crates.io/crates/io-uring/io-uring-0.5.13.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-io-uring-0.5.13-99b257aee1025add
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-io-uring-0.5.13,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13 \
  --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="io_uring" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/Cargo.toml" \
        CARGO_PKG_AUTHORS="quininer <quininer@live.com>" \
        CARGO_PKG_DESCRIPTION="The low-level `io_uring` userspace interface for Rust" \
        CARGO_PKG_HOMEPAGE="https://github.com/tokio-rs/io-uring" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="io-uring" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/io-uring" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.5.13" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="13" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/io-uring-f4f0861dc23bde78/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'io_uring' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="unstable"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bindgen", "direct-syscall", "io_safety", "overwrite", "sc", "unstable"))' '-C' 'metadata=356f6cb17e01f45e' '-C' 'extra-filename=-99b257aee1025add' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'bitflags=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-99b257aee1025add
COPY --from=dep-l-io-uring-0.5.13-99b257aee1025add /tmp/clis-qcow2-rs_0-1-2/release/deps/*-99b257aee1025add* /

## this = "99b257aee1025add"
## deps = [
##     "70ce9f1f2fa253bc",
##     "0addc1beddeea30f",
## ]
## short_externs = [
##     "bitflags-70ce9f1f2fa253bc",
##     "libc-0addc1beddeea30f",
## ]
## writes = [
##     "deps/io_uring-99b257aee1025add.d",
##     "deps/libio_uring-99b257aee1025add.rmeta",
##     "deps/libio_uring-99b257aee1025add.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/io_uring-99b257aee1025add.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/opcode.rs","byte_start":2587,"byte_end":2603,"line_start":101,"line_end":101,"column_start":14,"column_end":30,"is_primary":true,"text":[{"text":"    unsafe { std::mem::zeroed() }","highlight_start":14,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":174,"byte_end":195,"line_start":5,"line_end":5,"column_start":27,"column_end":48,"is_primary":true,"text":[{"text":"#![warn(rust_2018_idioms, unused_qualifications)]","highlight_start":27,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/opcode.rs","byte_start":2587,"byte_end":2592,"line_start":101,"line_end":101,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    unsafe { std::mem::zeroed() }","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/opcode.rs:101:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe { std::mem::zeroed() }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs:5:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![warn(rust_2018_idioms, unused_qualifications)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    unsafe { \u001b[0m\u001b[0m\u001b[38;5;9mstd::\u001b[0m\u001b[0mmem::zeroed() }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    unsafe { mem::zeroed() }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/opcode.rs","byte_start":35561,"byte_end":35590,"line_start":1210,"line_end":1210,"column_start":19,"column_end":48,"is_primary":true,"text":[{"text":"        sqe.len = mem::size_of::<sys::open_how>() as _;","highlight_start":19,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/opcode.rs","byte_start":35561,"byte_end":35566,"line_start":1210,"line_end":1210,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"        sqe.len = mem::size_of::<sys::open_how>() as _;","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/opcode.rs:1210:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqe.len = mem::size_of::<sys::open_how>() as _;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        sqe.len = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<sys::open_how>() as _;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        sqe.len = size_of::<sys::open_how>() as _;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs","byte_start":636,"byte_end":671,"line_start":24,"line_end":24,"column_start":36,"column_end":71,"is_primary":true,"text":[{"text":"    pub(crate) const SIZE: usize = mem::size_of::<sys::io_uring_probe>()","highlight_start":36,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs","byte_start":636,"byte_end":641,"line_start":24,"line_end":24,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"    pub(crate) const SIZE: usize = mem::size_of::<sys::io_uring_probe>()","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs:24:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) const SIZE: usize = mem::size_of::<sys::io_uring_probe>()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    pub(crate) const SIZE: usize = \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<sys::io_uring_probe>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    pub(crate) const SIZE: usize = size_of::<sys::io_uring_probe>()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs","byte_start":698,"byte_end":736,"line_start":25,"line_end":25,"column_start":25,"column_end":63,"is_primary":true,"text":[{"text":"        + Self::COUNT * mem::size_of::<sys::io_uring_probe_op>();","highlight_start":25,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs","byte_start":698,"byte_end":703,"line_start":25,"line_end":25,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"        + Self::COUNT * mem::size_of::<sys::io_uring_probe_op>();","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs:25:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        + Self::COUNT * mem::size_of::<sys::io_uring_probe_op>();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        + Self::COUNT * \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<sys::io_uring_probe_op>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        + Self::COUNT * size_of::<sys::io_uring_probe_op>();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs","byte_start":3318,"byte_end":3334,"line_start":113,"line_end":113,"column_start":14,"column_end":30,"is_primary":true,"text":[{"text":"    unsafe { std::mem::zeroed() }","highlight_start":14,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs","byte_start":3318,"byte_end":3323,"line_start":113,"line_end":113,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    unsafe { std::mem::zeroed() }","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/register.rs:113:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe { std::mem::zeroed() }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    unsafe { \u001b[0m\u001b[0m\u001b[38;5;9mstd::\u001b[0m\u001b[0mmem::zeroed() }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    unsafe { mem::zeroed() }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/submit.rs","byte_start":2862,"byte_end":2884,"line_start":93,"line_end":93,"column_start":20,"column_end":42,"is_primary":true,"text":[{"text":"        let size = std::mem::size_of::<T>();","highlight_start":20,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/submit.rs","byte_start":2862,"byte_end":2872,"line_start":93,"line_end":93,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"        let size = std::mem::size_of::<T>();","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/submit.rs:93:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let size = std::mem::size_of::<T>();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let size = \u001b[0m\u001b[0m\u001b[38;5;9mstd::mem::\u001b[0m\u001b[0msize_of::<T>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let size = size_of::<T>();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/submit.rs","byte_start":6697,"byte_end":6740,"line_start":201,"line_end":201,"column_start":13,"column_end":56,"is_primary":true,"text":[{"text":"            mem::size_of::<sys::io_uring_rsrc_register>() as _,","highlight_start":13,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/submit.rs","byte_start":6697,"byte_end":6702,"line_start":201,"line_end":201,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            mem::size_of::<sys::io_uring_rsrc_register>() as _,","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/submit.rs:201:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mem::size_of::<sys::io_uring_rsrc_register>() as _,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<sys::io_uring_rsrc_register>() as _,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            size_of::<sys::io_uring_rsrc_register>() as _,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs","byte_start":4490,"byte_end":4525,"line_start":197,"line_end":197,"column_start":32,"column_end":67,"is_primary":true,"text":[{"text":"        self.args.sigmask_sz = std::mem::size_of::<libc::sigset_t>() as _;","highlight_start":32,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs","byte_start":4490,"byte_end":4500,"line_start":197,"line_end":197,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":"        self.args.sigmask_sz = std::mem::size_of::<libc::sigset_t>() as _;","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs:197:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.args.sigmask_sz = std::mem::size_of::<libc::sigset_t>() as _;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        self.args.sigmask_sz = \u001b[0m\u001b[0m\u001b[38;5;9mstd::mem::\u001b[0m\u001b[0msize_of::<libc::sigset_t>() as _;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        self.args.sigmask_sz = size_of::<libc::sigset_t>() as _;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs","byte_start":9394,"byte_end":9440,"line_start":354,"line_end":354,"column_start":31,"column_end":77,"is_primary":true,"text":[{"text":"    const DATA_START: usize = std::mem::size_of::<sys::io_uring_recvmsg_out>();","highlight_start":31,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs","byte_start":9394,"byte_end":9404,"line_start":354,"line_end":354,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"    const DATA_START: usize = std::mem::size_of::<sys::io_uring_recvmsg_out>();","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs:354:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    const DATA_START: usize = std::mem::size_of::<sys::io_uring_recvmsg_out>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    const DATA_START: usize = \u001b[0m\u001b[0m\u001b[38;5;9mstd::mem::\u001b[0m\u001b[0msize_of::<sys::io_uring_recvmsg_out>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    const DATA_START: usize = size_of::<sys::io_uring_recvmsg_out>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs","byte_start":9872,"byte_end":9918,"line_start":362,"line_end":362,"column_start":27,"column_end":73,"is_primary":true,"text":[{"text":"        if buffer.len() < std::mem::size_of::<sys::io_uring_recvmsg_out>() {","highlight_start":27,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs","byte_start":9872,"byte_end":9882,"line_start":362,"line_end":362,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"        if buffer.len() < std::mem::size_of::<sys::io_uring_recvmsg_out>() {","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/types.rs:362:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if buffer.len() < std::mem::size_of::<sys::io_uring_recvmsg_out>() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        if buffer.len() < \u001b[0m\u001b[0m\u001b[38;5;9mstd::mem::\u001b[0m\u001b[0msize_of::<sys::io_uring_recvmsg_out>() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        if buffer.len() < size_of::<sys::io_uring_recvmsg_out>() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":4724,"byte_end":4743,"line_start":139,"line_end":139,"column_start":76,"column_end":95,"is_primary":true,"text":[{"text":"            let sq_len = p.sq_off.array as usize + p.sq_entries as usize * mem::size_of::<u32>();","highlight_start":76,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":4724,"byte_end":4729,"line_start":139,"line_end":139,"column_start":76,"column_end":81,"is_primary":true,"text":[{"text":"            let sq_len = p.sq_off.array as usize + p.sq_entries as usize * mem::size_of::<u32>();","highlight_start":76,"highlight_end":81}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs:139:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let sq_len = p.sq_off.array as usize + p.sq_entries as usize * mem::size_of::<u32>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let sq_len = p.sq_off.array as usize + p.sq_entries as usize * \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<u32>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let sq_len = p.sq_off.array as usize + p.sq_entries as usize * size_of::<u32>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":4821,"byte_end":4838,"line_start":140,"line_end":140,"column_start":75,"column_end":92,"is_primary":true,"text":[{"text":"            let cq_len = p.cq_off.cqes as usize + p.cq_entries as usize * mem::size_of::<C>();","highlight_start":75,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":4821,"byte_end":4826,"line_start":140,"line_end":140,"column_start":75,"column_end":80,"is_primary":true,"text":[{"text":"            let cq_len = p.cq_off.cqes as usize + p.cq_entries as usize * mem::size_of::<C>();","highlight_start":75,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs:140:75\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let cq_len = p.cq_off.cqes as usize + p.cq_entries as usize * mem::size_of::<C>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let cq_len = p.cq_off.cqes as usize + p.cq_entries as usize * \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<C>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let cq_len = p.cq_off.cqes as usize + p.cq_entries as usize * size_of::<C>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unnecessary qualification","code":{"code":"unused_qualifications","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":4892,"byte_end":4909,"line_start":141,"line_end":141,"column_start":51,"column_end":68,"is_primary":true,"text":[{"text":"            let sqe_len = p.sq_entries as usize * mem::size_of::<S>();","highlight_start":51,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unnecessary path segments","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs","byte_start":4892,"byte_end":4897,"line_start":141,"line_end":141,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"            let sqe_len = p.sq_entries as usize * mem::size_of::<S>();","highlight_start":51,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary qualification\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs:141:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let sqe_len = p.sq_entries as usize * mem::size_of::<S>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the unnecessary path segments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let sqe_len = p.sq_entries as usize * \u001b[0m\u001b[0m\u001b[38;5;9mmem::\u001b[0m\u001b[0msize_of::<S>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let sqe_len = p.sq_entries as usize * size_of::<S>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"13 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 13 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-io-uring-0.5.13"
## script = '''
## FROM scratch AS cratesio-io-uring-0.5.13
## ADD --chmod=0664 --checksum=sha256:dd1e1a01cfb924fd8c5c43b6827965db394f5a3a16c599ce03452266e1cf984c \
##   https://static.crates.io/crates/io-uring/io-uring-0.5.13.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-io-uring-0.5.13-99b257aee1025add"
## script = '''
## FROM rust-base AS dep-l-io-uring-0.5.13-99b257aee1025add
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-io-uring-0.5.13,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13 \
##   --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="io_uring" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/Cargo.toml" \
##         CARGO_PKG_AUTHORS="quininer <quininer@live.com>" \
##         CARGO_PKG_DESCRIPTION="The low-level `io_uring` userspace interface for Rust" \
##         CARGO_PKG_HOMEPAGE="https://github.com/tokio-rs/io-uring" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="io-uring" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/io-uring" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.5.13" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="13" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-qcow2-rs_0-1-2/release/build/io-uring-f4f0861dc23bde78/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'io_uring' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="unstable"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bindgen", "direct-syscall", "io_safety", "overwrite", "sc", "unstable"))' '-C' 'metadata=356f6cb17e01f45e' '-C' 'extra-filename=-99b257aee1025add' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'bitflags=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/io-uring-0.5.13/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-99b257aee1025add"
## script = """
## FROM scratch AS out-99b257aee1025add
## COPY --from=dep-l-io-uring-0.5.13-99b257aee1025add /tmp/clis-qcow2-rs_0-1-2/release/deps/*-99b257aee1025add* /"""

FROM scratch AS cratesio-scoped-tls-1.0.1
ADD --chmod=0664 --checksum=sha256:e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294 \
  https://static.crates.io/crates/scoped-tls/scoped-tls-1.0.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-scoped-tls-1.0.1-7cdf4580d43854fe
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-scoped-tls-1.0.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="scoped_tls" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="Library implementation of the standard library's old `scoped_thread_local!`\nmacro for providing scoped access to thread local storage (TLS) so any type can\nbe stored into TLS.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/scoped-tls" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="scoped-tls" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/scoped-tls" \
        CARGO_PKG_RUST_VERSION="1.59" \
        CARGO_PKG_VERSION="1.0.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'scoped_tls' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=0d43bcc8f8632466' '-C' 'extra-filename=-7cdf4580d43854fe' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-7cdf4580d43854fe
COPY --from=dep-l-scoped-tls-1.0.1-7cdf4580d43854fe /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7cdf4580d43854fe* /

## this = "7cdf4580d43854fe"
## writes = [
##     "deps/scoped_tls-7cdf4580d43854fe.d",
##     "deps/libscoped_tls-7cdf4580d43854fe.rmeta",
##     "deps/libscoped_tls-7cdf4580d43854fe.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/scoped_tls-7cdf4580d43854fe.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-scoped-tls-1.0.1"
## script = '''
## FROM scratch AS cratesio-scoped-tls-1.0.1
## ADD --chmod=0664 --checksum=sha256:e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294 \
##   https://static.crates.io/crates/scoped-tls/scoped-tls-1.0.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-scoped-tls-1.0.1-7cdf4580d43854fe"
## script = '''
## FROM rust-base AS dep-l-scoped-tls-1.0.1-7cdf4580d43854fe
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-scoped-tls-1.0.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="scoped_tls" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="Library implementation of the standard library's old `scoped_thread_local!`\nmacro for providing scoped access to thread local storage (TLS) so any type can\nbe stored into TLS.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/scoped-tls" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="scoped-tls" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/scoped-tls" \
##         CARGO_PKG_RUST_VERSION="1.59" \
##         CARGO_PKG_VERSION="1.0.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'scoped_tls' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=0d43bcc8f8632466' '-C' 'extra-filename=-7cdf4580d43854fe' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/scoped-tls-1.0.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-7cdf4580d43854fe"
## script = """
## FROM scratch AS out-7cdf4580d43854fe
## COPY --from=dep-l-scoped-tls-1.0.1-7cdf4580d43854fe /tmp/clis-qcow2-rs_0-1-2/release/deps/*-7cdf4580d43854fe* /"""

FROM scratch AS cratesio-socket2-0.4.10
ADD --chmod=0664 --checksum=sha256:9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d \
  https://static.crates.io/crates/socket2/socket2-0.4.10.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-socket2-0.4.10-570b139c3ac51dec
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-socket2-0.4.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10 \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="socket2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Utilities for handling networking sockets with a maximal amount of configuration\npossible intended.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/socket2" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="socket2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/socket2" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.4.10" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="10" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'socket2' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="all"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all"))' '-C' 'metadata=b18df9538052ee16' '-C' 'extra-filename=-570b139c3ac51dec' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-570b139c3ac51dec
COPY --from=dep-l-socket2-0.4.10-570b139c3ac51dec /tmp/clis-qcow2-rs_0-1-2/release/deps/*-570b139c3ac51dec* /

## this = "570b139c3ac51dec"
## deps = ["0addc1beddeea30f"]
## short_externs = ["libc-0addc1beddeea30f"]
## writes = [
##     "deps/socket2-570b139c3ac51dec.d",
##     "deps/libsocket2-570b139c3ac51dec.rmeta",
##     "deps/libsocket2-570b139c3ac51dec.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/socket2-570b139c3ac51dec.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-socket2-0.4.10"
## script = '''
## FROM scratch AS cratesio-socket2-0.4.10
## ADD --chmod=0664 --checksum=sha256:9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d \
##   https://static.crates.io/crates/socket2/socket2-0.4.10.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-socket2-0.4.10-570b139c3ac51dec"
## script = '''
## FROM rust-base AS dep-l-socket2-0.4.10-570b139c3ac51dec
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-socket2-0.4.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10 \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="socket2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>:Thomas de Zeeuw <thomasdezeeuw@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Utilities for handling networking sockets with a maximal amount of configuration\npossible intended.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/socket2" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="socket2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/socket2" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.4.10" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="10" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'socket2' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--cfg' 'feature="all"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all"))' '-C' 'metadata=b18df9538052ee16' '-C' 'extra-filename=-570b139c3ac51dec' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/socket2-0.4.10/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-570b139c3ac51dec"
## script = """
## FROM scratch AS out-570b139c3ac51dec
## COPY --from=dep-l-socket2-0.4.10-570b139c3ac51dec /tmp/clis-qcow2-rs_0-1-2/release/deps/*-570b139c3ac51dec* /"""

FROM scratch AS cratesio-tokio-uring-0.4.0
ADD --chmod=0664 --checksum=sha256:0d5e02bb137e030b3a547c65a3bd2f1836d66a97369fdcc69034002b10e155ef \
  https://static.crates.io/crates/tokio-uring/tokio-uring-0.4.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-tokio-uring-0.4.0-b839b9e50c923626
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-tokio-uring-0.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0 \
  --mount=from=out-99b257aee1025add,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta,source=/libio_uring-99b257aee1025add.rmeta \
  --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-7cdf4580d43854fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta,source=/libscoped_tls-7cdf4580d43854fe.rmeta \
  --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
  --mount=from=out-570b139c3ac51dec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta,source=/libsocket2-570b139c3ac51dec.rmeta \
  --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta,source=/libtokio-7dfa875e60cea25d.rmeta \
  --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
  --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
  --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
  --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
  --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
  --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
  --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="tokio_uring" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
        CARGO_PKG_DESCRIPTION="io-uring support for the Tokio asynchronous runtime.\n" \
        CARGO_PKG_HOMEPAGE="https://tokio.rs" \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="tokio-uring" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio-uring" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.4.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'tokio_uring' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bytes"))' '-C' 'metadata=d50946da009443b3' '-C' 'extra-filename=-b839b9e50c923626' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'io_uring=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'scoped_tls=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta' '--extern' 'slab=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta' '--extern' 'socket2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b839b9e50c923626
COPY --from=dep-l-tokio-uring-0.4.0-b839b9e50c923626 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b839b9e50c923626* /

## this = "b839b9e50c923626"
## deps = [
##     "99b257aee1025add",
##     "70ce9f1f2fa253bc",
##     "0addc1beddeea30f",
##     "7cdf4580d43854fe",
##     "be8a800e18ea87ab",
##     "570b139c3ac51dec",
##     "7dfa875e60cea25d",
##     "d7b35eb956c1be36",
##     "8b22b018b5891a0c",
##     "abda958216542c23",
##     "4ac6edc772146637",
##     "1a71aa69f2330c14",
##     "b477fb82efd13fea",
##     "f8744ca11f01d51a",
##     "da34da6838abd7f1",
##     "db7ba43bb64f435f",
##     "a73e0fc4c66dd601",
##     "5395542b51c1f12e",
##     "6ec2d9d16459980f",
##     "01d4aecec31808fc",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
## ]
## short_externs = [
##     "io_uring-99b257aee1025add",
##     "bitflags-70ce9f1f2fa253bc",
##     "libc-0addc1beddeea30f",
##     "scoped_tls-7cdf4580d43854fe",
##     "slab-be8a800e18ea87ab",
##     "socket2-570b139c3ac51dec",
##     "tokio-7dfa875e60cea25d",
##     "bytes-d7b35eb956c1be36",
##     "mio-8b22b018b5891a0c",
##     "num_cpus-abda958216542c23",
##     "parking_lot-4ac6edc772146637",
##     "lock_api-1a71aa69f2330c14",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-f8744ca11f01d51a",
##     "cfg_if-da34da6838abd7f1",
##     "smallvec-db7ba43bb64f435f",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "signal_hook_registry-5395542b51c1f12e",
##     "socket2-6ec2d9d16459980f",
##     "tokio_macros-01d4aecec31808fc",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
## ]
## writes = [
##     "deps/tokio_uring-b839b9e50c923626.d",
##     "deps/libtokio_uring-b839b9e50c923626.rmeta",
##     "deps/libtokio_uring-b839b9e50c923626.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/tokio_uring-b839b9e50c923626.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"field `0` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/src/driver/op.rs","byte_start":1473,"byte_end":1480,"line_start":57,"line_end":57,"column_start":5,"column_end":12,"is_primary":false,"text":[{"text":"    Ignored(Box<dyn std::any::Any>),","highlight_start":5,"highlight_end":12}],"label":"field in this variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/src/driver/op.rs","byte_start":1481,"byte_end":1503,"line_start":57,"line_end":57,"column_start":13,"column_end":35,"is_primary":true,"text":[{"text":"    Ignored(Box<dyn std::any::Any>),","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/src/driver/op.rs","byte_start":1481,"byte_end":1503,"line_start":57,"line_end":57,"column_start":13,"column_end":35,"is_primary":true,"text":[{"text":"    Ignored(Box<dyn std::any::Any>),","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `0` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/src/driver/op.rs:57:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ignored(Box<dyn std::any::Any>),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this variant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    Ignored(\u001b[0m\u001b[0m\u001b[38;5;9mBox<dyn std::any::Any>\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    Ignored(\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-tokio-uring-0.4.0"
## script = '''
## FROM scratch AS cratesio-tokio-uring-0.4.0
## ADD --chmod=0664 --checksum=sha256:0d5e02bb137e030b3a547c65a3bd2f1836d66a97369fdcc69034002b10e155ef \
##   https://static.crates.io/crates/tokio-uring/tokio-uring-0.4.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-tokio-uring-0.4.0-b839b9e50c923626"
## script = '''
## FROM rust-base AS dep-l-tokio-uring-0.4.0-b839b9e50c923626
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-tokio-uring-0.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0 \
##   --mount=from=out-99b257aee1025add,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta,source=/libio_uring-99b257aee1025add.rmeta \
##   --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-7cdf4580d43854fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta,source=/libscoped_tls-7cdf4580d43854fe.rmeta \
##   --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
##   --mount=from=out-570b139c3ac51dec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta,source=/libsocket2-570b139c3ac51dec.rmeta \
##   --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta,source=/libtokio-7dfa875e60cea25d.rmeta \
##   --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
##   --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
##   --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
##   --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
##   --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
##   --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
##   --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="tokio_uring" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Tokio Contributors <team@tokio.rs>" \
##         CARGO_PKG_DESCRIPTION="io-uring support for the Tokio asynchronous runtime.\n" \
##         CARGO_PKG_HOMEPAGE="https://tokio.rs" \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="tokio-uring" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tokio-rs/tokio-uring" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.4.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'tokio_uring' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("bytes"))' '-C' 'metadata=d50946da009443b3' '-C' 'extra-filename=-b839b9e50c923626' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'io_uring=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'scoped_tls=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta' '--extern' 'slab=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta' '--extern' 'socket2=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/tokio-uring-0.4.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b839b9e50c923626"
## script = """
## FROM scratch AS out-b839b9e50c923626
## COPY --from=dep-l-tokio-uring-0.4.0-b839b9e50c923626 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-b839b9e50c923626* /"""

FROM scratch AS cratesio-qcow2-rs-0.1.2
ADD --chmod=0664 --checksum=sha256:cfa6f466b260b97fbe7d1f6489758bb8341e8db146f8848c2a3b17810f9136a3 \
  https://static.crates.io/crates/qcow2-rs/qcow2-rs-0.1.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-qcow2-rs-0.1.2-c30389ddf6bb942e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-qcow2-rs-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2 \
  --mount=from=out-c336562a05f16d22,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so,source=/libasync_recursion-c336562a05f16d22.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
  --mount=from=out-a5a31ac1f09098f3,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so,source=/libasync_trait-a5a31ac1f09098f3.so \
  --mount=from=out-29ccad64725feb59,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rmeta,source=/libbincode-29ccad64725feb59.rmeta \
  --mount=from=out-dc85bb26f94c68ed,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta,source=/libserde-dc85bb26f94c68ed.rmeta \
  --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
  --mount=from=out-a63c22cfa59c094d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rmeta,source=/libbyteorder-a63c22cfa59c094d.rmeta \
  --mount=from=out-fe4290a3fc65d263,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rmeta,source=/libclap-fe4290a3fc65d263.rmeta \
  --mount=from=out-36625380256100cd,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta,source=/libclap_builder-36625380256100cd.rmeta \
  --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta,source=/libanstream-fbacf1af5926bdd4.rmeta \
  --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
  --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
  --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
  --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
  --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
  --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta,source=/libclap_lex-a859f5c15f1b3302.rmeta \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
  --mount=from=out-23f1d80895cbfd94,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so,source=/libclap_derive-23f1d80895cbfd94.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
  --mount=from=out-bd9f44d75c9ea6f8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rmeta,source=/libclap_num-bd9f44d75c9ea6f8.rmeta \
  --mount=from=out-8fa1a5b116170862,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rmeta,source=/libnum_traits-8fa1a5b116170862.rmeta \
  --mount=from=out-14f62bda870ceea0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rmeta,source=/libenv_logger-14f62bda870ceea0.rmeta \
  --mount=from=out-db60e10e02e74b95,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta,source=/libatty-db60e10e02e74b95.rmeta \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
  --mount=from=out-d4a86c79f6da3dd6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta,source=/libhumantime-d4a86c79f6da3dd6.rmeta \
  --mount=from=out-ea8327ab44844df1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta,source=/liblog-ea8327ab44844df1.rmeta \
  --mount=from=out-72624534882400be,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta,source=/libregex-72624534882400be.rmeta \
  --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
  --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta,source=/libregex_automata-ba444f6efb5958a6.rmeta \
  --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
  --mount=from=out-eb1e3a5a15a3aa8c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta,source=/libtermcolor-eb1e3a5a15a3aa8c.rmeta \
  --mount=from=out-d32fbdba785e08a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rmeta,source=/libfutures-d32fbdba785e08a6.rmeta \
  --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
  --mount=from=out-0c9e132561e25190,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta,source=/libfutures_executor-0c9e132561e25190.rmeta \
  --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
  --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta,source=/libfutures_util-b2a8e6e2e33ce088.rmeta \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
  --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
  --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
  --mount=from=out-a4b0a3c89e6f82ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rmeta,source=/libfutures_locks-a4b0a3c89e6f82ec.rmeta \
  --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta,source=/libtokio-7dfa875e60cea25d.rmeta \
  --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
  --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
  --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
  --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
  --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
  --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
  --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
  --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
  --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
  --mount=from=out-df26b227e0244749,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rmeta,source=/libminiz_oxide-df26b227e0244749.rmeta \
  --mount=from=out-ee21f8d21d0adcf2,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta,source=/libadler-ee21f8d21d0adcf2.rmeta \
  --mount=from=out-7f0bfa3f5c36603f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rmeta,source=/libnix-7f0bfa3f5c36603f.rmeta \
  --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
  --mount=from=out-457bc8526d8fdae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta,source=/libmemoffset-457bc8526d8fdae9.rmeta \
  --mount=from=out-7101e17005bf0139,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so,source=/librustversion-7101e17005bf0139.so \
  --mount=from=out-b839b9e50c923626,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rmeta,source=/libtokio_uring-b839b9e50c923626.rmeta \
  --mount=from=out-99b257aee1025add,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta,source=/libio_uring-99b257aee1025add.rmeta \
  --mount=from=out-7cdf4580d43854fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta,source=/libscoped_tls-7cdf4580d43854fe.rmeta \
  --mount=from=out-570b139c3ac51dec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta,source=/libsocket2-570b139c3ac51dec.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="qcow2_rs" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Ming Lei <tom.leiming@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A library for read/write qcow2 image in async/await" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="qcow2-rs" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/ming1/qcow2-rs.git" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGO_PRIMARY_PACKAGE="1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'qcow2_rs' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=6b7ea755b9cea0ff' '-C' 'extra-filename=-c30389ddf6bb942e' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'async_recursion=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so' '--extern' 'async_trait=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so' '--extern' 'bincode=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rmeta' '--extern' 'byteorder=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rmeta' '--extern' 'clap=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rmeta' '--extern' 'clap_num=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rmeta' '--extern' 'clap_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so' '--extern' 'env_logger=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rmeta' '--extern' 'futures=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rmeta' '--extern' 'futures_locks=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'log=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta' '--extern' 'miniz_oxide=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rmeta' '--extern' 'nix=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rmeta' '--extern' 'rustversion=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so' '--extern' 'serde=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta' '--extern' 'tokio_uring=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c30389ddf6bb942e
COPY --from=dep-l-qcow2-rs-0.1.2-c30389ddf6bb942e /tmp/clis-qcow2-rs_0-1-2/release/deps/*-c30389ddf6bb942e* /

## this = "c30389ddf6bb942e"
## deps = [
##     "c336562a05f16d22",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
##     "a5a31ac1f09098f3",
##     "29ccad64725feb59",
##     "dc85bb26f94c68ed",
##     "ca901d6d165172fe",
##     "a63c22cfa59c094d",
##     "fe4290a3fc65d263",
##     "36625380256100cd",
##     "fbacf1af5926bdd4",
##     "d0740faea4ed398d",
##     "a4729bcf670c741e",
##     "522ff71b25340e24",
##     "fcc94b35d76d0926",
##     "8e999bad75f58407",
##     "a859f5c15f1b3302",
##     "fd42a4ea370e31ec",
##     "23f1d80895cbfd94",
##     "2f387b4601b8b6b0",
##     "bd9f44d75c9ea6f8",
##     "8fa1a5b116170862",
##     "14f62bda870ceea0",
##     "db60e10e02e74b95",
##     "0addc1beddeea30f",
##     "d4a86c79f6da3dd6",
##     "ea8327ab44844df1",
##     "72624534882400be",
##     "2b15874b445115c1",
##     "08328c8b7673a58d",
##     "ba444f6efb5958a6",
##     "7a4e8cf437ea8df6",
##     "eb1e3a5a15a3aa8c",
##     "d32fbdba785e08a6",
##     "ad9d7b2de9358699",
##     "1d93d74bf27fab54",
##     "6ec89d477b5d3e53",
##     "0c9e132561e25190",
##     "f04cff00a4d400c7",
##     "b2a8e6e2e33ce088",
##     "9a295684e8a14a09",
##     "d6b5133ea5763a96",
##     "a73e0fc4c66dd601",
##     "b74f2a8eb0482878",
##     "be8a800e18ea87ab",
##     "a4b0a3c89e6f82ec",
##     "7dfa875e60cea25d",
##     "d7b35eb956c1be36",
##     "8b22b018b5891a0c",
##     "abda958216542c23",
##     "4ac6edc772146637",
##     "1a71aa69f2330c14",
##     "b477fb82efd13fea",
##     "f8744ca11f01d51a",
##     "da34da6838abd7f1",
##     "db7ba43bb64f435f",
##     "5395542b51c1f12e",
##     "6ec2d9d16459980f",
##     "01d4aecec31808fc",
##     "df26b227e0244749",
##     "ee21f8d21d0adcf2",
##     "7f0bfa3f5c36603f",
##     "70ce9f1f2fa253bc",
##     "457bc8526d8fdae9",
##     "7101e17005bf0139",
##     "b839b9e50c923626",
##     "99b257aee1025add",
##     "7cdf4580d43854fe",
##     "570b139c3ac51dec",
## ]
## short_externs = [
##     "async_recursion-c336562a05f16d22",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
##     "async_trait-a5a31ac1f09098f3",
##     "bincode-29ccad64725feb59",
##     "serde-dc85bb26f94c68ed",
##     "serde_derive-ca901d6d165172fe",
##     "byteorder-a63c22cfa59c094d",
##     "clap-fe4290a3fc65d263",
##     "clap_builder-36625380256100cd",
##     "anstream-fbacf1af5926bdd4",
##     "anstyle-d0740faea4ed398d",
##     "anstyle_parse-a4729bcf670c741e",
##     "utf8parse-522ff71b25340e24",
##     "anstyle_query-fcc94b35d76d0926",
##     "colorchoice-8e999bad75f58407",
##     "clap_lex-a859f5c15f1b3302",
##     "strsim-fd42a4ea370e31ec",
##     "clap_derive-23f1d80895cbfd94",
##     "heck-2f387b4601b8b6b0",
##     "clap_num-bd9f44d75c9ea6f8",
##     "num_traits-8fa1a5b116170862",
##     "env_logger-14f62bda870ceea0",
##     "atty-db60e10e02e74b95",
##     "libc-0addc1beddeea30f",
##     "humantime-d4a86c79f6da3dd6",
##     "log-ea8327ab44844df1",
##     "regex-72624534882400be",
##     "aho_corasick-2b15874b445115c1",
##     "memchr-08328c8b7673a58d",
##     "regex_automata-ba444f6efb5958a6",
##     "regex_syntax-7a4e8cf437ea8df6",
##     "termcolor-eb1e3a5a15a3aa8c",
##     "futures-d32fbdba785e08a6",
##     "futures_channel-ad9d7b2de9358699",
##     "futures_core-1d93d74bf27fab54",
##     "futures_sink-6ec89d477b5d3e53",
##     "futures_executor-0c9e132561e25190",
##     "futures_task-f04cff00a4d400c7",
##     "futures_util-b2a8e6e2e33ce088",
##     "futures_io-9a295684e8a14a09",
##     "futures_macro-d6b5133ea5763a96",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-be8a800e18ea87ab",
##     "futures_locks-a4b0a3c89e6f82ec",
##     "tokio-7dfa875e60cea25d",
##     "bytes-d7b35eb956c1be36",
##     "mio-8b22b018b5891a0c",
##     "num_cpus-abda958216542c23",
##     "parking_lot-4ac6edc772146637",
##     "lock_api-1a71aa69f2330c14",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-f8744ca11f01d51a",
##     "cfg_if-da34da6838abd7f1",
##     "smallvec-db7ba43bb64f435f",
##     "signal_hook_registry-5395542b51c1f12e",
##     "socket2-6ec2d9d16459980f",
##     "tokio_macros-01d4aecec31808fc",
##     "miniz_oxide-df26b227e0244749",
##     "adler-ee21f8d21d0adcf2",
##     "nix-7f0bfa3f5c36603f",
##     "bitflags-70ce9f1f2fa253bc",
##     "memoffset-457bc8526d8fdae9",
##     "rustversion-7101e17005bf0139",
##     "tokio_uring-b839b9e50c923626",
##     "io_uring-99b257aee1025add",
##     "scoped_tls-7cdf4580d43854fe",
##     "socket2-570b139c3ac51dec",
## ]
## writes = [
##     "deps/qcow2_rs-c30389ddf6bb942e.d",
##     "deps/libqcow2_rs-c30389ddf6bb942e.rmeta",
##     "deps/libqcow2_rs-c30389ddf6bb942e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/qcow2_rs-c30389ddf6bb942e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libqcow2_rs-c30389ddf6bb942e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/libqcow2_rs-c30389ddf6bb942e.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-13057c050b88f322"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out"
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[contexts]]
## name = "crate_out-070c9ebb8be425b0"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out"
## 
## [[contexts]]
## name = "crate_out-c162134b3663fe67"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-qcow2-rs-0.1.2"
## script = '''
## FROM scratch AS cratesio-qcow2-rs-0.1.2
## ADD --chmod=0664 --checksum=sha256:cfa6f466b260b97fbe7d1f6489758bb8341e8db146f8848c2a3b17810f9136a3 \
##   https://static.crates.io/crates/qcow2-rs/qcow2-rs-0.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-qcow2-rs-0.1.2-c30389ddf6bb942e"
## script = '''
## FROM rust-base AS dep-l-qcow2-rs-0.1.2-c30389ddf6bb942e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-qcow2-rs-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2 \
##   --mount=from=out-c336562a05f16d22,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so,source=/libasync_recursion-c336562a05f16d22.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rmeta,source=/libproc_macro2-7c4c35625cab66f6.rmeta \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rmeta,source=/libunicode_ident-4c1dc76c11b3deb8.rmeta \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rmeta,source=/libquote-230bf5113558ae5c.rmeta \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rmeta,source=/libsyn-09c08d3ded2362f6.rmeta \
##   --mount=from=out-a5a31ac1f09098f3,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so,source=/libasync_trait-a5a31ac1f09098f3.so \
##   --mount=from=out-29ccad64725feb59,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rmeta,source=/libbincode-29ccad64725feb59.rmeta \
##   --mount=from=out-dc85bb26f94c68ed,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta,source=/libserde-dc85bb26f94c68ed.rmeta \
##   --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
##   --mount=from=out-a63c22cfa59c094d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rmeta,source=/libbyteorder-a63c22cfa59c094d.rmeta \
##   --mount=from=out-fe4290a3fc65d263,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rmeta,source=/libclap-fe4290a3fc65d263.rmeta \
##   --mount=from=out-36625380256100cd,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rmeta,source=/libclap_builder-36625380256100cd.rmeta \
##   --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rmeta,source=/libanstream-fbacf1af5926bdd4.rmeta \
##   --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rmeta,source=/libanstyle-d0740faea4ed398d.rmeta \
##   --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rmeta,source=/libanstyle_parse-a4729bcf670c741e.rmeta \
##   --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rmeta,source=/libutf8parse-522ff71b25340e24.rmeta \
##   --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rmeta,source=/libanstyle_query-fcc94b35d76d0926.rmeta \
##   --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rmeta,source=/libcolorchoice-8e999bad75f58407.rmeta \
##   --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rmeta,source=/libclap_lex-a859f5c15f1b3302.rmeta \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rmeta,source=/libstrsim-fd42a4ea370e31ec.rmeta \
##   --mount=from=out-23f1d80895cbfd94,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so,source=/libclap_derive-23f1d80895cbfd94.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rmeta,source=/libheck-2f387b4601b8b6b0.rmeta \
##   --mount=from=out-bd9f44d75c9ea6f8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rmeta,source=/libclap_num-bd9f44d75c9ea6f8.rmeta \
##   --mount=from=out-8fa1a5b116170862,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rmeta,source=/libnum_traits-8fa1a5b116170862.rmeta \
##   --mount=from=out-14f62bda870ceea0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rmeta,source=/libenv_logger-14f62bda870ceea0.rmeta \
##   --mount=from=out-db60e10e02e74b95,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rmeta,source=/libatty-db60e10e02e74b95.rmeta \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta,source=/liblibc-0addc1beddeea30f.rmeta \
##   --mount=from=out-d4a86c79f6da3dd6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rmeta,source=/libhumantime-d4a86c79f6da3dd6.rmeta \
##   --mount=from=out-ea8327ab44844df1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta,source=/liblog-ea8327ab44844df1.rmeta \
##   --mount=from=out-72624534882400be,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rmeta,source=/libregex-72624534882400be.rmeta \
##   --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rmeta,source=/libaho_corasick-2b15874b445115c1.rmeta \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rmeta,source=/libmemchr-08328c8b7673a58d.rmeta \
##   --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rmeta,source=/libregex_automata-ba444f6efb5958a6.rmeta \
##   --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rmeta,source=/libregex_syntax-7a4e8cf437ea8df6.rmeta \
##   --mount=from=out-eb1e3a5a15a3aa8c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rmeta,source=/libtermcolor-eb1e3a5a15a3aa8c.rmeta \
##   --mount=from=out-d32fbdba785e08a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rmeta,source=/libfutures-d32fbdba785e08a6.rmeta \
##   --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rmeta,source=/libfutures_channel-ad9d7b2de9358699.rmeta \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rmeta,source=/libfutures_core-1d93d74bf27fab54.rmeta \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rmeta,source=/libfutures_sink-6ec89d477b5d3e53.rmeta \
##   --mount=from=out-0c9e132561e25190,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rmeta,source=/libfutures_executor-0c9e132561e25190.rmeta \
##   --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rmeta,source=/libfutures_task-f04cff00a4d400c7.rmeta \
##   --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rmeta,source=/libfutures_util-b2a8e6e2e33ce088.rmeta \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rmeta,source=/libfutures_io-9a295684e8a14a09.rmeta \
##   --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rmeta,source=/libpin_project_lite-a73e0fc4c66dd601.rmeta \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rmeta,source=/libpin_utils-b74f2a8eb0482878.rmeta \
##   --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rmeta,source=/libslab-be8a800e18ea87ab.rmeta \
##   --mount=from=out-a4b0a3c89e6f82ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rmeta,source=/libfutures_locks-a4b0a3c89e6f82ec.rmeta \
##   --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta,source=/libtokio-7dfa875e60cea25d.rmeta \
##   --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rmeta,source=/libbytes-d7b35eb956c1be36.rmeta \
##   --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rmeta,source=/libmio-8b22b018b5891a0c.rmeta \
##   --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rmeta,source=/libnum_cpus-abda958216542c23.rmeta \
##   --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rmeta,source=/libparking_lot-4ac6edc772146637.rmeta \
##   --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rmeta,source=/liblock_api-1a71aa69f2330c14.rmeta \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rmeta,source=/libscopeguard-b477fb82efd13fea.rmeta \
##   --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rmeta,source=/libparking_lot_core-f8744ca11f01d51a.rmeta \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rmeta,source=/libcfg_if-da34da6838abd7f1.rmeta \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rmeta,source=/libsmallvec-db7ba43bb64f435f.rmeta \
##   --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rmeta,source=/libsignal_hook_registry-5395542b51c1f12e.rmeta \
##   --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rmeta,source=/libsocket2-6ec2d9d16459980f.rmeta \
##   --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
##   --mount=from=out-df26b227e0244749,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rmeta,source=/libminiz_oxide-df26b227e0244749.rmeta \
##   --mount=from=out-ee21f8d21d0adcf2,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rmeta,source=/libadler-ee21f8d21d0adcf2.rmeta \
##   --mount=from=out-7f0bfa3f5c36603f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rmeta,source=/libnix-7f0bfa3f5c36603f.rmeta \
##   --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rmeta,source=/libbitflags-70ce9f1f2fa253bc.rmeta \
##   --mount=from=out-457bc8526d8fdae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rmeta,source=/libmemoffset-457bc8526d8fdae9.rmeta \
##   --mount=from=out-7101e17005bf0139,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so,source=/librustversion-7101e17005bf0139.so \
##   --mount=from=out-b839b9e50c923626,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rmeta,source=/libtokio_uring-b839b9e50c923626.rmeta \
##   --mount=from=out-99b257aee1025add,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rmeta,source=/libio_uring-99b257aee1025add.rmeta \
##   --mount=from=out-7cdf4580d43854fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rmeta,source=/libscoped_tls-7cdf4580d43854fe.rmeta \
##   --mount=from=out-570b139c3ac51dec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rmeta,source=/libsocket2-570b139c3ac51dec.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="qcow2_rs" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Ming Lei <tom.leiming@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A library for read/write qcow2 image in async/await" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="qcow2-rs" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/ming1/qcow2-rs.git" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGO_PRIMARY_PACKAGE="1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'qcow2_rs' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=6b7ea755b9cea0ff' '-C' 'extra-filename=-c30389ddf6bb942e' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'async_recursion=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so' '--extern' 'async_trait=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so' '--extern' 'bincode=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rmeta' '--extern' 'byteorder=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rmeta' '--extern' 'clap=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rmeta' '--extern' 'clap_num=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rmeta' '--extern' 'clap_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so' '--extern' 'env_logger=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rmeta' '--extern' 'futures=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rmeta' '--extern' 'futures_locks=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rmeta' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rmeta' '--extern' 'log=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rmeta' '--extern' 'miniz_oxide=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rmeta' '--extern' 'nix=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rmeta' '--extern' 'rustversion=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so' '--extern' 'serde=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rmeta' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rmeta' '--extern' 'tokio_uring=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c30389ddf6bb942e"
## script = """
## FROM scratch AS out-c30389ddf6bb942e
## COPY --from=dep-l-qcow2-rs-0.1.2-c30389ddf6bb942e /tmp/clis-qcow2-rs_0-1-2/release/deps/*-c30389ddf6bb942e* /"""


FROM rust-base AS dep-b-qcow2-rs-0.1.2-aae81d819d383e78
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
RUN \
  --mount=from=cratesio-qcow2-rs-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2 \
  --mount=from=out-c336562a05f16d22,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so,source=/libasync_recursion-c336562a05f16d22.so \
  --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
  --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
  --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
  --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
  --mount=from=out-a5a31ac1f09098f3,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so,source=/libasync_trait-a5a31ac1f09098f3.so \
  --mount=from=out-29ccad64725feb59,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rlib,source=/libbincode-29ccad64725feb59.rlib \
  --mount=from=out-dc85bb26f94c68ed,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rlib,source=/libserde-dc85bb26f94c68ed.rlib \
  --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
  --mount=from=out-a63c22cfa59c094d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rlib,source=/libbyteorder-a63c22cfa59c094d.rlib \
  --mount=from=out-fe4290a3fc65d263,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rlib,source=/libclap-fe4290a3fc65d263.rlib \
  --mount=from=out-36625380256100cd,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rlib,source=/libclap_builder-36625380256100cd.rlib \
  --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rlib,source=/libanstream-fbacf1af5926bdd4.rlib \
  --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rlib,source=/libanstyle-d0740faea4ed398d.rlib \
  --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rlib,source=/libanstyle_parse-a4729bcf670c741e.rlib \
  --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rlib,source=/libutf8parse-522ff71b25340e24.rlib \
  --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rlib,source=/libanstyle_query-fcc94b35d76d0926.rlib \
  --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rlib,source=/libcolorchoice-8e999bad75f58407.rlib \
  --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rlib,source=/libclap_lex-a859f5c15f1b3302.rlib \
  --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rlib,source=/libstrsim-fd42a4ea370e31ec.rlib \
  --mount=from=out-23f1d80895cbfd94,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so,source=/libclap_derive-23f1d80895cbfd94.so \
  --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
  --mount=from=out-bd9f44d75c9ea6f8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rlib,source=/libclap_num-bd9f44d75c9ea6f8.rlib \
  --mount=from=out-8fa1a5b116170862,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rlib,source=/libnum_traits-8fa1a5b116170862.rlib \
  --mount=from=out-14f62bda870ceea0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rlib,source=/libenv_logger-14f62bda870ceea0.rlib \
  --mount=from=out-db60e10e02e74b95,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rlib,source=/libatty-db60e10e02e74b95.rlib \
  --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rlib,source=/liblibc-0addc1beddeea30f.rlib \
  --mount=from=out-d4a86c79f6da3dd6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rlib,source=/libhumantime-d4a86c79f6da3dd6.rlib \
  --mount=from=out-ea8327ab44844df1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rlib,source=/liblog-ea8327ab44844df1.rlib \
  --mount=from=out-72624534882400be,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rlib,source=/libregex-72624534882400be.rlib \
  --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rlib,source=/libaho_corasick-2b15874b445115c1.rlib \
  --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rlib,source=/libmemchr-08328c8b7673a58d.rlib \
  --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rlib,source=/libregex_automata-ba444f6efb5958a6.rlib \
  --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rlib,source=/libregex_syntax-7a4e8cf437ea8df6.rlib \
  --mount=from=out-eb1e3a5a15a3aa8c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rlib,source=/libtermcolor-eb1e3a5a15a3aa8c.rlib \
  --mount=from=out-d32fbdba785e08a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rlib,source=/libfutures-d32fbdba785e08a6.rlib \
  --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rlib,source=/libfutures_channel-ad9d7b2de9358699.rlib \
  --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rlib,source=/libfutures_core-1d93d74bf27fab54.rlib \
  --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rlib,source=/libfutures_sink-6ec89d477b5d3e53.rlib \
  --mount=from=out-0c9e132561e25190,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rlib,source=/libfutures_executor-0c9e132561e25190.rlib \
  --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rlib,source=/libfutures_task-f04cff00a4d400c7.rlib \
  --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rlib,source=/libfutures_util-b2a8e6e2e33ce088.rlib \
  --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rlib,source=/libfutures_io-9a295684e8a14a09.rlib \
  --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
  --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rlib,source=/libpin_project_lite-a73e0fc4c66dd601.rlib \
  --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rlib,source=/libpin_utils-b74f2a8eb0482878.rlib \
  --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rlib,source=/libslab-be8a800e18ea87ab.rlib \
  --mount=from=out-a4b0a3c89e6f82ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rlib,source=/libfutures_locks-a4b0a3c89e6f82ec.rlib \
  --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rlib,source=/libtokio-7dfa875e60cea25d.rlib \
  --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rlib,source=/libbytes-d7b35eb956c1be36.rlib \
  --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rlib,source=/libmio-8b22b018b5891a0c.rlib \
  --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rlib,source=/libnum_cpus-abda958216542c23.rlib \
  --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rlib,source=/libparking_lot-4ac6edc772146637.rlib \
  --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rlib,source=/liblock_api-1a71aa69f2330c14.rlib \
  --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rlib,source=/libscopeguard-b477fb82efd13fea.rlib \
  --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rlib,source=/libparking_lot_core-f8744ca11f01d51a.rlib \
  --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rlib,source=/libcfg_if-da34da6838abd7f1.rlib \
  --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rlib,source=/libsmallvec-db7ba43bb64f435f.rlib \
  --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rlib,source=/libsignal_hook_registry-5395542b51c1f12e.rlib \
  --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rlib,source=/libsocket2-6ec2d9d16459980f.rlib \
  --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
  --mount=from=out-df26b227e0244749,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rlib,source=/libminiz_oxide-df26b227e0244749.rlib \
  --mount=from=out-ee21f8d21d0adcf2,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rlib,source=/libadler-ee21f8d21d0adcf2.rlib \
  --mount=from=out-7f0bfa3f5c36603f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rlib,source=/libnix-7f0bfa3f5c36603f.rlib \
  --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rlib,source=/libbitflags-70ce9f1f2fa253bc.rlib \
  --mount=from=out-457bc8526d8fdae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rlib,source=/libmemoffset-457bc8526d8fdae9.rlib \
  --mount=from=out-c30389ddf6bb942e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libqcow2_rs-c30389ddf6bb942e.rlib,source=/libqcow2_rs-c30389ddf6bb942e.rlib \
  --mount=from=out-7101e17005bf0139,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so,source=/librustversion-7101e17005bf0139.so \
  --mount=from=out-b839b9e50c923626,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rlib,source=/libtokio_uring-b839b9e50c923626.rlib \
  --mount=from=out-99b257aee1025add,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rlib,source=/libio_uring-99b257aee1025add.rlib \
  --mount=from=out-7cdf4580d43854fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rlib,source=/libscoped_tls-7cdf4580d43854fe.rlib \
  --mount=from=out-570b139c3ac51dec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rlib,source=/libsocket2-570b139c3ac51dec.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_BIN_NAME="qcow2" \
        CARGO_CRATE_NAME="qcow2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Ming Lei <tom.leiming@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A library for read/write qcow2 image in async/await" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="qcow2-rs" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/ming1/qcow2-rs.git" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGO_PRIMARY_PACKAGE="1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'qcow2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'bin' '--emit' 'dep-info,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=ae4e79a171aa1eb1' '-C' 'extra-filename=-aae81d819d383e78' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'async_recursion=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so' '--extern' 'async_trait=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so' '--extern' 'bincode=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rlib' '--extern' 'byteorder=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rlib' '--extern' 'clap=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rlib' '--extern' 'clap_num=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rlib' '--extern' 'clap_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so' '--extern' 'env_logger=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rlib' '--extern' 'futures=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rlib' '--extern' 'futures_locks=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rlib' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rlib' '--extern' 'log=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rlib' '--extern' 'miniz_oxide=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rlib' '--extern' 'nix=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rlib' '--extern' 'qcow2_rs=/tmp/clis-qcow2-rs_0-1-2/release/deps/libqcow2_rs-c30389ddf6bb942e.rlib' '--extern' 'rustversion=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so' '--extern' 'serde=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rlib' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rlib' '--extern' 'tokio_uring=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rlib' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/src/main.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-aae81d819d383e78
COPY --from=dep-b-qcow2-rs-0.1.2-aae81d819d383e78 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-aae81d819d383e78* /

## this = "aae81d819d383e78"
## deps = [
##     "c336562a05f16d22",
##     "7c4c35625cab66f6",
##     "4c1dc76c11b3deb8",
##     "230bf5113558ae5c",
##     "09c08d3ded2362f6",
##     "a5a31ac1f09098f3",
##     "29ccad64725feb59",
##     "dc85bb26f94c68ed",
##     "ca901d6d165172fe",
##     "a63c22cfa59c094d",
##     "fe4290a3fc65d263",
##     "36625380256100cd",
##     "fbacf1af5926bdd4",
##     "d0740faea4ed398d",
##     "a4729bcf670c741e",
##     "522ff71b25340e24",
##     "fcc94b35d76d0926",
##     "8e999bad75f58407",
##     "a859f5c15f1b3302",
##     "fd42a4ea370e31ec",
##     "23f1d80895cbfd94",
##     "2f387b4601b8b6b0",
##     "bd9f44d75c9ea6f8",
##     "8fa1a5b116170862",
##     "14f62bda870ceea0",
##     "db60e10e02e74b95",
##     "0addc1beddeea30f",
##     "d4a86c79f6da3dd6",
##     "ea8327ab44844df1",
##     "72624534882400be",
##     "2b15874b445115c1",
##     "08328c8b7673a58d",
##     "ba444f6efb5958a6",
##     "7a4e8cf437ea8df6",
##     "eb1e3a5a15a3aa8c",
##     "d32fbdba785e08a6",
##     "ad9d7b2de9358699",
##     "1d93d74bf27fab54",
##     "6ec89d477b5d3e53",
##     "0c9e132561e25190",
##     "f04cff00a4d400c7",
##     "b2a8e6e2e33ce088",
##     "9a295684e8a14a09",
##     "d6b5133ea5763a96",
##     "a73e0fc4c66dd601",
##     "b74f2a8eb0482878",
##     "be8a800e18ea87ab",
##     "a4b0a3c89e6f82ec",
##     "7dfa875e60cea25d",
##     "d7b35eb956c1be36",
##     "8b22b018b5891a0c",
##     "abda958216542c23",
##     "4ac6edc772146637",
##     "1a71aa69f2330c14",
##     "b477fb82efd13fea",
##     "f8744ca11f01d51a",
##     "da34da6838abd7f1",
##     "db7ba43bb64f435f",
##     "5395542b51c1f12e",
##     "6ec2d9d16459980f",
##     "01d4aecec31808fc",
##     "df26b227e0244749",
##     "ee21f8d21d0adcf2",
##     "7f0bfa3f5c36603f",
##     "70ce9f1f2fa253bc",
##     "457bc8526d8fdae9",
##     "c30389ddf6bb942e",
##     "7101e17005bf0139",
##     "b839b9e50c923626",
##     "99b257aee1025add",
##     "7cdf4580d43854fe",
##     "570b139c3ac51dec",
## ]
## short_externs = [
##     "async_recursion-c336562a05f16d22",
##     "proc_macro2-7c4c35625cab66f6",
##     "unicode_ident-4c1dc76c11b3deb8",
##     "quote-230bf5113558ae5c",
##     "syn-09c08d3ded2362f6",
##     "async_trait-a5a31ac1f09098f3",
##     "bincode-29ccad64725feb59",
##     "serde-dc85bb26f94c68ed",
##     "serde_derive-ca901d6d165172fe",
##     "byteorder-a63c22cfa59c094d",
##     "clap-fe4290a3fc65d263",
##     "clap_builder-36625380256100cd",
##     "anstream-fbacf1af5926bdd4",
##     "anstyle-d0740faea4ed398d",
##     "anstyle_parse-a4729bcf670c741e",
##     "utf8parse-522ff71b25340e24",
##     "anstyle_query-fcc94b35d76d0926",
##     "colorchoice-8e999bad75f58407",
##     "clap_lex-a859f5c15f1b3302",
##     "strsim-fd42a4ea370e31ec",
##     "clap_derive-23f1d80895cbfd94",
##     "heck-2f387b4601b8b6b0",
##     "clap_num-bd9f44d75c9ea6f8",
##     "num_traits-8fa1a5b116170862",
##     "env_logger-14f62bda870ceea0",
##     "atty-db60e10e02e74b95",
##     "libc-0addc1beddeea30f",
##     "humantime-d4a86c79f6da3dd6",
##     "log-ea8327ab44844df1",
##     "regex-72624534882400be",
##     "aho_corasick-2b15874b445115c1",
##     "memchr-08328c8b7673a58d",
##     "regex_automata-ba444f6efb5958a6",
##     "regex_syntax-7a4e8cf437ea8df6",
##     "termcolor-eb1e3a5a15a3aa8c",
##     "futures-d32fbdba785e08a6",
##     "futures_channel-ad9d7b2de9358699",
##     "futures_core-1d93d74bf27fab54",
##     "futures_sink-6ec89d477b5d3e53",
##     "futures_executor-0c9e132561e25190",
##     "futures_task-f04cff00a4d400c7",
##     "futures_util-b2a8e6e2e33ce088",
##     "futures_io-9a295684e8a14a09",
##     "futures_macro-d6b5133ea5763a96",
##     "pin_project_lite-a73e0fc4c66dd601",
##     "pin_utils-b74f2a8eb0482878",
##     "slab-be8a800e18ea87ab",
##     "futures_locks-a4b0a3c89e6f82ec",
##     "tokio-7dfa875e60cea25d",
##     "bytes-d7b35eb956c1be36",
##     "mio-8b22b018b5891a0c",
##     "num_cpus-abda958216542c23",
##     "parking_lot-4ac6edc772146637",
##     "lock_api-1a71aa69f2330c14",
##     "scopeguard-b477fb82efd13fea",
##     "parking_lot_core-f8744ca11f01d51a",
##     "cfg_if-da34da6838abd7f1",
##     "smallvec-db7ba43bb64f435f",
##     "signal_hook_registry-5395542b51c1f12e",
##     "socket2-6ec2d9d16459980f",
##     "tokio_macros-01d4aecec31808fc",
##     "miniz_oxide-df26b227e0244749",
##     "adler-ee21f8d21d0adcf2",
##     "nix-7f0bfa3f5c36603f",
##     "bitflags-70ce9f1f2fa253bc",
##     "memoffset-457bc8526d8fdae9",
##     "qcow2_rs-c30389ddf6bb942e",
##     "rustversion-7101e17005bf0139",
##     "tokio_uring-b839b9e50c923626",
##     "io_uring-99b257aee1025add",
##     "scoped_tls-7cdf4580d43854fe",
##     "socket2-570b139c3ac51dec",
## ]
## writes = [
##     "deps/qcow2-aae81d819d383e78.d",
##     "deps/qcow2-aae81d819d383e78",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/qcow2-aae81d819d383e78.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-qcow2-rs_0-1-2/release/deps/qcow2-aae81d819d383e78","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-13057c050b88f322"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out"
## 
## [[contexts]]
## name = "crate_out-2620910b4a10dae9"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out"
## 
## [[contexts]]
## name = "crate_out-6fd90c9ce0b1f28e"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out"
## 
## [[contexts]]
## name = "crate_out-070c9ebb8be425b0"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out"
## 
## [[contexts]]
## name = "crate_out-c162134b3663fe67"
## uri = "/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-qcow2-rs-0.1.2"
## script = '''
## FROM scratch AS cratesio-qcow2-rs-0.1.2
## ADD --chmod=0664 --checksum=sha256:cfa6f466b260b97fbe7d1f6489758bb8341e8db146f8848c2a3b17810f9136a3 \
##   https://static.crates.io/crates/qcow2-rs/qcow2-rs-0.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-b-qcow2-rs-0.1.2-aae81d819d383e78"
## script = '''
## FROM rust-base AS dep-b-qcow2-rs-0.1.2-aae81d819d383e78
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-qcow2-rs_0-1-2/release/deps
## RUN \
##   --mount=from=cratesio-qcow2-rs-0.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2 \
##   --mount=from=out-c336562a05f16d22,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so,source=/libasync_recursion-c336562a05f16d22.so \
##   --mount=from=out-7c4c35625cab66f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libproc_macro2-7c4c35625cab66f6.rlib,source=/libproc_macro2-7c4c35625cab66f6.rlib \
##   --mount=from=out-4c1dc76c11b3deb8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libunicode_ident-4c1dc76c11b3deb8.rlib,source=/libunicode_ident-4c1dc76c11b3deb8.rlib \
##   --mount=from=out-230bf5113558ae5c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libquote-230bf5113558ae5c.rlib,source=/libquote-230bf5113558ae5c.rlib \
##   --mount=from=out-09c08d3ded2362f6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsyn-09c08d3ded2362f6.rlib,source=/libsyn-09c08d3ded2362f6.rlib \
##   --mount=from=out-a5a31ac1f09098f3,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so,source=/libasync_trait-a5a31ac1f09098f3.so \
##   --mount=from=out-29ccad64725feb59,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rlib,source=/libbincode-29ccad64725feb59.rlib \
##   --mount=from=out-dc85bb26f94c68ed,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rlib,source=/libserde-dc85bb26f94c68ed.rlib \
##   --mount=from=out-ca901d6d165172fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde_derive-ca901d6d165172fe.so,source=/libserde_derive-ca901d6d165172fe.so \
##   --mount=from=out-a63c22cfa59c094d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rlib,source=/libbyteorder-a63c22cfa59c094d.rlib \
##   --mount=from=out-fe4290a3fc65d263,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rlib,source=/libclap-fe4290a3fc65d263.rlib \
##   --mount=from=out-36625380256100cd,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_builder-36625380256100cd.rlib,source=/libclap_builder-36625380256100cd.rlib \
##   --mount=from=out-fbacf1af5926bdd4,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstream-fbacf1af5926bdd4.rlib,source=/libanstream-fbacf1af5926bdd4.rlib \
##   --mount=from=out-d0740faea4ed398d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle-d0740faea4ed398d.rlib,source=/libanstyle-d0740faea4ed398d.rlib \
##   --mount=from=out-a4729bcf670c741e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_parse-a4729bcf670c741e.rlib,source=/libanstyle_parse-a4729bcf670c741e.rlib \
##   --mount=from=out-522ff71b25340e24,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libutf8parse-522ff71b25340e24.rlib,source=/libutf8parse-522ff71b25340e24.rlib \
##   --mount=from=out-fcc94b35d76d0926,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libanstyle_query-fcc94b35d76d0926.rlib,source=/libanstyle_query-fcc94b35d76d0926.rlib \
##   --mount=from=out-8e999bad75f58407,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcolorchoice-8e999bad75f58407.rlib,source=/libcolorchoice-8e999bad75f58407.rlib \
##   --mount=from=out-a859f5c15f1b3302,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_lex-a859f5c15f1b3302.rlib,source=/libclap_lex-a859f5c15f1b3302.rlib \
##   --mount=from=out-fd42a4ea370e31ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libstrsim-fd42a4ea370e31ec.rlib,source=/libstrsim-fd42a4ea370e31ec.rlib \
##   --mount=from=out-23f1d80895cbfd94,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so,source=/libclap_derive-23f1d80895cbfd94.so \
##   --mount=from=out-2f387b4601b8b6b0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libheck-2f387b4601b8b6b0.rlib,source=/libheck-2f387b4601b8b6b0.rlib \
##   --mount=from=out-bd9f44d75c9ea6f8,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rlib,source=/libclap_num-bd9f44d75c9ea6f8.rlib \
##   --mount=from=out-8fa1a5b116170862,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_traits-8fa1a5b116170862.rlib,source=/libnum_traits-8fa1a5b116170862.rlib \
##   --mount=from=out-14f62bda870ceea0,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rlib,source=/libenv_logger-14f62bda870ceea0.rlib \
##   --mount=from=out-db60e10e02e74b95,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libatty-db60e10e02e74b95.rlib,source=/libatty-db60e10e02e74b95.rlib \
##   --mount=from=out-0addc1beddeea30f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rlib,source=/liblibc-0addc1beddeea30f.rlib \
##   --mount=from=out-d4a86c79f6da3dd6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libhumantime-d4a86c79f6da3dd6.rlib,source=/libhumantime-d4a86c79f6da3dd6.rlib \
##   --mount=from=out-ea8327ab44844df1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rlib,source=/liblog-ea8327ab44844df1.rlib \
##   --mount=from=out-72624534882400be,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex-72624534882400be.rlib,source=/libregex-72624534882400be.rlib \
##   --mount=from=out-2b15874b445115c1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libaho_corasick-2b15874b445115c1.rlib,source=/libaho_corasick-2b15874b445115c1.rlib \
##   --mount=from=out-08328c8b7673a58d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemchr-08328c8b7673a58d.rlib,source=/libmemchr-08328c8b7673a58d.rlib \
##   --mount=from=out-ba444f6efb5958a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_automata-ba444f6efb5958a6.rlib,source=/libregex_automata-ba444f6efb5958a6.rlib \
##   --mount=from=out-7a4e8cf437ea8df6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libregex_syntax-7a4e8cf437ea8df6.rlib,source=/libregex_syntax-7a4e8cf437ea8df6.rlib \
##   --mount=from=out-eb1e3a5a15a3aa8c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtermcolor-eb1e3a5a15a3aa8c.rlib,source=/libtermcolor-eb1e3a5a15a3aa8c.rlib \
##   --mount=from=out-d32fbdba785e08a6,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rlib,source=/libfutures-d32fbdba785e08a6.rlib \
##   --mount=from=out-ad9d7b2de9358699,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_channel-ad9d7b2de9358699.rlib,source=/libfutures_channel-ad9d7b2de9358699.rlib \
##   --mount=from=out-1d93d74bf27fab54,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_core-1d93d74bf27fab54.rlib,source=/libfutures_core-1d93d74bf27fab54.rlib \
##   --mount=from=out-6ec89d477b5d3e53,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_sink-6ec89d477b5d3e53.rlib,source=/libfutures_sink-6ec89d477b5d3e53.rlib \
##   --mount=from=out-0c9e132561e25190,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_executor-0c9e132561e25190.rlib,source=/libfutures_executor-0c9e132561e25190.rlib \
##   --mount=from=out-f04cff00a4d400c7,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_task-f04cff00a4d400c7.rlib,source=/libfutures_task-f04cff00a4d400c7.rlib \
##   --mount=from=out-b2a8e6e2e33ce088,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_util-b2a8e6e2e33ce088.rlib,source=/libfutures_util-b2a8e6e2e33ce088.rlib \
##   --mount=from=out-9a295684e8a14a09,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_io-9a295684e8a14a09.rlib,source=/libfutures_io-9a295684e8a14a09.rlib \
##   --mount=from=out-d6b5133ea5763a96,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_macro-d6b5133ea5763a96.so,source=/libfutures_macro-d6b5133ea5763a96.so \
##   --mount=from=out-a73e0fc4c66dd601,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_project_lite-a73e0fc4c66dd601.rlib,source=/libpin_project_lite-a73e0fc4c66dd601.rlib \
##   --mount=from=out-b74f2a8eb0482878,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libpin_utils-b74f2a8eb0482878.rlib,source=/libpin_utils-b74f2a8eb0482878.rlib \
##   --mount=from=out-be8a800e18ea87ab,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libslab-be8a800e18ea87ab.rlib,source=/libslab-be8a800e18ea87ab.rlib \
##   --mount=from=out-a4b0a3c89e6f82ec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rlib,source=/libfutures_locks-a4b0a3c89e6f82ec.rlib \
##   --mount=from=out-7dfa875e60cea25d,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rlib,source=/libtokio-7dfa875e60cea25d.rlib \
##   --mount=from=out-d7b35eb956c1be36,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbytes-d7b35eb956c1be36.rlib,source=/libbytes-d7b35eb956c1be36.rlib \
##   --mount=from=out-8b22b018b5891a0c,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmio-8b22b018b5891a0c.rlib,source=/libmio-8b22b018b5891a0c.rlib \
##   --mount=from=out-abda958216542c23,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnum_cpus-abda958216542c23.rlib,source=/libnum_cpus-abda958216542c23.rlib \
##   --mount=from=out-4ac6edc772146637,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot-4ac6edc772146637.rlib,source=/libparking_lot-4ac6edc772146637.rlib \
##   --mount=from=out-1a71aa69f2330c14,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblock_api-1a71aa69f2330c14.rlib,source=/liblock_api-1a71aa69f2330c14.rlib \
##   --mount=from=out-b477fb82efd13fea,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscopeguard-b477fb82efd13fea.rlib,source=/libscopeguard-b477fb82efd13fea.rlib \
##   --mount=from=out-f8744ca11f01d51a,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libparking_lot_core-f8744ca11f01d51a.rlib,source=/libparking_lot_core-f8744ca11f01d51a.rlib \
##   --mount=from=out-da34da6838abd7f1,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libcfg_if-da34da6838abd7f1.rlib,source=/libcfg_if-da34da6838abd7f1.rlib \
##   --mount=from=out-db7ba43bb64f435f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsmallvec-db7ba43bb64f435f.rlib,source=/libsmallvec-db7ba43bb64f435f.rlib \
##   --mount=from=out-5395542b51c1f12e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsignal_hook_registry-5395542b51c1f12e.rlib,source=/libsignal_hook_registry-5395542b51c1f12e.rlib \
##   --mount=from=out-6ec2d9d16459980f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-6ec2d9d16459980f.rlib,source=/libsocket2-6ec2d9d16459980f.rlib \
##   --mount=from=out-01d4aecec31808fc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_macros-01d4aecec31808fc.so,source=/libtokio_macros-01d4aecec31808fc.so \
##   --mount=from=out-df26b227e0244749,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rlib,source=/libminiz_oxide-df26b227e0244749.rlib \
##   --mount=from=out-ee21f8d21d0adcf2,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libadler-ee21f8d21d0adcf2.rlib,source=/libadler-ee21f8d21d0adcf2.rlib \
##   --mount=from=out-7f0bfa3f5c36603f,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rlib,source=/libnix-7f0bfa3f5c36603f.rlib \
##   --mount=from=out-70ce9f1f2fa253bc,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbitflags-70ce9f1f2fa253bc.rlib,source=/libbitflags-70ce9f1f2fa253bc.rlib \
##   --mount=from=out-457bc8526d8fdae9,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libmemoffset-457bc8526d8fdae9.rlib,source=/libmemoffset-457bc8526d8fdae9.rlib \
##   --mount=from=out-c30389ddf6bb942e,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libqcow2_rs-c30389ddf6bb942e.rlib,source=/libqcow2_rs-c30389ddf6bb942e.rlib \
##   --mount=from=out-7101e17005bf0139,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so,source=/librustversion-7101e17005bf0139.so \
##   --mount=from=out-b839b9e50c923626,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rlib,source=/libtokio_uring-b839b9e50c923626.rlib \
##   --mount=from=out-99b257aee1025add,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libio_uring-99b257aee1025add.rlib,source=/libio_uring-99b257aee1025add.rlib \
##   --mount=from=out-7cdf4580d43854fe,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libscoped_tls-7cdf4580d43854fe.rlib,source=/libscoped_tls-7cdf4580d43854fe.rlib \
##   --mount=from=out-570b139c3ac51dec,dst=/tmp/clis-qcow2-rs_0-1-2/release/deps/libsocket2-570b139c3ac51dec.rlib,source=/libsocket2-570b139c3ac51dec.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_BIN_NAME="qcow2" \
##         CARGO_CRATE_NAME="qcow2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Ming Lei <tom.leiming@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A library for read/write qcow2 image in async/await" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="qcow2-rs" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/ming1/qcow2-rs.git" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGO_PRIMARY_PACKAGE="1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'qcow2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'bin' '--emit' 'dep-info,link' '-C' 'opt-level=3' '-C' 'embed-bitcode=no' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=ae4e79a171aa1eb1' '-C' 'extra-filename=-aae81d819d383e78' '--out-dir' '/tmp/clis-qcow2-rs_0-1-2/release/deps' '-C' 'strip=debuginfo' '-L' 'dependency=/tmp/clis-qcow2-rs_0-1-2/release/deps' '--extern' 'async_recursion=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_recursion-c336562a05f16d22.so' '--extern' 'async_trait=/tmp/clis-qcow2-rs_0-1-2/release/deps/libasync_trait-a5a31ac1f09098f3.so' '--extern' 'bincode=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbincode-29ccad64725feb59.rlib' '--extern' 'byteorder=/tmp/clis-qcow2-rs_0-1-2/release/deps/libbyteorder-a63c22cfa59c094d.rlib' '--extern' 'clap=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap-fe4290a3fc65d263.rlib' '--extern' 'clap_num=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_num-bd9f44d75c9ea6f8.rlib' '--extern' 'clap_derive=/tmp/clis-qcow2-rs_0-1-2/release/deps/libclap_derive-23f1d80895cbfd94.so' '--extern' 'env_logger=/tmp/clis-qcow2-rs_0-1-2/release/deps/libenv_logger-14f62bda870ceea0.rlib' '--extern' 'futures=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures-d32fbdba785e08a6.rlib' '--extern' 'futures_locks=/tmp/clis-qcow2-rs_0-1-2/release/deps/libfutures_locks-a4b0a3c89e6f82ec.rlib' '--extern' 'libc=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblibc-0addc1beddeea30f.rlib' '--extern' 'log=/tmp/clis-qcow2-rs_0-1-2/release/deps/liblog-ea8327ab44844df1.rlib' '--extern' 'miniz_oxide=/tmp/clis-qcow2-rs_0-1-2/release/deps/libminiz_oxide-df26b227e0244749.rlib' '--extern' 'nix=/tmp/clis-qcow2-rs_0-1-2/release/deps/libnix-7f0bfa3f5c36603f.rlib' '--extern' 'qcow2_rs=/tmp/clis-qcow2-rs_0-1-2/release/deps/libqcow2_rs-c30389ddf6bb942e.rlib' '--extern' 'rustversion=/tmp/clis-qcow2-rs_0-1-2/release/deps/librustversion-7101e17005bf0139.so' '--extern' 'serde=/tmp/clis-qcow2-rs_0-1-2/release/deps/libserde-dc85bb26f94c68ed.rlib' '--extern' 'tokio=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio-7dfa875e60cea25d.rlib' '--extern' 'tokio_uring=/tmp/clis-qcow2-rs_0-1-2/release/deps/libtokio_uring-b839b9e50c923626.rlib' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/qcow2-rs-0.1.2/src/main.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-aae81d819d383e78"
## script = """
## FROM scratch AS out-aae81d819d383e78
## COPY --from=dep-b-qcow2-rs-0.1.2-aae81d819d383e78 /tmp/clis-qcow2-rs_0-1-2/release/deps/*-aae81d819d383e78* /"""

# Pipe this file to (not portable due to usage of local build contexts):
# DOCKER_BUILDKIT="1" \
#   docker --debug build --network=none --platform=local --pull=false --target=out-aae81d819d383e78 --output=type=local,dest=/tmp/clis-qcow2-rs_0-1-2/release/deps --build-context=crate_out-13057c050b88f322=/tmp/clis-qcow2-rs_0-1-2/release/build/num-traits-13057c050b88f322/out --build-context=crate_out-2620910b4a10dae9=/tmp/clis-qcow2-rs_0-1-2/release/build/slab-2620910b4a10dae9/out --build-context=crate_out-6fd90c9ce0b1f28e=/tmp/clis-qcow2-rs_0-1-2/release/build/lock_api-6fd90c9ce0b1f28e/out --build-context=crate_out-070c9ebb8be425b0=/tmp/clis-qcow2-rs_0-1-2/release/build/memoffset-070c9ebb8be425b0/out --build-context=crate_out-c162134b3663fe67=/tmp/clis-qcow2-rs_0-1-2/release/build/rustversion-c162134b3663fe67/out -
