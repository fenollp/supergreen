# syntax=docker.io/docker/dockerfile:1@sha256:9857836c9ee4268391bb5b09f9f157f3c91bb15821bb77969642813b0d00518d
# check=error=true
# Generated by https://github.com/fenollp/supergreen v0.14.0

FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base

FROM scratch AS cratesio-anyhow-1.0.75
ADD --chmod=0664 --checksum=sha256:a4668cab20f66d8d020e1fbc0ebe47217433c1b6c8f2040faf858554e394ace6 \
  https://static.crates.io/crates/anyhow/anyhow-1.0.75.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-anyhow-1.0.75-dfdf484c5c94dda8
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-anyhow-1.0.75,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75 \
  --mount=from=crate_out-320a4f7879609678,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="anyhow" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Flexible concrete Error type built on std::error::Error" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="anyhow" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/anyhow" \
        CARGO_PKG_RUST_VERSION="1.39" \
        CARGO_PKG_VERSION="1.0.75" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="75" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'anyhow' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "default", "std"))' '-C' 'metadata=cb6f36638ecfecb6' '-C' 'extra-filename=-dfdf484c5c94dda8' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-dfdf484c5c94dda8
COPY --from=dep-l-anyhow-1.0.75-dfdf484c5c94dda8 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-dfdf484c5c94dda8* /

## this = "dfdf484c5c94dda8"
## writes = ["deps/anyhow-dfdf484c5c94dda8.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/anyhow-dfdf484c5c94dda8.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs","byte_start":6812,"byte_end":6821,"line_start":214,"line_end":214,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(backtrace, feature(error_generic_member_access))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs","byte_start":6812,"byte_end":6821,"line_start":214,"line_end":214,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(backtrace, feature(error_generic_member_access))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs:214:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(backtrace, feature(error_generic_member_access))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs","byte_start":6874,"byte_end":6881,"line_start":215,"line_end":215,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs:215:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs","byte_start":11868,"byte_end":11875,"line_start":398,"line_end":398,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs:398:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":6,"byte_end":15,"line_start":1,"line_end":1,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":6,"byte_end":15,"line_start":1,"line_end":1,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:1:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(backtrace)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":94,"byte_end":103,"line_start":4,"line_end":4,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":94,"byte_end":103,"line_start":4,"line_end":4,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:4:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":206,"byte_end":215,"line_start":7,"line_end":7,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(not(any(backtrace, feature = \"backtrace\")))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":206,"byte_end":215,"line_start":7,"line_end":7,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(not(any(backtrace, feature = \"backtrace\")))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:7:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(any(backtrace, feature = \"backtrace\")))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":279,"byte_end":288,"line_start":10,"line_end":10,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":279,"byte_end":288,"line_start":10,"line_end":10,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:10:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(backtrace)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":391,"byte_end":400,"line_start":17,"line_end":17,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":391,"byte_end":400,"line_start":17,"line_end":17,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:17:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":541,"byte_end":550,"line_start":24,"line_end":24,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"#[cfg(any(backtrace, feature = \"backtrace\"))]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":541,"byte_end":550,"line_start":24,"line_end":24,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"#[cfg(any(backtrace, feature = \"backtrace\"))]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:24:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(backtrace, feature = \"backtrace\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":691,"byte_end":700,"line_start":31,"line_end":31,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(not(any(backtrace, feature = \"backtrace\")))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":691,"byte_end":700,"line_start":31,"line_end":31,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(not(any(backtrace, feature = \"backtrace\")))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:31:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(any(backtrace, feature = \"backtrace\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":794,"byte_end":803,"line_start":38,"line_end":38,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":794,"byte_end":803,"line_start":38,"line_end":38,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:38:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(backtrace)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":1077,"byte_end":1086,"line_start":48,"line_end":48,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(backtrace), feature = \"backtrace\"))]","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":1077,"byte_end":1086,"line_start":48,"line_end":48,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(backtrace), feature = \"backtrace\"))]","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:48:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":1232,"byte_end":1241,"line_start":55,"line_end":55,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(backtrace), not(feature = \"backtrace\")))]","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":1232,"byte_end":1241,"line_start":55,"line_end":55,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(backtrace), not(feature = \"backtrace\")))]","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:55:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(backtrace), not(feature = \"backtrace\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":1367,"byte_end":1376,"line_start":62,"line_end":62,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs","byte_start":1367,"byte_end":1376,"line_start":62,"line_end":62,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/backtrace.rs:62:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs","byte_start":155,"byte_end":164,"line_start":6,"line_end":6,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs","byte_start":155,"byte_end":164,"line_start":6,"line_end":6,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs:6:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(backtrace)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs","byte_start":3451,"byte_end":3460,"line_start":146,"line_end":146,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs","byte_start":3451,"byte_end":3460,"line_start":146,"line_end":146,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs:146:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(backtrace)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs","byte_start":3800,"byte_end":3809,"line_start":160,"line_end":160,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs","byte_start":3800,"byte_end":3809,"line_start":160,"line_end":160,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/context.rs:160:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(backtrace)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":85,"byte_end":106,"line_start":3,"line_end":3,"column_start":28,"column_end":49,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", anyhow_no_ptr_addr_of))]","highlight_start":28,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:3:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":313,"byte_end":334,"line_start":11,"line_end":11,"column_start":11,"column_end":32,"is_primary":true,"text":[{"text":"#[cfg(not(anyhow_no_ptr_addr_of))]","highlight_start":11,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:11:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":383,"byte_end":392,"line_start":14,"line_end":14,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":383,"byte_end":392,"line_start":14,"line_end":14,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(backtrace)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:14:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(backtrace)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":19893,"byte_end":19900,"line_start":544,"line_end":544,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:544:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":20189,"byte_end":20196,"line_start":557,"line_end":557,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:557:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":20446,"byte_end":20453,"line_start":567,"line_end":567,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:567:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":23342,"byte_end":23363,"line_start":647,"line_end":647,"column_start":28,"column_end":49,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]","highlight_start":28,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:647:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":24759,"byte_end":24780,"line_start":692,"line_end":692,"column_start":7,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(anyhow_no_ptr_addr_of)]","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:692:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":25211,"byte_end":25220,"line_start":707,"line_end":707,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":25211,"byte_end":25220,"line_start":707,"line_end":707,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:707:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":26046,"byte_end":26067,"line_start":732,"line_end":732,"column_start":28,"column_end":49,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]","highlight_start":28,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:732:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":27945,"byte_end":27966,"line_start":787,"line_end":787,"column_start":7,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(anyhow_no_ptr_addr_of)]","highlight_start":7,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:787:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":29595,"byte_end":29604,"line_start":829,"line_end":829,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":29595,"byte_end":29604,"line_start":829,"line_end":829,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:829:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m829\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":849,"byte_end":856,"line_start":29,"line_end":29,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:29:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":13507,"byte_end":13516,"line_start":361,"line_end":361,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"    #[cfg(any(backtrace, feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":13507,"byte_end":13516,"line_start":361,"line_end":361,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"    #[cfg(any(backtrace, feature = \"backtrace\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:361:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(any(backtrace, feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":14451,"byte_end":14458,"line_start":389,"line_end":389,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:389:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":14855,"byte_end":14862,"line_start":401,"line_end":401,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:401:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg_attr(doc_cfg, doc(cfg(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":19208,"byte_end":19217,"line_start":526,"line_end":526,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":19208,"byte_end":19217,"line_start":526,"line_end":526,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:526:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(backtrace)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":19708,"byte_end":19717,"line_start":536,"line_end":536,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":19708,"byte_end":19717,"line_start":536,"line_end":536,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(backtrace)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:536:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(backtrace)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":2962,"byte_end":2983,"line_start":95,"line_end":95,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:95:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":3141,"byte_end":3162,"line_start":99,"line_end":99,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:99:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":3304,"byte_end":3313,"line_start":102,"line_end":102,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":3304,"byte_end":3313,"line_start":102,"line_end":102,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:102:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":3986,"byte_end":4007,"line_start":120,"line_end":120,"column_start":40,"column_end":61,"is_primary":true,"text":[{"text":"            #[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]","highlight_start":40,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:120:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":4194,"byte_end":4215,"line_start":124,"line_end":124,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:124:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":4357,"byte_end":4366,"line_start":127,"line_end":127,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":4357,"byte_end":4366,"line_start":127,"line_end":127,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:127:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":5100,"byte_end":5121,"line_start":146,"line_end":146,"column_start":40,"column_end":61,"is_primary":true,"text":[{"text":"            #[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]","highlight_start":40,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:146:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":5308,"byte_end":5329,"line_start":150,"line_end":150,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:150:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":5471,"byte_end":5480,"line_start":153,"line_end":153,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":5471,"byte_end":5480,"line_start":153,"line_end":153,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:153:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":6257,"byte_end":6278,"line_start":174,"line_end":174,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:174:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":6474,"byte_end":6495,"line_start":178,"line_end":178,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:178:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":6644,"byte_end":6653,"line_start":181,"line_end":181,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":6644,"byte_end":6653,"line_start":181,"line_end":181,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:181:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":7280,"byte_end":7301,"line_start":200,"line_end":200,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:200:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":7507,"byte_end":7528,"line_start":204,"line_end":204,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:204:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":7730,"byte_end":7739,"line_start":207,"line_end":207,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":7730,"byte_end":7739,"line_start":207,"line_end":207,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:207:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":11433,"byte_end":11454,"line_start":313,"line_end":313,"column_start":40,"column_end":61,"is_primary":true,"text":[{"text":"            #[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]","highlight_start":40,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:313:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(feature = \"std\", anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":11662,"byte_end":11683,"line_start":317,"line_end":317,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:317:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `backtrace`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":11838,"byte_end":11847,"line_start":320,"line_end":320,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":11838,"byte_end":11847,"line_start":320,"line_end":320,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"            #[cfg(all(not(backtrace), feature = \"backtrace\"))]","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"feature = \"backtrace\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `backtrace`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:320:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(all(not(backtrace), feature = \"backtrace\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"backtrace\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":16000,"byte_end":16021,"line_start":431,"line_end":431,"column_start":23,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(not(anyhow_no_ptr_addr_of))]","highlight_start":23,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:431:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(not(anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":16245,"byte_end":16266,"line_start":436,"line_end":436,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:436:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m436\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":18846,"byte_end":18867,"line_start":515,"line_end":515,"column_start":23,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(not(anyhow_no_ptr_addr_of))]","highlight_start":23,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:515:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(not(anyhow_no_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs","byte_start":19010,"byte_end":19031,"line_start":519,"line_end":519,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(anyhow_no_ptr_addr_of)]","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `anyhow_no_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/error.rs:519:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(anyhow_no_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(anyhow_no_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(anyhow_no_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
## ]
## 
## [[contexts]]
## name = "crate_out-320a4f7879609678"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-anyhow-1.0.75"
## script = '''
## FROM scratch AS cratesio-anyhow-1.0.75
## ADD --chmod=0664 --checksum=sha256:a4668cab20f66d8d020e1fbc0ebe47217433c1b6c8f2040faf858554e394ace6 \
##   https://static.crates.io/crates/anyhow/anyhow-1.0.75.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-anyhow-1.0.75-dfdf484c5c94dda8"
## script = '''
## FROM rust-base AS dep-l-anyhow-1.0.75-dfdf484c5c94dda8
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-anyhow-1.0.75,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75 \
##   --mount=from=crate_out-320a4f7879609678,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="anyhow" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Flexible concrete Error type built on std::error::Error" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="anyhow" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/anyhow" \
##         CARGO_PKG_RUST_VERSION="1.39" \
##         CARGO_PKG_VERSION="1.0.75" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="75" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'anyhow' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("backtrace", "default", "std"))' '-C' 'metadata=cb6f36638ecfecb6' '-C' 'extra-filename=-dfdf484c5c94dda8' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/anyhow-1.0.75/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-dfdf484c5c94dda8"
## script = """
## FROM scratch AS out-dfdf484c5c94dda8
## COPY --from=dep-l-anyhow-1.0.75-dfdf484c5c94dda8 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-dfdf484c5c94dda8* /"""

FROM scratch AS cratesio-camino-1.1.6
ADD --chmod=0664 --checksum=sha256:c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c \
  https://static.crates.io/crates/camino/camino-1.1.6.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-camino-1.1.6-dc62d29369f657b5
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-camino-1.1.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="camino" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/Cargo.toml" \
        CARGO_PKG_AUTHORS="Without Boats <saoirse@without.boats>:Ashley Williams <ashley666ashley@gmail.com>:Steve Klabnik <steve@steveklabnik.com>:Rain <rain@sunshowers.io>" \
        CARGO_PKG_DESCRIPTION="UTF-8 paths" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="camino" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/camino-rs/camino" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.1.6" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="6" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/camino-fd9e1a3011d710f7/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'camino' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("proptest", "proptest1", "serde", "serde1"))' '-C' 'metadata=ec73d788a7a5e24f' '-C' 'extra-filename=-dc62d29369f657b5' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' '--cfg' 'path_buf_capacity' '--cfg' 'shrink_to' '--cfg' 'try_reserve_2' '--cfg' 'path_buf_deref_mut' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-dc62d29369f657b5
COPY --from=dep-l-camino-1.1.6-dc62d29369f657b5 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-dc62d29369f657b5* /

## this = "dc62d29369f657b5"
## writes = [
##     "deps/camino-dc62d29369f657b5.d",
##     "deps/libcamino-dc62d29369f657b5.rmeta",
##     "deps/libcamino-dc62d29369f657b5.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/camino-dc62d29369f657b5.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":123,"byte_end":130,"line_start":5,"line_end":5,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg, doc_auto_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:5:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg, doc_auto_cfg))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_deref_mut`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":15677,"byte_end":15695,"line_start":488,"line_end":488,"column_start":7,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(path_buf_deref_mut)]","highlight_start":7,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_deref_mut)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_deref_mut)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_deref_mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:488:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(path_buf_deref_mut)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_deref_mut)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_deref_mut)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_capacity`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":7309,"byte_end":7326,"line_start":206,"line_end":206,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_capacity)]","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_capacity`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:206:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_capacity)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_capacity`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":13147,"byte_end":13164,"line_start":393,"line_end":393,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_capacity)]","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_capacity`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:393:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_capacity)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_capacity`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":13422,"byte_end":13439,"line_start":404,"line_end":404,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_capacity)]","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_capacity`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:404:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_capacity)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_capacity`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":13676,"byte_end":13693,"line_start":414,"line_end":414,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_capacity)]","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_capacity`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:414:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_capacity)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `try_reserve_2`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":13975,"byte_end":13988,"line_start":424,"line_end":424,"column_start":11,"column_end":24,"is_primary":true,"text":[{"text":"    #[cfg(try_reserve_2)]","highlight_start":11,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(try_reserve_2)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(try_reserve_2)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `try_reserve_2`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:424:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(try_reserve_2)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(try_reserve_2)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(try_reserve_2)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_capacity`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":14370,"byte_end":14387,"line_start":438,"line_end":438,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_capacity)]","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_capacity`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:438:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_capacity)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `try_reserve_2`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":14699,"byte_end":14712,"line_start":448,"line_end":448,"column_start":11,"column_end":24,"is_primary":true,"text":[{"text":"    #[cfg(try_reserve_2)]","highlight_start":11,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(try_reserve_2)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(try_reserve_2)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `try_reserve_2`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:448:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(try_reserve_2)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(try_reserve_2)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(try_reserve_2)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_capacity`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":15106,"byte_end":15123,"line_start":462,"line_end":462,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_capacity)]","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_capacity`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:462:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_capacity)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_capacity)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_capacity)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `shrink_to`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":15382,"byte_end":15391,"line_start":472,"line_end":472,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    #[cfg(shrink_to)]","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(shrink_to)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(shrink_to)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `shrink_to`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:472:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(shrink_to)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(shrink_to)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(shrink_to)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `path_buf_deref_mut`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs","byte_start":49654,"byte_end":49672,"line_start":1469,"line_end":1469,"column_start":11,"column_end":29,"is_primary":true,"text":[{"text":"    #[cfg(path_buf_deref_mut)]","highlight_start":11,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_deref_mut)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_deref_mut)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `path_buf_deref_mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs:1469:11\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(path_buf_deref_mut)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(path_buf_deref_mut)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(path_buf_deref_mut)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"12 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 12 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-camino-1.1.6"
## script = '''
## FROM scratch AS cratesio-camino-1.1.6
## ADD --chmod=0664 --checksum=sha256:c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c \
##   https://static.crates.io/crates/camino/camino-1.1.6.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-camino-1.1.6-dc62d29369f657b5"
## script = '''
## FROM rust-base AS dep-l-camino-1.1.6-dc62d29369f657b5
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-camino-1.1.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="camino" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Without Boats <saoirse@without.boats>:Ashley Williams <ashley666ashley@gmail.com>:Steve Klabnik <steve@steveklabnik.com>:Rain <rain@sunshowers.io>" \
##         CARGO_PKG_DESCRIPTION="UTF-8 paths" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="camino" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/camino-rs/camino" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.1.6" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="6" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/camino-fd9e1a3011d710f7/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'camino' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("proptest", "proptest1", "serde", "serde1"))' '-C' 'metadata=ec73d788a7a5e24f' '-C' 'extra-filename=-dc62d29369f657b5' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' '--cfg' 'path_buf_capacity' '--cfg' 'shrink_to' '--cfg' 'try_reserve_2' '--cfg' 'path_buf_deref_mut' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/camino-1.1.6/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-dc62d29369f657b5"
## script = """
## FROM scratch AS out-dc62d29369f657b5
## COPY --from=dep-l-camino-1.1.6-dc62d29369f657b5 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-dc62d29369f657b5* /"""

FROM scratch AS cratesio-home-0.5.5
ADD --chmod=0664 --checksum=sha256:5444c27eef6923071f7ebcc33e3444508466a76f7a2b93da00ed6e19f30c1ddb \
  https://static.crates.io/crates/home/home-0.5.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-home-0.5.5-171ad634cd69714c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-home-0.5.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="home" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Brian Anderson <andersrb@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Shared definitions of home directories." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="home" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/cargo" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.5.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'home' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=41d906d9542aa6f6' '-C' 'extra-filename=-171ad634cd69714c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-171ad634cd69714c
COPY --from=dep-l-home-0.5.5-171ad634cd69714c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-171ad634cd69714c* /

## this = "171ad634cd69714c"
## writes = [
##     "deps/home-171ad634cd69714c.d",
##     "deps/libhome-171ad634cd69714c.rmeta",
##     "deps/libhome-171ad634cd69714c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/home-171ad634cd69714c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-home-0.5.5"
## script = '''
## FROM scratch AS cratesio-home-0.5.5
## ADD --chmod=0664 --checksum=sha256:5444c27eef6923071f7ebcc33e3444508466a76f7a2b93da00ed6e19f30c1ddb \
##   https://static.crates.io/crates/home/home-0.5.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-home-0.5.5-171ad634cd69714c"
## script = '''
## FROM rust-base AS dep-l-home-0.5.5-171ad634cd69714c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-home-0.5.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="home" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Brian Anderson <andersrb@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Shared definitions of home directories." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="home" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/cargo" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.5.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'home' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=41d906d9542aa6f6' '-C' 'extra-filename=-171ad634cd69714c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/home-0.5.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-171ad634cd69714c"
## script = """
## FROM scratch AS out-171ad634cd69714c
## COPY --from=dep-l-home-0.5.5-171ad634cd69714c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-171ad634cd69714c* /"""

FROM scratch AS cratesio-once_cell-1.18.0
ADD --chmod=0664 --checksum=sha256:dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d \
  https://static.crates.io/crates/once_cell/once_cell-1.18.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-once_cell-1.18.0-4f105e9db8e23ef7
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-once_cell-1.18.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="once_cell" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Aleksey Kladov <aleksey.kladov@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Single assignment cells and lazy values." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="once_cell" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/matklad/once_cell" \
        CARGO_PKG_RUST_VERSION="1.60" \
        CARGO_PKG_VERSION="1.18.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="18" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'once_cell' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="race"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "atomic-polyfill", "critical-section", "default", "parking_lot", "race", "std", "unstable"))' '-C' 'metadata=dcde16bb6ea46cbc' '-C' 'extra-filename=-4f105e9db8e23ef7' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4f105e9db8e23ef7
COPY --from=dep-l-once_cell-1.18.0-4f105e9db8e23ef7 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-4f105e9db8e23ef7* /

## this = "4f105e9db8e23ef7"
## writes = [
##     "deps/once_cell-4f105e9db8e23ef7.d",
##     "deps/libonce_cell-4f105e9db8e23ef7.rmeta",
##     "deps/libonce_cell-4f105e9db8e23ef7.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/once_cell-4f105e9db8e23ef7.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-once_cell-1.18.0"
## script = '''
## FROM scratch AS cratesio-once_cell-1.18.0
## ADD --chmod=0664 --checksum=sha256:dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d \
##   https://static.crates.io/crates/once_cell/once_cell-1.18.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-once_cell-1.18.0-4f105e9db8e23ef7"
## script = '''
## FROM rust-base AS dep-l-once_cell-1.18.0-4f105e9db8e23ef7
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-once_cell-1.18.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="once_cell" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Aleksey Kladov <aleksey.kladov@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Single assignment cells and lazy values." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="once_cell" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/matklad/once_cell" \
##         CARGO_PKG_RUST_VERSION="1.60" \
##         CARGO_PKG_VERSION="1.18.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="18" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'once_cell' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="race"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "atomic-polyfill", "critical-section", "default", "parking_lot", "race", "std", "unstable"))' '-C' 'metadata=dcde16bb6ea46cbc' '-C' 'extra-filename=-4f105e9db8e23ef7' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/once_cell-1.18.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4f105e9db8e23ef7"
## script = """
## FROM scratch AS out-4f105e9db8e23ef7
## COPY --from=dep-l-once_cell-1.18.0-4f105e9db8e23ef7 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-4f105e9db8e23ef7* /"""

FROM scratch AS cratesio-serde-1.0.190
ADD --chmod=0664 --checksum=sha256:91d3c334ca1ee894a2c6f6ad698fe8c435b76d504b13d436f0685d648d6d96f7 \
  https://static.crates.io/crates/serde/serde-1.0.190.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-serde-1.0.190-1c85eb2286dfea21
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-serde-1.0.190,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A generic serialization/deserialization framework" \
        CARGO_PKG_HOMEPAGE="https://serde.rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde" \
        CARGO_PKG_README="crates-io.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.190" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="190" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/serde-e20cf8833711c512/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' '-C' 'metadata=dd49a7768c081b9f' '-C' 'extra-filename=-1c85eb2286dfea21' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-1c85eb2286dfea21
COPY --from=dep-l-serde-1.0.190-1c85eb2286dfea21 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-1c85eb2286dfea21* /

## this = "1c85eb2286dfea21"
## writes = [
##     "deps/serde-1c85eb2286dfea21.d",
##     "deps/libserde-1c85eb2286dfea21.rmeta",
##     "deps/libserde-1c85eb2286dfea21.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/serde-1c85eb2286dfea21.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_serde_derive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":13367,"byte_end":13382,"line_start":329,"line_end":329,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"#[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]","highlight_start":15,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_serde_derive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_serde_derive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_serde_derive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:329:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_serde_derive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_serde_derive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":9838,"byte_end":9850,"line_start":227,"line_end":227,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"    #[cfg(all(not(no_core_cstr), not(feature = \"std\")))]","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:227:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(not(no_core_cstr), not(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":9987,"byte_end":9999,"line_start":232,"line_end":232,"column_start":19,"column_end":31,"is_primary":true,"text":[{"text":"    #[cfg(all(not(no_core_cstr), feature = \"alloc\", not(feature = \"std\")))]","highlight_start":19,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:232:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(not(no_core_cstr), feature = \"alloc\", not(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":10718,"byte_end":10738,"line_start":255,"line_end":255,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":10718,"byte_end":10738,"line_start":255,"line_end":255,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:255:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":10744,"byte_end":10757,"line_start":255,"line_end":255,"column_start":58,"column_end":71,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]","highlight_start":58,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:255:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":10961,"byte_end":10981,"line_start":260,"line_end":260,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":10961,"byte_end":10981,"line_start":260,"line_end":260,"column_start":32,"column_end":52,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]","highlight_start":32,"highlight_end":52}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:260:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic64`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":10987,"byte_end":11002,"line_start":260,"line_end":260,"column_start":58,"column_end":73,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]","highlight_start":58,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:260:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", no_target_has_atomic, not(no_std_atomic64)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11098,"byte_end":11118,"line_start":263,"line_end":263,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic)))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11098,"byte_end":11118,"line_start":263,"line_end":263,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic)))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:263:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11199,"byte_end":11219,"line_start":265,"line_end":265,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"8\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11199,"byte_end":11219,"line_start":265,"line_end":265,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"8\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:265:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"8\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11349,"byte_end":11369,"line_start":267,"line_end":267,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"16\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11349,"byte_end":11369,"line_start":267,"line_end":267,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"16\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:267:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"16\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11490,"byte_end":11510,"line_start":269,"line_end":269,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"32\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11490,"byte_end":11510,"line_start":269,"line_end":269,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"32\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:269:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"32\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11631,"byte_end":11651,"line_start":271,"line_end":271,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"64\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11631,"byte_end":11651,"line_start":271,"line_end":271,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"64\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:271:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"64\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11772,"byte_end":11792,"line_start":273,"line_end":273,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"ptr\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs","byte_start":11772,"byte_end":11792,"line_start":273,"line_end":273,"column_start":36,"column_end":56,"is_primary":true,"text":[{"text":"    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"ptr\"))]","highlight_start":36,"highlight_end":56}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs:273:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(feature = \"std\", not(no_target_has_atomic), target_has_atomic = \"ptr\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":19105,"byte_end":19117,"line_start":687,"line_end":687,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:687:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":19201,"byte_end":19213,"line_start":690,"line_end":690,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:690:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":20484,"byte_end":20496,"line_start":741,"line_end":741,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:741:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":21239,"byte_end":21251,"line_start":768,"line_end":768,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:768:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90597,"byte_end":90610,"line_start":2918,"line_end":2918,"column_start":32,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic)))]","highlight_start":32,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2918:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2918\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":91128,"byte_end":91141,"line_start":2935,"line_end":2935,"column_start":32,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic)))]","highlight_start":32,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2935:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2935\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic64`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":91368,"byte_end":91383,"line_start":2948,"line_end":2948,"column_start":32,"column_end":47,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic64)))]","highlight_start":32,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2948:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic64)))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":8408,"byte_end":8429,"line_start":300,"line_end":300,"column_start":27,"column_end":48,"is_primary":true,"text":[{"text":"    i8, NonZeroI8 cfg(not(no_num_nonzero_signed)), deserialize_i8","highlight_start":27,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:300:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i8, NonZeroI8 cfg(not(no_num_nonzero_signed)), deserialize_i8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":8665,"byte_end":8686,"line_start":307,"line_end":307,"column_start":29,"column_end":50,"is_primary":true,"text":[{"text":"    i16, NonZeroI16 cfg(not(no_num_nonzero_signed)), deserialize_i16","highlight_start":29,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:307:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i16, NonZeroI16 cfg(not(no_num_nonzero_signed)), deserialize_i16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":8942,"byte_end":8963,"line_start":315,"line_end":315,"column_start":29,"column_end":50,"is_primary":true,"text":[{"text":"    i32, NonZeroI32 cfg(not(no_num_nonzero_signed)), deserialize_i32","highlight_start":29,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:315:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i32, NonZeroI32 cfg(not(no_num_nonzero_signed)), deserialize_i32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":9219,"byte_end":9240,"line_start":323,"line_end":323,"column_start":29,"column_end":50,"is_primary":true,"text":[{"text":"    i64, NonZeroI64 cfg(not(no_num_nonzero_signed)), deserialize_i64","highlight_start":29,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:323:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i64, NonZeroI64 cfg(not(no_num_nonzero_signed)), deserialize_i64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":9482,"byte_end":9503,"line_start":330,"line_end":330,"column_start":33,"column_end":54,"is_primary":true,"text":[{"text":"    isize, NonZeroIsize cfg(not(no_num_nonzero_signed)), deserialize_i64","highlight_start":33,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:330:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    isize, NonZeroIsize cfg(not(no_num_nonzero_signed)), deserialize_i64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":12734,"byte_end":12755,"line_start":432,"line_end":432,"column_start":31,"column_end":52,"is_primary":true,"text":[{"text":"    i128, NonZeroI128 cfg(not(no_num_nonzero_signed)), deserialize_i128","highlight_start":31,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:432:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i128, NonZeroI128 cfg(not(no_num_nonzero_signed)), deserialize_i128\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90711,"byte_end":90731,"line_start":2922,"line_end":2922,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":91146,"byte_end":91335,"line_start":2936,"line_end":2946,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicBool \"8\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicI16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicIsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"    AtomicU8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicU16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicUsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90615,"byte_end":90639,"line_start":2919,"line_end":2919,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90711,"byte_end":90731,"line_start":2922,"line_end":2922,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":91146,"byte_end":91335,"line_start":2936,"line_end":2946,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicBool \"8\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicI16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicIsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"    AtomicU8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicU16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicUsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90615,"byte_end":90639,"line_start":2919,"line_end":2919,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2922:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2922\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2936\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0matomic_impl! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2937\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicBool \"8\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2938\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicI8 \"8\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2939\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicI16 \"16\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2945\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicUsize \"ptr\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2946\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `atomic_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90711,"byte_end":90731,"line_start":2922,"line_end":2922,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":91388,"byte_end":91442,"line_start":2949,"line_end":2952,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicI64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90615,"byte_end":90639,"line_start":2919,"line_end":2919,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90711,"byte_end":90731,"line_start":2922,"line_end":2922,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":91388,"byte_end":91442,"line_start":2949,"line_end":2952,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicI64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":90615,"byte_end":90639,"line_start":2919,"line_end":2919,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2922:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2922\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0matomic_impl! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicI64 \"64\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicU64 \"64\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2952\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `atomic_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_float_copysign`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":5088,"byte_end":5105,"line_start":190,"line_end":190,"column_start":23,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(any(no_float_copysign, not(feature = \"std\")))]","highlight_start":23,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":3489,"byte_end":3512,"line_start":124,"line_end":124,"column_start":25,"column_end":48,"is_primary":false,"text":[{"text":"                    $($($method!($val : $visit);)*)*","highlight_start":25,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":10867,"byte_end":11135,"line_start":373,"line_end":379,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_deserialize_num! {","highlight_start":1,"highlight_end":24},{"text":"    f32, deserialize_f32","highlight_start":1,"highlight_end":25},{"text":"    num_self!(f32:visit_f32);","highlight_start":1,"highlight_end":30},{"text":"    num_as_copysign_self!(f64:visit_f64);","highlight_start":1,"highlight_end":42},{"text":"    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);","highlight_start":1,"highlight_end":73},{"text":"    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);","highlight_start":1,"highlight_end":73},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_deserialize_num!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":1796,"byte_end":1829,"line_start":81,"line_end":81,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! impl_deserialize_num {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"num_as_copysign_self!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":4869,"byte_end":4902,"line_start":183,"line_end":183,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! num_as_copysign_self {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_float_copysign`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:190:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(no_float_copysign, not(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_deserialize_num! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    f32, deserialize_f32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_self!(f32:visit_f32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m376\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_copysign_self!(f64:visit_f64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `num_as_copysign_self` which comes from the expansion of the macro `impl_deserialize_num` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_float_copysign`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":5223,"byte_end":5240,"line_start":195,"line_end":195,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(all(not(no_float_copysign), feature = \"std\"))]","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":3489,"byte_end":3512,"line_start":124,"line_end":124,"column_start":25,"column_end":48,"is_primary":false,"text":[{"text":"                    $($($method!($val : $visit);)*)*","highlight_start":25,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":10867,"byte_end":11135,"line_start":373,"line_end":379,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_deserialize_num! {","highlight_start":1,"highlight_end":24},{"text":"    f32, deserialize_f32","highlight_start":1,"highlight_end":25},{"text":"    num_self!(f32:visit_f32);","highlight_start":1,"highlight_end":30},{"text":"    num_as_copysign_self!(f64:visit_f64);","highlight_start":1,"highlight_end":42},{"text":"    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);","highlight_start":1,"highlight_end":73},{"text":"    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);","highlight_start":1,"highlight_end":73},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_deserialize_num!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":1796,"byte_end":1829,"line_start":81,"line_end":81,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! impl_deserialize_num {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"num_as_copysign_self!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":4869,"byte_end":4902,"line_start":183,"line_end":183,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! num_as_copysign_self {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_float_copysign`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:195:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(not(no_float_copysign), feature = \"std\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_deserialize_num! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    f32, deserialize_f32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_self!(f32:visit_f32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m376\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_copysign_self!(f64:visit_f64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `num_as_copysign_self` which comes from the expansion of the macro `impl_deserialize_num` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_float_copysign`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":5088,"byte_end":5105,"line_start":190,"line_end":190,"column_start":23,"column_end":40,"is_primary":true,"text":[{"text":"            #[cfg(any(no_float_copysign, not(feature = \"std\")))]","highlight_start":23,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":3489,"byte_end":3512,"line_start":124,"line_end":124,"column_start":25,"column_end":48,"is_primary":false,"text":[{"text":"                    $($($method!($val : $visit);)*)*","highlight_start":25,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":11137,"byte_end":11405,"line_start":381,"line_end":387,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_deserialize_num! {","highlight_start":1,"highlight_end":24},{"text":"    f64, deserialize_f64","highlight_start":1,"highlight_end":25},{"text":"    num_self!(f64:visit_f64);","highlight_start":1,"highlight_end":30},{"text":"    num_as_copysign_self!(f32:visit_f32);","highlight_start":1,"highlight_end":42},{"text":"    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);","highlight_start":1,"highlight_end":73},{"text":"    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);","highlight_start":1,"highlight_end":73},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_deserialize_num!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":1796,"byte_end":1829,"line_start":81,"line_end":81,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! impl_deserialize_num {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"num_as_copysign_self!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":4869,"byte_end":4902,"line_start":183,"line_end":183,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! num_as_copysign_self {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_float_copysign`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:190:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(no_float_copysign, not(feature = \"std\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_deserialize_num! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    f64, deserialize_f64\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_self!(f64:visit_f64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_copysign_self!(f32:visit_f32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m385\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `num_as_copysign_self` which comes from the expansion of the macro `impl_deserialize_num` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_float_copysign`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":5223,"byte_end":5240,"line_start":195,"line_end":195,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg(all(not(no_float_copysign), feature = \"std\"))]","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":3489,"byte_end":3512,"line_start":124,"line_end":124,"column_start":25,"column_end":48,"is_primary":false,"text":[{"text":"                    $($($method!($val : $visit);)*)*","highlight_start":25,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":11137,"byte_end":11405,"line_start":381,"line_end":387,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_deserialize_num! {","highlight_start":1,"highlight_end":24},{"text":"    f64, deserialize_f64","highlight_start":1,"highlight_end":25},{"text":"    num_self!(f64:visit_f64);","highlight_start":1,"highlight_end":30},{"text":"    num_as_copysign_self!(f32:visit_f32);","highlight_start":1,"highlight_end":42},{"text":"    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);","highlight_start":1,"highlight_end":73},{"text":"    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);","highlight_start":1,"highlight_end":73},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_deserialize_num!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":1796,"byte_end":1829,"line_start":81,"line_end":81,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! impl_deserialize_num {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"num_as_copysign_self!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":4869,"byte_end":4902,"line_start":183,"line_end":183,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! num_as_copysign_self {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_float_copysign`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:195:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(all(not(no_float_copysign), feature = \"std\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_deserialize_num! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    f64, deserialize_f64\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_self!(f64:visit_f64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_copysign_self!(f32:visit_f32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m385\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(i8:visit_i8 i16:visit_i16 i32:visit_i32 i64:visit_i64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    num_as_self!(u8:visit_u8 u16:visit_u16 u32:visit_u32 u64:visit_u64);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_float_copysign)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_float_copysign)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `num_as_copysign_self` which comes from the expansion of the macro `impl_deserialize_num` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_systemtime_checked_add`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":68952,"byte_end":68977,"line_start":2224,"line_end":2224,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"        #[cfg(not(no_systemtime_checked_add))]","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_systemtime_checked_add)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_systemtime_checked_add)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_systemtime_checked_add`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2224:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(no_systemtime_checked_add))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_systemtime_checked_add)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_systemtime_checked_add)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_systemtime_checked_add`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs","byte_start":69142,"byte_end":69167,"line_start":2228,"line_end":2228,"column_start":15,"column_end":40,"is_primary":true,"text":[{"text":"        #[cfg(no_systemtime_checked_add)]","highlight_start":15,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_systemtime_checked_add)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_systemtime_checked_add)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_systemtime_checked_add`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/impls.rs:2228:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(no_systemtime_checked_add)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_systemtime_checked_add)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_systemtime_checked_add)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_serde_derive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/mod.rs","byte_start":45875,"byte_end":45890,"line_start":1221,"line_end":1221,"column_start":19,"column_end":34,"is_primary":true,"text":[{"text":"    #[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]","highlight_start":19,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_serde_derive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_serde_derive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_serde_derive`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/de/mod.rs:1221:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(not(no_serde_derive), any(feature = \"std\", feature = \"alloc\")))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_serde_derive)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_serde_derive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":1975,"byte_end":1987,"line_start":72,"line_end":72,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", not(no_core_cstr)))]","highlight_start":32,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:72:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", not(no_core_cstr)))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_core_cstr`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":2236,"byte_end":2248,"line_start":83,"line_end":83,"column_start":36,"column_end":48,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]","highlight_start":36,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_core_cstr`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:83:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"std\", all(not(no_core_cstr), feature = \"alloc\")))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_core_cstr)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_core_cstr)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_relaxed_trait_bounds`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":4652,"byte_end":4675,"line_start":182,"line_end":182,"column_start":56,"column_end":79,"is_primary":true,"text":[{"text":"#[cfg(all(any(feature = \"std\", feature = \"alloc\"), not(no_relaxed_trait_bounds)))]","highlight_start":56,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_relaxed_trait_bounds`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:182:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(any(feature = \"std\", feature = \"alloc\"), not(no_relaxed_trait_bounds)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_relaxed_trait_bounds`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":5215,"byte_end":5238,"line_start":200,"line_end":200,"column_start":52,"column_end":75,"is_primary":true,"text":[{"text":"#[cfg(all(any(feature = \"std\", feature = \"alloc\"), no_relaxed_trait_bounds))]","highlight_start":52,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_relaxed_trait_bounds`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:200:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(any(feature = \"std\", feature = \"alloc\"), no_relaxed_trait_bounds))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_relaxed_trait_bounds`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":11103,"byte_end":11126,"line_start":397,"line_end":397,"column_start":56,"column_end":79,"is_primary":true,"text":[{"text":"#[cfg(all(any(feature = \"std\", feature = \"alloc\"), not(no_relaxed_trait_bounds)))]","highlight_start":56,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_relaxed_trait_bounds`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:397:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m397\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(any(feature = \"std\", feature = \"alloc\"), not(no_relaxed_trait_bounds)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_relaxed_trait_bounds`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":11701,"byte_end":11724,"line_start":416,"line_end":416,"column_start":52,"column_end":75,"is_primary":true,"text":[{"text":"#[cfg(all(any(feature = \"std\", feature = \"alloc\"), no_relaxed_trait_bounds))]","highlight_start":52,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_relaxed_trait_bounds`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:416:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(any(feature = \"std\", feature = \"alloc\"), no_relaxed_trait_bounds))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_relaxed_trait_bounds)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_relaxed_trait_bounds)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_num_nonzero_signed`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":15934,"byte_end":15955,"line_start":557,"line_end":557,"column_start":11,"column_end":32,"is_primary":true,"text":[{"text":"#[cfg(not(no_num_nonzero_signed))]","highlight_start":11,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_num_nonzero_signed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:557:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(no_num_nonzero_signed))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_num_nonzero_signed)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_num_nonzero_signed)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27717,"byte_end":27730,"line_start":963,"line_end":963,"column_start":32,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic)))]","highlight_start":32,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:963:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":28315,"byte_end":28328,"line_start":981,"line_end":981,"column_start":32,"column_end":45,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic)))]","highlight_start":32,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:981:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_std_atomic64`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":28555,"byte_end":28570,"line_start":994,"line_end":994,"column_start":32,"column_end":47,"is_primary":true,"text":[{"text":"#[cfg(all(feature = \"std\", not(no_std_atomic64)))]","highlight_start":32,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_std_atomic64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:994:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m994\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(feature = \"std\", not(no_std_atomic64)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_std_atomic64)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_std_atomic64)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27831,"byte_end":27851,"line_start":967,"line_end":967,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":28333,"byte_end":28522,"line_start":982,"line_end":992,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicBool \"8\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicI16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicIsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"    AtomicU8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicU16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicUsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27735,"byte_end":27759,"line_start":964,"line_end":964,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27831,"byte_end":27851,"line_start":967,"line_end":967,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":28333,"byte_end":28522,"line_start":982,"line_end":992,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicBool \"8\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicI16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicI32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicIsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"    AtomicU8 \"8\"","highlight_start":1,"highlight_end":17},{"text":"    AtomicU16 \"16\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU32 \"32\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicUsize \"ptr\"","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27735,"byte_end":27759,"line_start":964,"line_end":964,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:967:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m967\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m982\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0matomic_impl! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m983\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicBool \"8\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m984\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicI8 \"8\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m985\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicI16 \"16\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m991\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicUsize \"ptr\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m992\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `atomic_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_target_has_atomic`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27831,"byte_end":27851,"line_start":967,"line_end":967,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":28575,"byte_end":28629,"line_start":995,"line_end":998,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicI64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27735,"byte_end":27759,"line_start":964,"line_end":964,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected values for `target_has_atomic` are: `128`, `16`, `32`, `64`, `8`, and `ptr`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_target_has_atomic)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_target_has_atomic)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27831,"byte_end":27851,"line_start":967,"line_end":967,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":"target_has_atomic","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":28575,"byte_end":28629,"line_start":995,"line_end":998,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"atomic_impl! {","highlight_start":1,"highlight_end":15},{"text":"    AtomicI64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"    AtomicU64 \"64\"","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"atomic_impl!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs","byte_start":27735,"byte_end":27759,"line_start":964,"line_end":964,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! atomic_impl {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_target_has_atomic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/ser/impls.rs:967:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m967\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg(any(no_target_has_atomic, target_has_atomic = $size))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `target_has_atomic`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m995\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0matomic_impl! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m996\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicI64 \"64\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m997\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AtomicU64 \"64\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m998\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"50 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 50 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde-1.0.190"
## script = '''
## FROM scratch AS cratesio-serde-1.0.190
## ADD --chmod=0664 --checksum=sha256:91d3c334ca1ee894a2c6f6ad698fe8c435b76d504b13d436f0685d648d6d96f7 \
##   https://static.crates.io/crates/serde/serde-1.0.190.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-serde-1.0.190-1c85eb2286dfea21"
## script = '''
## FROM rust-base AS dep-l-serde-1.0.190-1c85eb2286dfea21
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-serde-1.0.190,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A generic serialization/deserialization framework" \
##         CARGO_PKG_HOMEPAGE="https://serde.rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde" \
##         CARGO_PKG_README="crates-io.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.190" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="190" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/serde-e20cf8833711c512/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' '-C' 'metadata=dd49a7768c081b9f' '-C' 'extra-filename=-1c85eb2286dfea21' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde-1.0.190/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-1c85eb2286dfea21"
## script = """
## FROM scratch AS out-1c85eb2286dfea21
## COPY --from=dep-l-serde-1.0.190-1c85eb2286dfea21 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-1c85eb2286dfea21* /"""

FROM scratch AS cratesio-unicode-ident-1.0.12
ADD --chmod=0664 --checksum=sha256:3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b \
  https://static.crates.io/crates/unicode-ident/unicode-ident-1.0.12.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-unicode-ident-1.0.12-022b01bf1767ab5b
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-unicode-ident-1.0.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="unicode_ident" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="(MIT OR Apache-2.0) AND Unicode-DFS-2016" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="unicode-ident" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/unicode-ident" \
        CARGO_PKG_RUST_VERSION="1.31" \
        CARGO_PKG_VERSION="1.0.12" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="12" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'unicode_ident' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=9ccdcbee2af45809' '-C' 'extra-filename=-022b01bf1767ab5b' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-022b01bf1767ab5b
COPY --from=dep-l-unicode-ident-1.0.12-022b01bf1767ab5b /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-022b01bf1767ab5b* /

## this = "022b01bf1767ab5b"
## writes = [
##     "deps/unicode_ident-022b01bf1767ab5b.d",
##     "deps/libunicode_ident-022b01bf1767ab5b.rmeta",
##     "deps/libunicode_ident-022b01bf1767ab5b.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/unicode_ident-022b01bf1767ab5b.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-unicode-ident-1.0.12"
## script = '''
## FROM scratch AS cratesio-unicode-ident-1.0.12
## ADD --chmod=0664 --checksum=sha256:3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b \
##   https://static.crates.io/crates/unicode-ident/unicode-ident-1.0.12.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-unicode-ident-1.0.12-022b01bf1767ab5b"
## script = '''
## FROM rust-base AS dep-l-unicode-ident-1.0.12-022b01bf1767ab5b
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-unicode-ident-1.0.12,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="unicode_ident" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="(MIT OR Apache-2.0) AND Unicode-DFS-2016" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="unicode-ident" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/unicode-ident" \
##         CARGO_PKG_RUST_VERSION="1.31" \
##         CARGO_PKG_VERSION="1.0.12" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="12" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'unicode_ident' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=9ccdcbee2af45809' '-C' 'extra-filename=-022b01bf1767ab5b' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/unicode-ident-1.0.12/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-022b01bf1767ab5b"
## script = """
## FROM scratch AS out-022b01bf1767ab5b
## COPY --from=dep-l-unicode-ident-1.0.12-022b01bf1767ab5b /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-022b01bf1767ab5b* /"""

FROM scratch AS cratesio-proc-macro2-1.0.69
ADD --chmod=0664 --checksum=sha256:134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da \
  https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.69.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-proc-macro2-1.0.69-f6046e418e99ef58
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-proc-macro2-1.0.69,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69 \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="proc_macro2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="proc-macro2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/proc-macro2" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.69" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="69" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/proc-macro2-b276d23847bf382e/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'proc_macro2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' '-C' 'metadata=9342d67f16e19362' '-C' 'extra-filename=-f6046e418e99ef58' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'unicode_ident=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta' '--cap-lints' 'warn' '--cfg' 'wrap_proc_macro' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f6046e418e99ef58
COPY --from=dep-l-proc-macro2-1.0.69-f6046e418e99ef58 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-f6046e418e99ef58* /

## this = "f6046e418e99ef58"
## deps = ["022b01bf1767ab5b"]
## short_externs = ["unicode_ident-022b01bf1767ab5b"]
## writes = ["deps/proc_macro2-f6046e418e99ef58.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/proc_macro2-f6046e418e99ef58.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `proc_macro_span`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":3855,"byte_end":3870,"line_start":90,"line_end":90,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]","highlight_start":17,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(proc_macro_span)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(proc_macro_span)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":3855,"byte_end":3870,"line_start":90,"line_end":90,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]","highlight_start":17,"highlight_end":32}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `proc_macro_span`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:90:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(proc_macro_span)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(proc_macro_span)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":3872,"byte_end":3886,"line_start":90,"line_end":90,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]","highlight_start":34,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:90:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(any(proc_macro_span, super_unstable), feature(proc_macro_span))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":3928,"byte_end":3942,"line_start":91,"line_end":91,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"#![cfg_attr(super_unstable, feature(proc_macro_def_site))]","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:91:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(super_unstable, feature(proc_macro_def_site))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":3987,"byte_end":3994,"line_start":92,"line_end":92,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:92:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":4664,"byte_end":4688,"line_start":115,"line_end":115,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:115:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":4690,"byte_end":4705,"line_start":115,"line_end":115,"column_start":37,"column_end":52,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":37,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":4690,"byte_end":4705,"line_start":115,"line_end":115,"column_start":37,"column_end":52,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":37,"highlight_end":52}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:115:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":4711,"byte_end":4725,"line_start":115,"line_end":115,"column_start":58,"column_end":72,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]","highlight_start":58,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:115:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, wrap_proc_macro, not(super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5072,"byte_end":5087,"line_start":132,"line_end":132,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5072,"byte_end":5087,"line_start":132,"line_end":132,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:132:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(wrap_proc_macro)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5294,"byte_end":5309,"line_start":142,"line_end":142,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(not(wrap_proc_macro))]","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5294,"byte_end":5309,"line_start":142,"line_end":142,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(not(wrap_proc_macro))]","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:142:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(wrap_proc_macro))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5370,"byte_end":5385,"line_start":145,"line_end":145,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5370,"byte_end":5385,"line_start":145,"line_end":145,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(wrap_proc_macro)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:145:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(wrap_proc_macro)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5404,"byte_end":5418,"line_start":148,"line_end":148,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:148:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5669,"byte_end":5693,"line_start":159,"line_end":159,"column_start":7,"column_end":31,"is_primary":true,"text":[{"text":"#[cfg(procmacro2_semver_exempt)]","highlight_start":7,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:159:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(procmacro2_semver_exempt)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":5727,"byte_end":5741,"line_start":162,"line_end":162,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:162:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":7838,"byte_end":7845,"line_start":239,"line_end":239,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:239:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":8080,"byte_end":8087,"line_start":247,"line_end":247,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:247:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"proc-macro\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10299,"byte_end":10323,"line_start":325,"line_end":325,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:325:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10333,"byte_end":10348,"line_start":325,"line_end":325,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10333,"byte_end":10348,"line_start":325,"line_end":325,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:325:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10351,"byte_end":10365,"line_start":325,"line_end":325,"column_start":63,"column_end":77,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":63,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:325:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10545,"byte_end":10569,"line_start":333,"line_end":333,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:333:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10579,"byte_end":10594,"line_start":333,"line_end":333,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10579,"byte_end":10594,"line_start":333,"line_end":333,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:333:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":10597,"byte_end":10611,"line_start":333,"line_end":333,"column_start":63,"column_end":77,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":63,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:333:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `procmacro2_semver_exempt`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":11535,"byte_end":11559,"line_start":366,"line_end":366,"column_start":11,"column_end":35,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":11,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `procmacro2_semver_exempt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:366:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(procmacro2_semver_exempt)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(procmacro2_semver_exempt)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wrap_proc_macro`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":11569,"byte_end":11584,"line_start":366,"line_end":366,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":11569,"byte_end":11584,"line_start":366,"line_end":366,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":45,"highlight_end":60}],"label":null,"suggested_replacement":"proc_macro","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wrap_proc_macro`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:366:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `proc_macro`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wrap_proc_macro)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wrap_proc_macro)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `super_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs","byte_start":11587,"byte_end":11601,"line_start":366,"line_end":366,"column_start":63,"column_end":77,"is_primary":true,"text":[{"text":"#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]","highlight_start":63,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `super_unstable`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs:366:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(super_unstable)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(super_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":348,"byte_end":362,"line_start":12,"line_end":12,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    #[cfg(span_locations)]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:12:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(span_locations)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":573,"byte_end":587,"line_start":21,"line_end":21,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:21:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":4621,"byte_end":4635,"line_start":180,"line_end":180,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(span_locations)]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:180:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":4863,"byte_end":4877,"line_start":187,"line_end":187,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:187:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":5086,"byte_end":5100,"line_start":193,"line_end":193,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"                #[cfg(not(span_locations))]","highlight_start":27,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:193:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(not(span_locations))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":5564,"byte_end":5578,"line_start":206,"line_end":206,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:206:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":6100,"byte_end":6114,"line_start":220,"line_end":220,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:220:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":6471,"byte_end":6485,"line_start":229,"line_end":229,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:229:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":6530,"byte_end":6544,"line_start":231,"line_end":231,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:231:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":6991,"byte_end":7005,"line_start":242,"line_end":242,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:242:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":7050,"byte_end":7064,"line_start":244,"line_end":244,"column_start":23,"column_end":37,"is_primary":true,"text":[{"text":"                #[cfg(span_locations)]","highlight_start":23,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:244:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":7262,"byte_end":7276,"line_start":254,"line_end":254,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"    #[cfg(not(span_locations))]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:254:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(not(span_locations))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":7354,"byte_end":7368,"line_start":258,"line_end":258,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:258:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":7417,"byte_end":7431,"line_start":260,"line_end":260,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            #[cfg(span_locations)]","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:260:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":25598,"byte_end":25612,"line_start":908,"line_end":908,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    #[cfg(span_locations)]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:908:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m908\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":25767,"byte_end":25781,"line_start":912,"line_end":912,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(span_locations)]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:912:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m912\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs","byte_start":25810,"byte_end":25824,"line_start":914,"line_end":914,"column_start":15,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(span_locations)]","highlight_start":15,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/parse.rs:914:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m914\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_is_available`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/detection.rs","byte_start":516,"byte_end":531,"line_start":26,"line_end":26,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(not(no_is_available))]","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_is_available`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/detection.rs:26:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(no_is_available))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `no_is_available`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/detection.rs","byte_start":2001,"byte_end":2016,"line_start":56,"line_end":56,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"#[cfg(no_is_available)]","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `no_is_available`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/detection.rs:56:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(no_is_available)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(no_is_available)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(no_is_available)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":6,"byte_end":20,"line_start":1,"line_end":1,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:1:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":210,"byte_end":224,"line_start":6,"line_end":6,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:6:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":230,"byte_end":237,"line_start":6,"line_end":6,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:6:31\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":286,"byte_end":300,"line_start":8,"line_end":8,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:8:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":306,"byte_end":313,"line_start":8,"line_end":8,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:8:31\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":349,"byte_end":363,"line_start":10,"line_end":10,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:10:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":3861,"byte_end":3875,"line_start":147,"line_end":147,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg(span_locations)]","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:147:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(span_locations)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":4254,"byte_end":4268,"line_start":164,"line_end":164,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(not(span_locations))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:164:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(span_locations))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":8437,"byte_end":8451,"line_start":323,"line_end":323,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:323:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":8457,"byte_end":8464,"line_start":323,"line_end":323,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:323:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":8890,"byte_end":8904,"line_start":337,"line_end":337,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:337:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":8910,"byte_end":8917,"line_start":337,"line_end":337,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:337:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":9072,"byte_end":9086,"line_start":345,"line_end":345,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:345:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":9092,"byte_end":9099,"line_start":345,"line_end":345,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:345:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":11258,"byte_end":11272,"line_start":408,"line_end":408,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:408:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":11278,"byte_end":11285,"line_start":408,"line_end":408,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:408:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `span_locations`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":11544,"byte_end":11558,"line_start":423,"line_end":423,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `span_locations`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:423:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(span_locations)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(span_locations)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `fuzzing`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs","byte_start":11564,"byte_end":11571,"line_start":423,"line_end":423,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(span_locations, not(fuzzing)))]","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `fuzzing`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/fallback.rs:423:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(span_locations, not(fuzzing)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-proc-macro2-1.0.69"
## script = '''
## FROM scratch AS cratesio-proc-macro2-1.0.69
## ADD --chmod=0664 --checksum=sha256:134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da \
##   https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.69.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-proc-macro2-1.0.69-f6046e418e99ef58"
## script = '''
## FROM rust-base AS dep-l-proc-macro2-1.0.69-f6046e418e99ef58
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-proc-macro2-1.0.69,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69 \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="proc_macro2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="proc-macro2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/proc-macro2" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.69" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="69" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/proc-macro2-b276d23847bf382e/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'proc_macro2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' '-C' 'metadata=9342d67f16e19362' '-C' 'extra-filename=-f6046e418e99ef58' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'unicode_ident=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta' '--cap-lints' 'warn' '--cfg' 'wrap_proc_macro' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/proc-macro2-1.0.69/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f6046e418e99ef58"
## script = """
## FROM scratch AS out-f6046e418e99ef58
## COPY --from=dep-l-proc-macro2-1.0.69-f6046e418e99ef58 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-f6046e418e99ef58* /"""

FROM scratch AS cratesio-quote-1.0.33
ADD --chmod=0664 --checksum=sha256:5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae \
  https://static.crates.io/crates/quote/quote-1.0.33.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-quote-1.0.33-edd57c64bf370f1f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-quote-1.0.33,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33 \
  --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="quote" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Quasi-quoting macro quote!(...)" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="quote" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/quote" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.33" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="33" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'quote' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "proc-macro"))' '-C' 'metadata=0545c06482b63de9' '-C' 'extra-filename=-edd57c64bf370f1f' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'proc_macro2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-edd57c64bf370f1f
COPY --from=dep-l-quote-1.0.33-edd57c64bf370f1f /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-edd57c64bf370f1f* /

## this = "edd57c64bf370f1f"
## deps = [
##     "f6046e418e99ef58",
##     "022b01bf1767ab5b",
## ]
## short_externs = [
##     "proc_macro2-f6046e418e99ef58",
##     "unicode_ident-022b01bf1767ab5b",
## ]
## writes = [
##     "deps/quote-edd57c64bf370f1f.d",
##     "deps/libquote-edd57c64bf370f1f.rmeta",
##     "deps/libquote-edd57c64bf370f1f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/quote-edd57c64bf370f1f.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-quote-1.0.33"
## script = '''
## FROM scratch AS cratesio-quote-1.0.33
## ADD --chmod=0664 --checksum=sha256:5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae \
##   https://static.crates.io/crates/quote/quote-1.0.33.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-quote-1.0.33-edd57c64bf370f1f"
## script = '''
## FROM rust-base AS dep-l-quote-1.0.33-edd57c64bf370f1f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-quote-1.0.33,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33 \
##   --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="quote" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Quasi-quoting macro quote!(...)" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="quote" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/quote" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.33" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="33" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'quote' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--cfg' 'feature="proc-macro"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "proc-macro"))' '-C' 'metadata=0545c06482b63de9' '-C' 'extra-filename=-edd57c64bf370f1f' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'proc_macro2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quote-1.0.33/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-edd57c64bf370f1f"
## script = """
## FROM scratch AS out-edd57c64bf370f1f
## COPY --from=dep-l-quote-1.0.33-edd57c64bf370f1f /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-edd57c64bf370f1f* /"""

FROM scratch AS cratesio-syn-2.0.38
ADD --chmod=0664 --checksum=sha256:e96b79aaa137db8f61e26363a0c9b47d8b4ec75da28b7d1d614c2303e232408b \
  https://static.crates.io/crates/syn/syn-2.0.38.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-syn-2.0.38-f064d7808d2642c6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-syn-2.0.38,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38 \
  --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
  --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta,source=/libquote-edd57c64bf370f1f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="syn" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Parser for Rust source code" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="syn" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/syn" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="2.0.38" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="38" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'syn' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="clone-impls"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="parsing"' '--cfg' 'feature="printing"' '--cfg' 'feature="proc-macro"' '--cfg' 'feature="quote"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' '-C' 'metadata=23ea5fc45d3ffc0a' '-C' 'extra-filename=-f064d7808d2642c6' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'proc_macro2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta' '--extern' 'quote=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta' '--extern' 'unicode_ident=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f064d7808d2642c6
COPY --from=dep-l-syn-2.0.38-f064d7808d2642c6 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-f064d7808d2642c6* /

## this = "f064d7808d2642c6"
## deps = [
##     "f6046e418e99ef58",
##     "022b01bf1767ab5b",
##     "edd57c64bf370f1f",
## ]
## short_externs = [
##     "proc_macro2-f6046e418e99ef58",
##     "unicode_ident-022b01bf1767ab5b",
##     "quote-edd57c64bf370f1f",
## ]
## writes = ["deps/syn-f064d7808d2642c6.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/syn-f064d7808d2642c6.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":9436,"byte_end":9443,"line_start":253,"line_end":253,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:253:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":11375,"byte_end":11382,"line_start":320,"line_end":320,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:320:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":12627,"byte_end":12634,"line_start":356,"line_end":356,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:356:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":14444,"byte_end":14451,"line_start":411,"line_end":411,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    doc_cfg,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:411:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    doc_cfg,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":14735,"byte_end":14742,"line_start":422,"line_end":422,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:422:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":16030,"byte_end":16037,"line_start":467,"line_end":467,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"printing\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:467:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"printing\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":28302,"byte_end":28309,"line_start":860,"line_end":860,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"proc-macro\"))))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:860:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m860\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(all(feature = \"parsing\", feature = \"proc-macro\"))))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":29112,"byte_end":29119,"line_start":878,"line_end":878,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:878:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m878\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs","byte_start":29790,"byte_end":29797,"line_start":905,"line_end":905,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs:905:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m905\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/group.rs","byte_start":4024,"byte_end":4031,"line_start":145,"line_end":145,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/group.rs:145:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/group.rs","byte_start":6032,"byte_end":6039,"line_start":223,"line_end":223,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/group.rs:223:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/group.rs","byte_start":7481,"byte_end":7488,"line_start":278,"line_end":278,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/group.rs:278:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":17668,"byte_end":17675,"line_start":567,"line_end":567,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:567:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":17892,"byte_end":17899,"line_start":575,"line_end":575,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:575:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":19338,"byte_end":19345,"line_start":636,"line_end":636,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:636:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m636\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":19450,"byte_end":19457,"line_start":640,"line_end":640,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:640:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12237,"byte_end":12244,"line_start":400,"line_end":400,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":17434,"byte_end":17626,"line_start":562,"line_end":564,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation_structs! {","highlight_start":1,"highlight_end":30},{"text":"    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and destructuring assignment","highlight_start":1,"highlight_end":161},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:400:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and d\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12385,"byte_end":12392,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":17434,"byte_end":17626,"line_start":562,"line_end":564,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation_structs! {","highlight_start":1,"highlight_end":30},{"text":"    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and destructuring assignment","highlight_start":1,"highlight_end":161},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"_\" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and d\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":8050,"byte_end":8057,"line_start":273,"line_end":273,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":21510,"byte_end":23336,"line_start":732,"line_end":785,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":7119,"byte_end":7147,"line_start":243,"line_end":243,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:273:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":8198,"byte_end":8205,"line_start":277,"line_end":277,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":21510,"byte_end":23336,"line_start":732,"line_end":785,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":7119,"byte_end":7147,"line_start":243,"line_end":243,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:277:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":9390,"byte_end":9397,"line_start":311,"line_end":311,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":21510,"byte_end":23336,"line_start":732,"line_end":785,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":7119,"byte_end":7147,"line_start":243,"line_end":243,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:311:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":9696,"byte_end":9703,"line_start":319,"line_end":319,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":21510,"byte_end":23336,"line_start":732,"line_end":785,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_keywords! {","highlight_start":1,"highlight_end":19},{"text":"    \"abstract\"    pub struct Abstract","highlight_start":1,"highlight_end":38},{"text":"    \"as\"          pub struct As","highlight_start":1,"highlight_end":32},{"text":"    \"async\"       pub struct Async","highlight_start":1,"highlight_end":35},{"text":"    \"auto\"        pub struct Auto","highlight_start":1,"highlight_end":34},{"text":"    \"await\"       pub struct Await","highlight_start":1,"highlight_end":35},{"text":"    \"become\"      pub struct Become","highlight_start":1,"highlight_end":36},{"text":"    \"box\"         pub struct Box","highlight_start":1,"highlight_end":33},{"text":"    \"break\"       pub struct Break","highlight_start":1,"highlight_end":35},{"text":"    \"const\"       pub struct Const","highlight_start":1,"highlight_end":35},{"text":"    \"continue\"    pub struct Continue","highlight_start":1,"highlight_end":38},{"text":"    \"crate\"       pub struct Crate","highlight_start":1,"highlight_end":35},{"text":"    \"default\"     pub struct Default","highlight_start":1,"highlight_end":37},{"text":"    \"do\"          pub struct Do","highlight_start":1,"highlight_end":32},{"text":"    \"dyn\"         pub struct Dyn","highlight_start":1,"highlight_end":33},{"text":"    \"else\"        pub struct Else","highlight_start":1,"highlight_end":34},{"text":"    \"enum\"        pub struct Enum","highlight_start":1,"highlight_end":34},{"text":"    \"extern\"      pub struct Extern","highlight_start":1,"highlight_end":36},{"text":"    \"final\"       pub struct Final","highlight_start":1,"highlight_end":35},{"text":"    \"fn\"          pub struct Fn","highlight_start":1,"highlight_end":32},{"text":"    \"for\"         pub struct For","highlight_start":1,"highlight_end":33},{"text":"    \"if\"          pub struct If","highlight_start":1,"highlight_end":32},{"text":"    \"impl\"        pub struct Impl","highlight_start":1,"highlight_end":34},{"text":"    \"in\"          pub struct In","highlight_start":1,"highlight_end":32},{"text":"    \"let\"         pub struct Let","highlight_start":1,"highlight_end":33},{"text":"    \"loop\"        pub struct Loop","highlight_start":1,"highlight_end":34},{"text":"    \"macro\"       pub struct Macro","highlight_start":1,"highlight_end":35},{"text":"    \"match\"       pub struct Match","highlight_start":1,"highlight_end":35},{"text":"    \"mod\"         pub struct Mod","highlight_start":1,"highlight_end":33},{"text":"    \"move\"        pub struct Move","highlight_start":1,"highlight_end":34},{"text":"    \"mut\"         pub struct Mut","highlight_start":1,"highlight_end":33},{"text":"    \"override\"    pub struct Override","highlight_start":1,"highlight_end":38},{"text":"    \"priv\"        pub struct Priv","highlight_start":1,"highlight_end":34},{"text":"    \"pub\"         pub struct Pub","highlight_start":1,"highlight_end":33},{"text":"    \"ref\"         pub struct Ref","highlight_start":1,"highlight_end":33},{"text":"    \"return\"      pub struct Return","highlight_start":1,"highlight_end":36},{"text":"    \"Self\"        pub struct SelfType","highlight_start":1,"highlight_end":38},{"text":"    \"self\"        pub struct SelfValue","highlight_start":1,"highlight_end":39},{"text":"    \"static\"      pub struct Static","highlight_start":1,"highlight_end":36},{"text":"    \"struct\"      pub struct Struct","highlight_start":1,"highlight_end":36},{"text":"    \"super\"       pub struct Super","highlight_start":1,"highlight_end":35},{"text":"    \"trait\"       pub struct Trait","highlight_start":1,"highlight_end":35},{"text":"    \"try\"         pub struct Try","highlight_start":1,"highlight_end":33},{"text":"    \"type\"        pub struct Type","highlight_start":1,"highlight_end":34},{"text":"    \"typeof\"      pub struct Typeof","highlight_start":1,"highlight_end":36},{"text":"    \"union\"       pub struct Union","highlight_start":1,"highlight_end":35},{"text":"    \"unsafe\"      pub struct Unsafe","highlight_start":1,"highlight_end":36},{"text":"    \"unsized\"     pub struct Unsized","highlight_start":1,"highlight_end":37},{"text":"    \"use\"         pub struct Use","highlight_start":1,"highlight_end":33},{"text":"    \"virtual\"     pub struct Virtual","highlight_start":1,"highlight_end":37},{"text":"    \"where\"       pub struct Where","highlight_start":1,"highlight_end":35},{"text":"    \"while\"       pub struct While","highlight_start":1,"highlight_end":35},{"text":"    \"yield\"       pub struct Yield","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_keywords!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":7119,"byte_end":7147,"line_start":243,"line_end":243,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_keywords {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:319:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_keywords! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"abstract\"    pub struct Abstract\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"as\"          pub struct As\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"async\"       pub struct Async\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"yield\"       pub struct Yield\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13895,"byte_end":13902,"line_start":450,"line_end":450,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:450:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m450\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"printing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":14201,"byte_end":14208,"line_start":458,"line_end":458,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:458:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"parsing\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12237,"byte_end":12244,"line_start":400,"line_end":400,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13725,"byte_end":13829,"line_start":445,"line_end":447,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:400:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12385,"byte_end":12392,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13725,"byte_end":13829,"line_start":445,"line_end":447,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12237,"byte_end":12244,"line_start":400,"line_end":400,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13725,"byte_end":13829,"line_start":445,"line_end":447,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:400:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12385,"byte_end":12392,"line_start":404,"line_end":404,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13725,"byte_end":13829,"line_start":445,"line_end":447,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:404:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":12237,"byte_end":12244,"line_start":400,"line_end":400,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13725,"byte_end":13829,"line_start":445,"line_end":447,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            define_punctuation_structs! {","highlight_start":13,"highlight_end":42},{"text":"                $token pub struct $name/$len #[doc = $usage]","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":23338,"byte_end":26908,"line_start":787,"line_end":834,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"define_punctuation! {","highlight_start":1,"highlight_end":22},{"text":"    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":110},{"text":"    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns","highlight_start":1,"highlight_end":95},{"text":"    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment","highlight_start":1,"highlight_end":69},{"text":"    \"@\"           pub struct At/1         /// subpattern binding","highlight_start":1,"highlight_end":65},{"text":"    \"^\"           pub struct Caret/1      /// bitwise and logical XOR","highlight_start":1,"highlight_end":70},{"text":"    \"^=\"          pub struct CaretEq/2    /// bitwise XOR assignment","highlight_start":1,"highlight_end":69},{"text":"    \":\"           pub struct Colon/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \",\"           pub struct Comma/1      /// various separators","highlight_start":1,"highlight_end":65},{"text":"    \"$\"           pub struct Dollar/1     /// macros","highlight_start":1,"highlight_end":53},{"text":"    \".\"           pub struct Dot/1        /// field access, tuple index","highlight_start":1,"highlight_end":72},{"text":"    \"..\"          pub struct DotDot/2     /// range, struct expressions, patterns, range patterns","highlight_start":1,"highlight_end":98},{"text":"    \"...\"         pub struct DotDotDot/3  /// variadic functions, range patterns","highlight_start":1,"highlight_end":81},{"text":"    \"..=\"         pub struct DotDotEq/3   /// inclusive range, range patterns","highlight_start":1,"highlight_end":78},{"text":"    \"=\"           pub struct Eq/1         /// assignment, attributes, various type definitions","highlight_start":1,"highlight_end":95},{"text":"    \"==\"          pub struct EqEq/2       /// equal","highlight_start":1,"highlight_end":52},{"text":"    \"=>\"          pub struct FatArrow/2   /// match arms, macros","highlight_start":1,"highlight_end":65},{"text":"    \">=\"          pub struct Ge/2         /// greater than or equal to, generics","highlight_start":1,"highlight_end":81},{"text":"    \">\"           pub struct Gt/1         /// greater than, generics, paths","highlight_start":1,"highlight_end":76},{"text":"    \"<-\"          pub struct LArrow/2     /// unused","highlight_start":1,"highlight_end":53},{"text":"    \"<=\"          pub struct Le/2         /// less than or equal to","highlight_start":1,"highlight_end":68},{"text":"    \"<\"           pub struct Lt/1         /// less than, generics, paths","highlight_start":1,"highlight_end":73},{"text":"    \"-\"           pub struct Minus/1      /// subtraction, negation","highlight_start":1,"highlight_end":68},{"text":"    \"-=\"          pub struct MinusEq/2    /// subtraction assignment","highlight_start":1,"highlight_end":69},{"text":"    \"!=\"          pub struct Ne/2         /// not equal","highlight_start":1,"highlight_end":56},{"text":"    \"!\"           pub struct Not/1        /// bitwise and logical NOT, macro calls, inner attributes, never type, negative impls","highlight_start":1,"highlight_end":129},{"text":"    \"|\"           pub struct Or/1         /// bitwise and logical OR, closures, patterns in match, if let, and while let","highlight_start":1,"highlight_end":121},{"text":"    \"|=\"          pub struct OrEq/2       /// bitwise OR assignment","highlight_start":1,"highlight_end":68},{"text":"    \"||\"          pub struct OrOr/2       /// lazy OR, closures","highlight_start":1,"highlight_end":64},{"text":"    \"::\"          pub struct PathSep/2    /// path separator","highlight_start":1,"highlight_end":61},{"text":"    \"%\"           pub struct Percent/1    /// remainder","highlight_start":1,"highlight_end":56},{"text":"    \"%=\"          pub struct PercentEq/2  /// remainder assignment","highlight_start":1,"highlight_end":67},{"text":"    \"+\"           pub struct Plus/1       /// addition, trait bounds, macro Kleene matcher","highlight_start":1,"highlight_end":91},{"text":"    \"+=\"          pub struct PlusEq/2     /// addition assignment","highlight_start":1,"highlight_end":66},{"text":"    \"#\"           pub struct Pound/1      /// attributes","highlight_start":1,"highlight_end":57},{"text":"    \"?\"           pub struct Question/1   /// question mark operator, questionably sized, macro Kleene matcher","highlight_start":1,"highlight_end":111},{"text":"    \"->\"          pub struct RArrow/2     /// function return type, closure return type, function pointer type","highlight_start":1,"highlight_end":111},{"text":"    \";\"           pub struct Semi/1       /// terminator for various items and statements, array types","highlight_start":1,"highlight_end":103},{"text":"    \"<<\"          pub struct Shl/2        /// shift left, nested generics","highlight_start":1,"highlight_end":74},{"text":"    \"<<=\"         pub struct ShlEq/3      /// shift left assignment","highlight_start":1,"highlight_end":68},{"text":"    \">>\"          pub struct Shr/2        /// shift right, nested generics","highlight_start":1,"highlight_end":75},{"text":"    \">>=\"         pub struct ShrEq/3      /// shift right assignment, nested generics","highlight_start":1,"highlight_end":86},{"text":"    \"/\"           pub struct Slash/1      /// division","highlight_start":1,"highlight_end":55},{"text":"    \"/=\"          pub struct SlashEq/2    /// division assignment","highlight_start":1,"highlight_end":66},{"text":"    \"*\"           pub struct Star/1       /// multiplication, dereference, raw pointers, macro Kleene matcher, use wildcards","highlight_start":1,"highlight_end":125},{"text":"    \"*=\"          pub struct StarEq/2     /// multiplication assignment","highlight_start":1,"highlight_end":72},{"text":"    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0","highlight_start":1,"highlight_end":75},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_punctuation!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":13583,"byte_end":13614,"line_start":442,"line_end":442,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation {","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"define_punctuation_structs!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs","byte_start":10932,"byte_end":10971,"line_start":365,"line_end":365,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"macro_rules! define_punctuation_structs {","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/token.rs:400:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m400\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            #[cfg_attr(doc_cfg, doc(cfg(feature = \"clone-impls\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_punctuation! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&\"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&&\"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"&=\"          pub struct AndEq/2      /// bitwise AND assignment\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"~\"           pub struct Tilde/1      /// unused since before Rust 1.0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-syn-2.0.38"
## script = '''
## FROM scratch AS cratesio-syn-2.0.38
## ADD --chmod=0664 --checksum=sha256:e96b79aaa137db8f61e26363a0c9b47d8b4ec75da28b7d1d614c2303e232408b \
##   https://static.crates.io/crates/syn/syn-2.0.38.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-syn-2.0.38-f064d7808d2642c6"
## script = '''
## FROM rust-base AS dep-l-syn-2.0.38-f064d7808d2642c6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-syn-2.0.38,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38 \
##   --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
##   --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta,source=/libquote-edd57c64bf370f1f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="syn" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Parser for Rust source code" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="syn" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/syn" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="2.0.38" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="38" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'syn' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="clone-impls"' '--cfg' 'feature="default"' '--cfg' 'feature="derive"' '--cfg' 'feature="parsing"' '--cfg' 'feature="printing"' '--cfg' 'feature="proc-macro"' '--cfg' 'feature="quote"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' '-C' 'metadata=23ea5fc45d3ffc0a' '-C' 'extra-filename=-f064d7808d2642c6' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'proc_macro2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta' '--extern' 'quote=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta' '--extern' 'unicode_ident=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/syn-2.0.38/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f064d7808d2642c6"
## script = """
## FROM scratch AS out-f064d7808d2642c6
## COPY --from=dep-l-syn-2.0.38-f064d7808d2642c6 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-f064d7808d2642c6* /"""

FROM scratch AS cratesio-serde_derive-1.0.190
ADD --chmod=0664 --checksum=sha256:67c5609f394e5c2bd7fc51efda478004ea80ef42fee983d5c67a65e34f32c0e3 \
  https://static.crates.io/crates/serde_derive/serde_derive-1.0.190.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-p-serde_derive-1.0.190-ff34cba9c5968a92
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-serde_derive-1.0.190,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190 \
  --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rlib,source=/libproc_macro2-f6046e418e99ef58.rlib \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rlib,source=/libunicode_ident-022b01bf1767ab5b.rlib \
  --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib,source=/libquote-edd57c64bf370f1f.rlib \
  --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rlib,source=/libsyn-f064d7808d2642c6.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde_derive" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Macros 1.1 implementation of #[derive(Serialize, Deserialize)]" \
        CARGO_PKG_HOMEPAGE="https://serde.rs" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde_derive" \
        CARGO_PKG_README="crates-io.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.190" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="190" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde_derive' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "deserialize_in_place"))' '-C' 'metadata=29c5044fbcc72a0e' '-C' 'extra-filename=-ff34cba9c5968a92' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'proc_macro2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rlib' '--extern' 'quote=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib' '--extern' 'syn=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ff34cba9c5968a92
COPY --from=dep-p-serde_derive-1.0.190-ff34cba9c5968a92 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-ff34cba9c5968a92* /

## this = "ff34cba9c5968a92"
## deps = [
##     "f6046e418e99ef58",
##     "022b01bf1767ab5b",
##     "edd57c64bf370f1f",
##     "f064d7808d2642c6",
## ]
## short_externs = [
##     "proc_macro2-f6046e418e99ef58",
##     "unicode_ident-022b01bf1767ab5b",
##     "quote-edd57c64bf370f1f",
##     "syn-f064d7808d2642c6",
## ]
## is_proc_macro = true
## writes = [
##     "deps/serde_derive-ff34cba9c5968a92.d",
##     "deps/libserde_derive-ff34cba9c5968a92.so",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/serde_derive-ff34cba9c5968a92.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/lib.rs","byte_start":2055,"byte_end":2065,"line_start":63,"line_end":63,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"#![cfg_attr(all(test, exhaustive), feature(non_exhaustive_omitted_patterns_lint))]","highlight_start":23,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/lib.rs:63:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(all(test, exhaustive), feature(non_exhaustive_omitted_patterns_lint))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/attr.rs","byte_start":67993,"byte_end":68003,"line_start":1854,"line_end":1854,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/attr.rs:1854:30\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs","byte_start":5273,"byte_end":5283,"line_start":150,"line_end":150,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs:150:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs","byte_start":6705,"byte_end":6715,"line_start":187,"line_end":187,"column_start":46,"column_end":56,"is_primary":true,"text":[{"text":"                        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":46,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs:187:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs","byte_start":7639,"byte_end":7649,"line_start":212,"line_end":212,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs:212:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs","byte_start":8724,"byte_end":8734,"line_start":238,"line_end":238,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"                    #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/internals/receiver.rs:238:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/bound.rs","byte_start":6430,"byte_end":6440,"line_start":184,"line_end":184,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/bound.rs:184:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/bound.rs","byte_start":7511,"byte_end":7521,"line_start":206,"line_end":206,"column_start":43,"column_end":53,"is_primary":true,"text":[{"text":"                                all(test, exhaustive),","highlight_start":43,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/bound.rs:206:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   all(test, exhaustive),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `exhaustive`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/bound.rs","byte_start":8604,"byte_end":8614,"line_start":233,"line_end":233,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `exhaustive`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/bound.rs:233:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                #[cfg_attr(all(test, exhaustive), deny(non_exhaustive_omitted_patterns))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(exhaustive)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(exhaustive)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"9 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 9 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde_derive-1.0.190"
## script = '''
## FROM scratch AS cratesio-serde_derive-1.0.190
## ADD --chmod=0664 --checksum=sha256:67c5609f394e5c2bd7fc51efda478004ea80ef42fee983d5c67a65e34f32c0e3 \
##   https://static.crates.io/crates/serde_derive/serde_derive-1.0.190.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-p-serde_derive-1.0.190-ff34cba9c5968a92"
## script = '''
## FROM rust-base AS dep-p-serde_derive-1.0.190-ff34cba9c5968a92
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-serde_derive-1.0.190,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190 \
##   --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rlib,source=/libproc_macro2-f6046e418e99ef58.rlib \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rlib,source=/libunicode_ident-022b01bf1767ab5b.rlib \
##   --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib,source=/libquote-edd57c64bf370f1f.rlib \
##   --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rlib,source=/libsyn-f064d7808d2642c6.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde_derive" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Macros 1.1 implementation of #[derive(Serialize, Deserialize)]" \
##         CARGO_PKG_HOMEPAGE="https://serde.rs" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde_derive" \
##         CARGO_PKG_README="crates-io.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/serde" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.190" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="190" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde_derive' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'proc-macro' '--emit' 'dep-info,link' '-C' 'prefer-dynamic' '-C' 'embed-bitcode=no' '-C' 'debug-assertions=off' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "deserialize_in_place"))' '-C' 'metadata=29c5044fbcc72a0e' '-C' 'extra-filename=-ff34cba9c5968a92' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'proc_macro2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rlib' '--extern' 'quote=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib' '--extern' 'syn=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rlib' '--extern' 'proc_macro' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_derive-1.0.190/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ff34cba9c5968a92"
## script = """
## FROM scratch AS out-ff34cba9c5968a92
## COPY --from=dep-p-serde_derive-1.0.190-ff34cba9c5968a92 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-ff34cba9c5968a92* /"""

FROM scratch AS cratesio-equivalent-1.0.1
ADD --chmod=0664 --checksum=sha256:5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5 \
  https://static.crates.io/crates/equivalent/equivalent-1.0.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-equivalent-1.0.1-60241e4fe7f04e90
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-equivalent-1.0.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="equivalent" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Traits for key comparison in maps." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="equivalent" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/cuviper/equivalent" \
        CARGO_PKG_RUST_VERSION="1.6" \
        CARGO_PKG_VERSION="1.0.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'equivalent' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=a7e7c5155b9492f3' '-C' 'extra-filename=-60241e4fe7f04e90' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-60241e4fe7f04e90
COPY --from=dep-l-equivalent-1.0.1-60241e4fe7f04e90 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-60241e4fe7f04e90* /

## this = "60241e4fe7f04e90"
## writes = [
##     "deps/equivalent-60241e4fe7f04e90.d",
##     "deps/libequivalent-60241e4fe7f04e90.rmeta",
##     "deps/libequivalent-60241e4fe7f04e90.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/equivalent-60241e4fe7f04e90.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-equivalent-1.0.1"
## script = '''
## FROM scratch AS cratesio-equivalent-1.0.1
## ADD --chmod=0664 --checksum=sha256:5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5 \
##   https://static.crates.io/crates/equivalent/equivalent-1.0.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-equivalent-1.0.1-60241e4fe7f04e90"
## script = '''
## FROM rust-base AS dep-l-equivalent-1.0.1-60241e4fe7f04e90
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-equivalent-1.0.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="equivalent" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Traits for key comparison in maps." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="equivalent" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/cuviper/equivalent" \
##         CARGO_PKG_RUST_VERSION="1.6" \
##         CARGO_PKG_VERSION="1.0.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'equivalent' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=a7e7c5155b9492f3' '-C' 'extra-filename=-60241e4fe7f04e90' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/equivalent-1.0.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-60241e4fe7f04e90"
## script = """
## FROM scratch AS out-60241e4fe7f04e90
## COPY --from=dep-l-equivalent-1.0.1-60241e4fe7f04e90 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-60241e4fe7f04e90* /"""

FROM scratch AS cratesio-hashbrown-0.14.2
ADD --chmod=0664 --checksum=sha256:f93e7192158dbcda357bdec5fb5788eebf8bbac027f3f33e719d29135ae84156 \
  https://static.crates.io/crates/hashbrown/hashbrown-0.14.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-hashbrown-0.14.2-e22a55dd51e34d0e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-hashbrown-0.14.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="hashbrown" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A Rust port of Google's SwissTable hash map" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="hashbrown" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/hashbrown" \
        CARGO_PKG_RUST_VERSION="1.63.0" \
        CARGO_PKG_VERSION="0.14.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="14" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'hashbrown' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="raw"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ahash", "alloc", "allocator-api2", "compiler_builtins", "core", "default", "equivalent", "inline-more", "nightly", "raw", "rayon", "rkyv", "rustc-dep-of-std", "rustc-internal-api", "serde"))' '-C' 'metadata=2834a879b10c13a3' '-C' 'extra-filename=-e22a55dd51e34d0e' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-e22a55dd51e34d0e
COPY --from=dep-l-hashbrown-0.14.2-e22a55dd51e34d0e /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-e22a55dd51e34d0e* /

## this = "e22a55dd51e34d0e"
## writes = [
##     "deps/hashbrown-e22a55dd51e34d0e.d",
##     "deps/libhashbrown-e22a55dd51e34d0e.rmeta",
##     "deps/libhashbrown-e22a55dd51e34d0e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/hashbrown-e22a55dd51e34d0e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-hashbrown-0.14.2"
## script = '''
## FROM scratch AS cratesio-hashbrown-0.14.2
## ADD --chmod=0664 --checksum=sha256:f93e7192158dbcda357bdec5fb5788eebf8bbac027f3f33e719d29135ae84156 \
##   https://static.crates.io/crates/hashbrown/hashbrown-0.14.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-hashbrown-0.14.2-e22a55dd51e34d0e"
## script = '''
## FROM rust-base AS dep-l-hashbrown-0.14.2-e22a55dd51e34d0e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-hashbrown-0.14.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="hashbrown" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Amanieu d'Antras <amanieu@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A Rust port of Google's SwissTable hash map" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="hashbrown" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/hashbrown" \
##         CARGO_PKG_RUST_VERSION="1.63.0" \
##         CARGO_PKG_VERSION="0.14.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="14" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'hashbrown' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="raw"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("ahash", "alloc", "allocator-api2", "compiler_builtins", "core", "default", "equivalent", "inline-more", "nightly", "raw", "rayon", "rkyv", "rustc-dep-of-std", "rustc-internal-api", "serde"))' '-C' 'metadata=2834a879b10c13a3' '-C' 'extra-filename=-e22a55dd51e34d0e' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/hashbrown-0.14.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-e22a55dd51e34d0e"
## script = """
## FROM scratch AS out-e22a55dd51e34d0e
## COPY --from=dep-l-hashbrown-0.14.2-e22a55dd51e34d0e /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-e22a55dd51e34d0e* /"""

FROM scratch AS cratesio-indexmap-2.0.2
ADD --chmod=0664 --checksum=sha256:8adf3ddd720272c6ea8bf59463c04e0f93d0bbf7c5439b691bca2987e0270897 \
  https://static.crates.io/crates/indexmap/indexmap-2.0.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-indexmap-2.0.2-09d3e45661ef6bae
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-indexmap-2.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2 \
  --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
  --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="indexmap" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A hash table with consistent order and fast iteration." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="indexmap" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bluss/indexmap" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="2.0.2" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'indexmap' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "quickcheck", "rayon", "rustc-rayon", "serde", "std", "test_debug"))' '-C' 'metadata=4ef038c9298d9f0f' '-C' 'extra-filename=-09d3e45661ef6bae' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'equivalent=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta' '--extern' 'hashbrown=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-09d3e45661ef6bae
COPY --from=dep-l-indexmap-2.0.2-09d3e45661ef6bae /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-09d3e45661ef6bae* /

## this = "09d3e45661ef6bae"
## deps = [
##     "60241e4fe7f04e90",
##     "e22a55dd51e34d0e",
## ]
## short_externs = [
##     "equivalent-60241e4fe7f04e90",
##     "hashbrown-e22a55dd51e34d0e",
## ]
## writes = [
##     "deps/indexmap-09d3e45661ef6bae.d",
##     "deps/libindexmap-09d3e45661ef6bae.rmeta",
##     "deps/libindexmap-09d3e45661ef6bae.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/indexmap-09d3e45661ef6bae.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-indexmap-2.0.2"
## script = '''
## FROM scratch AS cratesio-indexmap-2.0.2
## ADD --chmod=0664 --checksum=sha256:8adf3ddd720272c6ea8bf59463c04e0f93d0bbf7c5439b691bca2987e0270897 \
##   https://static.crates.io/crates/indexmap/indexmap-2.0.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-indexmap-2.0.2-09d3e45661ef6bae"
## script = '''
## FROM rust-base AS dep-l-indexmap-2.0.2-09d3e45661ef6bae
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-indexmap-2.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2 \
##   --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
##   --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="indexmap" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A hash table with consistent order and fast iteration." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="indexmap" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bluss/indexmap" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="2.0.2" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'indexmap' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "quickcheck", "rayon", "rustc-rayon", "serde", "std", "test_debug"))' '-C' 'metadata=4ef038c9298d9f0f' '-C' 'extra-filename=-09d3e45661ef6bae' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'equivalent=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta' '--extern' 'hashbrown=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/indexmap-2.0.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-09d3e45661ef6bae"
## script = """
## FROM scratch AS out-09d3e45661ef6bae
## COPY --from=dep-l-indexmap-2.0.2-09d3e45661ef6bae /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-09d3e45661ef6bae* /"""

FROM scratch AS cratesio-serde_spanned-0.6.4
ADD --chmod=0664 --checksum=sha256:12022b835073e5b11e90a14f86838ceb1c8fb0325b72416845c487ac0fa95e80 \
  https://static.crates.io/crates/serde_spanned/serde_spanned-0.6.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-serde_spanned-0.6.4-fa41a08fdcaade9c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-serde_spanned-0.6.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4 \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde_spanned" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Serde-compatible spanned Value" \
        CARGO_PKG_HOMEPAGE="https://github.com/toml-rs/toml" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde_spanned" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/toml-rs/toml" \
        CARGO_PKG_RUST_VERSION="1.67" \
        CARGO_PKG_VERSION="0.6.4" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde_spanned' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde"))' '-C' 'metadata=898ee31629aa7d1d' '-C' 'extra-filename=-fa41a08fdcaade9c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-fa41a08fdcaade9c
COPY --from=dep-l-serde_spanned-0.6.4-fa41a08fdcaade9c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-fa41a08fdcaade9c* /

## this = "fa41a08fdcaade9c"
## deps = ["1c85eb2286dfea21"]
## short_externs = ["serde-1c85eb2286dfea21"]
## writes = [
##     "deps/serde_spanned-fa41a08fdcaade9c.d",
##     "deps/libserde_spanned-fa41a08fdcaade9c.rmeta",
##     "deps/libserde_spanned-fa41a08fdcaade9c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/serde_spanned-fa41a08fdcaade9c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde_spanned-0.6.4"
## script = '''
## FROM scratch AS cratesio-serde_spanned-0.6.4
## ADD --chmod=0664 --checksum=sha256:12022b835073e5b11e90a14f86838ceb1c8fb0325b72416845c487ac0fa95e80 \
##   https://static.crates.io/crates/serde_spanned/serde_spanned-0.6.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-serde_spanned-0.6.4-fa41a08fdcaade9c"
## script = '''
## FROM rust-base AS dep-l-serde_spanned-0.6.4-fa41a08fdcaade9c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-serde_spanned-0.6.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4 \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde_spanned" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Serde-compatible spanned Value" \
##         CARGO_PKG_HOMEPAGE="https://github.com/toml-rs/toml" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde_spanned" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/toml-rs/toml" \
##         CARGO_PKG_RUST_VERSION="1.67" \
##         CARGO_PKG_VERSION="0.6.4" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde_spanned' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde"))' '-C' 'metadata=898ee31629aa7d1d' '-C' 'extra-filename=-fa41a08fdcaade9c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_spanned-0.6.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-fa41a08fdcaade9c"
## script = """
## FROM scratch AS out-fa41a08fdcaade9c
## COPY --from=dep-l-serde_spanned-0.6.4-fa41a08fdcaade9c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-fa41a08fdcaade9c* /"""

FROM scratch AS cratesio-toml_datetime-0.6.5
ADD --chmod=0664 --checksum=sha256:3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1 \
  https://static.crates.io/crates/toml_datetime/toml_datetime-0.6.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-toml_datetime-0.6.5-cc2e1105bd13c489
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-toml_datetime-0.6.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5 \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="toml_datetime" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="A TOML-compatible datetime type" \
        CARGO_PKG_HOMEPAGE="https://github.com/toml-rs/toml" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="toml_datetime" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/toml-rs/toml" \
        CARGO_PKG_RUST_VERSION="1.67" \
        CARGO_PKG_VERSION="0.6.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'toml_datetime' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde"))' '-C' 'metadata=c868daf1f5cf90f0' '-C' 'extra-filename=-cc2e1105bd13c489' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-cc2e1105bd13c489
COPY --from=dep-l-toml_datetime-0.6.5-cc2e1105bd13c489 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-cc2e1105bd13c489* /

## this = "cc2e1105bd13c489"
## deps = ["1c85eb2286dfea21"]
## short_externs = ["serde-1c85eb2286dfea21"]
## writes = [
##     "deps/toml_datetime-cc2e1105bd13c489.d",
##     "deps/libtoml_datetime-cc2e1105bd13c489.rmeta",
##     "deps/libtoml_datetime-cc2e1105bd13c489.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/toml_datetime-cc2e1105bd13c489.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-toml_datetime-0.6.5"
## script = '''
## FROM scratch AS cratesio-toml_datetime-0.6.5
## ADD --chmod=0664 --checksum=sha256:3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1 \
##   https://static.crates.io/crates/toml_datetime/toml_datetime-0.6.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-toml_datetime-0.6.5-cc2e1105bd13c489"
## script = '''
## FROM rust-base AS dep-l-toml_datetime-0.6.5-cc2e1105bd13c489
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-toml_datetime-0.6.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5 \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="toml_datetime" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="A TOML-compatible datetime type" \
##         CARGO_PKG_HOMEPAGE="https://github.com/toml-rs/toml" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="toml_datetime" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/toml-rs/toml" \
##         CARGO_PKG_RUST_VERSION="1.67" \
##         CARGO_PKG_VERSION="0.6.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'toml_datetime' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("serde"))' '-C' 'metadata=c868daf1f5cf90f0' '-C' 'extra-filename=-cc2e1105bd13c489' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_datetime-0.6.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-cc2e1105bd13c489"
## script = """
## FROM scratch AS out-cc2e1105bd13c489
## COPY --from=dep-l-toml_datetime-0.6.5-cc2e1105bd13c489 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-cc2e1105bd13c489* /"""

FROM scratch AS cratesio-winnow-0.5.17
ADD --chmod=0664 --checksum=sha256:a3b801d0e0a6726477cc207f60162da452f3a95adb368399bef20a946e06f65c \
  https://static.crates.io/crates/winnow/winnow-0.5.17.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-winnow-0.5.17-8a050dfd1238b93f
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-winnow-0.5.17,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="winnow" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="A byte-oriented, zero-copy, parser combinators library" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="winnow" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/winnow-rs/winnow" \
        CARGO_PKG_RUST_VERSION="1.64.0" \
        CARGO_PKG_VERSION="0.5.17" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="17" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'winnow' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "debug", "default", "simd", "std", "unstable-doc"))' '-C' 'metadata=9457b08eac644fe2' '-C' 'extra-filename=-8a050dfd1238b93f' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8a050dfd1238b93f
COPY --from=dep-l-winnow-0.5.17-8a050dfd1238b93f /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-8a050dfd1238b93f* /

## this = "8a050dfd1238b93f"
## writes = [
##     "deps/winnow-8a050dfd1238b93f.d",
##     "deps/libwinnow-8a050dfd1238b93f.rmeta",
##     "deps/libwinnow-8a050dfd1238b93f.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/winnow-8a050dfd1238b93f.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":5044,"byte_end":5051,"line_start":139,"line_end":139,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs:139:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unused imports: `alloc`, `boxed`, `convert`, and `option`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6385,"byte_end":6390,"line_start":182,"line_end":182,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6400,"byte_end":6405,"line_start":182,"line_end":182,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6425,"byte_end":6432,"line_start":182,"line_end":182,"column_start":53,"column_end":60,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":53,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6461,"byte_end":6467,"line_start":182,"line_end":182,"column_start":89,"column_end":95,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":89,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6385,"byte_end":6392,"line_start":182,"line_end":182,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6398,"byte_end":6405,"line_start":182,"line_end":182,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":26,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6423,"byte_end":6432,"line_start":182,"line_end":182,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6459,"byte_end":6467,"line_start":182,"line_end":182,"column_start":87,"column_end":95,"is_primary":true,"text":[{"text":"            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,","highlight_start":87,"highlight_end":95}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `alloc`, `boxed`, `convert`, and `option`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs:182:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            alloc, borrow, boxed, cmp, collections, convert, fmt, hash, iter, mem, ops, option,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unused import: `std::prelude as v1`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6644,"byte_end":6662,"line_start":189,"line_end":189,"column_start":21,"column_end":39,"is_primary":true,"text":[{"text":"            pub use std::prelude as v1;","highlight_start":21,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs","byte_start":6636,"byte_end":6663,"line_start":189,"line_end":189,"column_start":13,"column_end":40,"is_primary":true,"text":[{"text":"            pub use std::prelude as v1;","highlight_start":13,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::prelude as v1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs:189:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub use std::prelude as v1;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/error.rs","byte_start":2470,"byte_end":2477,"line_start":63,"line_end":63,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/error.rs:63:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/error.rs","byte_start":3479,"byte_end":3486,"line_start":97,"line_end":97,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/error.rs:97:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":353,"byte_end":360,"line_start":11,"line_end":11,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:11:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":829,"byte_end":836,"line_start":34,"line_end":34,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:34:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":1909,"byte_end":1916,"line_start":81,"line_end":81,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:81:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":3469,"byte_end":3476,"line_start":140,"line_end":140,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:140:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":4890,"byte_end":4897,"line_start":197,"line_end":197,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:197:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":6252,"byte_end":6259,"line_start":254,"line_end":254,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:254:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":7598,"byte_end":7605,"line_start":309,"line_end":309,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:309:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m309\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":8801,"byte_end":8808,"line_start":359,"line_end":359,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:359:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":9589,"byte_end":9596,"line_start":392,"line_end":392,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:392:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":11114,"byte_end":11121,"line_start":455,"line_end":455,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:455:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":12042,"byte_end":12049,"line_start":497,"line_end":497,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:497:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":12862,"byte_end":12869,"line_start":534,"line_end":534,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:534:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m534\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":14086,"byte_end":14093,"line_start":583,"line_end":583,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:583:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":15339,"byte_end":15346,"line_start":632,"line_end":632,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:632:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":16362,"byte_end":16369,"line_start":676,"line_end":676,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:676:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m676\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":17426,"byte_end":17433,"line_start":720,"line_end":720,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:720:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":18397,"byte_end":18404,"line_start":762,"line_end":762,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:762:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m762\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `nightly`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs","byte_start":19602,"byte_end":19609,"line_start":809,"line_end":809,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `nightly`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/combinator/parser.rs:809:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m809\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(nightly, warn(rustdoc::missing_doc_code_examples))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"23 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 23 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-winnow-0.5.17"
## script = '''
## FROM scratch AS cratesio-winnow-0.5.17
## ADD --chmod=0664 --checksum=sha256:a3b801d0e0a6726477cc207f60162da452f3a95adb368399bef20a946e06f65c \
##   https://static.crates.io/crates/winnow/winnow-0.5.17.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-winnow-0.5.17-8a050dfd1238b93f"
## script = '''
## FROM rust-base AS dep-l-winnow-0.5.17-8a050dfd1238b93f
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-winnow-0.5.17,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="winnow" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="A byte-oriented, zero-copy, parser combinators library" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="winnow" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/winnow-rs/winnow" \
##         CARGO_PKG_RUST_VERSION="1.64.0" \
##         CARGO_PKG_VERSION="0.5.17" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="17" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'winnow' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "debug", "default", "simd", "std", "unstable-doc"))' '-C' 'metadata=9457b08eac644fe2' '-C' 'extra-filename=-8a050dfd1238b93f' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/winnow-0.5.17/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8a050dfd1238b93f"
## script = """
## FROM scratch AS out-8a050dfd1238b93f
## COPY --from=dep-l-winnow-0.5.17-8a050dfd1238b93f /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-8a050dfd1238b93f* /"""

FROM scratch AS cratesio-toml_edit-0.20.7
ADD --chmod=0664 --checksum=sha256:70f427fce4d84c72b5b732388bf4a9f4531b53f74e2887e3ecb2481f68f66d81 \
  https://static.crates.io/crates/toml_edit/toml_edit-0.20.7.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-toml_edit-0.20.7-0f30734a5cedfcc3
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-toml_edit-0.20.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7 \
  --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta,source=/libindexmap-09d3e45661ef6bae.rmeta \
  --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
  --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
  --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta,source=/libserde_spanned-fa41a08fdcaade9c.rmeta \
  --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta,source=/libtoml_datetime-cc2e1105bd13c489.rmeta \
  --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta,source=/libwinnow-8a050dfd1238b93f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="toml_edit" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andronik Ordian <write@reusable.software>:Ed Page <eopage@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Yet another format-preserving TOML parser." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="toml_edit" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/toml-rs/toml" \
        CARGO_PKG_RUST_VERSION="1.67" \
        CARGO_PKG_VERSION="0.20.7" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="20" \
        CARGO_PKG_VERSION_PATCH="7" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'toml_edit' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "perf", "serde", "unbounded"))' '-C' 'metadata=9757f6a97c1ea9e4' '-C' 'extra-filename=-0f30734a5cedfcc3' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'indexmap=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--extern' 'serde_spanned=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta' '--extern' 'toml_datetime=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta' '--extern' 'winnow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-0f30734a5cedfcc3
COPY --from=dep-l-toml_edit-0.20.7-0f30734a5cedfcc3 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-0f30734a5cedfcc3* /

## this = "0f30734a5cedfcc3"
## deps = [
##     "09d3e45661ef6bae",
##     "60241e4fe7f04e90",
##     "e22a55dd51e34d0e",
##     "1c85eb2286dfea21",
##     "fa41a08fdcaade9c",
##     "cc2e1105bd13c489",
##     "8a050dfd1238b93f",
## ]
## short_externs = [
##     "indexmap-09d3e45661ef6bae",
##     "equivalent-60241e4fe7f04e90",
##     "hashbrown-e22a55dd51e34d0e",
##     "serde-1c85eb2286dfea21",
##     "serde_spanned-fa41a08fdcaade9c",
##     "toml_datetime-cc2e1105bd13c489",
##     "winnow-8a050dfd1238b93f",
## ]
## writes = [
##     "deps/toml_edit-0f30734a5cedfcc3.d",
##     "deps/libtoml_edit-0f30734a5cedfcc3.rmeta",
##     "deps/libtoml_edit-0f30734a5cedfcc3.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/toml_edit-0f30734a5cedfcc3.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `kstring`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs","byte_start":204,"byte_end":223,"line_start":8,"line_end":8,"column_start":7,"column_end":26,"is_primary":true,"text":[{"text":"#[cfg(feature = \"kstring\")]","highlight_start":7,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `kstring` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `kstring`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs:8:7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"kstring\")]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `kstring` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `kstring`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs","byte_start":267,"byte_end":286,"line_start":10,"line_end":10,"column_start":11,"column_end":30,"is_primary":true,"text":[{"text":"#[cfg(not(feature = \"kstring\"))]","highlight_start":11,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `kstring` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `kstring`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(feature = \"kstring\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `kstring` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `kstring`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs","byte_start":1206,"byte_end":1225,"line_start":59,"line_end":59,"column_start":15,"column_end":34,"is_primary":true,"text":[{"text":"        #[cfg(feature = \"kstring\")]","highlight_start":15,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `kstring` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `kstring`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs:59:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(feature = \"kstring\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `kstring` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `kstring`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs","byte_start":1297,"byte_end":1316,"line_start":61,"line_end":61,"column_start":19,"column_end":38,"is_primary":true,"text":[{"text":"        #[cfg(not(feature = \"kstring\"))]","highlight_start":19,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `kstring` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `kstring`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/internal_string.rs:61:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(not(feature = \"kstring\"))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `feature` are: `default`, `perf`, `serde`, and `unbounded`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `kstring` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-toml_edit-0.20.7"
## script = '''
## FROM scratch AS cratesio-toml_edit-0.20.7
## ADD --chmod=0664 --checksum=sha256:70f427fce4d84c72b5b732388bf4a9f4531b53f74e2887e3ecb2481f68f66d81 \
##   https://static.crates.io/crates/toml_edit/toml_edit-0.20.7.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-toml_edit-0.20.7-0f30734a5cedfcc3"
## script = '''
## FROM rust-base AS dep-l-toml_edit-0.20.7-0f30734a5cedfcc3
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-toml_edit-0.20.7,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7 \
##   --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta,source=/libindexmap-09d3e45661ef6bae.rmeta \
##   --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
##   --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
##   --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta,source=/libserde_spanned-fa41a08fdcaade9c.rmeta \
##   --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta,source=/libtoml_datetime-cc2e1105bd13c489.rmeta \
##   --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta,source=/libwinnow-8a050dfd1238b93f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="toml_edit" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andronik Ordian <write@reusable.software>:Ed Page <eopage@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Yet another format-preserving TOML parser." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="toml_edit" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/toml-rs/toml" \
##         CARGO_PKG_RUST_VERSION="1.67" \
##         CARGO_PKG_VERSION="0.20.7" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="20" \
##         CARGO_PKG_VERSION_PATCH="7" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'toml_edit' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="serde"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "perf", "serde", "unbounded"))' '-C' 'metadata=9757f6a97c1ea9e4' '-C' 'extra-filename=-0f30734a5cedfcc3' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'indexmap=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--extern' 'serde_spanned=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta' '--extern' 'toml_datetime=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta' '--extern' 'winnow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/toml_edit-0.20.7/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-0f30734a5cedfcc3"
## script = """
## FROM scratch AS out-0f30734a5cedfcc3
## COPY --from=dep-l-toml_edit-0.20.7-0f30734a5cedfcc3 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-0f30734a5cedfcc3* /"""

FROM scratch AS cratesio-cargo-config2-0.1.15
ADD --chmod=0664 --checksum=sha256:d357907e87f152fa96500b410bdec7f72630a1e344096b8d33dbb015a246aa11 \
  https://static.crates.io/crates/cargo-config2/cargo-config2-0.1.15.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-cargo-config2-0.1.15-a9bb60b727a99073
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-cargo-config2-0.1.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15 \
  --mount=from=out-171ad634cd69714c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta,source=/libhome-171ad634cd69714c.rmeta \
  --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta,source=/libonce_cell-4f105e9db8e23ef7.rmeta \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
  --mount=from=out-ff34cba9c5968a92,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so,source=/libserde_derive-ff34cba9c5968a92.so \
  --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
  --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta,source=/libquote-edd57c64bf370f1f.rmeta \
  --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rmeta,source=/libsyn-f064d7808d2642c6.rmeta \
  --mount=from=out-0f30734a5cedfcc3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta,source=/libtoml_edit-0f30734a5cedfcc3.rmeta \
  --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta,source=/libindexmap-09d3e45661ef6bae.rmeta \
  --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
  --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
  --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta,source=/libserde_spanned-fa41a08fdcaade9c.rmeta \
  --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta,source=/libtoml_datetime-cc2e1105bd13c489.rmeta \
  --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta,source=/libwinnow-8a050dfd1238b93f.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="cargo_config2" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Load and resolve Cargo configuration.\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="cargo-config2" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/taiki-e/cargo-config2" \
        CARGO_PKG_RUST_VERSION="1.67" \
        CARGO_PKG_VERSION="0.1.15" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="15" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'cargo_config2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=395063841479e78f' '-C' 'extra-filename=-a9bb60b727a99073' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'home=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta' '--extern' 'once_cell=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--extern' 'serde_derive=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so' '--extern' 'toml_edit=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a9bb60b727a99073
COPY --from=dep-l-cargo-config2-0.1.15-a9bb60b727a99073 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-a9bb60b727a99073* /

## this = "a9bb60b727a99073"
## deps = [
##     "171ad634cd69714c",
##     "4f105e9db8e23ef7",
##     "1c85eb2286dfea21",
##     "ff34cba9c5968a92",
##     "f6046e418e99ef58",
##     "022b01bf1767ab5b",
##     "edd57c64bf370f1f",
##     "f064d7808d2642c6",
##     "0f30734a5cedfcc3",
##     "09d3e45661ef6bae",
##     "60241e4fe7f04e90",
##     "e22a55dd51e34d0e",
##     "fa41a08fdcaade9c",
##     "cc2e1105bd13c489",
##     "8a050dfd1238b93f",
## ]
## short_externs = [
##     "home-171ad634cd69714c",
##     "once_cell-4f105e9db8e23ef7",
##     "serde-1c85eb2286dfea21",
##     "serde_derive-ff34cba9c5968a92",
##     "proc_macro2-f6046e418e99ef58",
##     "unicode_ident-022b01bf1767ab5b",
##     "quote-edd57c64bf370f1f",
##     "syn-f064d7808d2642c6",
##     "toml_edit-0f30734a5cedfcc3",
##     "indexmap-09d3e45661ef6bae",
##     "equivalent-60241e4fe7f04e90",
##     "hashbrown-e22a55dd51e34d0e",
##     "serde_spanned-fa41a08fdcaade9c",
##     "toml_datetime-cc2e1105bd13c489",
##     "winnow-8a050dfd1238b93f",
## ]
## writes = [
##     "deps/cargo_config2-a9bb60b727a99073.d",
##     "deps/libcargo_config2-a9bb60b727a99073.rmeta",
##     "deps/libcargo_config2-a9bb60b727a99073.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/cargo_config2-a9bb60b727a99073.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-cargo-config2-0.1.15"
## script = '''
## FROM scratch AS cratesio-cargo-config2-0.1.15
## ADD --chmod=0664 --checksum=sha256:d357907e87f152fa96500b410bdec7f72630a1e344096b8d33dbb015a246aa11 \
##   https://static.crates.io/crates/cargo-config2/cargo-config2-0.1.15.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-cargo-config2-0.1.15-a9bb60b727a99073"
## script = '''
## FROM rust-base AS dep-l-cargo-config2-0.1.15-a9bb60b727a99073
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-cargo-config2-0.1.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15 \
##   --mount=from=out-171ad634cd69714c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta,source=/libhome-171ad634cd69714c.rmeta \
##   --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta,source=/libonce_cell-4f105e9db8e23ef7.rmeta \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
##   --mount=from=out-ff34cba9c5968a92,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so,source=/libserde_derive-ff34cba9c5968a92.so \
##   --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
##   --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta,source=/libquote-edd57c64bf370f1f.rmeta \
##   --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rmeta,source=/libsyn-f064d7808d2642c6.rmeta \
##   --mount=from=out-0f30734a5cedfcc3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta,source=/libtoml_edit-0f30734a5cedfcc3.rmeta \
##   --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta,source=/libindexmap-09d3e45661ef6bae.rmeta \
##   --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
##   --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
##   --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta,source=/libserde_spanned-fa41a08fdcaade9c.rmeta \
##   --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta,source=/libtoml_datetime-cc2e1105bd13c489.rmeta \
##   --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta,source=/libwinnow-8a050dfd1238b93f.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="cargo_config2" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Load and resolve Cargo configuration.\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="cargo-config2" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/taiki-e/cargo-config2" \
##         CARGO_PKG_RUST_VERSION="1.67" \
##         CARGO_PKG_VERSION="0.1.15" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="15" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'cargo_config2' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=395063841479e78f' '-C' 'extra-filename=-a9bb60b727a99073' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'home=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta' '--extern' 'once_cell=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--extern' 'serde_derive=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so' '--extern' 'toml_edit=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-config2-0.1.15/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a9bb60b727a99073"
## script = """
## FROM scratch AS out-a9bb60b727a99073
## COPY --from=dep-l-cargo-config2-0.1.15-a9bb60b727a99073 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-a9bb60b727a99073* /"""

FROM scratch AS cratesio-libc-0.2.149
ADD --chmod=0664 --checksum=sha256:a08173bc88b7955d1b3145aa561539096c421ac8debde8cbc3612ec635fee29b \
  https://static.crates.io/crates/libc/libc-0.2.149.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-libc-0.2.149-4a9d9e0eac4eef83
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-libc-0.2.149,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="libc" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Raw FFI bindings to platform libraries like libc.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/libc" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="libc" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/libc" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.2.149" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="2" \
        CARGO_PKG_VERSION_PATCH="149" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/libc-07b00c13ce95f0cf/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'libc' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' '-C' 'metadata=d934b3b9cd2ad191' '-C' 'extra-filename=-4a9d9e0eac4eef83' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' '--cfg' 'freebsd11' '--cfg' 'libc_priv_mod_use' '--cfg' 'libc_union' '--cfg' 'libc_const_size_of' '--cfg' 'libc_align' '--cfg' 'libc_int128' '--cfg' 'libc_core_cvoid' '--cfg' 'libc_packedN' '--cfg' 'libc_cfg_target_vendor' '--cfg' 'libc_non_exhaustive' '--cfg' 'libc_long_array' '--cfg' 'libc_ptr_addr_of' '--cfg' 'libc_underscore_const_names' '--cfg' 'libc_const_extern_fn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4a9d9e0eac4eef83
COPY --from=dep-l-libc-0.2.149-4a9d9e0eac4eef83 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-4a9d9e0eac4eef83* /

## this = "4a9d9e0eac4eef83"
## writes = ["deps/libc-4a9d9e0eac4eef83.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libc-4a9d9e0eac4eef83.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_deny_warnings`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":589,"byte_end":607,"line_start":20,"line_end":20,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"#![cfg_attr(libc_deny_warnings, deny(warnings))]","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_deny_warnings)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_deny_warnings)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_deny_warnings`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:20:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(libc_deny_warnings, deny(warnings))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_deny_warnings)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_deny_warnings)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_thread_local`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":776,"byte_end":793,"line_start":23,"line_end":23,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"#![cfg_attr(libc_thread_local, feature(thread_local))]","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_thread_local)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_thread_local)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_thread_local`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:23:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(libc_thread_local, feature(thread_local))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_thread_local)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_thread_local)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_const_extern_fn_unstable`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":1098,"byte_end":1127,"line_start":29,"line_end":29,"column_start":13,"column_end":42,"is_primary":true,"text":[{"text":"#![cfg_attr(libc_const_extern_fn_unstable, feature(const_extern_fn))]","highlight_start":13,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn_unstable)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn_unstable)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_const_extern_fn_unstable`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:29:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(libc_const_extern_fn_unstable, feature(const_extern_fn))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn_unstable)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn_unstable)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_priv_mod_use`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":1498,"byte_end":1515,"line_start":47,"line_end":47,"column_start":14,"column_end":31,"is_primary":true,"text":[{"text":"    if #[cfg(libc_priv_mod_use)] {","highlight_start":14,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_priv_mod_use)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_priv_mod_use)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_priv_mod_use`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:47:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_priv_mod_use)] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_priv_mod_use)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_priv_mod_use)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_core_cvoid`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":1534,"byte_end":1549,"line_start":48,"line_end":48,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"        #[cfg(libc_core_cvoid)]","highlight_start":15,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_core_cvoid`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:48:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(libc_core_cvoid)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `switch`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":3095,"byte_end":3104,"line_start":106,"line_end":106,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"    } else if #[cfg(target_os = \"switch\")] {","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `switch`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:106:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(target_os = \"switch\")] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_os` are: `aix`, `amdhsa`, `android`, `cuda`, `cygwin`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `hurd`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `nuttx`, `openbsd`, `psp`, `psx`, `redox`, `rtems`, `solaris`, `solid_asp3`, `teeos`, `trusty`, `tvos`, `uefi`, and `unknown` and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `wasi`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs","byte_start":4377,"byte_end":4396,"line_start":154,"line_end":154,"column_start":25,"column_end":44,"is_primary":true,"text":[{"text":"    } else if #[cfg(any(target_env = \"wasi\", target_os = \"wasi\"))] {","highlight_start":25,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `wasi`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs:154:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(any(target_env = \"wasi\", target_os = \"wasi\"))] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":10485,"byte_end":10501,"line_start":331,"line_end":331,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"#[cfg(not(libc_ptr_addr_of))]","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:331:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(libc_ptr_addr_of))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_ptr_addr_of`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":10587,"byte_end":10603,"line_start":338,"line_end":338,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(libc_ptr_addr_of)]","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_ptr_addr_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:338:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(libc_ptr_addr_of)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_ptr_addr_of)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_ptr_addr_of)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_const_extern_fn`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6337,"byte_end":6357,"line_start":179,"line_end":179,"column_start":14,"column_end":34,"is_primary":true,"text":[{"text":"    if #[cfg(libc_const_extern_fn)] {","highlight_start":14,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_const_extern_fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:179:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_const_extern_fn)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_const_extern_fn)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_const_extern_fn)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_int128`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/fixed_width_ints.rs","byte_start":831,"byte_end":842,"line_start":23,"line_end":23,"column_start":18,"column_end":29,"is_primary":true,"text":[{"text":"    if #[cfg(all(libc_int128, target_arch = \"aarch64\", not(target_os = \"windows\")))] {","highlight_start":18,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_int128)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_int128)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_int128`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/fixed_width_ints.rs:23:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(all(libc_int128, target_arch = \"aarch64\", not(target_os = \"windows\")))] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_int128)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_int128)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `illumos`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":12701,"byte_end":12711,"line_start":391,"line_end":391,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"    } else if #[cfg(target_env = \"illumos\")] {","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `illumos`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:391:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(target_env = \"illumos\")] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `aix`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":13199,"byte_end":13209,"line_start":402,"line_end":402,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"    } else if #[cfg(target_env = \"aix\")] {","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `aix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:402:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if #[cfg(target_env = \"aix\")] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected values for `target_env` are: ``, `gnu`, `msvc`, `musl`, `newlib`, `nto70`, `nto71`, `nto71_iosock`, `nto80`, `ohos`, `p1`, `p2`, `relibc`, `sgx`, and `uclibc`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_core_cvoid`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":60677,"byte_end":60692,"line_start":1603,"line_end":1603,"column_start":14,"column_end":29,"is_primary":true,"text":[{"text":"    if #[cfg(libc_core_cvoid)] {","highlight_start":14,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_core_cvoid`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1603:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_core_cvoid)] {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_core_cvoid)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_core_cvoid)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_align`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":61286,"byte_end":61296,"line_start":1623,"line_end":1623,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    if #[cfg(libc_align)] {","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_align`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1623:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_align)] {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":22158,"byte_end":22180,"line_start":606,"line_end":606,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:606:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m606\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":22562,"byte_end":22584,"line_start":615,"line_end":615,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:615:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m615\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":23278,"byte_end":23300,"line_start":633,"line_end":633,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:633:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":23687,"byte_end":23709,"line_start":644,"line_end":644,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:644:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":24142,"byte_end":24164,"line_start":659,"line_end":659,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:659:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":25188,"byte_end":25210,"line_start":693,"line_end":693,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:693:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":26463,"byte_end":26472,"line_start":731,"line_end":731,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:731:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":26474,"byte_end":26483,"line_start":731,"line_end":731,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:731:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":26898,"byte_end":26907,"line_start":744,"line_end":744,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:744:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":26909,"byte_end":26918,"line_start":744,"line_end":744,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:744:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":28471,"byte_end":28480,"line_start":790,"line_end":790,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:790:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":28482,"byte_end":28491,"line_start":790,"line_end":790,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:790:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":29624,"byte_end":29633,"line_start":828,"line_end":828,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:828:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m828\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":29635,"byte_end":29644,"line_start":828,"line_end":828,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:828:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m828\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":37105,"byte_end":37114,"line_start":1021,"line_end":1021,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1021:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1021\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":37116,"byte_end":37125,"line_start":1021,"line_end":1021,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1021:51\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1021\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":44439,"byte_end":44461,"line_start":1197,"line_end":1197,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1197:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_cfg_target_vendor`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":44878,"byte_end":44900,"line_start":1210,"line_end":1210,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        libc_cfg_target_vendor,","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_cfg_target_vendor`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1210:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        libc_cfg_target_vendor,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_cfg_target_vendor)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_cfg_target_vendor)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":47862,"byte_end":47871,"line_start":1280,"line_end":1280,"column_start":40,"column_end":49,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":40,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1280:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":47873,"byte_end":47882,"line_start":1280,"line_end":1280,"column_start":51,"column_end":60,"is_primary":true,"text":[{"text":"        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":51,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1280:51\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":54768,"byte_end":54774,"line_start":1449,"line_end":1449,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(missing_abi)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":54768,"byte_end":54774,"line_start":1449,"line_end":1449,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1449:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1449\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(missing_abi)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd11`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":55848,"byte_end":55857,"line_start":1470,"line_end":1470,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":48,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1470:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd11)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd11)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `freebsd10`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":55859,"byte_end":55868,"line_start":1470,"line_end":1470,"column_start":59,"column_end":68,"is_primary":true,"text":[{"text":"                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),","highlight_start":59,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `freebsd10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1470:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                all(target_os = \"freebsd\", any(freebsd11, freebsd10)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(freebsd10)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(freebsd10)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":57412,"byte_end":57418,"line_start":1509,"line_end":1509,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":57412,"byte_end":57418,"line_start":1509,"line_end":1509,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1509:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":59019,"byte_end":59025,"line_start":1550,"line_end":1550,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs","byte_start":59019,"byte_end":59025,"line_start":1550,"line_end":1550,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        extern {","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/mod.rs:1550:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        extern {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6691,"byte_end":6697,"line_start":188,"line_end":188,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/mod.rs","byte_start":54883,"byte_end":56389,"line_start":1544,"line_end":1591,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":64},{"text":"        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":76},{"text":"            (*mhdr).msg_control as *mut cmsghdr","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_DATA(cmsg: *const cmsghdr) -> *mut ::c_uchar {","highlight_start":1,"highlight_end":63},{"text":"        cmsg.offset(1) as *mut ::c_uchar","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_SPACE(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":62},{"text":"        (CMSG_ALIGN(length as usize) + CMSG_ALIGN(::mem::size_of::<cmsghdr>()))","highlight_start":1,"highlight_end":80},{"text":"            as ::c_uint","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_LEN(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":60},{"text":"        CMSG_ALIGN(::mem::size_of::<cmsghdr>()) as ::c_uint + length","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_CLR(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] &= !(1 << (fd % size));","highlight_start":1,"highlight_end":59},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ISSET(fd: ::c_int, set: *const fd_set) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_SET(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] |= 1 << (fd % size);","highlight_start":1,"highlight_end":56},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ZERO(set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":45},{"text":"        for slot in (*set).fds_bits.iter_mut() {","highlight_start":1,"highlight_end":49},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6370,"byte_end":6384,"line_start":180,"line_end":180,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6691,"byte_end":6697,"line_start":188,"line_end":188,"column_start":43,"column_end":49,"is_primary":true,"text":[{"text":"                pub $($constness)* unsafe extern fn $i($($arg: $argty),*","highlight_start":43,"highlight_end":49}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/mod.rs","byte_start":54883,"byte_end":56389,"line_start":1544,"line_end":1591,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"f! {","highlight_start":1,"highlight_end":5},{"text":"    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {","highlight_start":1,"highlight_end":64},{"text":"        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {","highlight_start":1,"highlight_end":76},{"text":"            (*mhdr).msg_control as *mut cmsghdr","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            0 as *mut cmsghdr","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn CMSG_DATA(cmsg: *const cmsghdr) -> *mut ::c_uchar {","highlight_start":1,"highlight_end":63},{"text":"        cmsg.offset(1) as *mut ::c_uchar","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_SPACE(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":62},{"text":"        (CMSG_ALIGN(length as usize) + CMSG_ALIGN(::mem::size_of::<cmsghdr>()))","highlight_start":1,"highlight_end":80},{"text":"            as ::c_uint","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn CMSG_LEN(length: ::c_uint) -> ::c_uint {","highlight_start":1,"highlight_end":60},{"text":"        CMSG_ALIGN(::mem::size_of::<cmsghdr>()) as ::c_uint + length","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_CLR(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] &= !(1 << (fd % size));","highlight_start":1,"highlight_end":59},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ISSET(fd: ::c_int, set: *const fd_set) -> bool {","highlight_start":1,"highlight_end":63},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_SET(fd: ::c_int, set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":57},{"text":"        let fd = fd as usize;","highlight_start":1,"highlight_end":30},{"text":"        let size = ::mem::size_of_val(&(*set).fds_bits[0]) * 8;","highlight_start":1,"highlight_end":64},{"text":"        (*set).fds_bits[fd / size] |= 1 << (fd % size);","highlight_start":1,"highlight_end":56},{"text":"        return","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn FD_ZERO(set: *mut fd_set) -> () {","highlight_start":1,"highlight_end":45},{"text":"        for slot in (*set).fds_bits.iter_mut() {","highlight_start":1,"highlight_end":49},{"text":"            *slot = 0;","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6370,"byte_end":6384,"line_start":180,"line_end":180,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        macro_rules! f {","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:188:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* unsafe extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/mod.rs:1544:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mf! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn CMSG_FIRSTHDR(mhdr: *const msghdr) -> *mut cmsghdr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1546\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if (*mhdr).msg_controllen as usize >= ::mem::size_of::<cmsghdr>() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (*mhdr).msg_control as *mut cmsghdr\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"extern declarations without an explicit ABI are deprecated","code":{"code":"missing_abi","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":7153,"byte_end":7159,"line_start":203,"line_end":203,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/mod.rs","byte_start":56391,"byte_end":58183,"line_start":1593,"line_end":1669,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub fn SIGRTMAX() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmax() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SIGRTMIN() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmin() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSTOPPED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":57},{"text":"        (status & 0xff) == 0x7f","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WSTOPSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFCONTINUED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":59},{"text":"        status == 0xffff","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSIGNALED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":58},{"text":"        ((status & 0x7f) + 1) as i8 >= 2","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WTERMSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        status & 0x7f","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFEXITED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x7f) == 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WEXITSTATUS(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":61},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WCOREDUMP(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x80) != 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_EXITCODE(ret: ::c_int, sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":71},{"text":"        (ret << 8) | sig","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_STOPCODE(sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":57},{"text":"        (sig << 8) | 0x7f","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn QCMD(cmd: ::c_int, type_: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":67},{"text":"        (cmd << 8) | (type_ & 0x00ff)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_COPIED(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_COPY","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_CLASS(o: u8) -> u8 {","highlight_start":1,"highlight_end":46},{"text":"        o & IPOPT_CLASS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_NUMBER(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_NUMBER_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPTOS_ECN(x: u8) -> u8 {","highlight_start":1,"highlight_end":44},{"text":"        x & ::IPTOS_ECN_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(ellipsis_inclusive_range_patterns)]","highlight_start":1,"highlight_end":48},{"text":"    pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {","highlight_start":1,"highlight_end":67},{"text":"        ((a << 16) + (b << 8)) + match c {","highlight_start":1,"highlight_end":43},{"text":"            0 ... 255 => c,","highlight_start":1,"highlight_end":28},{"text":"            _ => 255,","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6834,"byte_end":6853,"line_start":195,"line_end":195,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"explicitly specify the \"C\" ABI","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":7153,"byte_end":7159,"line_start":203,"line_end":203,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"                pub $($constness)* extern fn $i($($arg: $argty),*","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"extern \"C\"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/mod.rs","byte_start":56391,"byte_end":58183,"line_start":1593,"line_end":1669,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"safe_f! {","highlight_start":1,"highlight_end":10},{"text":"    pub fn SIGRTMAX() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmax() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn SIGRTMIN() -> ::c_int {","highlight_start":1,"highlight_end":35},{"text":"        unsafe { __libc_current_sigrtmin() }","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSTOPPED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":57},{"text":"        (status & 0xff) == 0x7f","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WSTOPSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFCONTINUED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":59},{"text":"        status == 0xffff","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFSIGNALED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":58},{"text":"        ((status & 0x7f) + 1) as i8 >= 2","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WTERMSIG(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":58},{"text":"        status & 0x7f","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WIFEXITED(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x7f) == 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WEXITSTATUS(status: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":61},{"text":"        (status >> 8) & 0xff","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn WCOREDUMP(status: ::c_int) -> bool {","highlight_start":1,"highlight_end":56},{"text":"        (status & 0x80) != 0","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_EXITCODE(ret: ::c_int, sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":71},{"text":"        (ret << 8) | sig","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn W_STOPCODE(sig: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":57},{"text":"        (sig << 8) | 0x7f","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn QCMD(cmd: ::c_int, type_: ::c_int) -> ::c_int {","highlight_start":1,"highlight_end":67},{"text":"        (cmd << 8) | (type_ & 0x00ff)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_COPIED(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_COPY","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_CLASS(o: u8) -> u8 {","highlight_start":1,"highlight_end":46},{"text":"        o & IPOPT_CLASS_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPOPT_NUMBER(o: u8) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"        o & IPOPT_NUMBER_MASK","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub {const} fn IPTOS_ECN(x: u8) -> u8 {","highlight_start":1,"highlight_end":44},{"text":"        x & ::IPTOS_ECN_MASK","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(ellipsis_inclusive_range_patterns)]","highlight_start":1,"highlight_end":48},{"text":"    pub {const} fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {","highlight_start":1,"highlight_end":67},{"text":"        ((a << 16) + (b << 8)) + match c {","highlight_start":1,"highlight_end":43},{"text":"            0 ... 255 => c,","highlight_start":1,"highlight_end":28},{"text":"            _ => 255,","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"safe_f!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":6834,"byte_end":6853,"line_start":195,"line_end":195,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        macro_rules! safe_f {","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: extern declarations without an explicit ABI are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:203:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                pub $($constness)* extern fn $i($($arg: $argty),*\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: explicitly specify the \"C\" ABI: `extern \"C\"`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/mod.rs:1593:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1593\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msafe_f! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn SIGRTMAX() -> ::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe { __libc_current_sigrtmax() }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `safe_f` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":3243,"byte_end":3253,"line_start":94,"line_end":94,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"            if #[cfg(libc_union)] {","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":3062,"byte_end":3123,"line_start":90,"line_end":90,"column_start":9,"column_end":70,"is_primary":false,"text":[{"text":"        s_no_extra_traits!(it: $(#[$attr])* pub $t $i { $($field)* });","highlight_start":9,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs","byte_start":17116,"byte_end":20880,"line_start":690,"line_end":807,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"s_no_extra_traits! {","highlight_start":1,"highlight_end":21},{"text":"    pub struct sockaddr_nl {","highlight_start":1,"highlight_end":29},{"text":"        pub nl_family: ::sa_family_t,","highlight_start":1,"highlight_end":38},{"text":"        nl_pad: ::c_ushort,","highlight_start":1,"highlight_end":28},{"text":"        pub nl_pid: u32,","highlight_start":1,"highlight_end":25},{"text":"        pub nl_groups: u32","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct dirent {","highlight_start":1,"highlight_end":24},{"text":"        pub d_ino: ::ino_t,","highlight_start":1,"highlight_end":28},{"text":"        pub d_off: ::off_t,","highlight_start":1,"highlight_end":28},{"text":"        pub d_reclen: ::c_ushort,","highlight_start":1,"highlight_end":34},{"text":"        pub d_type: ::c_uchar,","highlight_start":1,"highlight_end":31},{"text":"        pub d_name: [::c_char; 256],","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct sockaddr_alg {","highlight_start":1,"highlight_end":30},{"text":"        pub salg_family: ::sa_family_t,","highlight_start":1,"highlight_end":40},{"text":"        pub salg_type: [::c_uchar; 14],","highlight_start":1,"highlight_end":40},{"text":"        pub salg_feat: u32,","highlight_start":1,"highlight_end":28},{"text":"        pub salg_mask: u32,","highlight_start":1,"highlight_end":28},{"text":"        pub salg_name: [::c_uchar; 64],","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct uinput_setup {","highlight_start":1,"highlight_end":30},{"text":"        pub id: input_id,","highlight_start":1,"highlight_end":26},{"text":"        pub name: [::c_char; UINPUT_MAX_NAME_SIZE],","highlight_start":1,"highlight_end":52},{"text":"        pub ff_effects_max: ::__u32,","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct uinput_user_dev {","highlight_start":1,"highlight_end":33},{"text":"        pub name: [::c_char; UINPUT_MAX_NAME_SIZE],","highlight_start":1,"highlight_end":52},{"text":"        pub id: input_id,","highlight_start":1,"highlight_end":26},{"text":"        pub ff_effects_max: ::__u32,","highlight_start":1,"highlight_end":37},{"text":"        pub absmax: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":40},{"text":"        pub absmin: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":40},{"text":"        pub absfuzz: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":41},{"text":"        pub absflat: [::__s32; ABS_CNT],","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// WARNING: The `PartialEq`, `Eq` and `Hash` implementations of this","highlight_start":1,"highlight_end":74},{"text":"    /// type are unsound and will be removed in the future.","highlight_start":1,"highlight_end":60},{"text":"    #[deprecated(","highlight_start":1,"highlight_end":18},{"text":"        note = \"this struct has unsafe trait implementations that will be \\","highlight_start":1,"highlight_end":76},{"text":"                removed in the future\",","highlight_start":1,"highlight_end":40},{"text":"        since = \"0.2.80\"","highlight_start":1,"highlight_end":25},{"text":"    )]","highlight_start":1,"highlight_end":7},{"text":"    pub struct af_alg_iv {","highlight_start":1,"highlight_end":27},{"text":"        pub ivlen: u32,","highlight_start":1,"highlight_end":24},{"text":"        pub iv: [::c_uchar; 0],","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // x32 compatibility","highlight_start":1,"highlight_end":25},{"text":"    // See https://sourceware.org/bugzilla/show_bug.cgi?id=21279","highlight_start":1,"highlight_end":65},{"text":"    pub struct mq_attr {","highlight_start":1,"highlight_end":25},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_flags: i64,","highlight_start":1,"highlight_end":27},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_maxmsg: i64,","highlight_start":1,"highlight_end":28},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_msgsize: i64,","highlight_start":1,"highlight_end":29},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pub mq_curmsgs: i64,","highlight_start":1,"highlight_end":29},{"text":"        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]","highlight_start":1,"highlight_end":73},{"text":"        pad: [i64; 4],","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_flags: ::c_long,","highlight_start":1,"highlight_end":32},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_maxmsg: ::c_long,","highlight_start":1,"highlight_end":33},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_msgsize: ::c_long,","highlight_start":1,"highlight_end":34},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pub mq_curmsgs: ::c_long,","highlight_start":1,"highlight_end":34},{"text":"        #[cfg(not(all(target_arch = \"x86_64\", target_pointer_width = \"32\")))]","highlight_start":1,"highlight_end":78},{"text":"        pad: [::c_long; 4],","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(libc_union)]","highlight_start":1,"highlight_end":23},{"text":"    pub union __c_anonymous_ifr_ifru {","highlight_start":1,"highlight_end":39},{"text":"        pub ifru_addr: ::sockaddr,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_dstaddr: ::sockaddr,","highlight_start":1,"highlight_end":38},{"text":"        pub ifru_broadaddr: ::sockaddr,","highlight_start":1,"highlight_end":40},{"text":"        pub ifru_netmask: ::sockaddr,","highlight_start":1,"highlight_end":38},{"text":"        pub ifru_hwaddr: ::sockaddr,","highlight_start":1,"highlight_end":37},{"text":"        pub ifru_flags: ::c_short,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_ifindex: ::c_int,","highlight_start":1,"highlight_end":35},{"text":"        pub ifru_metric: ::c_int,","highlight_start":1,"highlight_end":34},{"text":"        pub ifru_mtu: ::c_int,","highlight_start":1,"highlight_end":31},{"text":"        pub ifru_map: __c_anonymous_ifru_map,","highlight_start":1,"highlight_end":46},{"text":"        pub ifru_slave: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":48},{"text":"        pub ifru_newname: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":50},{"text":"        pub ifru_data: *mut ::c_char,","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct ifreq {","highlight_start":1,"highlight_end":23},{"text":"        /// interface name, e.g. \"en0\"","highlight_start":1,"highlight_end":39},{"text":"        pub ifr_name: [::c_char; ::IFNAMSIZ],","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(libc_union)]","highlight_start":1,"highlight_end":27},{"text":"        pub ifr_ifru: __c_anonymous_ifr_ifru,","highlight_start":1,"highlight_end":46},{"text":"        #[cfg(not(libc_union))]","highlight_start":1,"highlight_end":32},{"text":"        pub ifr_ifru: ::sockaddr,","highlight_start":1,"highlight_end":34},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct hwtstamp_config {","highlight_start":1,"highlight_end":33},{"text":"        pub flags: ::c_int,","highlight_start":1,"highlight_end":28},{"text":"        pub tx_type: ::c_int,","highlight_start":1,"highlight_end":30},{"text":"        pub rx_filter: ::c_int,","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub struct dirent64 {","highlight_start":1,"highlight_end":26},{"text":"        pub d_ino: ::ino64_t,","highlight_start":1,"highlight_end":30},{"text":"        pub d_off: ::off64_t,","highlight_start":1,"highlight_end":30},{"text":"        pub d_reclen: ::c_ushort,","highlight_start":1,"highlight_end":34},{"text":"        pub d_type: ::c_uchar,","highlight_start":1,"highlight_end":31},{"text":"        pub d_name: [::c_char; 256],","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:94:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            if #[cfg(libc_union)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs:690:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0ms_no_extra_traits! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct sockaddr_nl {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub nl_family: ::sa_family_t,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nl_pad: ::c_ushort,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m807\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `s_no_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs","byte_start":19737,"byte_end":19747,"line_start":768,"line_end":768,"column_start":11,"column_end":21,"is_primary":true,"text":[{"text":"    #[cfg(libc_union)]","highlight_start":11,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs:768:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(libc_union)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs","byte_start":21096,"byte_end":21106,"line_start":819,"line_end":819,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    if #[cfg(libc_union)] {","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs:819:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m819\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if #[cfg(libc_union)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_union`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":3243,"byte_end":3253,"line_start":94,"line_end":94,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"            if #[cfg(libc_union)] {","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":3062,"byte_end":3123,"line_start":90,"line_end":90,"column_start":9,"column_end":70,"is_primary":false,"text":[{"text":"        s_no_extra_traits!(it: $(#[$attr])* pub $t $i { $($field)* });","highlight_start":9,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs","byte_start":21119,"byte_end":21679,"line_start":820,"line_end":834,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        s_no_extra_traits! {","highlight_start":9,"highlight_end":29},{"text":"            // linux/can.h","highlight_start":1,"highlight_end":27},{"text":"            #[allow(missing_debug_implementations)]","highlight_start":1,"highlight_end":52},{"text":"            pub union __c_anonymous_sockaddr_can_can_addr {","highlight_start":1,"highlight_end":60},{"text":"                pub tp: __c_anonymous_sockaddr_can_tp,","highlight_start":1,"highlight_end":55},{"text":"                pub j1939: __c_anonymous_sockaddr_can_j1939,","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(missing_debug_implementations)]","highlight_start":1,"highlight_end":52},{"text":"            pub struct sockaddr_can {","highlight_start":1,"highlight_end":38},{"text":"                pub can_family: ::sa_family_t,","highlight_start":1,"highlight_end":47},{"text":"                pub can_ifindex: ::c_int,","highlight_start":1,"highlight_end":42},{"text":"                pub can_addr: __c_anonymous_sockaddr_can_can_addr,","highlight_start":1,"highlight_end":67},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"s_no_extra_traits!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":2946,"byte_end":2976,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"macro_rules! s_no_extra_traits {","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_union`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:94:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            if #[cfg(libc_union)] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs:820:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m820\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        s_no_extra_traits! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m821\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // linux/can.h\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m822\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            #[allow(missing_debug_implementations)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m823\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub union __c_anonymous_sockaddr_can_can_addr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_union)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_union)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `s_no_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_align`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":9302,"byte_end":9312,"line_start":283,"line_end":283,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"        #[cfg(libc_align)]","highlight_start":15,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs","byte_start":60430,"byte_end":60833,"line_start":1895,"line_end":1905,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"align_const! {","highlight_start":1,"highlight_end":15},{"text":"    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {","highlight_start":1,"highlight_end":77},{"text":"        size: [0; __SIZEOF_PTHREAD_MUTEX_T],","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {","highlight_start":1,"highlight_end":74},{"text":"        size: [0; __SIZEOF_PTHREAD_COND_T],","highlight_start":1,"highlight_end":44},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {","highlight_start":1,"highlight_end":80},{"text":"        size: [0; __SIZEOF_PTHREAD_RWLOCK_T],","highlight_start":1,"highlight_end":46},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"align_const!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":9150,"byte_end":9174,"line_start":279,"line_end":279,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! align_const {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_align`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:283:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[cfg(libc_align)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs:1895:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1895\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0malign_const! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1896\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1897\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        size: [0; __SIZEOF_PTHREAD_MUTEX_T],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1904\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1905\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `align_const` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc_align`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":9426,"byte_end":9436,"line_start":288,"line_end":288,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"        #[cfg(not(libc_align))]","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs","byte_start":60430,"byte_end":60833,"line_start":1895,"line_end":1905,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"align_const! {","highlight_start":1,"highlight_end":15},{"text":"    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {","highlight_start":1,"highlight_end":77},{"text":"        size: [0; __SIZEOF_PTHREAD_MUTEX_T],","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {","highlight_start":1,"highlight_end":74},{"text":"        size: [0; __SIZEOF_PTHREAD_COND_T],","highlight_start":1,"highlight_end":44},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {","highlight_start":1,"highlight_end":80},{"text":"        size: [0; __SIZEOF_PTHREAD_RWLOCK_T],","highlight_start":1,"highlight_end":46},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"align_const!","def_site_span":{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs","byte_start":9150,"byte_end":9174,"line_start":279,"line_end":279,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"macro_rules! align_const {","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc_align`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/macros.rs:288:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        #[cfg(not(libc_align))]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/unix/linux_like/linux/mod.rs:1895:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1895\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0malign_const! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1896\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1897\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        size: [0; __SIZEOF_PTHREAD_MUTEX_T],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1904\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1905\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m              [lints.rust]\u001b[0m\n\u001b[0m              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc_align)'] }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc_align)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `align_const` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}''',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-libc-0.2.149"
## script = '''
## FROM scratch AS cratesio-libc-0.2.149
## ADD --chmod=0664 --checksum=sha256:a08173bc88b7955d1b3145aa561539096c421ac8debde8cbc3612ec635fee29b \
##   https://static.crates.io/crates/libc/libc-0.2.149.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-libc-0.2.149-4a9d9e0eac4eef83"
## script = '''
## FROM rust-base AS dep-l-libc-0.2.149-4a9d9e0eac4eef83
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-libc-0.2.149,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="libc" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Raw FFI bindings to platform libraries like libc.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/libc" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="libc" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/libc" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.2.149" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="2" \
##         CARGO_PKG_VERSION_PATCH="149" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/libc-07b00c13ce95f0cf/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'libc' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' '-C' 'metadata=d934b3b9cd2ad191' '-C' 'extra-filename=-4a9d9e0eac4eef83' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' '--cfg' 'freebsd11' '--cfg' 'libc_priv_mod_use' '--cfg' 'libc_union' '--cfg' 'libc_const_size_of' '--cfg' 'libc_align' '--cfg' 'libc_int128' '--cfg' 'libc_core_cvoid' '--cfg' 'libc_packedN' '--cfg' 'libc_cfg_target_vendor' '--cfg' 'libc_non_exhaustive' '--cfg' 'libc_long_array' '--cfg' 'libc_ptr_addr_of' '--cfg' 'libc_underscore_const_names' '--cfg' 'libc_const_extern_fn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/libc-0.2.149/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4a9d9e0eac4eef83"
## script = """
## FROM scratch AS out-4a9d9e0eac4eef83
## COPY --from=dep-l-libc-0.2.149-4a9d9e0eac4eef83 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-4a9d9e0eac4eef83* /"""

FROM scratch AS cratesio-os_pipe-1.1.4
ADD --chmod=0664 --checksum=sha256:0ae859aa07428ca9a929b936690f8b12dc5f11dd8c6992a18ca93919f28bc177 \
  https://static.crates.io/crates/os_pipe/os_pipe-1.1.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-os_pipe-1.1.4-e5c39a7d0ce96cb7
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-os_pipe-1.1.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4 \
  --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="os_pipe" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jack O'Connor" \
        CARGO_PKG_DESCRIPTION="a cross-platform library for opening OS pipes" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="os_pipe" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/oconnor663/os_pipe.rs" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.1.4" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'os_pipe' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("io_safety"))' '-C' 'metadata=55a65a2466bc3f1f' '-C' 'extra-filename=-e5c39a7d0ce96cb7' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'libc=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-e5c39a7d0ce96cb7
COPY --from=dep-l-os_pipe-1.1.4-e5c39a7d0ce96cb7 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-e5c39a7d0ce96cb7* /

## this = "e5c39a7d0ce96cb7"
## deps = ["4a9d9e0eac4eef83"]
## short_externs = ["libc-4a9d9e0eac4eef83"]
## writes = [
##     "deps/os_pipe-e5c39a7d0ce96cb7.d",
##     "deps/libos_pipe-e5c39a7d0ce96cb7.rmeta",
##     "deps/libos_pipe-e5c39a7d0ce96cb7.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/os_pipe-e5c39a7d0ce96cb7.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-os_pipe-1.1.4"
## script = '''
## FROM scratch AS cratesio-os_pipe-1.1.4
## ADD --chmod=0664 --checksum=sha256:0ae859aa07428ca9a929b936690f8b12dc5f11dd8c6992a18ca93919f28bc177 \
##   https://static.crates.io/crates/os_pipe/os_pipe-1.1.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-os_pipe-1.1.4-e5c39a7d0ce96cb7"
## script = '''
## FROM rust-base AS dep-l-os_pipe-1.1.4-e5c39a7d0ce96cb7
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-os_pipe-1.1.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4 \
##   --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="os_pipe" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jack O'Connor" \
##         CARGO_PKG_DESCRIPTION="a cross-platform library for opening OS pipes" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="os_pipe" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/oconnor663/os_pipe.rs" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.1.4" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'os_pipe' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("io_safety"))' '-C' 'metadata=55a65a2466bc3f1f' '-C' 'extra-filename=-e5c39a7d0ce96cb7' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'libc=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/os_pipe-1.1.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-e5c39a7d0ce96cb7"
## script = """
## FROM scratch AS out-e5c39a7d0ce96cb7
## COPY --from=dep-l-os_pipe-1.1.4-e5c39a7d0ce96cb7 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-e5c39a7d0ce96cb7* /"""

FROM scratch AS cratesio-shared_child-1.0.0
ADD --chmod=0664 --checksum=sha256:b0d94659ad3c2137fef23ae75b03d5241d633f8acded53d672decfa0e6e0caef \
  https://static.crates.io/crates/shared_child/shared_child-1.0.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-shared_child-1.0.0-bcc226464ecacfc6
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-shared_child-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0 \
  --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="shared_child" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="jacko" \
        CARGO_PKG_DESCRIPTION="a library for using child processes from multiple threads" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="shared_child" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/oconnor663/shared_child.rs" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'shared_child' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=357d5f4a4111de0d' '-C' 'extra-filename=-bcc226464ecacfc6' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'libc=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-bcc226464ecacfc6
COPY --from=dep-l-shared_child-1.0.0-bcc226464ecacfc6 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-bcc226464ecacfc6* /

## this = "bcc226464ecacfc6"
## deps = ["4a9d9e0eac4eef83"]
## short_externs = ["libc-4a9d9e0eac4eef83"]
## writes = [
##     "deps/shared_child-bcc226464ecacfc6.d",
##     "deps/libshared_child-bcc226464ecacfc6.rmeta",
##     "deps/libshared_child-bcc226464ecacfc6.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/shared_child-bcc226464ecacfc6.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-shared_child-1.0.0"
## script = '''
## FROM scratch AS cratesio-shared_child-1.0.0
## ADD --chmod=0664 --checksum=sha256:b0d94659ad3c2137fef23ae75b03d5241d633f8acded53d672decfa0e6e0caef \
##   https://static.crates.io/crates/shared_child/shared_child-1.0.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-shared_child-1.0.0-bcc226464ecacfc6"
## script = '''
## FROM rust-base AS dep-l-shared_child-1.0.0-bcc226464ecacfc6
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-shared_child-1.0.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0 \
##   --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="shared_child" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="jacko" \
##         CARGO_PKG_DESCRIPTION="a library for using child processes from multiple threads" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="shared_child" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/oconnor663/shared_child.rs" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'shared_child' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=357d5f4a4111de0d' '-C' 'extra-filename=-bcc226464ecacfc6' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'libc=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shared_child-1.0.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-bcc226464ecacfc6"
## script = """
## FROM scratch AS out-bcc226464ecacfc6
## COPY --from=dep-l-shared_child-1.0.0-bcc226464ecacfc6 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-bcc226464ecacfc6* /"""

FROM scratch AS cratesio-duct-0.13.6
ADD --chmod=0664 --checksum=sha256:37ae3fc31835f74c2a7ceda3aeede378b0ae2e74c8f1c36559fcc9ae2a4e7d3e \
  https://static.crates.io/crates/duct/duct-0.13.6.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-duct-0.13.6-dede1a3d65ebb862
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-duct-0.13.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6 \
  --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
  --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta,source=/libonce_cell-4f105e9db8e23ef7.rmeta \
  --mount=from=out-e5c39a7d0ce96cb7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta,source=/libos_pipe-e5c39a7d0ce96cb7.rmeta \
  --mount=from=out-bcc226464ecacfc6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta,source=/libshared_child-bcc226464ecacfc6.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="duct" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6/Cargo.toml" \
        CARGO_PKG_AUTHORS="oconnor663@gmail.com" \
        CARGO_PKG_DESCRIPTION="a library for running child processes" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="duct" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/oconnor663/duct.rs" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.13.6" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="13" \
        CARGO_PKG_VERSION_PATCH="6" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'duct' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=4b0ca47b332798c1' '-C' 'extra-filename=-dede1a3d65ebb862' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'libc=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta' '--extern' 'once_cell=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta' '--extern' 'os_pipe=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta' '--extern' 'shared_child=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-dede1a3d65ebb862
COPY --from=dep-l-duct-0.13.6-dede1a3d65ebb862 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-dede1a3d65ebb862* /

## this = "dede1a3d65ebb862"
## deps = [
##     "4a9d9e0eac4eef83",
##     "4f105e9db8e23ef7",
##     "e5c39a7d0ce96cb7",
##     "bcc226464ecacfc6",
## ]
## short_externs = [
##     "libc-4a9d9e0eac4eef83",
##     "once_cell-4f105e9db8e23ef7",
##     "os_pipe-e5c39a7d0ce96cb7",
##     "shared_child-bcc226464ecacfc6",
## ]
## writes = [
##     "deps/duct-dede1a3d65ebb862.d",
##     "deps/libduct-dede1a3d65ebb862.rmeta",
##     "deps/libduct-dede1a3d65ebb862.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/duct-dede1a3d65ebb862.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-duct-0.13.6"
## script = '''
## FROM scratch AS cratesio-duct-0.13.6
## ADD --chmod=0664 --checksum=sha256:37ae3fc31835f74c2a7ceda3aeede378b0ae2e74c8f1c36559fcc9ae2a4e7d3e \
##   https://static.crates.io/crates/duct/duct-0.13.6.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-duct-0.13.6-dede1a3d65ebb862"
## script = '''
## FROM rust-base AS dep-l-duct-0.13.6-dede1a3d65ebb862
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-duct-0.13.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6 \
##   --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
##   --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta,source=/libonce_cell-4f105e9db8e23ef7.rmeta \
##   --mount=from=out-e5c39a7d0ce96cb7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta,source=/libos_pipe-e5c39a7d0ce96cb7.rmeta \
##   --mount=from=out-bcc226464ecacfc6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta,source=/libshared_child-bcc226464ecacfc6.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="duct" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6/Cargo.toml" \
##         CARGO_PKG_AUTHORS="oconnor663@gmail.com" \
##         CARGO_PKG_DESCRIPTION="a library for running child processes" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="duct" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/oconnor663/duct.rs" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.13.6" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="13" \
##         CARGO_PKG_VERSION_PATCH="6" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'duct' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=4b0ca47b332798c1' '-C' 'extra-filename=-dede1a3d65ebb862' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'libc=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta' '--extern' 'once_cell=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta' '--extern' 'os_pipe=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta' '--extern' 'shared_child=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/duct-0.13.6/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-dede1a3d65ebb862"
## script = """
## FROM scratch AS out-dede1a3d65ebb862
## COPY --from=dep-l-duct-0.13.6-dede1a3d65ebb862 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-dede1a3d65ebb862* /"""

FROM scratch AS cratesio-fs-err-2.9.0
ADD --chmod=0664 --checksum=sha256:0845fa252299212f0389d64ba26f34fa32cfe41588355f21ed507c59a0f64541 \
  https://static.crates.io/crates/fs-err/fs-err-2.9.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-fs-err-2.9.0-ab39b5b441440c4a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-fs-err-2.9.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="fs_err" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Hickman <andrew.hickman1@sky.com>" \
        CARGO_PKG_DESCRIPTION="A drop-in replacement for std::fs with more helpful error messages." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="fs-err" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/andrewhickman/fs-err" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="2.9.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="9" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'fs_err' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("io_safety", "tokio"))' '-C' 'metadata=365e18bec5a3ca4f' '-C' 'extra-filename=-ab39b5b441440c4a' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ab39b5b441440c4a
COPY --from=dep-l-fs-err-2.9.0-ab39b5b441440c4a /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-ab39b5b441440c4a* /

## this = "ab39b5b441440c4a"
## writes = [
##     "deps/fs_err-ab39b5b441440c4a.d",
##     "deps/libfs_err-ab39b5b441440c4a.rmeta",
##     "deps/libfs_err-ab39b5b441440c4a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/fs_err-ab39b5b441440c4a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-fs-err-2.9.0"
## script = '''
## FROM scratch AS cratesio-fs-err-2.9.0
## ADD --chmod=0664 --checksum=sha256:0845fa252299212f0389d64ba26f34fa32cfe41588355f21ed507c59a0f64541 \
##   https://static.crates.io/crates/fs-err/fs-err-2.9.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-fs-err-2.9.0-ab39b5b441440c4a"
## script = '''
## FROM rust-base AS dep-l-fs-err-2.9.0-ab39b5b441440c4a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-fs-err-2.9.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="fs_err" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Hickman <andrew.hickman1@sky.com>" \
##         CARGO_PKG_DESCRIPTION="A drop-in replacement for std::fs with more helpful error messages." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="fs-err" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/andrewhickman/fs-err" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="2.9.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="9" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'fs_err' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("io_safety", "tokio"))' '-C' 'metadata=365e18bec5a3ca4f' '-C' 'extra-filename=-ab39b5b441440c4a' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/fs-err-2.9.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ab39b5b441440c4a"
## script = """
## FROM scratch AS out-ab39b5b441440c4a
## COPY --from=dep-l-fs-err-2.9.0-ab39b5b441440c4a /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-ab39b5b441440c4a* /"""

FROM scratch AS cratesio-glob-0.3.1
ADD --chmod=0664 --checksum=sha256:d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b \
  https://static.crates.io/crates/glob/glob-0.3.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-glob-0.3.1-f5d2c2efec8db340
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-glob-0.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="glob" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="Support for matching file paths against Unix shell style patterns.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/glob" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="glob" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/glob" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'glob' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c0e7a5cdc1b3012a' '-C' 'extra-filename=-f5d2c2efec8db340' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-f5d2c2efec8db340
COPY --from=dep-l-glob-0.3.1-f5d2c2efec8db340 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-f5d2c2efec8db340* /

## this = "f5d2c2efec8db340"
## writes = [
##     "deps/glob-f5d2c2efec8db340.d",
##     "deps/libglob-f5d2c2efec8db340.rmeta",
##     "deps/libglob-f5d2c2efec8db340.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/glob-f5d2c2efec8db340.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-glob-0.3.1"
## script = '''
## FROM scratch AS cratesio-glob-0.3.1
## ADD --chmod=0664 --checksum=sha256:d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b \
##   https://static.crates.io/crates/glob/glob-0.3.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-glob-0.3.1-f5d2c2efec8db340"
## script = '''
## FROM rust-base AS dep-l-glob-0.3.1-f5d2c2efec8db340
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-glob-0.3.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="glob" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="Support for matching file paths against Unix shell style patterns.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/glob" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="glob" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/glob" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'glob' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=c0e7a5cdc1b3012a' '-C' 'extra-filename=-f5d2c2efec8db340' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/glob-0.3.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-f5d2c2efec8db340"
## script = """
## FROM scratch AS out-f5d2c2efec8db340
## COPY --from=dep-l-glob-0.3.1-f5d2c2efec8db340 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-f5d2c2efec8db340* /"""

FROM scratch AS cratesio-bitflags-2.4.1
ADD --chmod=0664 --checksum=sha256:327762f6e5a765692301e5bb513e0d9fef63be86bbc14528052b1cd3e6f03e07 \
  https://static.crates.io/crates/bitflags/bitflags-2.4.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bitflags-2.4.1-8921c69f98e179ab
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-bitflags-2.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bitflags" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers" \
        CARGO_PKG_DESCRIPTION="A macro to generate structures which behave like bitflags.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/bitflags/bitflags" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bitflags" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bitflags/bitflags" \
        CARGO_PKG_RUST_VERSION="1.56.0" \
        CARGO_PKG_VERSION="2.4.1" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bitflags' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "bytemuck", "compiler_builtins", "core", "example_generated", "rustc-dep-of-std", "serde", "std"))' '-C' 'metadata=d45623449fa1bd51' '-C' 'extra-filename=-8921c69f98e179ab' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-8921c69f98e179ab
COPY --from=dep-l-bitflags-2.4.1-8921c69f98e179ab /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-8921c69f98e179ab* /

## this = "8921c69f98e179ab"
## writes = [
##     "deps/bitflags-8921c69f98e179ab.d",
##     "deps/libbitflags-8921c69f98e179ab.rmeta",
##     "deps/libbitflags-8921c69f98e179ab.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/bitflags-8921c69f98e179ab.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused import: `external::__private::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs","byte_start":7222,"byte_end":7244,"line_start":255,"line_end":255,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"    pub use crate::{external::__private::*, traits::__private::*};","highlight_start":21,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs","byte_start":7222,"byte_end":7246,"line_start":255,"line_end":255,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"    pub use crate::{external::__private::*, traits::__private::*};","highlight_start":21,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs","byte_start":7221,"byte_end":7222,"line_start":255,"line_end":255,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    pub use crate::{external::__private::*, traits::__private::*};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs","byte_start":7266,"byte_end":7267,"line_start":255,"line_end":255,"column_start":65,"column_end":66,"is_primary":true,"text":[{"text":"    pub use crate::{external::__private::*, traits::__private::*};","highlight_start":65,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `external::__private::*`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs:255:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use crate::{external::__private::*, traits::__private::*};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"struct `AsDisplay` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/parser.rs","byte_start":1807,"byte_end":1816,"line_start":80,"line_end":80,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"pub(crate) struct AsDisplay<'a, B>(pub(crate) &'a B);","highlight_start":19,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `AsDisplay` is never constructed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/parser.rs:80:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) struct AsDisplay<'a, B>(pub(crate) &'a B);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bitflags-2.4.1"
## script = '''
## FROM scratch AS cratesio-bitflags-2.4.1
## ADD --chmod=0664 --checksum=sha256:327762f6e5a765692301e5bb513e0d9fef63be86bbc14528052b1cd3e6f03e07 \
##   https://static.crates.io/crates/bitflags/bitflags-2.4.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bitflags-2.4.1-8921c69f98e179ab"
## script = '''
## FROM rust-base AS dep-l-bitflags-2.4.1-8921c69f98e179ab
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-bitflags-2.4.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bitflags" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers" \
##         CARGO_PKG_DESCRIPTION="A macro to generate structures which behave like bitflags.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/bitflags/bitflags" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bitflags" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bitflags/bitflags" \
##         CARGO_PKG_RUST_VERSION="1.56.0" \
##         CARGO_PKG_VERSION="2.4.1" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bitflags' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "bytemuck", "compiler_builtins", "core", "example_generated", "rustc-dep-of-std", "serde", "std"))' '-C' 'metadata=d45623449fa1bd51' '-C' 'extra-filename=-8921c69f98e179ab' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bitflags-2.4.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-8921c69f98e179ab"
## script = """
## FROM scratch AS out-8921c69f98e179ab
## COPY --from=dep-l-bitflags-2.4.1-8921c69f98e179ab /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-8921c69f98e179ab* /"""

FROM scratch AS cratesio-linux-raw-sys-0.4.10
ADD --chmod=0664 --checksum=sha256:da2479e8c062e40bf0066ffa0bc823de0a9368974af99c9f6df941d2c231e03f \
  https://static.crates.io/crates/linux-raw-sys/linux-raw-sys-0.4.10.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-linux-raw-sys-0.4.10-38fbb57bea94d5d0
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-linux-raw-sys-0.4.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="linux_raw_sys" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10/Cargo.toml" \
        CARGO_PKG_AUTHORS="Dan Gohman <dev@sunfishcode.online>" \
        CARGO_PKG_DESCRIPTION="Generated bindings for Linux's userspace API" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="linux-raw-sys" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/sunfishcode/linux-raw-sys" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.4.10" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="10" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'linux_raw_sys' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="elf"' '--cfg' 'feature="errno"' '--cfg' 'feature="general"' '--cfg' 'feature="ioctl"' '--cfg' 'feature="no_std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "default", "elf", "errno", "general", "if_ether", "io_uring", "ioctl", "net", "netlink", "no_std", "prctl", "rustc-dep-of-std", "std", "system"))' '-C' 'metadata=b260cbb66e251116' '-C' 'extra-filename=-38fbb57bea94d5d0' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-38fbb57bea94d5d0
COPY --from=dep-l-linux-raw-sys-0.4.10-38fbb57bea94d5d0 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-38fbb57bea94d5d0* /

## this = "38fbb57bea94d5d0"
## writes = [
##     "deps/linux_raw_sys-38fbb57bea94d5d0.d",
##     "deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta",
##     "deps/liblinux_raw_sys-38fbb57bea94d5d0.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/linux_raw_sys-38fbb57bea94d5d0.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-linux-raw-sys-0.4.10"
## script = '''
## FROM scratch AS cratesio-linux-raw-sys-0.4.10
## ADD --chmod=0664 --checksum=sha256:da2479e8c062e40bf0066ffa0bc823de0a9368974af99c9f6df941d2c231e03f \
##   https://static.crates.io/crates/linux-raw-sys/linux-raw-sys-0.4.10.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-linux-raw-sys-0.4.10-38fbb57bea94d5d0"
## script = '''
## FROM rust-base AS dep-l-linux-raw-sys-0.4.10-38fbb57bea94d5d0
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-linux-raw-sys-0.4.10,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="linux_raw_sys" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Dan Gohman <dev@sunfishcode.online>" \
##         CARGO_PKG_DESCRIPTION="Generated bindings for Linux's userspace API" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="linux-raw-sys" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/sunfishcode/linux-raw-sys" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.4.10" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="10" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'linux_raw_sys' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="elf"' '--cfg' 'feature="errno"' '--cfg' 'feature="general"' '--cfg' 'feature="ioctl"' '--cfg' 'feature="no_std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "default", "elf", "errno", "general", "if_ether", "io_uring", "ioctl", "net", "netlink", "no_std", "prctl", "rustc-dep-of-std", "std", "system"))' '-C' 'metadata=b260cbb66e251116' '-C' 'extra-filename=-38fbb57bea94d5d0' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/linux-raw-sys-0.4.10/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-38fbb57bea94d5d0"
## script = """
## FROM scratch AS out-38fbb57bea94d5d0
## COPY --from=dep-l-linux-raw-sys-0.4.10-38fbb57bea94d5d0 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-38fbb57bea94d5d0* /"""

FROM scratch AS cratesio-rustix-0.38.21
ADD --chmod=0664 --checksum=sha256:2b426b0506e5d50a7d8dafcf2e81471400deb602392c7dd110815afb4eaf02a3 \
  https://static.crates.io/crates/rustix/rustix-0.38.21.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rustix-0.38.21-3404a66ca545b301
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-rustix-0.38.21,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21 \
  --mount=from=crate_out-e00335469bb9fb6d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out \
  --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta,source=/libbitflags-8921c69f98e179ab.rmeta \
  --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta,source=/liblinux_raw_sys-38fbb57bea94d5d0.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rustix" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/Cargo.toml" \
        CARGO_PKG_AUTHORS="Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>" \
        CARGO_PKG_DESCRIPTION="Safe Rust bindings to POSIX/Unix/Linux/Winsock2-like syscalls" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustix" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/bytecodealliance/rustix" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.38.21" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="38" \
        CARGO_PKG_VERSION_PATCH="21" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rustix' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="termios"' '--cfg' 'feature="use-libc-auxv"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all-apis", "alloc", "cc", "default", "event", "fs", "io_uring", "itoa", "libc", "libc_errno", "linux_4_11", "linux_latest", "mm", "mount", "net", "once_cell", "param", "pipe", "process", "procfs", "pty", "rand", "runtime", "rustc-dep-of-std", "shm", "std", "stdio", "system", "termios", "thread", "time", "use-explicitly-provided-auxv", "use-libc", "use-libc-auxv"))' '-C' 'metadata=93436a35536542cc' '-C' 'extra-filename=-3404a66ca545b301' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'bitflags=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta' '--extern' 'linux_raw_sys=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta' '--cap-lints' 'warn' '--cfg' 'static_assertions' '--cfg' 'linux_raw' '--cfg' 'linux_like' '--cfg' 'linux_kernel' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-3404a66ca545b301
COPY --from=dep-l-rustix-0.38.21-3404a66ca545b301 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-3404a66ca545b301* /

## this = "3404a66ca545b301"
## deps = [
##     "8921c69f98e179ab",
##     "38fbb57bea94d5d0",
## ]
## short_externs = [
##     "bitflags-8921c69f98e179ab",
##     "linux_raw_sys-38fbb57bea94d5d0",
## ]
## writes = ["deps/rustix-3404a66ca545b301.d"]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/rustix-3404a66ca545b301.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4409,"byte_end":4418,"line_start":101,"line_end":101,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(linux_raw, deny(unsafe_code))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected names are: `docsrs`, `feature`, and `test` and 31 more","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:101:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(linux_raw, deny(unsafe_code))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: expected names are: `docsrs`, `feature`, and `test` and 31 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustc_attrs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4452,"byte_end":4463,"line_start":102,"line_end":102,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"#![cfg_attr(rustc_attrs, feature(rustc_attrs))]","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustc_attrs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:102:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(rustc_attrs, feature(rustc_attrs))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4500,"byte_end":4507,"line_start":103,"line_end":103,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(doc_cfg, feature(doc_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:103:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(doc_cfg, feature(doc_cfg))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wasi_ext`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4544,"byte_end":4552,"line_start":104,"line_end":104,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"#![cfg_attr(all(wasi_ext, target_os = \"wasi\", feature = \"std\"), feature(wasi_ext))]","highlight_start":17,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wasi_ext)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wasi_ext)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wasi_ext`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:104:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(all(wasi_ext, target_os = \"wasi\", feature = \"std\"), feature(wasi_ext))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wasi_ext)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wasi_ext)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `core_ffi_c`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4624,"byte_end":4634,"line_start":105,"line_end":105,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"#![cfg_attr(core_ffi_c, feature(core_ffi_c))]","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_ffi_c)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_ffi_c)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `core_ffi_c`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:105:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(core_ffi_c, feature(core_ffi_c))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_ffi_c)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_ffi_c)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `core_c_str`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4670,"byte_end":4680,"line_start":106,"line_end":106,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"#![cfg_attr(core_c_str, feature(core_c_str))]","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_c_str)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_c_str)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `core_c_str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:106:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(core_c_str, feature(core_c_str))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_c_str)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_c_str)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `alloc_c_string`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4739,"byte_end":4753,"line_start":107,"line_end":107,"column_start":36,"column_end":50,"is_primary":true,"text":[{"text":"#![cfg_attr(all(feature = \"alloc\", alloc_c_string), feature(alloc_c_string))]","highlight_start":36,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(alloc_c_string)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(alloc_c_string)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `alloc_c_string`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:107:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(all(feature = \"alloc\", alloc_c_string), feature(alloc_c_string))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(alloc_c_string)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(alloc_c_string)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `alloc_ffi`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":4817,"byte_end":4826,"line_start":108,"line_end":108,"column_start":36,"column_end":45,"is_primary":true,"text":[{"text":"#![cfg_attr(all(feature = \"alloc\", alloc_ffi), feature(alloc_ffi))]","highlight_start":36,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(alloc_ffi)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(alloc_ffi)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `alloc_ffi`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:108:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(all(feature = \"alloc\", alloc_ffi), feature(alloc_ffi))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(alloc_ffi)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(alloc_ffi)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `core_intrinsics`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":5069,"byte_end":5084,"line_start":113,"line_end":113,"column_start":39,"column_end":54,"is_primary":true,"text":[{"text":"    any(feature = \"rustc-dep-of-std\", core_intrinsics),","highlight_start":39,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_intrinsics)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_intrinsics)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `core_intrinsics`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:113:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    any(feature = \"rustc-dep-of-std\", core_intrinsics),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_intrinsics)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_intrinsics)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `asm_experimental_arch`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":5131,"byte_end":5152,"line_start":116,"line_end":116,"column_start":13,"column_end":34,"is_primary":true,"text":[{"text":"#![cfg_attr(asm_experimental_arch, feature(asm_experimental_arch))]","highlight_start":13,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(asm_experimental_arch)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(asm_experimental_arch)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `asm_experimental_arch`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:116:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(asm_experimental_arch, feature(asm_experimental_arch))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(asm_experimental_arch)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(asm_experimental_arch)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `static_assertions`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":5931,"byte_end":5948,"line_start":134,"line_end":134,"column_start":17,"column_end":34,"is_primary":true,"text":[{"text":"#[cfg(all(test, static_assertions))]","highlight_start":17,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(static_assertions)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(static_assertions)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `static_assertions`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:134:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, static_assertions))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(static_assertions)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(static_assertions)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `static_assertions`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":6042,"byte_end":6059,"line_start":138,"line_end":138,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"#[cfg(all(test, not(static_assertions)))]","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(static_assertions)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(static_assertions)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `static_assertions`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:138:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(test, not(static_assertions)))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(static_assertions)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(static_assertions)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":6767,"byte_end":6776,"line_start":165,"line_end":165,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    all(linux_raw, feature = \"use-libc-auxv\"),","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:165:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    all(linux_raw, feature = \"use-libc-auxv\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":6814,"byte_end":6818,"line_start":166,"line_end":166,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    all(libc, not(any(windows, target_os = \"espidf\", target_os = \"wasi\")))","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":6814,"byte_end":6818,"line_start":166,"line_end":166,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    all(libc, not(any(windows, target_os = \"espidf\", target_os = \"wasi\")))","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"feature = \"libc\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:166:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    all(libc, not(any(windows, target_os = \"espidf\", target_os = \"wasi\")))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"libc\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs","byte_start":317,"byte_end":326,"line_start":9,"line_end":9,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"#![cfg_attr(linux_raw, allow(unsafe_code))]","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(linux_raw, allow(unsafe_code))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m           [lints.rust]\u001b[0m\n\u001b[0m           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `libc`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":6963,"byte_end":6967,"line_start":172,"line_end":172,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg_attr(libc, path = \"backend/libc/mod.rs\")]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":6963,"byte_end":6967,"line_start":172,"line_end":172,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg_attr(libc, path = \"backend/libc/mod.rs\")]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":"feature = \"libc\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `libc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:172:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(libc, path = \"backend/libc/mod.rs\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `feature = \"libc\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(libc)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(libc)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":7011,"byte_end":7020,"line_start":173,"line_end":173,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"#[cfg_attr(linux_raw, path = \"backend/linux_raw/mod.rs\")]","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:173:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(linux_raw, path = \"backend/linux_raw/mod.rs\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `wasi`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":7069,"byte_end":7073,"line_start":174,"line_end":174,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg_attr(wasi, path = \"backend/wasi/mod.rs\")]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wasi)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wasi)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":7069,"byte_end":7073,"line_start":174,"line_end":174,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg_attr(wasi, path = \"backend/wasi/mod.rs\")]","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":"target_os = \"wasi\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `wasi`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:174:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(wasi, path = \"backend/wasi/mod.rs\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `target_os = \"wasi\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(wasi)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(wasi)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":8012,"byte_end":8024,"line_start":204,"line_end":204,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:204:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":8318,"byte_end":8330,"line_start":213,"line_end":213,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:213:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `doc_cfg`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":10072,"byte_end":10079,"line_start":273,"line_end":273,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg_attr(doc_cfg, doc(cfg(feature = \"termios\")))]","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `doc_cfg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:273:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(doc_cfg, doc(cfg(feature = \"termios\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":10768,"byte_end":10780,"line_start":294,"line_end":294,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:294:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":11021,"byte_end":11030,"line_start":303,"line_end":303,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    linux_raw,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:303:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    linux_raw,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":11484,"byte_end":11493,"line_start":320,"line_end":320,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    linux_raw,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:320:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    linux_raw,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":12106,"byte_end":12109,"line_start":343,"line_end":343,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    all(bsd, feature = \"event\"),","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:343:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    all(bsd, feature = \"event\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":12139,"byte_end":12151,"line_start":344,"line_end":344,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    all(linux_kernel, feature = \"net\")","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:344:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    all(linux_kernel, feature = \"net\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":12392,"byte_end":12395,"line_start":351,"line_end":351,"column_start":57,"column_end":60,"is_primary":true,"text":[{"text":"#[cfg(any(feature = \"process\", feature = \"runtime\", all(bsd, feature = \"event\")))]","highlight_start":57,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:351:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(feature = \"process\", feature = \"runtime\", all(bsd, feature = \"event\")))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":12571,"byte_end":12580,"line_start":360,"line_end":360,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        linux_raw,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:360:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        linux_raw,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":12994,"byte_end":13003,"line_start":378,"line_end":378,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        linux_raw,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:378:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        linux_raw,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs","byte_start":13265,"byte_end":13277,"line_start":388,"line_end":388,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    all(linux_kernel, feature = \"net\")","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs:388:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m388\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    all(linux_kernel, feature = \"net\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs","byte_start":4840,"byte_end":4849,"line_start":118,"line_end":118,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(linux_raw)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs:118:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_raw)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs","byte_start":5683,"byte_end":5695,"line_start":146,"line_end":146,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(not(linux_kernel))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs:146:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(not(linux_kernel))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs","byte_start":6144,"byte_end":6156,"line_start":162,"line_end":162,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/weak.rs:162:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `thumb_mode`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/arch/mod.rs","byte_start":1050,"byte_end":1060,"line_start":27,"line_end":27,"column_start":41,"column_end":51,"is_primary":true,"text":[{"text":"#[cfg_attr(all(target_arch = \"arm\", not(thumb_mode)), path = \"arm.rs\")]","highlight_start":41,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thumb_mode)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thumb_mode)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `thumb_mode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/arch/mod.rs:27:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(all(target_arch = \"arm\", not(thumb_mode)), path = \"arm.rs\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thumb_mode)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thumb_mode)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `thumb_mode`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/arch/mod.rs","byte_start":1118,"byte_end":1128,"line_start":28,"line_end":28,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"#[cfg_attr(all(target_arch = \"arm\", thumb_mode), path = \"thumb.rs\")]","highlight_start":37,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thumb_mode)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thumb_mode)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `thumb_mode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/arch/mod.rs:28:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(all(target_arch = \"arm\", thumb_mode), path = \"thumb.rs\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(thumb_mode)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(thumb_mode)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustc_attrs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs","byte_start":304,"byte_end":315,"line_start":11,"line_end":11,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"#![cfg_attr(not(rustc_attrs), allow(unused_unsafe))]","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustc_attrs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs:11:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(rustc_attrs), allow(unused_unsafe))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustc_attrs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs","byte_start":1678,"byte_end":1689,"line_start":50,"line_end":50,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg_attr(rustc_attrs, rustc_layout_scalar_valid_range_start(0xf001))]","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustc_attrs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs:50:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(rustc_attrs, rustc_layout_scalar_valid_range_start(0xf001))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `rustc_attrs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs","byte_start":1750,"byte_end":1761,"line_start":51,"line_end":51,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg_attr(rustc_attrs, rustc_layout_scalar_valid_range_end(0xffff))]","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `rustc_attrs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs:51:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(rustc_attrs, rustc_layout_scalar_valid_range_end(0xffff))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(rustc_attrs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(rustc_attrs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `core_intrinsics`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs","byte_start":6425,"byte_end":6440,"line_start":191,"line_end":191,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"        #[cfg(core_intrinsics)]","highlight_start":15,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_intrinsics)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_intrinsics)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `core_intrinsics`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs:191:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(core_intrinsics)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_intrinsics)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_intrinsics)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `core_intrinsics`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs","byte_start":7403,"byte_end":7418,"line_start":220,"line_end":220,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"        #[cfg(core_intrinsics)]","highlight_start":15,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_intrinsics)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_intrinsics)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `core_intrinsics`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/backend/linux_raw/io/errno.rs:220:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        #[cfg(core_intrinsics)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(core_intrinsics)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(core_intrinsics)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `apple`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/ioctl.rs","byte_start":692,"byte_end":697,"line_start":19,"line_end":19,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"#[cfg(apple)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(apple)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(apple)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found config with similar value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/ioctl.rs","byte_start":692,"byte_end":697,"line_start":19,"line_end":19,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"#[cfg(apple)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"target_vendor = \"apple\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `apple`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/ioctl.rs:19:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(apple)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: found config with similar value: `target_vendor = \"apple\"`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(apple)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(apple)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/read_write.rs","byte_start":243,"byte_end":255,"line_start":10,"line_end":10,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/read_write.rs:10:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/read_write.rs","byte_start":8684,"byte_end":8696,"line_start":245,"line_end":245,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/read_write.rs:245:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/read_write.rs","byte_start":9193,"byte_end":9205,"line_start":264,"line_end":264,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/io/read_write.rs:264:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":816,"byte_end":828,"line_start":21,"line_end":21,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:21:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":830,"byte_end":833,"line_start":21,"line_end":21,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:21:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":896,"byte_end":908,"line_start":28,"line_end":28,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:28:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":929,"byte_end":932,"line_start":31,"line_end":31,"column_start":7,"column_end":10,"is_primary":true,"text":[{"text":"#[cfg(bsd)]","highlight_start":7,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:31:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(bsd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":951,"byte_end":963,"line_start":34,"line_end":34,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"#[cfg(linux_kernel)]","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:34:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_kernel)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":996,"byte_end":999,"line_start":37,"line_end":37,"column_start":7,"column_end":10,"is_primary":true,"text":[{"text":"#[cfg(bsd)]","highlight_start":7,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:37:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(bsd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":10355,"byte_end":10364,"line_start":307,"line_end":307,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"#[cfg(linux_raw)]","highlight_start":7,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:307:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(linux_raw)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":10486,"byte_end":10495,"line_start":312,"line_end":312,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    not(linux_raw),","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:312:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(linux_raw),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":10650,"byte_end":10659,"line_start":320,"line_end":320,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    not(linux_raw),","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:320:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    not(linux_raw),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_raw`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":10819,"byte_end":10828,"line_start":328,"line_end":328,"column_start":15,"column_end":24,"is_primary":true,"text":[{"text":"#[cfg(all(not(linux_raw), target_os = \"android\"))]","highlight_start":15,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_raw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:328:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(all(not(linux_raw), target_os = \"android\"))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_raw)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_raw)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":10958,"byte_end":10961,"line_start":333,"line_end":333,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    bsd,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:333:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    bsd,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `solarish`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs","byte_start":11170,"byte_end":11178,"line_start":343,"line_end":343,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    solarish,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(solarish)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(solarish)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `solarish`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/mod.rs:343:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    solarish,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(solarish)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(solarish)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":4570,"byte_end":4582,"line_start":172,"line_end":172,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:172:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":4584,"byte_end":4587,"line_start":172,"line_end":172,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:172:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":4669,"byte_end":4681,"line_start":175,"line_end":175,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:175:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":4683,"byte_end":4686,"line_start":175,"line_end":175,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:175:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":4969,"byte_end":4981,"line_start":183,"line_end":183,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:183:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `bsd`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":4983,"byte_end":4986,"line_start":183,"line_end":183,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `bsd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:183:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bsd)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bsd)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `linux_kernel`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs","byte_start":5069,"byte_end":5081,"line_start":186,"line_end":186,"column_start":11,"column_end":23,"is_primary":true,"text":[{"text":"#[cfg(any(linux_kernel, bsd))]","highlight_start":11,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `linux_kernel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/ioctl/patterns.rs:186:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(any(linux_kernel, bsd))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m             [lints.rust]\u001b[0m\n\u001b[0m             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(linux_kernel)'] }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(linux_kernel)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\n"}''',
## ]
## 
## [[contexts]]
## name = "crate_out-e00335469bb9fb6d"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustix-0.38.21"
## script = '''
## FROM scratch AS cratesio-rustix-0.38.21
## ADD --chmod=0664 --checksum=sha256:2b426b0506e5d50a7d8dafcf2e81471400deb602392c7dd110815afb4eaf02a3 \
##   https://static.crates.io/crates/rustix/rustix-0.38.21.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rustix-0.38.21-3404a66ca545b301"
## script = '''
## FROM rust-base AS dep-l-rustix-0.38.21-3404a66ca545b301
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-rustix-0.38.21,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21 \
##   --mount=from=crate_out-e00335469bb9fb6d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out \
##   --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta,source=/libbitflags-8921c69f98e179ab.rmeta \
##   --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta,source=/liblinux_raw_sys-38fbb57bea94d5d0.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rustix" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>" \
##         CARGO_PKG_DESCRIPTION="Safe Rust bindings to POSIX/Unix/Linux/Winsock2-like syscalls" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustix" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/bytecodealliance/rustix" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.38.21" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="38" \
##         CARGO_PKG_VERSION_PATCH="21" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rustix' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="termios"' '--cfg' 'feature="use-libc-auxv"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("all-apis", "alloc", "cc", "default", "event", "fs", "io_uring", "itoa", "libc", "libc_errno", "linux_4_11", "linux_latest", "mm", "mount", "net", "once_cell", "param", "pipe", "process", "procfs", "pty", "rand", "runtime", "rustc-dep-of-std", "shm", "std", "stdio", "system", "termios", "thread", "time", "use-explicitly-provided-auxv", "use-libc", "use-libc-auxv"))' '-C' 'metadata=93436a35536542cc' '-C' 'extra-filename=-3404a66ca545b301' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'bitflags=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta' '--extern' 'linux_raw_sys=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta' '--cap-lints' 'warn' '--cfg' 'static_assertions' '--cfg' 'linux_raw' '--cfg' 'linux_like' '--cfg' 'linux_kernel' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustix-0.38.21/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-3404a66ca545b301"
## script = """
## FROM scratch AS out-3404a66ca545b301
## COPY --from=dep-l-rustix-0.38.21-3404a66ca545b301 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-3404a66ca545b301* /"""

FROM scratch AS cratesio-is-terminal-0.4.9
ADD --chmod=0664 --checksum=sha256:cb0889898416213fab133e1d33a0e5858a48177452750691bde3666d0fdbaf8b \
  https://static.crates.io/crates/is-terminal/is-terminal-0.4.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-is-terminal-0.4.9-80d6e4d76acd8f4d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-is-terminal-0.4.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9 \
  --mount=from=out-3404a66ca545b301,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rmeta,source=/librustix-3404a66ca545b301.rmeta \
  --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta,source=/libbitflags-8921c69f98e179ab.rmeta \
  --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta,source=/liblinux_raw_sys-38fbb57bea94d5d0.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="is_terminal" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="softprops <d.tangren@gmail.com>:Dan Gohman <dev@sunfishcode.online>" \
        CARGO_PKG_DESCRIPTION="Test whether a given stream is a terminal" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="is-terminal" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/sunfishcode/is-terminal" \
        CARGO_PKG_RUST_VERSION="1.63" \
        CARGO_PKG_VERSION="0.4.9" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'is_terminal' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=95b8d3e6f95f5149' '-C' 'extra-filename=-80d6e4d76acd8f4d' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'rustix=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-80d6e4d76acd8f4d
COPY --from=dep-l-is-terminal-0.4.9-80d6e4d76acd8f4d /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-80d6e4d76acd8f4d* /

## this = "80d6e4d76acd8f4d"
## deps = [
##     "3404a66ca545b301",
##     "8921c69f98e179ab",
##     "38fbb57bea94d5d0",
## ]
## short_externs = [
##     "rustix-3404a66ca545b301",
##     "bitflags-8921c69f98e179ab",
##     "linux_raw_sys-38fbb57bea94d5d0",
## ]
## writes = [
##     "deps/is_terminal-80d6e4d76acd8f4d.d",
##     "deps/libis_terminal-80d6e4d76acd8f4d.rmeta",
##     "deps/libis_terminal-80d6e4d76acd8f4d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/is_terminal-80d6e4d76acd8f4d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-e00335469bb9fb6d"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-is-terminal-0.4.9"
## script = '''
## FROM scratch AS cratesio-is-terminal-0.4.9
## ADD --chmod=0664 --checksum=sha256:cb0889898416213fab133e1d33a0e5858a48177452750691bde3666d0fdbaf8b \
##   https://static.crates.io/crates/is-terminal/is-terminal-0.4.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-is-terminal-0.4.9-80d6e4d76acd8f4d"
## script = '''
## FROM rust-base AS dep-l-is-terminal-0.4.9-80d6e4d76acd8f4d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-is-terminal-0.4.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9 \
##   --mount=from=out-3404a66ca545b301,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rmeta,source=/librustix-3404a66ca545b301.rmeta \
##   --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta,source=/libbitflags-8921c69f98e179ab.rmeta \
##   --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta,source=/liblinux_raw_sys-38fbb57bea94d5d0.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="is_terminal" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="softprops <d.tangren@gmail.com>:Dan Gohman <dev@sunfishcode.online>" \
##         CARGO_PKG_DESCRIPTION="Test whether a given stream is a terminal" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="is-terminal" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/sunfishcode/is-terminal" \
##         CARGO_PKG_RUST_VERSION="1.63" \
##         CARGO_PKG_VERSION="0.4.9" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'is_terminal' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=95b8d3e6f95f5149' '-C' 'extra-filename=-80d6e4d76acd8f4d' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'rustix=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is-terminal-0.4.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-80d6e4d76acd8f4d"
## script = """
## FROM scratch AS out-80d6e4d76acd8f4d
## COPY --from=dep-l-is-terminal-0.4.9-80d6e4d76acd8f4d /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-80d6e4d76acd8f4d* /"""

FROM scratch AS cratesio-is_executable-1.0.1
ADD --chmod=0664 --checksum=sha256:fa9acdc6d67b75e626ad644734e8bc6df893d9cd2a834129065d3dd6158ea9c8 \
  https://static.crates.io/crates/is_executable/is_executable-1.0.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-is_executable-1.0.1-efec94c3a9e63fea
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-is_executable-1.0.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="is_executable" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Nick Fitzgerald <fitzgen@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Is there an executable file at the given path?" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0/MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="is_executable" \
        CARGO_PKG_README="./README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/fitzgen/is_executable" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.1" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'is_executable' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=20fceddaee8dbda9' '-C' 'extra-filename=-efec94c3a9e63fea' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-efec94c3a9e63fea
COPY --from=dep-l-is_executable-1.0.1-efec94c3a9e63fea /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-efec94c3a9e63fea* /

## this = "efec94c3a9e63fea"
## writes = [
##     "deps/is_executable-efec94c3a9e63fea.d",
##     "deps/libis_executable-efec94c3a9e63fea.rmeta",
##     "deps/libis_executable-efec94c3a9e63fea.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/is_executable-efec94c3a9e63fea.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-is_executable-1.0.1"
## script = '''
## FROM scratch AS cratesio-is_executable-1.0.1
## ADD --chmod=0664 --checksum=sha256:fa9acdc6d67b75e626ad644734e8bc6df893d9cd2a834129065d3dd6158ea9c8 \
##   https://static.crates.io/crates/is_executable/is_executable-1.0.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-is_executable-1.0.1-efec94c3a9e63fea"
## script = '''
## FROM rust-base AS dep-l-is_executable-1.0.1-efec94c3a9e63fea
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-is_executable-1.0.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="is_executable" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Nick Fitzgerald <fitzgen@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Is there an executable file at the given path?" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0/MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="is_executable" \
##         CARGO_PKG_README="./README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/fitzgen/is_executable" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.1" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'is_executable' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=20fceddaee8dbda9' '-C' 'extra-filename=-efec94c3a9e63fea' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/is_executable-1.0.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-efec94c3a9e63fea"
## script = """
## FROM scratch AS out-efec94c3a9e63fea
## COPY --from=dep-l-is_executable-1.0.1-efec94c3a9e63fea /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-efec94c3a9e63fea* /"""

FROM scratch AS cratesio-memchr-2.6.4
ADD --chmod=0664 --checksum=sha256:f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167 \
  https://static.crates.io/crates/memchr/memchr-2.6.4.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-memchr-2.6.4-679a642609c73d54
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-memchr-2.6.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="memchr" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>:bluss" \
        CARGO_PKG_DESCRIPTION="Provides extremely fast (uses SIMD on x86_64, aarch64 and wasm32) routines for\n1, 2 or 3 byte search and single substring search.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/memchr" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="memchr" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/memchr" \
        CARGO_PKG_RUST_VERSION="1.61" \
        CARGO_PKG_VERSION="2.6.4" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="4" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'memchr' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "libc", "logging", "rustc-dep-of-std", "std", "use_std"))' '-C' 'metadata=a6266304f3bf16b4' '-C' 'extra-filename=-679a642609c73d54' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-679a642609c73d54
COPY --from=dep-l-memchr-2.6.4-679a642609c73d54 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-679a642609c73d54* /

## this = "679a642609c73d54"
## writes = [
##     "deps/memchr-679a642609c73d54.d",
##     "deps/libmemchr-679a642609c73d54.rmeta",
##     "deps/libmemchr-679a642609c73d54.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/memchr-679a642609c73d54.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"trait `Byte` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4/src/ext.rs","byte_start":1343,"byte_end":1347,"line_start":42,"line_end":42,"column_start":18,"column_end":22,"is_primary":true,"text":[{"text":"pub(crate) trait Byte {","highlight_start":18,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `Byte` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4/src/ext.rs:42:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Byte {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-memchr-2.6.4"
## script = '''
## FROM scratch AS cratesio-memchr-2.6.4
## ADD --chmod=0664 --checksum=sha256:f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167 \
##   https://static.crates.io/crates/memchr/memchr-2.6.4.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-memchr-2.6.4-679a642609c73d54"
## script = '''
## FROM rust-base AS dep-l-memchr-2.6.4-679a642609c73d54
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-memchr-2.6.4,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="memchr" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>:bluss" \
##         CARGO_PKG_DESCRIPTION="Provides extremely fast (uses SIMD on x86_64, aarch64 and wasm32) routines for\n1, 2 or 3 byte search and single substring search.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/memchr" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="memchr" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/memchr" \
##         CARGO_PKG_RUST_VERSION="1.61" \
##         CARGO_PKG_VERSION="2.6.4" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="4" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'memchr' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "libc", "logging", "rustc-dep-of-std", "std", "use_std"))' '-C' 'metadata=a6266304f3bf16b4' '-C' 'extra-filename=-679a642609c73d54' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/memchr-2.6.4/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-679a642609c73d54"
## script = """
## FROM scratch AS out-679a642609c73d54
## COPY --from=dep-l-memchr-2.6.4-679a642609c73d54 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-679a642609c73d54* /"""

FROM scratch AS cratesio-quick-xml-0.30.0
ADD --chmod=0664 --checksum=sha256:eff6510e86862b57b210fd8cbe8ed3f0d7d600b9c2863cd4549a2e033c66e956 \
  https://static.crates.io/crates/quick-xml/quick-xml-0.30.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-quick-xml-0.30.0-2294e716788d14e5
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-quick-xml-0.30.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0 \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="quick_xml" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="High performance xml reader and writer" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="quick-xml" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/tafia/quick-xml" \
        CARGO_PKG_RUST_VERSION="1.52" \
        CARGO_PKG_VERSION="0.30.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="30" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'quick_xml' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "async-tokio", "default", "document-features", "encoding", "encoding_rs", "escape-html", "overlapped-lists", "serde", "serde-types", "serialize", "tokio"))' '-C' 'metadata=679078df609de2f9' '-C' 'extra-filename=-2294e716788d14e5' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-2294e716788d14e5
COPY --from=dep-l-quick-xml-0.30.0-2294e716788d14e5 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-2294e716788d14e5* /

## this = "2294e716788d14e5"
## deps = ["679a642609c73d54"]
## short_externs = ["memchr-679a642609c73d54"]
## writes = [
##     "deps/quick_xml-2294e716788d14e5.d",
##     "deps/libquick_xml-2294e716788d14e5.rmeta",
##     "deps/libquick_xml-2294e716788d14e5.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/quick_xml-2294e716788d14e5.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"unexpected `cfg` condition name: `docs_rs`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/lib.rs","byte_start":1903,"byte_end":1910,"line_start":50,"line_end":50,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(docs_rs, feature(doc_auto_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a Cargo feature instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"there is a config with a similar name","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/lib.rs","byte_start":1903,"byte_end":1910,"line_start":50,"line_end":50,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"#![cfg_attr(docs_rs, feature(doc_auto_cfg))]","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"docsrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition name: `docs_rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/lib.rs:50:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(docs_rs, feature(doc_auto_cfg))]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: there is a config with a similar name: `docsrs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a Cargo feature instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\u001b[0m\n\u001b[0m            [lints.rust]\u001b[0m\n\u001b[0m            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(docs_rs)'] }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(docs_rs)\");` to the top of the `build.rs`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/writer.rs","byte_start":9313,"byte_end":9314,"line_start":259,"line_end":259,"column_start":77,"column_end":78,"is_primary":true,"text":[{"text":"    pub fn create_element<'a, N>(&'a mut self, name: &'a N) -> ElementWriter<W>","highlight_start":77,"highlight_end":78}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/writer.rs","byte_start":9263,"byte_end":9265,"line_start":259,"line_end":259,"column_start":27,"column_end":29,"is_primary":false,"text":[{"text":"    pub fn create_element<'a, N>(&'a mut self, name: &'a N) -> ElementWriter<W>","highlight_start":27,"highlight_end":29}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/writer.rs:259:77\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn create_element<'a, N>(&'a mut self, name: &'a N) -> ElementWriter<W>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-quick-xml-0.30.0"
## script = '''
## FROM scratch AS cratesio-quick-xml-0.30.0
## ADD --chmod=0664 --checksum=sha256:eff6510e86862b57b210fd8cbe8ed3f0d7d600b9c2863cd4549a2e033c66e956 \
##   https://static.crates.io/crates/quick-xml/quick-xml-0.30.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-quick-xml-0.30.0-2294e716788d14e5"
## script = '''
## FROM rust-base AS dep-l-quick-xml-0.30.0-2294e716788d14e5
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-quick-xml-0.30.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0 \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="quick_xml" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="High performance xml reader and writer" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="quick-xml" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/tafia/quick-xml" \
##         CARGO_PKG_RUST_VERSION="1.52" \
##         CARGO_PKG_VERSION="0.30.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="30" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'quick_xml' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "async-tokio", "default", "document-features", "encoding", "encoding_rs", "escape-html", "overlapped-lists", "serde", "serde-types", "serialize", "tokio"))' '-C' 'metadata=679078df609de2f9' '-C' 'extra-filename=-2294e716788d14e5' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/quick-xml-0.30.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-2294e716788d14e5"
## script = """
## FROM scratch AS out-2294e716788d14e5
## COPY --from=dep-l-quick-xml-0.30.0-2294e716788d14e5 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-2294e716788d14e5* /"""

FROM scratch AS cratesio-aho-corasick-1.1.2
ADD --chmod=0664 --checksum=sha256:b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0 \
  https://static.crates.io/crates/aho-corasick/aho-corasick-1.1.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-aho-corasick-1.1.2-a1abc4d34011cf1c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-aho-corasick-1.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2 \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="aho_corasick" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fast multiple substring searching." \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/aho-corasick" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="aho-corasick" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/aho-corasick" \
        CARGO_PKG_RUST_VERSION="1.60.0" \
        CARGO_PKG_VERSION="1.1.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'aho_corasick' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "perf-literal", "std"))' '-C' 'metadata=e375e888036aaed3' '-C' 'extra-filename=-a1abc4d34011cf1c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a1abc4d34011cf1c
COPY --from=dep-l-aho-corasick-1.1.2-a1abc4d34011cf1c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-a1abc4d34011cf1c* /

## this = "a1abc4d34011cf1c"
## deps = ["679a642609c73d54"]
## short_externs = ["memchr-679a642609c73d54"]
## writes = [
##     "deps/aho_corasick-a1abc4d34011cf1c.d",
##     "deps/libaho_corasick-a1abc4d34011cf1c.rmeta",
##     "deps/libaho_corasick-a1abc4d34011cf1c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/aho_corasick-a1abc4d34011cf1c.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"method `or` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/packed/vector.rs","byte_start":1353,"byte_end":1359,"line_start":28,"line_end":28,"column_start":18,"column_end":24,"is_primary":false,"text":[{"text":"pub(crate) trait Vector:","highlight_start":18,"highlight_end":24}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/packed/vector.rs","byte_start":3475,"byte_end":3477,"line_start":92,"line_end":92,"column_start":15,"column_end":17,"is_primary":true,"text":[{"text":"    unsafe fn or(self, vector2: Self) -> Self;","highlight_start":15,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `or` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/packed/vector.rs:92:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Vector:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn or(self, vector2: Self) -> Self;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `U8` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":958,"byte_end":960,"line_start":21,"line_end":21,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"pub(crate) trait U8 {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `U8` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:21:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U8 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"method `low_u8` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1100,"byte_end":1103,"line_start":31,"line_end":31,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait U16 {","highlight_start":18,"highlight_end":21}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1145,"byte_end":1151,"line_start":33,"line_end":33,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn low_u8(self) -> u8;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `low_u8` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:33:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U16 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u8(self) -> u8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `low_u8` and `high_u16` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1416,"byte_end":1419,"line_start":51,"line_end":51,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait U32 {","highlight_start":18,"highlight_end":21}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1461,"byte_end":1467,"line_start":53,"line_end":53,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn low_u8(self) -> u8;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":1517,"byte_end":1525,"line_start":55,"line_end":55,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn high_u16(self) -> u16;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `low_u8` and `high_u16` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:53:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u8(self) -> u8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u16(self) -> u16;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn high_u16(self) -> u16;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `low_u8`, `low_u16`, `low_u32`, and `high_u32` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2014,"byte_end":2017,"line_start":84,"line_end":84,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait U64 {","highlight_start":18,"highlight_end":21}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2059,"byte_end":2065,"line_start":86,"line_end":86,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn low_u8(self) -> u8;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2086,"byte_end":2093,"line_start":87,"line_end":87,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn low_u16(self) -> u16;","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2115,"byte_end":2122,"line_start":88,"line_end":88,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn low_u32(self) -> u32;","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2144,"byte_end":2152,"line_start":89,"line_end":89,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn high_u32(self) -> u32;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `low_u8`, `low_u16`, `low_u32`, and `high_u32` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:86:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait U64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u8(self) -> u8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u16(self) -> u16;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn low_u32(self) -> u32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn high_u32(self) -> u32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"methods `as_usize` and `to_bits` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2684,"byte_end":2686,"line_start":121,"line_end":121,"column_start":18,"column_end":20,"is_primary":false,"text":[{"text":"pub(crate) trait I8 {","highlight_start":18,"highlight_end":20}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2696,"byte_end":2704,"line_start":122,"line_end":122,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn as_usize(self) -> usize;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":2728,"byte_end":2735,"line_start":123,"line_end":123,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn to_bits(self) -> u8;","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `as_usize` and `to_bits` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:122:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait I8 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_bits(self) -> u8;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"associated items `as_usize` and `from_bits` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3170,"byte_end":3173,"line_start":148,"line_end":148,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait I32 {","highlight_start":18,"highlight_end":21}],"label":"associated items in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3183,"byte_end":3191,"line_start":149,"line_end":149,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn as_usize(self) -> usize;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3244,"byte_end":3253,"line_start":151,"line_end":151,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn from_bits(n: u32) -> i32;","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `as_usize` and `from_bits` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:149:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait I32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_bits(self) -> u32;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_bits(n: u32) -> i32;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"associated items `as_usize` and `from_bits` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3668,"byte_end":3671,"line_start":175,"line_end":175,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"pub(crate) trait I64 {","highlight_start":18,"highlight_end":21}],"label":"associated items in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3681,"byte_end":3689,"line_start":176,"line_end":176,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn as_usize(self) -> usize;","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":3742,"byte_end":3751,"line_start":178,"line_end":178,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn from_bits(n: u64) -> i64;","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `as_usize` and `from_bits` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:176:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait I64 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_usize(self) -> usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_bits(self) -> u64;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from_bits(n: u64) -> i64;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"method `as_u16` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":4166,"byte_end":4171,"line_start":202,"line_end":202,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"pub(crate) trait Usize {","highlight_start":18,"highlight_end":23}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":4207,"byte_end":4213,"line_start":204,"line_end":204,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn as_u16(self) -> u16;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `as_u16` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:204:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Usize {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_u8(self) -> u8;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_u16(self) -> u16;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `Pointer` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":5930,"byte_end":5937,"line_start":266,"line_end":266,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"pub(crate) trait Pointer {","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `Pointer` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:266:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait Pointer {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"trait `PointerMut` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs","byte_start":6087,"byte_end":6097,"line_start":276,"line_end":276,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"pub(crate) trait PointerMut {","highlight_start":18,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `PointerMut` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/util/int.rs:276:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait PointerMut {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"11 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 11 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-aho-corasick-1.1.2"
## script = '''
## FROM scratch AS cratesio-aho-corasick-1.1.2
## ADD --chmod=0664 --checksum=sha256:b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0 \
##   https://static.crates.io/crates/aho-corasick/aho-corasick-1.1.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-aho-corasick-1.1.2-a1abc4d34011cf1c"
## script = '''
## FROM rust-base AS dep-l-aho-corasick-1.1.2-a1abc4d34011cf1c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-aho-corasick-1.1.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2 \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="aho_corasick" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fast multiple substring searching." \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/aho-corasick" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="aho-corasick" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/aho-corasick" \
##         CARGO_PKG_RUST_VERSION="1.60.0" \
##         CARGO_PKG_VERSION="1.1.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'aho_corasick' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "perf-literal", "std"))' '-C' 'metadata=e375e888036aaed3' '-C' 'extra-filename=-a1abc4d34011cf1c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/aho-corasick-1.1.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a1abc4d34011cf1c"
## script = """
## FROM scratch AS out-a1abc4d34011cf1c
## COPY --from=dep-l-aho-corasick-1.1.2-a1abc4d34011cf1c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-a1abc4d34011cf1c* /"""

FROM scratch AS cratesio-regex-syntax-0.8.2
ADD --chmod=0664 --checksum=sha256:c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f \
  https://static.crates.io/crates/regex-syntax/regex-syntax-0.8.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-syntax-0.8.2-07e89991623c09ad
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-regex-syntax-0.8.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_syntax" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A regular expression parser." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-syntax" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-syntax" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="0.8.2" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="8" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_syntax' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=0603fda0b83d6ebc' '-C' 'extra-filename=-07e89991623c09ad' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-07e89991623c09ad
COPY --from=dep-l-regex-syntax-0.8.2-07e89991623c09ad /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-07e89991623c09ad* /

## this = "07e89991623c09ad"
## writes = [
##     "deps/regex_syntax-07e89991623c09ad.d",
##     "deps/libregex_syntax-07e89991623c09ad.rmeta",
##     "deps/libregex_syntax-07e89991623c09ad.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/regex_syntax-07e89991623c09ad.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"method `symmetric_difference` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/hir/interval.rs","byte_start":16494,"byte_end":16502,"line_start":396,"line_end":396,"column_start":11,"column_end":19,"is_primary":false,"text":[{"text":"pub trait Interval:","highlight_start":11,"highlight_end":19}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/hir/interval.rs","byte_start":19455,"byte_end":19475,"line_start":484,"line_end":484,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn symmetric_difference(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `symmetric_difference` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/hir/interval.rs:484:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m396\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Interval:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn symmetric_difference(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-syntax-0.8.2"
## script = '''
## FROM scratch AS cratesio-regex-syntax-0.8.2
## ADD --chmod=0664 --checksum=sha256:c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f \
##   https://static.crates.io/crates/regex-syntax/regex-syntax-0.8.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-syntax-0.8.2-07e89991623c09ad"
## script = '''
## FROM rust-base AS dep-l-regex-syntax-0.8.2-07e89991623c09ad
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-regex-syntax-0.8.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_syntax" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A regular expression parser." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-syntax" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-syntax" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="0.8.2" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="8" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_syntax' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' '-C' 'metadata=0603fda0b83d6ebc' '-C' 'extra-filename=-07e89991623c09ad' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-syntax-0.8.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-07e89991623c09ad"
## script = """
## FROM scratch AS out-07e89991623c09ad
## COPY --from=dep-l-regex-syntax-0.8.2-07e89991623c09ad /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-07e89991623c09ad* /"""

FROM scratch AS cratesio-regex-automata-0.4.3
ADD --chmod=0664 --checksum=sha256:5f804c7828047e88b2d32e2d7fe5a105da8ee3264f01902f796c8e067dc2483f \
  https://static.crates.io/crates/regex-automata/regex-automata-0.4.3.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-automata-0.4.3-19d70c78c72efef5
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-regex-automata-0.4.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3 \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex_automata" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex-automata" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-automata" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="0.4.3" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="3" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex_automata' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="dfa-onepass"' '--cfg' 'feature="dfa-search"' '--cfg' 'feature="hybrid"' '--cfg' 'feature="meta"' '--cfg' 'feature="nfa-backtrack"' '--cfg' 'feature="nfa-pikevm"' '--cfg' 'feature="nfa-thompson"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-literal-multisubstring"' '--cfg' 'feature="perf-literal-substring"' '--cfg' 'feature="std"' '--cfg' 'feature="syntax"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--cfg' 'feature="unicode-word-boundary"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' '-C' 'metadata=3991ee8d0db64978' '-C' 'extra-filename=-19d70c78c72efef5' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'aho_corasick=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--extern' 'regex_syntax=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-19d70c78c72efef5
COPY --from=dep-l-regex-automata-0.4.3-19d70c78c72efef5 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-19d70c78c72efef5* /

## this = "19d70c78c72efef5"
## deps = [
##     "a1abc4d34011cf1c",
##     "679a642609c73d54",
##     "07e89991623c09ad",
## ]
## short_externs = [
##     "aho_corasick-a1abc4d34011cf1c",
##     "memchr-679a642609c73d54",
##     "regex_syntax-07e89991623c09ad",
## ]
## writes = [
##     "deps/regex_automata-19d70c78c72efef5.d",
##     "deps/libregex_automata-19d70c78c72efef5.rmeta",
##     "deps/libregex_automata-19d70c78c72efef5.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/regex_automata-19d70c78c72efef5.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/dfa/onepass.rs","byte_start":22283,"byte_end":22298,"line_start":524,"line_end":524,"column_start":45,"column_end":60,"is_primary":true,"text":[{"text":"    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder {","highlight_start":45,"highlight_end":60}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/dfa/onepass.rs","byte_start":22157,"byte_end":22159,"line_start":522,"line_end":522,"column_start":6,"column_end":8,"is_primary":false,"text":[{"text":"impl<'a> InternalBuilder<'a> {","highlight_start":6,"highlight_end":8}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/dfa/onepass.rs:524:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<'a> InternalBuilder<'a> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Create a new builder with an initial empty DFA.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-automata-0.4.3"
## script = '''
## FROM scratch AS cratesio-regex-automata-0.4.3
## ADD --chmod=0664 --checksum=sha256:5f804c7828047e88b2d32e2d7fe5a105da8ee3264f01902f796c8e067dc2483f \
##   https://static.crates.io/crates/regex-automata/regex-automata-0.4.3.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-automata-0.4.3-19d70c78c72efef5"
## script = '''
## FROM rust-base AS dep-l-regex-automata-0.4.3-19d70c78c72efef5
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-regex-automata-0.4.3,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3 \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex_automata" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Automata construction and matching using regular expressions." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex-automata" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex/tree/master/regex-automata" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="0.4.3" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="3" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex_automata' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="dfa-onepass"' '--cfg' 'feature="dfa-search"' '--cfg' 'feature="hybrid"' '--cfg' 'feature="meta"' '--cfg' 'feature="nfa-backtrack"' '--cfg' 'feature="nfa-pikevm"' '--cfg' 'feature="nfa-thompson"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-literal-multisubstring"' '--cfg' 'feature="perf-literal-substring"' '--cfg' 'feature="std"' '--cfg' 'feature="syntax"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--cfg' 'feature="unicode-word-boundary"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' '-C' 'metadata=3991ee8d0db64978' '-C' 'extra-filename=-19d70c78c72efef5' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'aho_corasick=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--extern' 'regex_syntax=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-automata-0.4.3/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-19d70c78c72efef5"
## script = """
## FROM scratch AS out-19d70c78c72efef5
## COPY --from=dep-l-regex-automata-0.4.3-19d70c78c72efef5 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-19d70c78c72efef5* /"""

FROM scratch AS cratesio-regex-1.10.2
ADD --chmod=0664 --checksum=sha256:380b951a9c5e80ddfd6136919eef32310721aa4aacd4889a8d39124b026ab343 \
  https://static.crates.io/crates/regex/regex-1.10.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-regex-1.10.2-eed1bc1f14927bd9
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-regex-1.10.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2 \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
  --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="regex" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/Cargo.toml" \
        CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="regex" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="1.10.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="10" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'regex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="perf"' '--cfg' 'feature="perf-backtrack"' '--cfg' 'feature="perf-cache"' '--cfg' 'feature="perf-dfa"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-onepass"' '--cfg' 'feature="std"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' '-C' 'metadata=85a7aded43740f74' '-C' 'extra-filename=-eed1bc1f14927bd9' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'aho_corasick=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--extern' 'regex_automata=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta' '--extern' 'regex_syntax=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-eed1bc1f14927bd9
COPY --from=dep-l-regex-1.10.2-eed1bc1f14927bd9 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-eed1bc1f14927bd9* /

## this = "eed1bc1f14927bd9"
## deps = [
##     "a1abc4d34011cf1c",
##     "679a642609c73d54",
##     "19d70c78c72efef5",
##     "07e89991623c09ad",
## ]
## short_externs = [
##     "aho_corasick-a1abc4d34011cf1c",
##     "memchr-679a642609c73d54",
##     "regex_automata-19d70c78c72efef5",
##     "regex_syntax-07e89991623c09ad",
## ]
## writes = [
##     "deps/regex-eed1bc1f14927bd9.d",
##     "deps/libregex-eed1bc1f14927bd9.rmeta",
##     "deps/libregex-eed1bc1f14927bd9.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/regex-eed1bc1f14927bd9.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-regex-1.10.2"
## script = '''
## FROM scratch AS cratesio-regex-1.10.2
## ADD --chmod=0664 --checksum=sha256:380b951a9c5e80ddfd6136919eef32310721aa4aacd4889a8d39124b026ab343 \
##   https://static.crates.io/crates/regex/regex-1.10.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-regex-1.10.2-eed1bc1f14927bd9"
## script = '''
## FROM rust-base AS dep-l-regex-1.10.2-eed1bc1f14927bd9
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-regex-1.10.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2 \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##   --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="regex" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS="The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/rust-lang/regex" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="regex" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/rust-lang/regex" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="1.10.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="10" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'regex' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="perf"' '--cfg' 'feature="perf-backtrack"' '--cfg' 'feature="perf-cache"' '--cfg' 'feature="perf-dfa"' '--cfg' 'feature="perf-inline"' '--cfg' 'feature="perf-literal"' '--cfg' 'feature="perf-onepass"' '--cfg' 'feature="std"' '--cfg' 'feature="unicode"' '--cfg' 'feature="unicode-age"' '--cfg' 'feature="unicode-bool"' '--cfg' 'feature="unicode-case"' '--cfg' 'feature="unicode-gencat"' '--cfg' 'feature="unicode-perl"' '--cfg' 'feature="unicode-script"' '--cfg' 'feature="unicode-segment"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' '-C' 'metadata=85a7aded43740f74' '-C' 'extra-filename=-eed1bc1f14927bd9' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'aho_corasick=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--extern' 'regex_automata=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta' '--extern' 'regex_syntax=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/regex-1.10.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-eed1bc1f14927bd9"
## script = """
## FROM scratch AS out-eed1bc1f14927bd9
## COPY --from=dep-l-regex-1.10.2-eed1bc1f14927bd9 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-eed1bc1f14927bd9* /"""

FROM scratch AS cratesio-rustc-demangle-0.1.23
ADD --chmod=0664 --checksum=sha256:d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76 \
  https://static.crates.io/crates/rustc-demangle/rustc-demangle-0.1.23.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-rustc-demangle-0.1.23-a563bff5f53acd0c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-rustc-demangle-0.1.23,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="rustc_demangle" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23/Cargo.toml" \
        CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
        CARGO_PKG_DESCRIPTION="Rust compiler symbol demangling.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/rustc-demangle" \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="rustc-demangle" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/rustc-demangle" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.23" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="23" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'rustc_demangle' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std", "std"))' '-C' 'metadata=6b98034cefe1ee8c' '-C' 'extra-filename=-a563bff5f53acd0c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-a563bff5f53acd0c
COPY --from=dep-l-rustc-demangle-0.1.23-a563bff5f53acd0c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-a563bff5f53acd0c* /

## this = "a563bff5f53acd0c"
## writes = [
##     "deps/rustc_demangle-a563bff5f53acd0c.d",
##     "deps/librustc_demangle-a563bff5f53acd0c.rmeta",
##     "deps/librustc_demangle-a563bff5f53acd0c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/rustc_demangle-a563bff5f53acd0c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-rustc-demangle-0.1.23"
## script = '''
## FROM scratch AS cratesio-rustc-demangle-0.1.23
## ADD --chmod=0664 --checksum=sha256:d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76 \
##   https://static.crates.io/crates/rustc-demangle/rustc-demangle-0.1.23.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-rustc-demangle-0.1.23-a563bff5f53acd0c"
## script = '''
## FROM rust-base AS dep-l-rustc-demangle-0.1.23-a563bff5f53acd0c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-rustc-demangle-0.1.23,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="rustc_demangle" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Alex Crichton <alex@alexcrichton.com>" \
##         CARGO_PKG_DESCRIPTION="Rust compiler symbol demangling.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/alexcrichton/rustc-demangle" \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="rustc-demangle" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/alexcrichton/rustc-demangle" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.23" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="23" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'rustc_demangle' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std", "std"))' '-C' 'metadata=6b98034cefe1ee8c' '-C' 'extra-filename=-a563bff5f53acd0c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/rustc-demangle-0.1.23/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-a563bff5f53acd0c"
## script = """
## FROM scratch AS out-a563bff5f53acd0c
## COPY --from=dep-l-rustc-demangle-0.1.23-a563bff5f53acd0c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-a563bff5f53acd0c* /"""

FROM scratch AS cratesio-lcov2cobertura-1.0.2
ADD --chmod=0664 --checksum=sha256:07d6ec031970092534443a73b20e8a765704ad6e406c3a557546b9db1431a3db \
  https://static.crates.io/crates/lcov2cobertura/lcov2cobertura-1.0.2.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-lcov2cobertura-1.0.2-bd351604e8a3606e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-lcov2cobertura-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2 \
  --mount=from=out-dfdf484c5c94dda8,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta,source=/libanyhow-dfdf484c5c94dda8.rmeta \
  --mount=from=out-2294e716788d14e5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta,source=/libquick_xml-2294e716788d14e5.rmeta \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
  --mount=from=out-eed1bc1f14927bd9,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta,source=/libregex-eed1bc1f14927bd9.rmeta \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
  --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
  --mount=from=out-a563bff5f53acd0c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta,source=/librustc_demangle-a563bff5f53acd0c.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="lcov2cobertura" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="convert LCOV info file to cobertura XML format" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="lcov2cobertura" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/mike-kfed/lcov2cobertura" \
        CARGO_PKG_RUST_VERSION="1.59" \
        CARGO_PKG_VERSION="1.0.2" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="2" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'lcov2cobertura' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=cf980e04b6deb399' '-C' 'extra-filename=-bd351604e8a3606e' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'anyhow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta' '--extern' 'quick_xml=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta' '--extern' 'regex=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta' '--extern' 'rustc_demangle=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-bd351604e8a3606e
COPY --from=dep-l-lcov2cobertura-1.0.2-bd351604e8a3606e /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-bd351604e8a3606e* /

## this = "bd351604e8a3606e"
## deps = [
##     "dfdf484c5c94dda8",
##     "2294e716788d14e5",
##     "679a642609c73d54",
##     "eed1bc1f14927bd9",
##     "a1abc4d34011cf1c",
##     "19d70c78c72efef5",
##     "07e89991623c09ad",
##     "a563bff5f53acd0c",
## ]
## short_externs = [
##     "anyhow-dfdf484c5c94dda8",
##     "quick_xml-2294e716788d14e5",
##     "memchr-679a642609c73d54",
##     "regex-eed1bc1f14927bd9",
##     "aho_corasick-a1abc4d34011cf1c",
##     "regex_automata-19d70c78c72efef5",
##     "regex_syntax-07e89991623c09ad",
##     "rustc_demangle-a563bff5f53acd0c",
## ]
## writes = [
##     "deps/lcov2cobertura-bd351604e8a3606e.d",
##     "deps/liblcov2cobertura-bd351604e8a3606e.rmeta",
##     "deps/liblcov2cobertura-bd351604e8a3606e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/lcov2cobertura-bd351604e8a3606e.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-320a4f7879609678"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-lcov2cobertura-1.0.2"
## script = '''
## FROM scratch AS cratesio-lcov2cobertura-1.0.2
## ADD --chmod=0664 --checksum=sha256:07d6ec031970092534443a73b20e8a765704ad6e406c3a557546b9db1431a3db \
##   https://static.crates.io/crates/lcov2cobertura/lcov2cobertura-1.0.2.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-lcov2cobertura-1.0.2-bd351604e8a3606e"
## script = '''
## FROM rust-base AS dep-l-lcov2cobertura-1.0.2-bd351604e8a3606e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-lcov2cobertura-1.0.2,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2 \
##   --mount=from=out-dfdf484c5c94dda8,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta,source=/libanyhow-dfdf484c5c94dda8.rmeta \
##   --mount=from=out-2294e716788d14e5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta,source=/libquick_xml-2294e716788d14e5.rmeta \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##   --mount=from=out-eed1bc1f14927bd9,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta,source=/libregex-eed1bc1f14927bd9.rmeta \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
##   --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
##   --mount=from=out-a563bff5f53acd0c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta,source=/librustc_demangle-a563bff5f53acd0c.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="lcov2cobertura" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="convert LCOV info file to cobertura XML format" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="lcov2cobertura" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/mike-kfed/lcov2cobertura" \
##         CARGO_PKG_RUST_VERSION="1.59" \
##         CARGO_PKG_VERSION="1.0.2" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="2" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'lcov2cobertura' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=cf980e04b6deb399' '-C' 'extra-filename=-bd351604e8a3606e' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'anyhow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta' '--extern' 'quick_xml=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta' '--extern' 'regex=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta' '--extern' 'rustc_demangle=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lcov2cobertura-1.0.2/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-bd351604e8a3606e"
## script = """
## FROM scratch AS out-bd351604e8a3606e
## COPY --from=dep-l-lcov2cobertura-1.0.2-bd351604e8a3606e /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-bd351604e8a3606e* /"""

FROM scratch AS cratesio-lexopt-0.3.0
ADD --chmod=0664 --checksum=sha256:baff4b617f7df3d896f97fe922b64817f6cd9a756bb81d40f8883f2f66dcb401 \
  https://static.crates.io/crates/lexopt/lexopt-0.3.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-lexopt-0.3.0-72cd9e8a271d7703
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-lexopt-0.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="lexopt" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Jan Verbeek <jan.verbeek@posteo.nl>" \
        CARGO_PKG_DESCRIPTION="Minimalist pedantic command line parser" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="lexopt" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/blyxxyz/lexopt" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.3.0" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'lexopt' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=118dbbf7490f63f7' '-C' 'extra-filename=-72cd9e8a271d7703' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-72cd9e8a271d7703
COPY --from=dep-l-lexopt-0.3.0-72cd9e8a271d7703 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-72cd9e8a271d7703* /

## this = "72cd9e8a271d7703"
## writes = [
##     "deps/lexopt-72cd9e8a271d7703.d",
##     "deps/liblexopt-72cd9e8a271d7703.rmeta",
##     "deps/liblexopt-72cd9e8a271d7703.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/lexopt-72cd9e8a271d7703.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-lexopt-0.3.0"
## script = '''
## FROM scratch AS cratesio-lexopt-0.3.0
## ADD --chmod=0664 --checksum=sha256:baff4b617f7df3d896f97fe922b64817f6cd9a756bb81d40f8883f2f66dcb401 \
##   https://static.crates.io/crates/lexopt/lexopt-0.3.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-lexopt-0.3.0-72cd9e8a271d7703"
## script = '''
## FROM rust-base AS dep-l-lexopt-0.3.0-72cd9e8a271d7703
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-lexopt-0.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="lexopt" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Jan Verbeek <jan.verbeek@posteo.nl>" \
##         CARGO_PKG_DESCRIPTION="Minimalist pedantic command line parser" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="lexopt" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/blyxxyz/lexopt" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.3.0" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'lexopt' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=118dbbf7490f63f7' '-C' 'extra-filename=-72cd9e8a271d7703' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/lexopt-0.3.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-72cd9e8a271d7703"
## script = """
## FROM scratch AS out-72cd9e8a271d7703
## COPY --from=dep-l-lexopt-0.3.0-72cd9e8a271d7703 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-72cd9e8a271d7703* /"""

FROM scratch AS cratesio-bstr-1.7.0
ADD --chmod=0664 --checksum=sha256:c79ad7fb2dd38f3dabd76b09c6a5a20c038fc0213ef1e9afd30eb777f120f019 \
  https://static.crates.io/crates/bstr/bstr-1.7.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-bstr-1.7.0-414bf26c2675cba2
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-bstr-1.7.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0 \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
  --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="bstr" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A string type that is not required to be valid UTF-8." \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/bstr" \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="bstr" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/bstr" \
        CARGO_PKG_RUST_VERSION="1.65" \
        CARGO_PKG_VERSION="1.7.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="7" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'bstr' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="unicode"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "serde", "std", "unicode"))' '-C' 'metadata=df348a01115fb094' '-C' 'extra-filename=-414bf26c2675cba2' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--extern' 'regex_automata=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-414bf26c2675cba2
COPY --from=dep-l-bstr-1.7.0-414bf26c2675cba2 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-414bf26c2675cba2* /

## this = "414bf26c2675cba2"
## deps = [
##     "679a642609c73d54",
##     "19d70c78c72efef5",
##     "a1abc4d34011cf1c",
##     "07e89991623c09ad",
## ]
## short_externs = [
##     "memchr-679a642609c73d54",
##     "regex_automata-19d70c78c72efef5",
##     "aho_corasick-a1abc4d34011cf1c",
##     "regex_syntax-07e89991623c09ad",
## ]
## writes = [
##     "deps/bstr-414bf26c2675cba2.d",
##     "deps/libbstr-414bf26c2675cba2.rmeta",
##     "deps/libbstr-414bf26c2675cba2.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/bstr-414bf26c2675cba2.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"elided lifetime has a name","code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/src/escape_bytes.rs","byte_start":457,"byte_end":468,"line_start":15,"line_end":15,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    pub(crate) fn new(bytes: &'a [u8]) -> EscapeBytes {","highlight_start":43,"highlight_end":54}],"label":"this elided lifetime gets resolved as `'a`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/src/escape_bytes.rs","byte_start":393,"byte_end":395,"line_start":14,"line_end":14,"column_start":6,"column_end":8,"is_primary":false,"text":[{"text":"impl<'a> EscapeBytes<'a> {","highlight_start":6,"highlight_end":8}],"label":"lifetime `'a` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(elided_named_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: elided lifetime has a name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/src/escape_bytes.rs:15:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<'a> EscapeBytes<'a> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlifetime `'a` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) fn new(bytes: &'a [u8]) -> EscapeBytes {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis elided lifetime gets resolved as `'a`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(elided_named_lifetimes)]` on by default\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-bstr-1.7.0"
## script = '''
## FROM scratch AS cratesio-bstr-1.7.0
## ADD --chmod=0664 --checksum=sha256:c79ad7fb2dd38f3dabd76b09c6a5a20c038fc0213ef1e9afd30eb777f120f019 \
##   https://static.crates.io/crates/bstr/bstr-1.7.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-bstr-1.7.0-414bf26c2675cba2"
## script = '''
## FROM rust-base AS dep-l-bstr-1.7.0-414bf26c2675cba2
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-bstr-1.7.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0 \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##   --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="bstr" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A string type that is not required to be valid UTF-8." \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/bstr" \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="bstr" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/bstr" \
##         CARGO_PKG_RUST_VERSION="1.65" \
##         CARGO_PKG_VERSION="1.7.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="7" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'bstr' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="alloc"' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--cfg' 'feature="unicode"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "default", "serde", "std", "unicode"))' '-C' 'metadata=df348a01115fb094' '-C' 'extra-filename=-414bf26c2675cba2' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'memchr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta' '--extern' 'regex_automata=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/bstr-1.7.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-414bf26c2675cba2"
## script = """
## FROM scratch AS out-414bf26c2675cba2
## COPY --from=dep-l-bstr-1.7.0-414bf26c2675cba2 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-414bf26c2675cba2* /"""

FROM scratch AS cratesio-opener-0.6.1
ADD --chmod=0664 --checksum=sha256:6c62dcb6174f9cb326eac248f07e955d5d559c272730b6c03e396b443b562788 \
  https://static.crates.io/crates/opener/opener-0.6.1.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-opener-0.6.1-d2ce0c8cc304947c
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-opener-0.6.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1 \
  --mount=from=out-414bf26c2675cba2,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta,source=/libbstr-414bf26c2675cba2.rmeta \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
  --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="opener" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1/Cargo.toml" \
        CARGO_PKG_AUTHORS="Brian Bowman <seeker14491@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Open a file or link using the system default program." \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="opener" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/Seeker14491/opener" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.6.1" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="6" \
        CARGO_PKG_VERSION_PATCH="1" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'opener' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("reveal"))' '-C' 'metadata=b7bfa8d457a2a948' '-C' 'extra-filename=-d2ce0c8cc304947c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'bstr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-d2ce0c8cc304947c
COPY --from=dep-l-opener-0.6.1-d2ce0c8cc304947c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-d2ce0c8cc304947c* /

## this = "d2ce0c8cc304947c"
## deps = [
##     "414bf26c2675cba2",
##     "679a642609c73d54",
##     "19d70c78c72efef5",
##     "a1abc4d34011cf1c",
##     "07e89991623c09ad",
## ]
## short_externs = [
##     "bstr-414bf26c2675cba2",
##     "memchr-679a642609c73d54",
##     "regex_automata-19d70c78c72efef5",
##     "aho_corasick-a1abc4d34011cf1c",
##     "regex_syntax-07e89991623c09ad",
## ]
## writes = [
##     "deps/opener-d2ce0c8cc304947c.d",
##     "deps/libopener-d2ce0c8cc304947c.rmeta",
##     "deps/libopener-d2ce0c8cc304947c.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/opener-d2ce0c8cc304947c.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-opener-0.6.1"
## script = '''
## FROM scratch AS cratesio-opener-0.6.1
## ADD --chmod=0664 --checksum=sha256:6c62dcb6174f9cb326eac248f07e955d5d559c272730b6c03e396b443b562788 \
##   https://static.crates.io/crates/opener/opener-0.6.1.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-opener-0.6.1-d2ce0c8cc304947c"
## script = '''
## FROM rust-base AS dep-l-opener-0.6.1-d2ce0c8cc304947c
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-opener-0.6.1,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1 \
##   --mount=from=out-414bf26c2675cba2,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta,source=/libbstr-414bf26c2675cba2.rmeta \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##   --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="opener" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Brian Bowman <seeker14491@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Open a file or link using the system default program." \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="opener" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/Seeker14491/opener" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.6.1" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="6" \
##         CARGO_PKG_VERSION_PATCH="1" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'opener' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("reveal"))' '-C' 'metadata=b7bfa8d457a2a948' '-C' 'extra-filename=-d2ce0c8cc304947c' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'bstr=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/opener-0.6.1/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-d2ce0c8cc304947c"
## script = """
## FROM scratch AS out-d2ce0c8cc304947c
## COPY --from=dep-l-opener-0.6.1-d2ce0c8cc304947c /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-d2ce0c8cc304947c* /"""

FROM scratch AS cratesio-itoa-1.0.9
ADD --chmod=0664 --checksum=sha256:af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38 \
  https://static.crates.io/crates/itoa/itoa-1.0.9.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-itoa-1.0.9-3c67d4b032e6b506
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-itoa-1.0.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="itoa" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fast integer primitive to string conversion" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="itoa" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/itoa" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="1.0.9" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="9" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'itoa' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("no-panic"))' '-C' 'metadata=2994669e7dffdd99' '-C' 'extra-filename=-3c67d4b032e6b506' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-3c67d4b032e6b506
COPY --from=dep-l-itoa-1.0.9-3c67d4b032e6b506 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-3c67d4b032e6b506* /

## this = "3c67d4b032e6b506"
## writes = [
##     "deps/itoa-3c67d4b032e6b506.d",
##     "deps/libitoa-3c67d4b032e6b506.rmeta",
##     "deps/libitoa-3c67d4b032e6b506.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/itoa-3c67d4b032e6b506.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-itoa-1.0.9"
## script = '''
## FROM scratch AS cratesio-itoa-1.0.9
## ADD --chmod=0664 --checksum=sha256:af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38 \
##   https://static.crates.io/crates/itoa/itoa-1.0.9.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-itoa-1.0.9-3c67d4b032e6b506"
## script = '''
## FROM rust-base AS dep-l-itoa-1.0.9-3c67d4b032e6b506
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-itoa-1.0.9,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="itoa" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fast integer primitive to string conversion" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="itoa" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/itoa" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="1.0.9" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="9" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'itoa' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("no-panic"))' '-C' 'metadata=2994669e7dffdd99' '-C' 'extra-filename=-3c67d4b032e6b506' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/itoa-1.0.9/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-3c67d4b032e6b506"
## script = """
## FROM scratch AS out-3c67d4b032e6b506
## COPY --from=dep-l-itoa-1.0.9-3c67d4b032e6b506 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-3c67d4b032e6b506* /"""

FROM scratch AS cratesio-ryu-1.0.15
ADD --chmod=0664 --checksum=sha256:1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741 \
  https://static.crates.io/crates/ryu/ryu-1.0.15.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-ryu-1.0.15-c1c56da53b71c739
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-ryu-1.0.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="ryu" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15/Cargo.toml" \
        CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Fast floating point to string conversion" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR BSL-1.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="ryu" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/dtolnay/ryu" \
        CARGO_PKG_RUST_VERSION="1.36" \
        CARGO_PKG_VERSION="1.0.15" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="15" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'ryu' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("no-panic", "small"))' '-C' 'metadata=59cc307e35f46133' '-C' 'extra-filename=-c1c56da53b71c739' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-c1c56da53b71c739
COPY --from=dep-l-ryu-1.0.15-c1c56da53b71c739 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-c1c56da53b71c739* /

## this = "c1c56da53b71c739"
## writes = [
##     "deps/ryu-c1c56da53b71c739.d",
##     "deps/libryu-c1c56da53b71c739.rmeta",
##     "deps/libryu-c1c56da53b71c739.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/ryu-c1c56da53b71c739.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-ryu-1.0.15"
## script = '''
## FROM scratch AS cratesio-ryu-1.0.15
## ADD --chmod=0664 --checksum=sha256:1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741 \
##   https://static.crates.io/crates/ryu/ryu-1.0.15.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-ryu-1.0.15-c1c56da53b71c739"
## script = '''
## FROM rust-base AS dep-l-ryu-1.0.15-c1c56da53b71c739
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-ryu-1.0.15,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="ryu" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15/Cargo.toml" \
##         CARGO_PKG_AUTHORS="David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Fast floating point to string conversion" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR BSL-1.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="ryu" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/dtolnay/ryu" \
##         CARGO_PKG_RUST_VERSION="1.36" \
##         CARGO_PKG_VERSION="1.0.15" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="15" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'ryu' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("no-panic", "small"))' '-C' 'metadata=59cc307e35f46133' '-C' 'extra-filename=-c1c56da53b71c739' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/ryu-1.0.15/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-c1c56da53b71c739"
## script = """
## FROM scratch AS out-c1c56da53b71c739
## COPY --from=dep-l-ryu-1.0.15-c1c56da53b71c739 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-c1c56da53b71c739* /"""

FROM scratch AS cratesio-serde_json-1.0.108
ADD --chmod=0664 --checksum=sha256:3d1c7e3eac408d115102c4c24ad393e0821bb3a5df4d506a80f85f7a742a526b \
  https://static.crates.io/crates/serde_json/serde_json-1.0.108.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-serde_json-1.0.108-6ecbaf4367945ded
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-serde_json-1.0.108,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108 \
  --mount=from=out-3c67d4b032e6b506,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta,source=/libitoa-3c67d4b032e6b506.rmeta \
  --mount=from=out-c1c56da53b71c739,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta,source=/libryu-c1c56da53b71c739.rmeta \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="serde_json" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108/Cargo.toml" \
        CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A JSON serialization file format" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="serde_json" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/serde-rs/json" \
        CARGO_PKG_RUST_VERSION="1.56" \
        CARGO_PKG_VERSION="1.0.108" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="108" \
        CARGO_PKG_VERSION_PRE= \
        OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/serde_json-5cafd8c6dc037fed/out" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'serde_json' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "arbitrary_precision", "default", "float_roundtrip", "indexmap", "preserve_order", "raw_value", "std", "unbounded_depth"))' '-C' 'metadata=1f4388cd35505426' '-C' 'extra-filename=-6ecbaf4367945ded' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'itoa=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta' '--extern' 'ryu=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--cap-lints' 'warn' '--cfg' 'limb_width_64' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6ecbaf4367945ded
COPY --from=dep-l-serde_json-1.0.108-6ecbaf4367945ded /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-6ecbaf4367945ded* /

## this = "6ecbaf4367945ded"
## deps = [
##     "3c67d4b032e6b506",
##     "c1c56da53b71c739",
##     "1c85eb2286dfea21",
## ]
## short_externs = [
##     "itoa-3c67d4b032e6b506",
##     "ryu-c1c56da53b71c739",
##     "serde-1c85eb2286dfea21",
## ]
## writes = [
##     "deps/serde_json-6ecbaf4367945ded.d",
##     "deps/libserde_json-6ecbaf4367945ded.rmeta",
##     "deps/libserde_json-6ecbaf4367945ded.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/serde_json-6ecbaf4367945ded.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-serde_json-1.0.108"
## script = '''
## FROM scratch AS cratesio-serde_json-1.0.108
## ADD --chmod=0664 --checksum=sha256:3d1c7e3eac408d115102c4c24ad393e0821bb3a5df4d506a80f85f7a742a526b \
##   https://static.crates.io/crates/serde_json/serde_json-1.0.108.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-serde_json-1.0.108-6ecbaf4367945ded"
## script = '''
## FROM rust-base AS dep-l-serde_json-1.0.108-6ecbaf4367945ded
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-serde_json-1.0.108,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108 \
##   --mount=from=out-3c67d4b032e6b506,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta,source=/libitoa-3c67d4b032e6b506.rmeta \
##   --mount=from=out-c1c56da53b71c739,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta,source=/libryu-c1c56da53b71c739.rmeta \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="serde_json" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A JSON serialization file format" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT OR Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="serde_json" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/serde-rs/json" \
##         CARGO_PKG_RUST_VERSION="1.56" \
##         CARGO_PKG_VERSION="1.0.108" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="108" \
##         CARGO_PKG_VERSION_PRE= \
##         OUT_DIR="/tmp/clis-cargo-llvm-cov_0-5-36/release/build/serde_json-5cafd8c6dc037fed/out" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'serde_json' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--cfg' 'feature="default"' '--cfg' 'feature="std"' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values("alloc", "arbitrary_precision", "default", "float_roundtrip", "indexmap", "preserve_order", "raw_value", "std", "unbounded_depth"))' '-C' 'metadata=1f4388cd35505426' '-C' 'extra-filename=-6ecbaf4367945ded' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'itoa=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta' '--extern' 'ryu=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--cap-lints' 'warn' '--cfg' 'limb_width_64' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/serde_json-1.0.108/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6ecbaf4367945ded"
## script = """
## FROM scratch AS out-6ecbaf4367945ded
## COPY --from=dep-l-serde_json-1.0.108-6ecbaf4367945ded /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-6ecbaf4367945ded* /"""

FROM scratch AS cratesio-shell-escape-0.1.5
ADD --chmod=0664 --checksum=sha256:45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f \
  https://static.crates.io/crates/shell-escape/shell-escape-0.1.5.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-shell-escape-0.1.5-556035d7e462e7c3
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-shell-escape-0.1.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="shell_escape" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/Cargo.toml" \
        CARGO_PKG_AUTHORS="Steven Fackler <sfackler@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Escape characters that may have a special meaning in a shell" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="MIT/Apache-2.0" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="shell-escape" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/sfackler/shell-escape" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="0.1.5" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="1" \
        CARGO_PKG_VERSION_PATCH="5" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'shell_escape' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=cad313955a5aa858' '-C' 'extra-filename=-556035d7e462e7c3' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-556035d7e462e7c3
COPY --from=dep-l-shell-escape-0.1.5-556035d7e462e7c3 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-556035d7e462e7c3* /

## this = "556035d7e462e7c3"
## writes = [
##     "deps/shell_escape-556035d7e462e7c3.d",
##     "deps/libshell_escape-556035d7e462e7c3.rmeta",
##     "deps/libshell_escape-556035d7e462e7c3.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/shell_escape-556035d7e462e7c3.d","emit":"dep-info"}',
##     '''{"$message_type":"diagnostic","message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs","byte_start":2959,"byte_end":2962,"line_start":95,"line_end":95,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(ellipsis_inclusive_range_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs","byte_start":2959,"byte_end":2962,"line_start":95,"line_end":95,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs:95:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ellipsis_inclusive_range_patterns)]` on by default\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs","byte_start":2971,"byte_end":2974,"line_start":95,"line_end":95,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs","byte_start":2971,"byte_end":2974,"line_start":95,"line_end":95,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs:95:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}''',
##     '''{"$message_type":"diagnostic","message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs","byte_start":2983,"byte_end":2986,"line_start":95,"line_end":95,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs","byte_start":2983,"byte_end":2986,"line_start":95,"line_end":95,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs:95:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            'a'...'z' | 'A'...'Z' | '0'...'9' | '-' | '_' | '=' | '/' | ',' | '.' | '+' => false,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-shell-escape-0.1.5"
## script = '''
## FROM scratch AS cratesio-shell-escape-0.1.5
## ADD --chmod=0664 --checksum=sha256:45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f \
##   https://static.crates.io/crates/shell-escape/shell-escape-0.1.5.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-shell-escape-0.1.5-556035d7e462e7c3"
## script = '''
## FROM rust-base AS dep-l-shell-escape-0.1.5-556035d7e462e7c3
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-shell-escape-0.1.5,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="shell_escape" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Steven Fackler <sfackler@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Escape characters that may have a special meaning in a shell" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="MIT/Apache-2.0" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="shell-escape" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/sfackler/shell-escape" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="0.1.5" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="1" \
##         CARGO_PKG_VERSION_PATCH="5" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'shell_escape' '--edition' '2015' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=cad313955a5aa858' '-C' 'extra-filename=-556035d7e462e7c3' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/shell-escape-0.1.5/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-556035d7e462e7c3"
## script = """
## FROM scratch AS out-556035d7e462e7c3
## COPY --from=dep-l-shell-escape-0.1.5-556035d7e462e7c3 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-556035d7e462e7c3* /"""

FROM scratch AS cratesio-termcolor-1.3.0
ADD --chmod=0664 --checksum=sha256:6093bad37da69aab9d123a8091e4be0aa4a03e4d601ec641c327398315f62b64 \
  https://static.crates.io/crates/termcolor/termcolor-1.3.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-termcolor-1.3.0-4b4472178572806d
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-termcolor-1.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="termcolor" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A simple cross platform library for writing colored text to a terminal.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/termcolor" \
        CARGO_PKG_LICENSE="Unlicense OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="termcolor" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/termcolor" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.3.0" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="3" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'termcolor' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=5eef4abdad313c34' '-C' 'extra-filename=-4b4472178572806d' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-4b4472178572806d
COPY --from=dep-l-termcolor-1.3.0-4b4472178572806d /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-4b4472178572806d* /

## this = "4b4472178572806d"
## writes = [
##     "deps/termcolor-4b4472178572806d.d",
##     "deps/libtermcolor-4b4472178572806d.rmeta",
##     "deps/libtermcolor-4b4472178572806d.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/termcolor-4b4472178572806d.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-termcolor-1.3.0"
## script = '''
## FROM scratch AS cratesio-termcolor-1.3.0
## ADD --chmod=0664 --checksum=sha256:6093bad37da69aab9d123a8091e4be0aa4a03e4d601ec641c327398315f62b64 \
##   https://static.crates.io/crates/termcolor/termcolor-1.3.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-termcolor-1.3.0-4b4472178572806d"
## script = '''
## FROM rust-base AS dep-l-termcolor-1.3.0-4b4472178572806d
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-termcolor-1.3.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="termcolor" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A simple cross platform library for writing colored text to a terminal.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/termcolor" \
##         CARGO_PKG_LICENSE="Unlicense OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="termcolor" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/termcolor" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.3.0" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="3" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'termcolor' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=5eef4abdad313c34' '-C' 'extra-filename=-4b4472178572806d' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/termcolor-1.3.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-4b4472178572806d"
## script = """
## FROM scratch AS out-4b4472178572806d
## COPY --from=dep-l-termcolor-1.3.0-4b4472178572806d /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-4b4472178572806d* /"""

FROM scratch AS cratesio-same-file-1.0.6
ADD --chmod=0664 --checksum=sha256:93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502 \
  https://static.crates.io/crates/same-file/same-file-1.0.6.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-same-file-1.0.6-ef2c1f0ce287269e
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-same-file-1.0.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6 \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="same_file" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="A simple crate for determining whether two file paths point to the same file.\n" \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/same-file" \
        CARGO_PKG_LICENSE="Unlicense/MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="same-file" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/same-file" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="1.0.6" \
        CARGO_PKG_VERSION_MAJOR="1" \
        CARGO_PKG_VERSION_MINOR="0" \
        CARGO_PKG_VERSION_PATCH="6" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'same_file' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=914e5794c9338ef8' '-C' 'extra-filename=-ef2c1f0ce287269e' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-ef2c1f0ce287269e
COPY --from=dep-l-same-file-1.0.6-ef2c1f0ce287269e /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-ef2c1f0ce287269e* /

## this = "ef2c1f0ce287269e"
## writes = [
##     "deps/same_file-ef2c1f0ce287269e.d",
##     "deps/libsame_file-ef2c1f0ce287269e.rmeta",
##     "deps/libsame_file-ef2c1f0ce287269e.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/same_file-ef2c1f0ce287269e.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"unused return value of `into_raw_fd` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/src/unix.rs","byte_start":650,"byte_end":689,"line_start":23,"line_end":23,"column_start":13,"column_end":52,"is_primary":true,"text":[{"text":"            self.file.take().unwrap().into_raw_fd();","highlight_start":13,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"losing the raw file descriptor may leak resources","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/src/unix.rs","byte_start":650,"byte_end":650,"line_start":23,"line_end":23,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            self.file.take().unwrap().into_raw_fd();","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `into_raw_fd` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/src/unix.rs:23:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.file.take().unwrap().into_raw_fd();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: losing the raw file descriptor may leak resources\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mself.file.take().unwrap().into_raw_fd();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rlib","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-same-file-1.0.6"
## script = '''
## FROM scratch AS cratesio-same-file-1.0.6
## ADD --chmod=0664 --checksum=sha256:93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502 \
##   https://static.crates.io/crates/same-file/same-file-1.0.6.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-same-file-1.0.6-ef2c1f0ce287269e"
## script = '''
## FROM rust-base AS dep-l-same-file-1.0.6-ef2c1f0ce287269e
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-same-file-1.0.6,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6 \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="same_file" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="A simple crate for determining whether two file paths point to the same file.\n" \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/same-file" \
##         CARGO_PKG_LICENSE="Unlicense/MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="same-file" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/same-file" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="1.0.6" \
##         CARGO_PKG_VERSION_MAJOR="1" \
##         CARGO_PKG_VERSION_MINOR="0" \
##         CARGO_PKG_VERSION_PATCH="6" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'same_file' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=914e5794c9338ef8' '-C' 'extra-filename=-ef2c1f0ce287269e' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/same-file-1.0.6/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-ef2c1f0ce287269e"
## script = """
## FROM scratch AS out-ef2c1f0ce287269e
## COPY --from=dep-l-same-file-1.0.6-ef2c1f0ce287269e /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-ef2c1f0ce287269e* /"""

FROM scratch AS cratesio-walkdir-2.4.0
ADD --chmod=0664 --checksum=sha256:d71d857dc86794ca4c280d616f7da00d2dbfd8cd788846559a6813e6aa4b54ee \
  https://static.crates.io/crates/walkdir/walkdir-2.4.0.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-walkdir-2.4.0-bca2a2960255b7a0
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-walkdir-2.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0 \
  --mount=from=out-ef2c1f0ce287269e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta,source=/libsame_file-ef2c1f0ce287269e.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="walkdir" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0/Cargo.toml" \
        CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
        CARGO_PKG_DESCRIPTION="Recursively walk a directory." \
        CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/walkdir" \
        CARGO_PKG_LICENSE="Unlicense/MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="walkdir" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/walkdir" \
        CARGO_PKG_RUST_VERSION= \
        CARGO_PKG_VERSION="2.4.0" \
        CARGO_PKG_VERSION_MAJOR="2" \
        CARGO_PKG_VERSION_MINOR="4" \
        CARGO_PKG_VERSION_PATCH="0" \
        CARGO_PKG_VERSION_PRE= \
        CARGOGREEN=1 \
      rustc '--crate-name' 'walkdir' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=cf05790eb3bcc88a' '-C' 'extra-filename=-bca2a2960255b7a0' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'same_file=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-bca2a2960255b7a0
COPY --from=dep-l-walkdir-2.4.0-bca2a2960255b7a0 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-bca2a2960255b7a0* /

## this = "bca2a2960255b7a0"
## deps = ["ef2c1f0ce287269e"]
## short_externs = ["same_file-ef2c1f0ce287269e"]
## writes = [
##     "deps/walkdir-bca2a2960255b7a0.d",
##     "deps/libwalkdir-bca2a2960255b7a0.rmeta",
##     "deps/libwalkdir-bca2a2960255b7a0.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/walkdir-bca2a2960255b7a0.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rlib","emit":"link"}',
## ]
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-walkdir-2.4.0"
## script = '''
## FROM scratch AS cratesio-walkdir-2.4.0
## ADD --chmod=0664 --checksum=sha256:d71d857dc86794ca4c280d616f7da00d2dbfd8cd788846559a6813e6aa4b54ee \
##   https://static.crates.io/crates/walkdir/walkdir-2.4.0.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-walkdir-2.4.0-bca2a2960255b7a0"
## script = '''
## FROM rust-base AS dep-l-walkdir-2.4.0-bca2a2960255b7a0
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-walkdir-2.4.0,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0 \
##   --mount=from=out-ef2c1f0ce287269e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta,source=/libsame_file-ef2c1f0ce287269e.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="walkdir" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0/Cargo.toml" \
##         CARGO_PKG_AUTHORS="Andrew Gallant <jamslam@gmail.com>" \
##         CARGO_PKG_DESCRIPTION="Recursively walk a directory." \
##         CARGO_PKG_HOMEPAGE="https://github.com/BurntSushi/walkdir" \
##         CARGO_PKG_LICENSE="Unlicense/MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="walkdir" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/BurntSushi/walkdir" \
##         CARGO_PKG_RUST_VERSION= \
##         CARGO_PKG_VERSION="2.4.0" \
##         CARGO_PKG_VERSION_MAJOR="2" \
##         CARGO_PKG_VERSION_MINOR="4" \
##         CARGO_PKG_VERSION_PATCH="0" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'walkdir' '--edition' '2018' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=cf05790eb3bcc88a' '-C' 'extra-filename=-bca2a2960255b7a0' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'same_file=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/walkdir-2.4.0/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-bca2a2960255b7a0"
## script = """
## FROM scratch AS out-bca2a2960255b7a0
## COPY --from=dep-l-walkdir-2.4.0-bca2a2960255b7a0 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-bca2a2960255b7a0* /"""

FROM scratch AS cratesio-cargo-llvm-cov-0.5.36
ADD --chmod=0664 --checksum=sha256:f1b590080f152252f3fa52a3bfaca45f5d6d565ea6a36127e064df0db0d25f8f \
  https://static.crates.io/crates/cargo-llvm-cov/cargo-llvm-cov-0.5.36.crate /crate
SHELL ["/usr/bin/dash", "-eux", "-c"]
RUN \
  --mount=from=rust-base,src=/lib,dst=/lib \
  --mount=from=rust-base,src=/lib64,dst=/lib64 \
  --mount=from=rust-base,src=/usr,dst=/usr \
    mkdir /extracted \
 && tar zxf /crate --strip-components=1 -C /extracted
FROM rust-base AS dep-l-cargo-llvm-cov-0.5.36-6712aa0774f1cf2a
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-cargo-llvm-cov-0.5.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36 \
  --mount=from=out-dfdf484c5c94dda8,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta,source=/libanyhow-dfdf484c5c94dda8.rmeta \
  --mount=from=out-dc62d29369f657b5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rmeta,source=/libcamino-dc62d29369f657b5.rmeta \
  --mount=from=out-a9bb60b727a99073,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rmeta,source=/libcargo_config2-a9bb60b727a99073.rmeta \
  --mount=from=out-171ad634cd69714c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta,source=/libhome-171ad634cd69714c.rmeta \
  --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta,source=/libonce_cell-4f105e9db8e23ef7.rmeta \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
  --mount=from=out-ff34cba9c5968a92,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so,source=/libserde_derive-ff34cba9c5968a92.so \
  --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
  --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta,source=/libquote-edd57c64bf370f1f.rmeta \
  --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rmeta,source=/libsyn-f064d7808d2642c6.rmeta \
  --mount=from=out-0f30734a5cedfcc3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta,source=/libtoml_edit-0f30734a5cedfcc3.rmeta \
  --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta,source=/libindexmap-09d3e45661ef6bae.rmeta \
  --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
  --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
  --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta,source=/libserde_spanned-fa41a08fdcaade9c.rmeta \
  --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta,source=/libtoml_datetime-cc2e1105bd13c489.rmeta \
  --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta,source=/libwinnow-8a050dfd1238b93f.rmeta \
  --mount=from=out-dede1a3d65ebb862,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rmeta,source=/libduct-dede1a3d65ebb862.rmeta \
  --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
  --mount=from=out-e5c39a7d0ce96cb7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta,source=/libos_pipe-e5c39a7d0ce96cb7.rmeta \
  --mount=from=out-bcc226464ecacfc6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta,source=/libshared_child-bcc226464ecacfc6.rmeta \
  --mount=from=out-ab39b5b441440c4a,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rmeta,source=/libfs_err-ab39b5b441440c4a.rmeta \
  --mount=from=out-f5d2c2efec8db340,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rmeta,source=/libglob-f5d2c2efec8db340.rmeta \
  --mount=from=out-80d6e4d76acd8f4d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rmeta,source=/libis_terminal-80d6e4d76acd8f4d.rmeta \
  --mount=from=out-3404a66ca545b301,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rmeta,source=/librustix-3404a66ca545b301.rmeta \
  --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta,source=/libbitflags-8921c69f98e179ab.rmeta \
  --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta,source=/liblinux_raw_sys-38fbb57bea94d5d0.rmeta \
  --mount=from=out-efec94c3a9e63fea,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rmeta,source=/libis_executable-efec94c3a9e63fea.rmeta \
  --mount=from=out-bd351604e8a3606e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rmeta,source=/liblcov2cobertura-bd351604e8a3606e.rmeta \
  --mount=from=out-2294e716788d14e5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta,source=/libquick_xml-2294e716788d14e5.rmeta \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
  --mount=from=out-eed1bc1f14927bd9,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta,source=/libregex-eed1bc1f14927bd9.rmeta \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
  --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
  --mount=from=out-a563bff5f53acd0c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta,source=/librustc_demangle-a563bff5f53acd0c.rmeta \
  --mount=from=out-72cd9e8a271d7703,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rmeta,source=/liblexopt-72cd9e8a271d7703.rmeta \
  --mount=from=out-d2ce0c8cc304947c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rmeta,source=/libopener-d2ce0c8cc304947c.rmeta \
  --mount=from=out-414bf26c2675cba2,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta,source=/libbstr-414bf26c2675cba2.rmeta \
  --mount=from=out-6ecbaf4367945ded,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rmeta,source=/libserde_json-6ecbaf4367945ded.rmeta \
  --mount=from=out-3c67d4b032e6b506,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta,source=/libitoa-3c67d4b032e6b506.rmeta \
  --mount=from=out-c1c56da53b71c739,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta,source=/libryu-c1c56da53b71c739.rmeta \
  --mount=from=out-556035d7e462e7c3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rmeta,source=/libshell_escape-556035d7e462e7c3.rmeta \
  --mount=from=out-4b4472178572806d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rmeta,source=/libtermcolor-4b4472178572806d.rmeta \
  --mount=from=out-bca2a2960255b7a0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rmeta,source=/libwalkdir-bca2a2960255b7a0.rmeta \
  --mount=from=out-ef2c1f0ce287269e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta,source=/libsame_file-ef2c1f0ce287269e.rmeta \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_CRATE_NAME="cargo_llvm_cov" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Cargo subcommand to easily use LLVM source-based code coverage (-C instrument-coverage).\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="cargo-llvm-cov" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/taiki-e/cargo-llvm-cov" \
        CARGO_PKG_RUST_VERSION="1.67" \
        CARGO_PKG_VERSION="0.5.36" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="36" \
        CARGO_PKG_VERSION_PRE= \
        CARGO_PRIMARY_PACKAGE="1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'cargo_llvm_cov' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=afc45ea67fafc12c' '-C' 'extra-filename=-6712aa0774f1cf2a' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'anyhow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta' '--extern' 'camino=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rmeta' '--extern' 'cargo_config2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rmeta' '--extern' 'duct=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rmeta' '--extern' 'fs_err=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rmeta' '--extern' 'glob=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rmeta' '--extern' 'home=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta' '--extern' 'is_terminal=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rmeta' '--extern' 'is_executable=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rmeta' '--extern' 'lcov2cobertura=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rmeta' '--extern' 'lexopt=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rmeta' '--extern' 'opener=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rmeta' '--extern' 'regex=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta' '--extern' 'rustc_demangle=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--extern' 'serde_derive=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so' '--extern' 'serde_json=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rmeta' '--extern' 'shell_escape=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rmeta' '--extern' 'termcolor=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rmeta' '--extern' 'walkdir=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/lib.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-6712aa0774f1cf2a
COPY --from=dep-l-cargo-llvm-cov-0.5.36-6712aa0774f1cf2a /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-6712aa0774f1cf2a* /

## this = "6712aa0774f1cf2a"
## deps = [
##     "dfdf484c5c94dda8",
##     "dc62d29369f657b5",
##     "a9bb60b727a99073",
##     "171ad634cd69714c",
##     "4f105e9db8e23ef7",
##     "1c85eb2286dfea21",
##     "ff34cba9c5968a92",
##     "f6046e418e99ef58",
##     "022b01bf1767ab5b",
##     "edd57c64bf370f1f",
##     "f064d7808d2642c6",
##     "0f30734a5cedfcc3",
##     "09d3e45661ef6bae",
##     "60241e4fe7f04e90",
##     "e22a55dd51e34d0e",
##     "fa41a08fdcaade9c",
##     "cc2e1105bd13c489",
##     "8a050dfd1238b93f",
##     "dede1a3d65ebb862",
##     "4a9d9e0eac4eef83",
##     "e5c39a7d0ce96cb7",
##     "bcc226464ecacfc6",
##     "ab39b5b441440c4a",
##     "f5d2c2efec8db340",
##     "80d6e4d76acd8f4d",
##     "3404a66ca545b301",
##     "8921c69f98e179ab",
##     "38fbb57bea94d5d0",
##     "efec94c3a9e63fea",
##     "bd351604e8a3606e",
##     "2294e716788d14e5",
##     "679a642609c73d54",
##     "eed1bc1f14927bd9",
##     "a1abc4d34011cf1c",
##     "19d70c78c72efef5",
##     "07e89991623c09ad",
##     "a563bff5f53acd0c",
##     "72cd9e8a271d7703",
##     "d2ce0c8cc304947c",
##     "414bf26c2675cba2",
##     "6ecbaf4367945ded",
##     "3c67d4b032e6b506",
##     "c1c56da53b71c739",
##     "556035d7e462e7c3",
##     "4b4472178572806d",
##     "bca2a2960255b7a0",
##     "ef2c1f0ce287269e",
## ]
## short_externs = [
##     "anyhow-dfdf484c5c94dda8",
##     "camino-dc62d29369f657b5",
##     "cargo_config2-a9bb60b727a99073",
##     "home-171ad634cd69714c",
##     "once_cell-4f105e9db8e23ef7",
##     "serde-1c85eb2286dfea21",
##     "serde_derive-ff34cba9c5968a92",
##     "proc_macro2-f6046e418e99ef58",
##     "unicode_ident-022b01bf1767ab5b",
##     "quote-edd57c64bf370f1f",
##     "syn-f064d7808d2642c6",
##     "toml_edit-0f30734a5cedfcc3",
##     "indexmap-09d3e45661ef6bae",
##     "equivalent-60241e4fe7f04e90",
##     "hashbrown-e22a55dd51e34d0e",
##     "serde_spanned-fa41a08fdcaade9c",
##     "toml_datetime-cc2e1105bd13c489",
##     "winnow-8a050dfd1238b93f",
##     "duct-dede1a3d65ebb862",
##     "libc-4a9d9e0eac4eef83",
##     "os_pipe-e5c39a7d0ce96cb7",
##     "shared_child-bcc226464ecacfc6",
##     "fs_err-ab39b5b441440c4a",
##     "glob-f5d2c2efec8db340",
##     "is_terminal-80d6e4d76acd8f4d",
##     "rustix-3404a66ca545b301",
##     "bitflags-8921c69f98e179ab",
##     "linux_raw_sys-38fbb57bea94d5d0",
##     "is_executable-efec94c3a9e63fea",
##     "lcov2cobertura-bd351604e8a3606e",
##     "quick_xml-2294e716788d14e5",
##     "memchr-679a642609c73d54",
##     "regex-eed1bc1f14927bd9",
##     "aho_corasick-a1abc4d34011cf1c",
##     "regex_automata-19d70c78c72efef5",
##     "regex_syntax-07e89991623c09ad",
##     "rustc_demangle-a563bff5f53acd0c",
##     "lexopt-72cd9e8a271d7703",
##     "opener-d2ce0c8cc304947c",
##     "bstr-414bf26c2675cba2",
##     "serde_json-6ecbaf4367945ded",
##     "itoa-3c67d4b032e6b506",
##     "ryu-c1c56da53b71c739",
##     "shell_escape-556035d7e462e7c3",
##     "termcolor-4b4472178572806d",
##     "walkdir-bca2a2960255b7a0",
##     "same_file-ef2c1f0ce287269e",
## ]
## writes = [
##     "deps/cargo_llvm_cov-6712aa0774f1cf2a.d",
##     "deps/libcargo_llvm_cov-6712aa0774f1cf2a.rmeta",
##     "deps/libcargo_llvm_cov-6712aa0774f1cf2a.rlib",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/cargo_llvm_cov-6712aa0774f1cf2a.d","emit":"dep-info"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_llvm_cov-6712aa0774f1cf2a.rmeta","emit":"metadata"}',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_llvm_cov-6712aa0774f1cf2a.rlib","emit":"link"}',
## ]
## 
## [[contexts]]
## name = "crate_out-320a4f7879609678"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out"
## 
## [[contexts]]
## name = "crate_out-e00335469bb9fb6d"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-cargo-llvm-cov-0.5.36"
## script = '''
## FROM scratch AS cratesio-cargo-llvm-cov-0.5.36
## ADD --chmod=0664 --checksum=sha256:f1b590080f152252f3fa52a3bfaca45f5d6d565ea6a36127e064df0db0d25f8f \
##   https://static.crates.io/crates/cargo-llvm-cov/cargo-llvm-cov-0.5.36.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-l-cargo-llvm-cov-0.5.36-6712aa0774f1cf2a"
## script = '''
## FROM rust-base AS dep-l-cargo-llvm-cov-0.5.36-6712aa0774f1cf2a
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-cargo-llvm-cov-0.5.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36 \
##   --mount=from=out-dfdf484c5c94dda8,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta,source=/libanyhow-dfdf484c5c94dda8.rmeta \
##   --mount=from=out-dc62d29369f657b5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rmeta,source=/libcamino-dc62d29369f657b5.rmeta \
##   --mount=from=out-a9bb60b727a99073,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rmeta,source=/libcargo_config2-a9bb60b727a99073.rmeta \
##   --mount=from=out-171ad634cd69714c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta,source=/libhome-171ad634cd69714c.rmeta \
##   --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rmeta,source=/libonce_cell-4f105e9db8e23ef7.rmeta \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta,source=/libserde-1c85eb2286dfea21.rmeta \
##   --mount=from=out-ff34cba9c5968a92,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so,source=/libserde_derive-ff34cba9c5968a92.so \
##   --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rmeta,source=/libproc_macro2-f6046e418e99ef58.rmeta \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rmeta,source=/libunicode_ident-022b01bf1767ab5b.rmeta \
##   --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rmeta,source=/libquote-edd57c64bf370f1f.rmeta \
##   --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rmeta,source=/libsyn-f064d7808d2642c6.rmeta \
##   --mount=from=out-0f30734a5cedfcc3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rmeta,source=/libtoml_edit-0f30734a5cedfcc3.rmeta \
##   --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rmeta,source=/libindexmap-09d3e45661ef6bae.rmeta \
##   --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rmeta,source=/libequivalent-60241e4fe7f04e90.rmeta \
##   --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rmeta,source=/libhashbrown-e22a55dd51e34d0e.rmeta \
##   --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rmeta,source=/libserde_spanned-fa41a08fdcaade9c.rmeta \
##   --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rmeta,source=/libtoml_datetime-cc2e1105bd13c489.rmeta \
##   --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rmeta,source=/libwinnow-8a050dfd1238b93f.rmeta \
##   --mount=from=out-dede1a3d65ebb862,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rmeta,source=/libduct-dede1a3d65ebb862.rmeta \
##   --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rmeta,source=/liblibc-4a9d9e0eac4eef83.rmeta \
##   --mount=from=out-e5c39a7d0ce96cb7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rmeta,source=/libos_pipe-e5c39a7d0ce96cb7.rmeta \
##   --mount=from=out-bcc226464ecacfc6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rmeta,source=/libshared_child-bcc226464ecacfc6.rmeta \
##   --mount=from=out-ab39b5b441440c4a,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rmeta,source=/libfs_err-ab39b5b441440c4a.rmeta \
##   --mount=from=out-f5d2c2efec8db340,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rmeta,source=/libglob-f5d2c2efec8db340.rmeta \
##   --mount=from=out-80d6e4d76acd8f4d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rmeta,source=/libis_terminal-80d6e4d76acd8f4d.rmeta \
##   --mount=from=out-3404a66ca545b301,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rmeta,source=/librustix-3404a66ca545b301.rmeta \
##   --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rmeta,source=/libbitflags-8921c69f98e179ab.rmeta \
##   --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rmeta,source=/liblinux_raw_sys-38fbb57bea94d5d0.rmeta \
##   --mount=from=out-efec94c3a9e63fea,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rmeta,source=/libis_executable-efec94c3a9e63fea.rmeta \
##   --mount=from=out-bd351604e8a3606e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rmeta,source=/liblcov2cobertura-bd351604e8a3606e.rmeta \
##   --mount=from=out-2294e716788d14e5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rmeta,source=/libquick_xml-2294e716788d14e5.rmeta \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rmeta,source=/libmemchr-679a642609c73d54.rmeta \
##   --mount=from=out-eed1bc1f14927bd9,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta,source=/libregex-eed1bc1f14927bd9.rmeta \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rmeta,source=/libaho_corasick-a1abc4d34011cf1c.rmeta \
##   --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rmeta,source=/libregex_automata-19d70c78c72efef5.rmeta \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rmeta,source=/libregex_syntax-07e89991623c09ad.rmeta \
##   --mount=from=out-a563bff5f53acd0c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta,source=/librustc_demangle-a563bff5f53acd0c.rmeta \
##   --mount=from=out-72cd9e8a271d7703,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rmeta,source=/liblexopt-72cd9e8a271d7703.rmeta \
##   --mount=from=out-d2ce0c8cc304947c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rmeta,source=/libopener-d2ce0c8cc304947c.rmeta \
##   --mount=from=out-414bf26c2675cba2,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rmeta,source=/libbstr-414bf26c2675cba2.rmeta \
##   --mount=from=out-6ecbaf4367945ded,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rmeta,source=/libserde_json-6ecbaf4367945ded.rmeta \
##   --mount=from=out-3c67d4b032e6b506,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rmeta,source=/libitoa-3c67d4b032e6b506.rmeta \
##   --mount=from=out-c1c56da53b71c739,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rmeta,source=/libryu-c1c56da53b71c739.rmeta \
##   --mount=from=out-556035d7e462e7c3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rmeta,source=/libshell_escape-556035d7e462e7c3.rmeta \
##   --mount=from=out-4b4472178572806d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rmeta,source=/libtermcolor-4b4472178572806d.rmeta \
##   --mount=from=out-bca2a2960255b7a0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rmeta,source=/libwalkdir-bca2a2960255b7a0.rmeta \
##   --mount=from=out-ef2c1f0ce287269e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rmeta,source=/libsame_file-ef2c1f0ce287269e.rmeta \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_CRATE_NAME="cargo_llvm_cov" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Cargo subcommand to easily use LLVM source-based code coverage (-C instrument-coverage).\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="cargo-llvm-cov" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/taiki-e/cargo-llvm-cov" \
##         CARGO_PKG_RUST_VERSION="1.67" \
##         CARGO_PKG_VERSION="0.5.36" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="36" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGO_PRIMARY_PACKAGE="1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'cargo_llvm_cov' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'lib' '--emit' 'dep-info,metadata,link' '-C' 'opt-level=3' '-C' 'linker-plugin-lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=afc45ea67fafc12c' '-C' 'extra-filename=-6712aa0774f1cf2a' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'anyhow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rmeta' '--extern' 'camino=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rmeta' '--extern' 'cargo_config2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rmeta' '--extern' 'duct=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rmeta' '--extern' 'fs_err=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rmeta' '--extern' 'glob=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rmeta' '--extern' 'home=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rmeta' '--extern' 'is_terminal=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rmeta' '--extern' 'is_executable=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rmeta' '--extern' 'lcov2cobertura=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rmeta' '--extern' 'lexopt=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rmeta' '--extern' 'opener=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rmeta' '--extern' 'regex=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rmeta' '--extern' 'rustc_demangle=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rmeta' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rmeta' '--extern' 'serde_derive=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so' '--extern' 'serde_json=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rmeta' '--extern' 'shell_escape=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rmeta' '--extern' 'termcolor=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rmeta' '--extern' 'walkdir=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rmeta' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/lib.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-6712aa0774f1cf2a"
## script = """
## FROM scratch AS out-6712aa0774f1cf2a
## COPY --from=dep-l-cargo-llvm-cov-0.5.36-6712aa0774f1cf2a /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-6712aa0774f1cf2a* /"""


FROM rust-base AS dep-b-cargo-llvm-cov-0.5.36-b9f2edde3db67b64
SHELL ["/bin/bash", "-eux", "-c"]
WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
RUN \
  --mount=from=cratesio-cargo-llvm-cov-0.5.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36 \
  --mount=from=out-dfdf484c5c94dda8,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rlib,source=/libanyhow-dfdf484c5c94dda8.rlib \
  --mount=from=out-dc62d29369f657b5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rlib,source=/libcamino-dc62d29369f657b5.rlib \
  --mount=from=out-a9bb60b727a99073,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rlib,source=/libcargo_config2-a9bb60b727a99073.rlib \
  --mount=from=out-171ad634cd69714c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rlib,source=/libhome-171ad634cd69714c.rlib \
  --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rlib,source=/libonce_cell-4f105e9db8e23ef7.rlib \
  --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rlib,source=/libserde-1c85eb2286dfea21.rlib \
  --mount=from=out-ff34cba9c5968a92,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so,source=/libserde_derive-ff34cba9c5968a92.so \
  --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rlib,source=/libproc_macro2-f6046e418e99ef58.rlib \
  --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rlib,source=/libunicode_ident-022b01bf1767ab5b.rlib \
  --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib,source=/libquote-edd57c64bf370f1f.rlib \
  --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rlib,source=/libsyn-f064d7808d2642c6.rlib \
  --mount=from=out-0f30734a5cedfcc3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rlib,source=/libtoml_edit-0f30734a5cedfcc3.rlib \
  --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rlib,source=/libindexmap-09d3e45661ef6bae.rlib \
  --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rlib,source=/libequivalent-60241e4fe7f04e90.rlib \
  --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rlib,source=/libhashbrown-e22a55dd51e34d0e.rlib \
  --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rlib,source=/libserde_spanned-fa41a08fdcaade9c.rlib \
  --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rlib,source=/libtoml_datetime-cc2e1105bd13c489.rlib \
  --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rlib,source=/libwinnow-8a050dfd1238b93f.rlib \
  --mount=from=out-6712aa0774f1cf2a,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_llvm_cov-6712aa0774f1cf2a.rlib,source=/libcargo_llvm_cov-6712aa0774f1cf2a.rlib \
  --mount=from=out-dede1a3d65ebb862,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rlib,source=/libduct-dede1a3d65ebb862.rlib \
  --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rlib,source=/liblibc-4a9d9e0eac4eef83.rlib \
  --mount=from=out-e5c39a7d0ce96cb7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rlib,source=/libos_pipe-e5c39a7d0ce96cb7.rlib \
  --mount=from=out-bcc226464ecacfc6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rlib,source=/libshared_child-bcc226464ecacfc6.rlib \
  --mount=from=out-ab39b5b441440c4a,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rlib,source=/libfs_err-ab39b5b441440c4a.rlib \
  --mount=from=out-f5d2c2efec8db340,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rlib,source=/libglob-f5d2c2efec8db340.rlib \
  --mount=from=out-80d6e4d76acd8f4d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rlib,source=/libis_terminal-80d6e4d76acd8f4d.rlib \
  --mount=from=out-3404a66ca545b301,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rlib,source=/librustix-3404a66ca545b301.rlib \
  --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rlib,source=/libbitflags-8921c69f98e179ab.rlib \
  --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rlib,source=/liblinux_raw_sys-38fbb57bea94d5d0.rlib \
  --mount=from=out-efec94c3a9e63fea,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rlib,source=/libis_executable-efec94c3a9e63fea.rlib \
  --mount=from=out-bd351604e8a3606e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rlib,source=/liblcov2cobertura-bd351604e8a3606e.rlib \
  --mount=from=out-2294e716788d14e5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rlib,source=/libquick_xml-2294e716788d14e5.rlib \
  --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rlib,source=/libmemchr-679a642609c73d54.rlib \
  --mount=from=out-eed1bc1f14927bd9,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rlib,source=/libregex-eed1bc1f14927bd9.rlib \
  --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rlib,source=/libaho_corasick-a1abc4d34011cf1c.rlib \
  --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rlib,source=/libregex_automata-19d70c78c72efef5.rlib \
  --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rlib,source=/libregex_syntax-07e89991623c09ad.rlib \
  --mount=from=out-a563bff5f53acd0c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rlib,source=/librustc_demangle-a563bff5f53acd0c.rlib \
  --mount=from=out-72cd9e8a271d7703,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rlib,source=/liblexopt-72cd9e8a271d7703.rlib \
  --mount=from=out-d2ce0c8cc304947c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rlib,source=/libopener-d2ce0c8cc304947c.rlib \
  --mount=from=out-414bf26c2675cba2,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rlib,source=/libbstr-414bf26c2675cba2.rlib \
  --mount=from=out-6ecbaf4367945ded,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rlib,source=/libserde_json-6ecbaf4367945ded.rlib \
  --mount=from=out-3c67d4b032e6b506,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rlib,source=/libitoa-3c67d4b032e6b506.rlib \
  --mount=from=out-c1c56da53b71c739,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rlib,source=/libryu-c1c56da53b71c739.rlib \
  --mount=from=out-556035d7e462e7c3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rlib,source=/libshell_escape-556035d7e462e7c3.rlib \
  --mount=from=out-4b4472178572806d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rlib,source=/libtermcolor-4b4472178572806d.rlib \
  --mount=from=out-bca2a2960255b7a0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rlib,source=/libwalkdir-bca2a2960255b7a0.rlib \
  --mount=from=out-ef2c1f0ce287269e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rlib,source=/libsame_file-ef2c1f0ce287269e.rlib \
    { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
    env CARGO="$(which cargo)" \
        CARGO_BIN_NAME="cargo-llvm-cov" \
        CARGO_CRATE_NAME="cargo_llvm_cov" \
        CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36" \
        CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/Cargo.toml" \
        CARGO_PKG_AUTHORS= \
        CARGO_PKG_DESCRIPTION="Cargo subcommand to easily use LLVM source-based code coverage (-C instrument-coverage).\n" \
        CARGO_PKG_HOMEPAGE= \
        CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
        CARGO_PKG_LICENSE_FILE= \
        CARGO_PKG_NAME="cargo-llvm-cov" \
        CARGO_PKG_README="README.md" \
        CARGO_PKG_REPOSITORY="https://github.com/taiki-e/cargo-llvm-cov" \
        CARGO_PKG_RUST_VERSION="1.67" \
        CARGO_PKG_VERSION="0.5.36" \
        CARGO_PKG_VERSION_MAJOR="0" \
        CARGO_PKG_VERSION_MINOR="5" \
        CARGO_PKG_VERSION_PATCH="36" \
        CARGO_PKG_VERSION_PRE= \
        CARGO_PRIMARY_PACKAGE="1" \
        CARGOGREEN=1 \
      rustc '--crate-name' 'cargo_llvm_cov' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'bin' '--emit' 'dep-info,link' '-C' 'opt-level=3' '-C' 'lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=02bc9c2d3da30c0a' '-C' 'extra-filename=-b9f2edde3db67b64' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'anyhow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rlib' '--extern' 'camino=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rlib' '--extern' 'cargo_config2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rlib' '--extern' 'cargo_llvm_cov=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_llvm_cov-6712aa0774f1cf2a.rlib' '--extern' 'duct=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rlib' '--extern' 'fs_err=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rlib' '--extern' 'glob=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rlib' '--extern' 'home=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rlib' '--extern' 'is_terminal=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rlib' '--extern' 'is_executable=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rlib' '--extern' 'lcov2cobertura=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rlib' '--extern' 'lexopt=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rlib' '--extern' 'opener=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rlib' '--extern' 'regex=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rlib' '--extern' 'rustc_demangle=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rlib' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rlib' '--extern' 'serde_derive=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so' '--extern' 'serde_json=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rlib' '--extern' 'shell_escape=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rlib' '--extern' 'termcolor=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rlib' '--extern' 'walkdir=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rlib' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/main.rs \
        1> >(sed 's/^/::STDOUT:: /') \
        2> >(sed 's/^/::STDERR:: /' >&2)
FROM scratch AS out-b9f2edde3db67b64
COPY --from=dep-b-cargo-llvm-cov-0.5.36-b9f2edde3db67b64 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-b9f2edde3db67b64* /

## this = "b9f2edde3db67b64"
## deps = [
##     "dfdf484c5c94dda8",
##     "dc62d29369f657b5",
##     "a9bb60b727a99073",
##     "171ad634cd69714c",
##     "4f105e9db8e23ef7",
##     "1c85eb2286dfea21",
##     "ff34cba9c5968a92",
##     "f6046e418e99ef58",
##     "022b01bf1767ab5b",
##     "edd57c64bf370f1f",
##     "f064d7808d2642c6",
##     "0f30734a5cedfcc3",
##     "09d3e45661ef6bae",
##     "60241e4fe7f04e90",
##     "e22a55dd51e34d0e",
##     "fa41a08fdcaade9c",
##     "cc2e1105bd13c489",
##     "8a050dfd1238b93f",
##     "6712aa0774f1cf2a",
##     "dede1a3d65ebb862",
##     "4a9d9e0eac4eef83",
##     "e5c39a7d0ce96cb7",
##     "bcc226464ecacfc6",
##     "ab39b5b441440c4a",
##     "f5d2c2efec8db340",
##     "80d6e4d76acd8f4d",
##     "3404a66ca545b301",
##     "8921c69f98e179ab",
##     "38fbb57bea94d5d0",
##     "efec94c3a9e63fea",
##     "bd351604e8a3606e",
##     "2294e716788d14e5",
##     "679a642609c73d54",
##     "eed1bc1f14927bd9",
##     "a1abc4d34011cf1c",
##     "19d70c78c72efef5",
##     "07e89991623c09ad",
##     "a563bff5f53acd0c",
##     "72cd9e8a271d7703",
##     "d2ce0c8cc304947c",
##     "414bf26c2675cba2",
##     "6ecbaf4367945ded",
##     "3c67d4b032e6b506",
##     "c1c56da53b71c739",
##     "556035d7e462e7c3",
##     "4b4472178572806d",
##     "bca2a2960255b7a0",
##     "ef2c1f0ce287269e",
## ]
## short_externs = [
##     "anyhow-dfdf484c5c94dda8",
##     "camino-dc62d29369f657b5",
##     "cargo_config2-a9bb60b727a99073",
##     "home-171ad634cd69714c",
##     "once_cell-4f105e9db8e23ef7",
##     "serde-1c85eb2286dfea21",
##     "serde_derive-ff34cba9c5968a92",
##     "proc_macro2-f6046e418e99ef58",
##     "unicode_ident-022b01bf1767ab5b",
##     "quote-edd57c64bf370f1f",
##     "syn-f064d7808d2642c6",
##     "toml_edit-0f30734a5cedfcc3",
##     "indexmap-09d3e45661ef6bae",
##     "equivalent-60241e4fe7f04e90",
##     "hashbrown-e22a55dd51e34d0e",
##     "serde_spanned-fa41a08fdcaade9c",
##     "toml_datetime-cc2e1105bd13c489",
##     "winnow-8a050dfd1238b93f",
##     "cargo_llvm_cov-6712aa0774f1cf2a",
##     "duct-dede1a3d65ebb862",
##     "libc-4a9d9e0eac4eef83",
##     "os_pipe-e5c39a7d0ce96cb7",
##     "shared_child-bcc226464ecacfc6",
##     "fs_err-ab39b5b441440c4a",
##     "glob-f5d2c2efec8db340",
##     "is_terminal-80d6e4d76acd8f4d",
##     "rustix-3404a66ca545b301",
##     "bitflags-8921c69f98e179ab",
##     "linux_raw_sys-38fbb57bea94d5d0",
##     "is_executable-efec94c3a9e63fea",
##     "lcov2cobertura-bd351604e8a3606e",
##     "quick_xml-2294e716788d14e5",
##     "memchr-679a642609c73d54",
##     "regex-eed1bc1f14927bd9",
##     "aho_corasick-a1abc4d34011cf1c",
##     "regex_automata-19d70c78c72efef5",
##     "regex_syntax-07e89991623c09ad",
##     "rustc_demangle-a563bff5f53acd0c",
##     "lexopt-72cd9e8a271d7703",
##     "opener-d2ce0c8cc304947c",
##     "bstr-414bf26c2675cba2",
##     "serde_json-6ecbaf4367945ded",
##     "itoa-3c67d4b032e6b506",
##     "ryu-c1c56da53b71c739",
##     "shell_escape-556035d7e462e7c3",
##     "termcolor-4b4472178572806d",
##     "walkdir-bca2a2960255b7a0",
##     "same_file-ef2c1f0ce287269e",
## ]
## writes = [
##     "deps/cargo_llvm_cov-b9f2edde3db67b64.d",
##     "deps/cargo_llvm_cov-b9f2edde3db67b64",
## ]
## stderr = [
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/cargo_llvm_cov-b9f2edde3db67b64.d","emit":"dep-info"}',
##     '{"$message_type":"diagnostic","message":"function `allow_null` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs","byte_start":3373,"byte_end":3383,"line_start":112,"line_end":112,"column_start":4,"column_end":14,"is_primary":true,"text":[{"text":"fn allow_null<T>(value: Value, f: impl FnOnce(Value) -> Option<T>) -> Option<Option<T>> {","highlight_start":4,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `allow_null` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs:112:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn allow_null<T>(value: Value, f: impl FnOnce(Value) -> Option<T>) -> Option<Option<T>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}',
##     '{"$message_type":"diagnostic","message":"function `into_object` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs","byte_start":3869,"byte_end":3880,"line_start":134,"line_end":134,"column_start":4,"column_end":15,"is_primary":true,"text":[{"text":"fn into_object(value: Value) -> Option<Object> {","highlight_start":4,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `into_object` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs:134:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn into_object(value: Value) -> Option<Object> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}',
##     '''{"$message_type":"diagnostic","message":"methods `remove_object` and `remove_nullable` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs","byte_start":4020,"byte_end":4029,"line_start":142,"line_end":142,"column_start":7,"column_end":16,"is_primary":false,"text":[{"text":"trait ObjectExt {","highlight_start":7,"highlight_end":16}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs","byte_start":4204,"byte_end":4217,"line_start":145,"line_end":145,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn remove_object(&mut self, key: &'static str) -> ParseResult<Object>;","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs","byte_start":4279,"byte_end":4294,"line_start":146,"line_end":146,"column_start":8,"column_end":23,"is_primary":true,"text":[{"text":"    fn remove_nullable<T>(","highlight_start":8,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `remove_object` and `remove_nullable` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/metadata.rs:145:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait ObjectExt {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_object(&mut self, key: &'static str) -> ParseResult<Object>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_nullable<T>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}''',
##     '{"$message_type":"artifact","artifact":"/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/cargo_llvm_cov-b9f2edde3db67b64","emit":"link"}',
##     '{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}',
## ]
## 
## [[contexts]]
## name = "crate_out-320a4f7879609678"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out"
## 
## [[contexts]]
## name = "crate_out-e00335469bb9fb6d"
## uri = "/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out"
## 
## [[stages]]
## name = "rust-base"
## script = "FROM --platform=$BUILDPLATFORM docker.io/library/rust:1.86.0-slim@sha256:57d415bbd61ce11e2d5f73de068103c7bd9f3188dc132c97cef4a8f62989e944 AS rust-base"
## 
## [[stages]]
## name = "cratesio-cargo-llvm-cov-0.5.36"
## script = '''
## FROM scratch AS cratesio-cargo-llvm-cov-0.5.36
## ADD --chmod=0664 --checksum=sha256:f1b590080f152252f3fa52a3bfaca45f5d6d565ea6a36127e064df0db0d25f8f \
##   https://static.crates.io/crates/cargo-llvm-cov/cargo-llvm-cov-0.5.36.crate /crate
## SHELL ["/usr/bin/dash", "-eux", "-c"]
## RUN \
##   --mount=from=rust-base,src=/lib,dst=/lib \
##   --mount=from=rust-base,src=/lib64,dst=/lib64 \
##   --mount=from=rust-base,src=/usr,dst=/usr \
##     mkdir /extracted \
##  && tar zxf /crate --strip-components=1 -C /extracted'''
## 
## [[stages]]
## name = "dep-b-cargo-llvm-cov-0.5.36-b9f2edde3db67b64"
## script = '''
## FROM rust-base AS dep-b-cargo-llvm-cov-0.5.36-b9f2edde3db67b64
## SHELL ["/bin/bash", "-eux", "-c"]
## WORKDIR /tmp/clis-cargo-llvm-cov_0-5-36/release/deps
## RUN \
##   --mount=from=cratesio-cargo-llvm-cov-0.5.36,source=/extracted,dst=/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36 \
##   --mount=from=out-dfdf484c5c94dda8,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rlib,source=/libanyhow-dfdf484c5c94dda8.rlib \
##   --mount=from=out-dc62d29369f657b5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rlib,source=/libcamino-dc62d29369f657b5.rlib \
##   --mount=from=out-a9bb60b727a99073,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rlib,source=/libcargo_config2-a9bb60b727a99073.rlib \
##   --mount=from=out-171ad634cd69714c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rlib,source=/libhome-171ad634cd69714c.rlib \
##   --mount=from=out-4f105e9db8e23ef7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libonce_cell-4f105e9db8e23ef7.rlib,source=/libonce_cell-4f105e9db8e23ef7.rlib \
##   --mount=from=out-1c85eb2286dfea21,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rlib,source=/libserde-1c85eb2286dfea21.rlib \
##   --mount=from=out-ff34cba9c5968a92,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so,source=/libserde_derive-ff34cba9c5968a92.so \
##   --mount=from=out-f6046e418e99ef58,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libproc_macro2-f6046e418e99ef58.rlib,source=/libproc_macro2-f6046e418e99ef58.rlib \
##   --mount=from=out-022b01bf1767ab5b,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libunicode_ident-022b01bf1767ab5b.rlib,source=/libunicode_ident-022b01bf1767ab5b.rlib \
##   --mount=from=out-edd57c64bf370f1f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquote-edd57c64bf370f1f.rlib,source=/libquote-edd57c64bf370f1f.rlib \
##   --mount=from=out-f064d7808d2642c6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsyn-f064d7808d2642c6.rlib,source=/libsyn-f064d7808d2642c6.rlib \
##   --mount=from=out-0f30734a5cedfcc3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_edit-0f30734a5cedfcc3.rlib,source=/libtoml_edit-0f30734a5cedfcc3.rlib \
##   --mount=from=out-09d3e45661ef6bae,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libindexmap-09d3e45661ef6bae.rlib,source=/libindexmap-09d3e45661ef6bae.rlib \
##   --mount=from=out-60241e4fe7f04e90,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libequivalent-60241e4fe7f04e90.rlib,source=/libequivalent-60241e4fe7f04e90.rlib \
##   --mount=from=out-e22a55dd51e34d0e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhashbrown-e22a55dd51e34d0e.rlib,source=/libhashbrown-e22a55dd51e34d0e.rlib \
##   --mount=from=out-fa41a08fdcaade9c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_spanned-fa41a08fdcaade9c.rlib,source=/libserde_spanned-fa41a08fdcaade9c.rlib \
##   --mount=from=out-cc2e1105bd13c489,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtoml_datetime-cc2e1105bd13c489.rlib,source=/libtoml_datetime-cc2e1105bd13c489.rlib \
##   --mount=from=out-8a050dfd1238b93f,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwinnow-8a050dfd1238b93f.rlib,source=/libwinnow-8a050dfd1238b93f.rlib \
##   --mount=from=out-6712aa0774f1cf2a,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_llvm_cov-6712aa0774f1cf2a.rlib,source=/libcargo_llvm_cov-6712aa0774f1cf2a.rlib \
##   --mount=from=out-dede1a3d65ebb862,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rlib,source=/libduct-dede1a3d65ebb862.rlib \
##   --mount=from=out-4a9d9e0eac4eef83,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblibc-4a9d9e0eac4eef83.rlib,source=/liblibc-4a9d9e0eac4eef83.rlib \
##   --mount=from=out-e5c39a7d0ce96cb7,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libos_pipe-e5c39a7d0ce96cb7.rlib,source=/libos_pipe-e5c39a7d0ce96cb7.rlib \
##   --mount=from=out-bcc226464ecacfc6,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshared_child-bcc226464ecacfc6.rlib,source=/libshared_child-bcc226464ecacfc6.rlib \
##   --mount=from=out-ab39b5b441440c4a,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rlib,source=/libfs_err-ab39b5b441440c4a.rlib \
##   --mount=from=out-f5d2c2efec8db340,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rlib,source=/libglob-f5d2c2efec8db340.rlib \
##   --mount=from=out-80d6e4d76acd8f4d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rlib,source=/libis_terminal-80d6e4d76acd8f4d.rlib \
##   --mount=from=out-3404a66ca545b301,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustix-3404a66ca545b301.rlib,source=/librustix-3404a66ca545b301.rlib \
##   --mount=from=out-8921c69f98e179ab,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbitflags-8921c69f98e179ab.rlib,source=/libbitflags-8921c69f98e179ab.rlib \
##   --mount=from=out-38fbb57bea94d5d0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblinux_raw_sys-38fbb57bea94d5d0.rlib,source=/liblinux_raw_sys-38fbb57bea94d5d0.rlib \
##   --mount=from=out-efec94c3a9e63fea,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rlib,source=/libis_executable-efec94c3a9e63fea.rlib \
##   --mount=from=out-bd351604e8a3606e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rlib,source=/liblcov2cobertura-bd351604e8a3606e.rlib \
##   --mount=from=out-2294e716788d14e5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libquick_xml-2294e716788d14e5.rlib,source=/libquick_xml-2294e716788d14e5.rlib \
##   --mount=from=out-679a642609c73d54,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libmemchr-679a642609c73d54.rlib,source=/libmemchr-679a642609c73d54.rlib \
##   --mount=from=out-eed1bc1f14927bd9,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rlib,source=/libregex-eed1bc1f14927bd9.rlib \
##   --mount=from=out-a1abc4d34011cf1c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libaho_corasick-a1abc4d34011cf1c.rlib,source=/libaho_corasick-a1abc4d34011cf1c.rlib \
##   --mount=from=out-19d70c78c72efef5,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_automata-19d70c78c72efef5.rlib,source=/libregex_automata-19d70c78c72efef5.rlib \
##   --mount=from=out-07e89991623c09ad,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex_syntax-07e89991623c09ad.rlib,source=/libregex_syntax-07e89991623c09ad.rlib \
##   --mount=from=out-a563bff5f53acd0c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rlib,source=/librustc_demangle-a563bff5f53acd0c.rlib \
##   --mount=from=out-72cd9e8a271d7703,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rlib,source=/liblexopt-72cd9e8a271d7703.rlib \
##   --mount=from=out-d2ce0c8cc304947c,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rlib,source=/libopener-d2ce0c8cc304947c.rlib \
##   --mount=from=out-414bf26c2675cba2,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libbstr-414bf26c2675cba2.rlib,source=/libbstr-414bf26c2675cba2.rlib \
##   --mount=from=out-6ecbaf4367945ded,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rlib,source=/libserde_json-6ecbaf4367945ded.rlib \
##   --mount=from=out-3c67d4b032e6b506,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libitoa-3c67d4b032e6b506.rlib,source=/libitoa-3c67d4b032e6b506.rlib \
##   --mount=from=out-c1c56da53b71c739,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libryu-c1c56da53b71c739.rlib,source=/libryu-c1c56da53b71c739.rlib \
##   --mount=from=out-556035d7e462e7c3,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rlib,source=/libshell_escape-556035d7e462e7c3.rlib \
##   --mount=from=out-4b4472178572806d,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rlib,source=/libtermcolor-4b4472178572806d.rlib \
##   --mount=from=out-bca2a2960255b7a0,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rlib,source=/libwalkdir-bca2a2960255b7a0.rlib \
##   --mount=from=out-ef2c1f0ce287269e,dst=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libsame_file-ef2c1f0ce287269e.rlib,source=/libsame_file-ef2c1f0ce287269e.rlib \
##     { cat ./rustc-toolchain{,.toml} 2>/dev/null || true ; } && \
##     env CARGO="$(which cargo)" \
##         CARGO_BIN_NAME="cargo-llvm-cov" \
##         CARGO_CRATE_NAME="cargo_llvm_cov" \
##         CARGO_MANIFEST_DIR="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36" \
##         CARGO_MANIFEST_PATH="/home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/Cargo.toml" \
##         CARGO_PKG_AUTHORS= \
##         CARGO_PKG_DESCRIPTION="Cargo subcommand to easily use LLVM source-based code coverage (-C instrument-coverage).\n" \
##         CARGO_PKG_HOMEPAGE= \
##         CARGO_PKG_LICENSE="Apache-2.0 OR MIT" \
##         CARGO_PKG_LICENSE_FILE= \
##         CARGO_PKG_NAME="cargo-llvm-cov" \
##         CARGO_PKG_README="README.md" \
##         CARGO_PKG_REPOSITORY="https://github.com/taiki-e/cargo-llvm-cov" \
##         CARGO_PKG_RUST_VERSION="1.67" \
##         CARGO_PKG_VERSION="0.5.36" \
##         CARGO_PKG_VERSION_MAJOR="0" \
##         CARGO_PKG_VERSION_MINOR="5" \
##         CARGO_PKG_VERSION_PATCH="36" \
##         CARGO_PKG_VERSION_PRE= \
##         CARGO_PRIMARY_PACKAGE="1" \
##         CARGOGREEN=1 \
##       rustc '--crate-name' 'cargo_llvm_cov' '--edition' '2021' '--error-format' 'json' '--json' 'diagnostic-rendered-ansi,artifacts,future-incompat' '--crate-type' 'bin' '--emit' 'dep-info,link' '-C' 'opt-level=3' '-C' 'lto' '-C' 'codegen-units=1' '--check-cfg' 'cfg(docsrs,test)' '--check-cfg' 'cfg(feature, values())' '-C' 'metadata=02bc9c2d3da30c0a' '-C' 'extra-filename=-b9f2edde3db67b64' '--out-dir' '/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '-C' 'strip=symbols' '-L' 'dependency=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps' '--extern' 'anyhow=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libanyhow-dfdf484c5c94dda8.rlib' '--extern' 'camino=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcamino-dc62d29369f657b5.rlib' '--extern' 'cargo_config2=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_config2-a9bb60b727a99073.rlib' '--extern' 'cargo_llvm_cov=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libcargo_llvm_cov-6712aa0774f1cf2a.rlib' '--extern' 'duct=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libduct-dede1a3d65ebb862.rlib' '--extern' 'fs_err=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libfs_err-ab39b5b441440c4a.rlib' '--extern' 'glob=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libglob-f5d2c2efec8db340.rlib' '--extern' 'home=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libhome-171ad634cd69714c.rlib' '--extern' 'is_terminal=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_terminal-80d6e4d76acd8f4d.rlib' '--extern' 'is_executable=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libis_executable-efec94c3a9e63fea.rlib' '--extern' 'lcov2cobertura=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblcov2cobertura-bd351604e8a3606e.rlib' '--extern' 'lexopt=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/liblexopt-72cd9e8a271d7703.rlib' '--extern' 'opener=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libopener-d2ce0c8cc304947c.rlib' '--extern' 'regex=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libregex-eed1bc1f14927bd9.rlib' '--extern' 'rustc_demangle=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/librustc_demangle-a563bff5f53acd0c.rlib' '--extern' 'serde=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde-1c85eb2286dfea21.rlib' '--extern' 'serde_derive=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_derive-ff34cba9c5968a92.so' '--extern' 'serde_json=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libserde_json-6ecbaf4367945ded.rlib' '--extern' 'shell_escape=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libshell_escape-556035d7e462e7c3.rlib' '--extern' 'termcolor=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libtermcolor-4b4472178572806d.rlib' '--extern' 'walkdir=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps/libwalkdir-bca2a2960255b7a0.rlib' '--cap-lints' 'warn' /home/runner/.cargo/registry/src/index.crates.io-0000000000000000/cargo-llvm-cov-0.5.36/src/main.rs \
##         1> >(sed 's/^/::STDOUT:: /') \
##         2> >(sed 's/^/::STDERR:: /' >&2)'''
## 
## [[stages]]
## name = "out-b9f2edde3db67b64"
## script = """
## FROM scratch AS out-b9f2edde3db67b64
## COPY --from=dep-b-cargo-llvm-cov-0.5.36-b9f2edde3db67b64 /tmp/clis-cargo-llvm-cov_0-5-36/release/deps/*-b9f2edde3db67b64* /"""

# Pipe this file to (not portable due to usage of local build contexts):
# DOCKER_BUILDKIT="1" \
#   docker --debug build --network=none --platform=local --pull=false --target=out-b9f2edde3db67b64 --output=type=local,dest=/tmp/clis-cargo-llvm-cov_0-5-36/release/deps --build-context=crate_out-320a4f7879609678=/tmp/clis-cargo-llvm-cov_0-5-36/release/build/anyhow-320a4f7879609678/out --build-context=crate_out-e00335469bb9fb6d=/tmp/clis-cargo-llvm-cov_0-5-36/release/build/rustix-e00335469bb9fb6d/out -
