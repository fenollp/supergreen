#!/usr/bin/env -S bash -eu
set -o pipefail

stable=1.90.0 # Closest to latest stable, as official Rust images availability permits (TODO: use rustup when image isn't yet available)
fixed=1.86.0 # Some fixed rustc version


jobdef() {
    local name=$1; shift
    [[ $# -eq 0 ]]
cat <<EOF
  $name:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -euo pipefail {0}
EOF
}


restore_bin() {
    [[ $# -eq 0 ]]
    cat <<EOF
    - name: Retrieve saved bin
      uses: actions/download-artifact@v5
      with:
        name: cargo-green

    - name: Install saved bin
      shell: bash -eu {0}
      run: | # TODO: whence https://github.com/actions/download-artifact/issues/236
        chmod +x ./cargo-green
        { ! ./cargo-green --version ; } | grep cargo-green
        mv ./cargo-green ~/.cargo/bin/
EOF
}


rundeps_versions() {
    [[ $# -eq 0 ]]
    cat <<EOF
    - run: docker info
    - run: docker buildx version
    - run: docker buildx build --help
    - run: podman version || true
    - run: cargo -Vv
    - run: docker buildx prune --all --force
EOF
}


cache_usage() {
    [[ $# -eq 0 ]]
    cat <<EOF
    - run: sudo du -sh /var/lib/docker || true
    - run: docker system df
    - run: docker system df --verbose
    - run: BUILDX_BUILDER=supergreen docker buildx du | head || true
    - run: BUILDX_BUILDER=supergreen docker buildx du | tail || true
    - run: BUILDX_BUILDER=supergreen docker buildx du --verbose
EOF
}


postcond_fresh() {
    local cargologs=$1; shift
    [[ $# -eq 0 ]]
cat <<EOF
    - name: ...doesn't recompile anything
      run: |
        err=0
        grep Finished  $cargologs | grep -E [012]...s || err=1
        grep Dirty     $cargologs                     && err=1
        grep Compiling $cargologs                     && err=1
        exit \$err
EOF
}


postconds() {
    local cargologs=$1; shift
    [[ $# -eq 0 ]]
cat <<EOF
    - if: \${{ always() }}
      name: ðŸ”´ =means=> it's again that cargo issue https://github.com/rust-lang/cargo/pull/14322
      run: |
        ! grep -C20 -F 'src/cargo/util/dependency_queue.rs:' $cargologs

    - if: \${{ always() }}
      name: ðŸ”´ =means=> it's again that docker issue https://github.com/moby/buildkit/issues/5217
      run: |
        ! grep -C20 -F 'ResourceExhausted: grpc: received message larger than max' \$CARGOGREEN_LOG_PATH

    - if: \${{ always() }}
      name: ðŸ”´ =means=> it's this HTTP/2 code = Unavailable desc = error reading from server-- connection error-- COMPRESSION_ERROR
      run: |
        ! grep -C20 -F 'connection error: COMPRESSION_ERROR' \$CARGOGREEN_LOG_PATH

    - if: \${{ always() }}
      name: ðŸ”´ =means=> there's some panic!s
      run: |
        ! grep -C20 -F ' panicked at ' \$CARGOGREEN_LOG_PATH

    - if: \${{ always() }}
      name: ðŸ”´ =means=> there's some BUGs
      run: |
        ! grep -C20 -F 'BUG: ' \$CARGOGREEN_LOG_PATH

    - if: \${{ always() }}
      name: ðŸ”´ =means=> here's cargo's error text
      run: |
        ! grep -C20 -E '-[a-f0-9]{16} [eE]rror:' \$CARGOGREEN_LOG_PATH $cargologs

    - if: \${{ always() }}
      name: ðŸ”´ =means=> 429 Too Many Requests
      run: |
        ! grep -C20 -F '429 Too Many Requests' \$CARGOGREEN_LOG_PATH $cargologs

    - if: \${{ always() }}
      name: ðŸ”´ =means=> here's relevant logs
      run: |
        ! grep -C20 -F ' >>> ' \$CARGOGREEN_LOG_PATH

    - if: \${{ always() && matrix.toolchain != '$stable' }}
      name: ðŸŒ€ Maybe show final path diff
      run: |
        case "\$GITHUB_JOB" in
          cross*|ntpd*) exit 0 ;; # TODO: fix undeterministic final paths for git crates
          *) ;;
        esac
        git --no-pager diff --exit-code \
          --ignore-matching-lines='^# Generated by' \
          --ignore-matching-lines=' AS rust-base$' \
          --ignore-matching-lines='^# syntax=docker.io/docker/dockerfile:1@' \
          --ignore-matching-lines="^##     '\\{" \
          -- \$CARGOGREEN_FINAL_PATH

    - if: \${{ always() }}
      name: ðŸŒ€ cargo-green logs
      run: tail -n9999999 \$CARGOGREEN_LOG_PATH ; echo >\$CARGOGREEN_LOG_PATH
EOF
}

unset_action_envs() {
    [[ $# -eq 0 ]]
cat <<EOF
        unset CARGO_INCREMENTAL
        unset CARGO_PROFILE_DEV_DEBUG
        unset CARGO_REGISTRIES_CRATES_IO_PROTOCOL
        unset CARGO_TERM_COLOR
        unset CARGO_UNSTABLE_SPARSE_REGISTRY
EOF
}

login_to_readonly_hub() {
    [[ $# -eq 0 ]]
cat <<EOF
    - uses: docker/login-action@v3
      if: \${{ ! startsWith(github.ref, 'refs/heads/dependabot/') }}
      with:
        username: \${{ vars.DOCKERHUB_USERNAME }}
        password: \${{ secrets.DOCKERHUB_TOKEN }}
EOF
}

login_to_readwrite_ghcr() {
    [[ $# -eq 0 ]]
cat <<EOF
    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: \${{ github.actor }}
        password: \${{ secrets.GITHUB_TOKEN }}
EOF
}
